using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Data;
using System.ComponentModel;
using Infologics.Medilogics.General.Control;
using Infologics.Medilogics.CommonClient.Controls.StaticData;
using Infologics.Medilogics.Enumerators.Investigations;
using Infologics.Medilogics.Enumerators.General;
using Infologics.Medilogics.CommonShared.ServiceMain;
using Infologics.Medilogics.Billing.Main;
using Infologics.Medilogics.Enumerators.Visit;
using Infologics.Medilogics.MasterSettings.Main;
using Infologics.Medilogics.CommonClient.Controls.ExceptionHandler;
using System.Configuration;
using Infologics.Medilogics.Enumerators.Insurance;
using Infologics.Medilogics.Resources.MessageBoxLib;
using Infologics.Medilogics.Enumerators.Billing;
using Infologics.Medilogics.CommonShared.BillingMain;
using Infologics.Medilogics.CommonServer.Main;
using Infologics.Medilogics.CommonShared.EMRMain;
using Infologics.Medilogics.Enumerators.Address;
using Infologics.Medilogics.CommonClient.Controls.AuditData;
using Infologics.Medilogics.General.Control.Classes;
using Infologics.Medilogics.General.Control.Classes.VisitData;
using Infologics.Medilogics.CommonShared.FOMain;
using Infologics.Medilogics.CommonShared.ADTMain;
using Infologics.Medilogics.CommonClient.Controls.CommonWindow;
using Infologics.Medilogics.CommonShared.AccountsMain;
using Infologics.Medilogics.CommonShared.PharmacyMain;
using Infologics.Medilogics.Billing.UIControls.BillingNew;
using Infologics.Medilogics.ERP.GPTransaction;
using Infologics.Medilogics.Enumerators.EMR;
using Infologics.Medilogics.Enumerators.Accounts;
using Infologics.Medilogics.CommonSharedUI.CPOEMedication;
using Infologics.Medilogics.CommonSharedUI.CPOEMedication.CPOEMedicineAdministrationView;
using Infologics.Medilogics.CommonSharedUI.MedicineIntervention.UIContainer;
using Infologics.Medilogics.Task.UIContainer;
using Infologics.Medilogics.CommonSharedUI.CPOEMedication.MedicationDisContinueAndHold;
using Infologics.Medilogics.CommonSharedUI.EducationResource.UIContainer;
using System.Data.SqlClient;
using Infologics.Medilogics.CommonShared.InsuranceMain;
using Infologics.Medilogics.HR.Main;
using Infologics.Medilogics.Enumerators.Consultation;
using Infologics.Medilogics.Billing.UIContainer.BillingNew;
using Infologics.Medilogics.CommonSharedUI.BillingView;
using Infologics.Medilogics.Resources.UIElementsLib;
using Infologics.Medilogics.Billing.UIControls.Billing;
using Infologics.Medilogics.CommonSharedUI.BillingView.BillingMessage;
using Infologics.Medilogics.Enumerators.Pharmacy;
using Infologics.Medilogics.Enumerators.Registration;
using System.Windows.Threading;

namespace Infologics.Medilogics.Billing.UIContainer.Billing
{
    /// <summary>
    /// Interaction logic for UIServiceDelivery.xaml
    /// </summary>
    public partial class UIServiceDelivery : UserControl, INotifyPropertyChanged
    {
        ///Encounter Based order to be Displayed , 09/july/2014 --- AA0907
        Infologics.Medilogics.CommonXSD.XSD.Billing dsBillXSD;
        ERP.GPTransaction.XSD.SOP dsSOP;
        private MainEMRShared objEmrShared = null;
        //private DataSet dsServiceData = null;
        public DataSet dsServiceData { get; set; }  
        DataTable dtCategory = null;
        string PharmacyByDevice = string.Empty;
        string PharmacyDefaultQty = String.Empty;
        private DataSet dsCharge = null;
        DataSet dsCompany = null;
        InclusionExclusionStatus PharmacyIncludeExcludeNA = InclusionExclusionStatus.Inclusion;
        private DataTable ServiceCharge = new DataTable();//Scheme service charge details.
        DataTable dtMedicines = null;
        DataRow drCommon;
        DataTable dtCommon;
        DataTable dtProfile = null;
        DataTable dtTempServiceDetails = null;
        DataTable dtTempGenBillDiscount = null;
        DataTable GenBillProviderDiscount = null;
        DataTable dttempAdjustmenttype = null;
        DataTable dttempAutorization = null;
        Decimal tempAdjustmentAmount = 0;
        DataRowView tempselectedAdjustmentType = null;
        DataRowView tempselectedAuthorizationType = null;
        int tempIncreasingMode = 0;
        decimal tempTobecollected;
        string tempRange;
        public Int64 resetPeriod { get; set; }
        bool IsServiceExclude = false;
        DBOperation dbOperation = DBOperation.Insert;
        DataRow[] drArrayTemp = null;
        private DataTable dtTemp = null;
        StringBuilder strMessage = new StringBuilder();
        DataTable BatchItemWise = null;
        DataTable BatchAll = new DataTable();
        bool IsCopaySettingExist = false;
        bool IsServicePayingPartyPatient = false;
        bool IsVerificationLoaded = false;
        bool isvisittypechange = false;
        bool IsVerifiedItemEditExecuted = false;
        DataTable VerificationEmrOrderData = null;
        string VerificationQtyUnit = string.Empty;
        bool isbarcodeEntered = false;
        Int32 ScanServiceCount = 0;
        private DataTable KOTPackageServiceTemp = new DataTable();
        private bool isBlockBatchSelectionChange = false;
        private bool isBlockUnitSaleSelectionChange = false;
        private bool isQTYUnitChange = true;
        private bool isEmrOrder = false;
        bool IsCPOEPharmacyOrderExist;
        decimal IssuedQtyTotal = 0;
        Int64 emrPatDtlsID = 0;
        bool isStockExist = false;
        Int64 DoseValue = 0;
        string DoseUnit = string.Empty;
        bool removeDublication = false;
        bool isEdited = false;
        bool investigationduplication = true;
        public DataTable RegistrationConsultationDetails { get; set; }
        bool IsServiceAdded = false;
        bool IsBatchSelectionChanged = false;
        bool isGridBatchSelection = false;
        UICommonMethods objUICommonMethods = new UICommonMethods();
        public string overridingResonHeader = string.Empty;
        bool isPharmacyPanelCirteria = false;
        bool fromEMR = false;
        bool fromAddBtn = false;
        public decimal Provadj;
        bool IsBarCodeSearch = false;
        bool IsBarCodeSearchbyManual = true;
        bool isOnloadPharmacy = false;
        int DecimalPlace = CommonData.DecimalPlace;
        DataRowView drMedicineRowbyManual = null;
        bool isallowvalidationBarcode = true;
        bool isAddforPrint = false;
        bool isThrowMessage = true;
        string barcodeBatch = string.Empty;
        public long INCO_MAST_CONTRACT_ID;
        public long INCO_DTLS_CONTRACT_CLASS_ID;
        public long INCO_MAST_SCHEME_ID;
        DataRow drPhRxDtlsData = null;
        private bool isNonConsultationOrder = false;
        public bool isOnLoadEmrOrder = false;
        public bool isEmrPharmacyLoad = false;
        public bool isPharmacyInServiceBilling = false;
        public bool isConsumptionBilling = false;
        public DataRow drConsumptionRow = null;
        public DataRow drConsumptionINVRow = null;
        public bool ConsumptionMessage = false;
        public bool isServiceCleared = false;
        private bool isNormalTopUp = true; // bug id 39242
        private bool ismsgPopped = false;
        private bool IsClearDiscRow = true;
        public bool IsMultipleTimeSchemeSelectionChangeRequired = false;
        public bool IsFromPatientSelectionTime = false;
        private bool IsCostCenterApplicable = false;
        //bool IS_VERIFICATION_REQUIRED = false;
        DataTable InsuranceApprovalCriteria = null;
        decimal InsuranceApprovalIncoPatSchemeId = 0;
        decimal InsuranceApprovalorderAmount = 0;
        //bool isExternalLabOutGoingOnePerBill = false;
     
        // Comments for changes in urgent Prime Release, BB-09072014
        public UIServiceDelivery()
        {
            InitializeComponent();
            if (!IsPatient)
            {
                SetData();
            }
            HasServicePrivilege = CommonData.CheckPrivilege("FO_SERVICE_BILLING");
            IsCopayDeductablePrivilege = CommonData.CheckPrivilege("FO_EDIT_COPAY_DEDUCTABLE");
           
            // FetchStaticData(); moved to onload on prime onsite changes, Benson
            LoadRadioButton();
            EncounterEndDate = System.DateTime.Now;
            EncounterEndDateTemp = System.DateTime.Now;
            EncounterStartDate = System.DateTime.Now;
            Infologics.Medilogics.CommonShared.PharmacyMain.MainPharmacyShared obMainPharmacyShared = new MainPharmacyShared();
            IsCostCenterApplicable = CommonData.GetDefaultSettings("IS_COST_CENTER_APPLICABLE") == "1" ? true : false;
            CostCenter = obMainPharmacyShared.FetchDepartmentDetail(3);
            IsFromCafeteria = CommonData.SelectedModule == Infologics.Medilogics.Enumerators.General.Module.FoodAndBeverage?true:false;
            LoadInitialDefaultSetting();
           

        }
        
        public void FetchStaticData()
        {
            HasPharmacyPrivilege = CommonData.CheckPrivilege("FO_PHARMACY_BILLING");
            //ClosedEncounterBillingPrivilege = CommonData.CheckPrivilege("FO_CLOSED_ENCOUNTER_BILLING");
            // Fetch Static data 
            if (FOData.DsServiceDetails == null)
            {
                if (CommonData.SelectedModule == Infologics.Medilogics.Enumerators.General.Module.FoodAndBeverage)
                {
                    FetchCafeteriaServices();
                   // IsFromCafeteria = true;
                }
                else
                {
                    FetchHospitalServices();
                }

            }
            if (FOData.Medicines == null && CommonData.SelectedModule != Infologics.Medilogics.Enumerators.General.Module.FoodAndBeverage)
            {
                FetchMedicines();
            }
            if (FOData.SubLocations == null)
            {
                FetchSubLocations();
            }
            if (FOData.Generics == null && CommonData.SelectedModule != Infologics.Medilogics.Enumerators.General.Module.FoodAndBeverage)
            {
                FetchGenerics();
            }
        }

        #region Properties

       // public DataTable DT_EM_Settings { get; set; }
        /// <summary>
        /// Cafeteria ConsumerType Property
        /// </summary>
        private int? consumerType;
        public int? ConsumerType
        {
            get { return consumerType; }
            set
            {
                consumerType = value;
                OnPropertyChanged("ConsumerType");//Implement INotifyPropertyChanged
            }
        }
        public DataTable Provider
        {
            get { return (DataTable)GetValue(ProviderProperty); }
            set { SetValue(ProviderProperty, value); }
        }

        // Using a DependencyProperty as the backing store for Provider.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty ProviderProperty =
            DependencyProperty.Register("Provider", typeof(DataTable), typeof(UIServiceDelivery), new UIPropertyMetadata(null));

        public DataTable dtVisit { get; set; }

        public DataTable Speciality
        {
            get { return (DataTable)GetValue(SpecialityProperty); }
            set { SetValue(SpecialityProperty, value); }
        }

        // Using a DependencyProperty as the backing store for Speciality.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty SpecialityProperty =
            DependencyProperty.Register("Speciality", typeof(DataTable), typeof(UIServiceDelivery), new UIPropertyMetadata(null));


        private bool isClickRemovedServiceCheck;
        public bool IsClickRemovedServiceCheck
        {
            get
            {
                return isClickRemovedServiceCheck;
            }
            set
            {
                isClickRemovedServiceCheck = value;
                OnPropertyChanged("IsClickRemovedServiceCheck");
            }
        }

        /// <summary>
        /// Is_EM_SettingsEnabled Property
        /// </summary>
        private bool is_EM_SettingsEnabled;
        public bool Is_EM_SettingsEnabled
        {
            get { return is_EM_SettingsEnabled; }
            set
            {
                is_EM_SettingsEnabled = value;
                OnPropertyChanged("Is_EM_SettingsEnabled");//Implement INotifyPropertyChanged
            }
        }

        /// <summary>
        /// IsFromCoderReview Property
        /// </summary>
        private bool isFromCoderReview;
        public bool IsFromCoderReview
        {
            get { return isFromCoderReview; }
            set
            {
                isFromCoderReview = value;
                OnPropertyChanged("IsFromCoderReview");//Implement INotifyPropertyChanged
                if (IsFromCoderReview)
                {
                    LoadSelectedOPEncounterForCoderReview();
                }
            }
        }

        /// <summary>
        /// IsEnableProviderChange Property
        /// </summary>
        private bool isEnableProviderChange;
        public bool IsEnableProviderChange
        {
            get { return isEnableProviderChange; }
            set
            {
                isEnableProviderChange = value;
                OnPropertyChanged("IsFromCoderReview");//Implement INotifyPropertyChanged
               
            }
        }

        /// <summary>
        /// IsFromCafeteria Property
        /// </summary>
        private bool isFromCafeteria;
        public bool IsFromCafeteria
        {
            get { return isFromCafeteria; }
            set
            {
                isFromCafeteria = value;
                OnPropertyChanged("IsFromCafeteria");//Implement INotifyPropertyChanged
            }
        }

        

        private bool isAllergyReasonMandatory = true;
        public bool IsAllergyReasonMandatory
        {
            get
            {
                return isAllergyReasonMandatory;
            }
            set
            {
                isAllergyReasonMandatory = value;
                OnPropertyChanged("IsAllergyReasonMandatory");
            }
        }

        private bool isRemoveUnWantedService;
        public bool IsRemoveUnWantedService
        {
            get
            {
                return isRemoveUnWantedService;
            }
            set
            {
                isRemoveUnWantedService = value;
                OnPropertyChanged("IsRemoveUnWantedService");
                RemoveUnWantedServiceSelectionChanged();
            }
        }

        bool IsPharmacyOrderClear = false;
        bool isPharmacyOrderSelected;
        /// <summary>
        /// Gets or sets a value indicating whether this instance is pharmacy order selected.(Nursing)
        /// </summary>
        /// <value>
        /// 	<c>true</c> if this instance is pharmacy order selected; otherwise, <c>false</c>.
        /// </value>
        public bool IsPharmacyOrderSelected
        {
            get { return isPharmacyOrderSelected; }
            set
            {
                isPharmacyOrderSelected = value;
                if (value)
                {
                    IsPharmacyOrderClear = false;
                }
                if (!IsPharmacyOrderClear)
                {
                    BillData.Tables["INV_PAT_BILLING"].Clear();
                    CalculateServiceTotal();
                    this.LoadPharmcyOrder(isPharmacyOrderSelected);
                }
                OnPropertyChanged("IsPharmacyOrderSelected");
            }
        }

        private bool isFromClear = false;
        public bool IsFromClear
        {
            get
            {
                return isFromClear;
            }
            set
            {
                isFromClear = value;
                OnPropertyChanged("IsFromClear");
            }
        }


        private bool isEpisode = false;
        public bool IsEpisode
        {
            get
            {
                return isEpisode;
            }
            set
            {
                isEpisode = value;
                OnPropertyChanged("IsEpisode");
            }
        }

        public DataSet DsServiceDetails;
        public DataTable Medicines;
        public DataTable SubLocations;
        public DataTable Generics;

        # region "Pharmcy Order from nursing, locations"
        DataTable pharmacyOrders;
        public DataTable PharmacyOrders
        {
            get { return pharmacyOrders; }
            set
            {
                pharmacyOrders = value;
                OnPropertyChanged("PharmacyOrders");
            }
        }

        #endregion

        public bool IsFromEMRBilling
        {
            get { return (bool)GetValue(IsFromEMRBillingProperty); }
            set { SetValue(IsFromEMRBillingProperty, value); }
        }

        // Using a DependencyProperty as the backing store for IsFromEMRBilling.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty IsFromEMRBillingProperty =
            DependencyProperty.Register("IsFromEMRBilling", typeof(bool), typeof(UIServiceDelivery), new UIPropertyMetadata(false));



        public bool IsEmployeeBilling
        {
            get { return (bool)GetValue(IsEmployeeBillingProperty); }
            set { SetValue(IsEmployeeBillingProperty, value); }
        }

        // Using a DependencyProperty as the backing store for IsEmployeeBilling.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty IsEmployeeBillingProperty =
            DependencyProperty.Register("IsEmployeeBilling", typeof(bool), typeof(UIServiceDelivery), new UIPropertyMetadata(false));



        public bool IsCafeteriaOthersBilling
        {
            get { return (bool)GetValue(IsCafeteriaOthersBillingProperty); }
            set { SetValue(IsCafeteriaOthersBillingProperty, value); }
        }

        // Using a DependencyProperty as the backing store for IsCafeteriaOthersBilling.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty IsCafeteriaOthersBillingProperty =
            DependencyProperty.Register("IsCafeteriaOthersBilling", typeof(bool), typeof(UIServiceDelivery), new UIPropertyMetadata(false));



        /// <summary>
        /// IsCafeteriaPatientSearch Property
        /// </summary>
        private bool isCafeteriaPatientSearch;
        public bool IsCafeteriaPatientSearch
        {
            get { return isCafeteriaPatientSearch; }
            set
            {
                isCafeteriaPatientSearch = value;
                OnPropertyChanged("IsCafeteriaPatientSearch");//Implement INotifyPropertyChanged
                if (IsCafeteriaPatientSearch && !IsIPEncounterSelected)
                {
                    ProviderTemp = LoadCafeteriaProvider();
                }
                if (IsIPEncounterSelected)
                {
                    IsCafeteriaBillingForIP = true;
                }
            }
        }

        
        public bool IsCafeteriaBillingForIP
        {
            get { return (bool)GetValue(IsCafeteriaBillingForIPProperty); }
            set { SetValue(IsCafeteriaBillingForIPProperty, value); }
        }

        // Using a DependencyProperty as the backing store for IsCafeteriaBillingForIP.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty IsCafeteriaBillingForIPProperty =
            DependencyProperty.Register("IsCafeteriaBillingForIP", typeof(bool), typeof(UIServiceDelivery), new UIPropertyMetadata(false));

        /// <summary>
        /// SelectedSpeciality property
        /// </summary>
        private DataRowView selectedSpeciality;
        public DataRowView SelectedSpeciality
        {
            get
            {
                return selectedSpeciality;
            }
            set
            {
                selectedSpeciality = value;
                OnPropertyChanged("SelectedSpeciality");
                if (SelectedSpeciality != null && ProviderTemp.KIIsNotNullAndRowCount())
                {
                    Provider = ProviderTemp.Copy();
                    Provider.DefaultView.RowFilter = "H_EMP_DEPNAME=" + SelectedSpeciality.Row["H_ADMIN_DEPT_DEPTID"];
                    Provider = Provider.DefaultView.ToTable().Copy();
                }
                else if (SelectedSpeciality == null && ProviderTemp.KIIsNotNullAndRowCount())
                {
                    Provider = ProviderTemp.Copy();
                }
                if (IsFromPharmacyPanel && ERxVisibility == Visibility.Visible)
                {
                    erxEnable();
                }
            }
        }
        /// <summary>
        /// 
        /// </summary>
        private bool isCPOEKOTOrderExist;
        public bool IsCPOEKOTOrderExist
        {
            get
            {
                return isCPOEKOTOrderExist;
            }
            set
            {
                isCPOEKOTOrderExist = value;
                OnPropertyChanged("IsCPOEKOTOrderExist");
            }
        }
        /// <summary>
        /// 
        /// </summary>
        private DataTable kotPackageServices;
        public DataTable KOTPackageServices
        {
            get
            {
                return kotPackageServices;
            }
            set
            {
                kotPackageServices = value;
                OnPropertyChanged("KOTPackageServices");
            }
        }
        public DataRowView KOTOrder { get; set; }
        /// <summary>
        /// 
        /// </summary>
        private DataView salesCategory;
        public DataView SalesCategory
        {
            get
            {
                return salesCategory;
            }
            set
            {
                salesCategory = value;
                OnPropertyChanged("SalesCategory");
            }
        }

        /// <summary>
        /// Type Property
        /// </summary>
        private string type;
        public string VisitModeType
        {
            get { return type; }
            set
            {
                type = value;
                OnPropertyChanged("VisitModeType");
            }
        }
        /// <summary>
        /// HasCafeteriaPrivilege property
        /// </summary>
        private bool hasCafeteriaPrivilege;
        public bool HasCafeteriaPrivilege
        {
            get
            {
                return hasCafeteriaPrivilege;
            }
            set
            {
                hasCafeteriaPrivilege = value;
                OnPropertyChanged("HasCafeteriaPrivilege");

            }
        }
        /// <summary>
        /// HasServicePrivilege property
        /// </summary>
        private bool hasServicePrivilege;
        public bool HasServicePrivilege
        {
            get
            {
                return hasServicePrivilege;
            }
            set
            {
                hasServicePrivilege = value;
                OnPropertyChanged("HasServicePrivilege");
                //if (HasServicePrivilege)
                //    TabServiceType.SelectedIndex = 0;
            }
        }

        /// <summary>
        /// IsCopayDeductablePrivilege property
        /// </summary>
        private bool isCopayDeductablePrivilege;
        public bool IsCopayDeductablePrivilege
        {
            get
            {
                return isCopayDeductablePrivilege;
            }
            set
            {
                isCopayDeductablePrivilege = value;
                OnPropertyChanged("IsCopayDeductablePrivilege");
                //if (HasServicePrivilege)
                //    TabServiceType.SelectedIndex = 0;
            }
        }



        /// <summary>
        /// HasPharmacyPrivilege property
        /// </summary>
        private bool hasPharmacyPrivilege;
        public bool HasPharmacyPrivilege
        {
            get
            {
                return hasPharmacyPrivilege;
            }
            set
            {
                hasPharmacyPrivilege = value;
                OnPropertyChanged("HasPharmacyPrivilege");
                //if (HasPharmacyPrivilege)
                //    TabServiceType.SelectedIndex = 1;
            }
        }

        /// <summary>
        /// ClosedEncounterBillingPrivilege Property
        /// </summary>
        private bool closedEncounterBillingPrivilege;
        public bool ClosedEncounterBillingPrivilege
        {
            get { return closedEncounterBillingPrivilege; }
            set
            {
                closedEncounterBillingPrivilege = value;
                OnPropertyChanged("ClosedEncounterBillingPrivilege");//Implement INotifyPropertyChanged
            }
        }



        /// <summary>
        /// 
        /// </summary>
        private bool hasChangeToZeroCharge;
        public bool HasChangeToZeroCharge
        {
            get
            {
                return hasChangeToZeroCharge;
            }
            set
            {
                hasChangeToZeroCharge = value;
                OnPropertyChanged("HasChangeToZeroCharge");
            }
        }


        /// <summary>
        /// 
        /// </summary>
        private decimal? salesCategorySelectedValue;
        public decimal? SalesCategorySelectedValue
        {
            get
            {
                return salesCategorySelectedValue;
            }
            set
            {
                salesCategorySelectedValue = value;
                if (value != null && dsServiceData != null)
                {
                    if (SelectedServiceType == (int)ServiceType.Cafeteria)
                    {
                        if (SelectedService != null)
                        {
                            SelectedService = null;//Clear Selected service on sales category selection change
                        }
                        Services = dsServiceData.Tables["INV_MAST_SERVICE"].Copy();
                        if (Services.Columns.Contains("SALES_CATEGORY_ID"))
                        {
                            if (CategorySelectedValue != null && CategorySelectedValue != -1)
                            {
                                Services.DefaultView.RowFilter = "SALES_CATEGORY_ID IS NOT NULL AND SALES_CATEGORY_ID=" + SalesCategorySelectedValue + "AND INV_CATEGORY_ID=" + CategorySelectedValue + "";
                            }
                            else
                            {
                                Services.DefaultView.RowFilter = "SALES_CATEGORY_ID IS NOT NULL AND SALES_CATEGORY_ID=" + SalesCategorySelectedValue;
                            }
                            Services = Services.DefaultView.ToTable();
                        }
                    }
                    OnPropertyChanged("SalesCategorySelectedValue");
                }
            }
        }

        private bool isProviderWiseOrder = true;
        public bool IsProviderWiseOrder
        {
            get
            {
                return isProviderWiseOrder;
            }
            set
            {
                isProviderWiseOrder = value;
                OnPropertyChanged("IsProviderWiseOrder");
            }
        }

        private bool isEpisodeNoWiseOrder = false;
        public bool IsEpisodeNoWiseOrder
        {
            get
            {
                return isEpisodeNoWiseOrder;
            }
            set
            {
                isEpisodeNoWiseOrder = value;
                OnPropertyChanged("IsEpisodeNoWiseOrder");
            }
        }

        bool isServiceNameEnable = true;
        public bool IsServiceNameEnable
        {
            get
            { return isServiceNameEnable; }
            set
            {
                isServiceNameEnable = value;
                OnPropertyChanged("IsServiceNameEnable");
            }
        }

        /// <summary>
        /// Patient property
        /// </summary>
        private PatientInformation patient;
        public PatientInformation Patient
        {
            get
            {
                return patient;
            }
            set
            {
                patient = value;
                OnPropertyChanged("Patient");
            }
        }

        public bool isEpisodePopUpSelected = false;
        public bool isEncounterPopUpSelected = false;
        public bool isEncounterSelectedfromPharmacy = false;
        // public bool isClosedEncounterSelected = false;
        public DateTime EncounterEndDateTemp;

        /////// <summary>
        /////// EncounterEndDateTemp Property
        /////// </summary>
        ////private DateTime encounterEndDateTemp;
        ////public DateTime EncounterEndDateTemp
        ////{
        ////    get { return encounterEndDateTemp; }
        ////    set
        ////    {
        ////        encounterEndDateTemp = value;
        ////        OnPropertyChanged("EncounterEndDateTemp");//Implement INotifyPropertyChanged
        ////    }
        ////}



        /// <summary>
        /// IsClosedEncounterSelected Property
        /// </summary>
        private bool isClosedEncounterSelected;
        public bool IsClosedEncounterSelected
        {
            get { return isClosedEncounterSelected; }
            set
            {
                isClosedEncounterSelected = value;
                OnPropertyChanged("IsClosedEncounterSelected");//Implement INotifyPropertyChanged
                if (IsClosedEncounterSelected)
                    EnableServiceDate = true;
                else if (!IsIPEncounterSelected && !IsClosedEncounterSelected)
                    EnableServiceDate = false;
            }
        }

        /////// <summary>
        /////// IsEncounterBilled Property
        /////// </summary>
        ////private bool isEncounterBilled;
        ////public bool IsEncounterBilled
        ////{
        ////    get { return isEncounterBilled; }
        ////    set
        ////    {
        ////        isEncounterBilled = value;
        ////        OnPropertyChanged("IsEncounterBilled");//Implement INotifyPropertyChanged
        ////    }
        ////}

        /// <summary>
        /// IsIPClosedEncounterSelected Property
        /// </summary>
        private bool isIPEncounterSelected;
        public bool IsIPEncounterSelected
        {
            get { return isIPEncounterSelected; }
            set
            {
                isIPEncounterSelected = value;
                OnPropertyChanged("IsIPEncounterSelected");//Implement INotifyPropertyChanged
                if (IsIPEncounterSelected)
                    EnableServiceDate = true;
                else if (!IsIPEncounterSelected && !IsClosedEncounterSelected)
                    EnableServiceDate = false;
            }
        }

        /// <summary>
        /// EnableServiceDate Property
        /// </summary>
        private bool enableServiceDate;
        public bool EnableServiceDate
        {
            get { return enableServiceDate; }
            set
            {
                enableServiceDate = value;
                OnPropertyChanged("EnableServiceDate");//Implement INotifyPropertyChanged
            }
        }



        private DataTable associatedServices;
        public DataTable AssociatedServices
        {
            get
            {
                return associatedServices;
            }
            set
            {
                associatedServices = value;
                OnPropertyChanged("AssociatedServices");
            }
        }
        /// <summary>
        /// 
        /// </summary>
        string selectedBatchOrUnitValue;
        public string SelectedBatchOrUnitValue
        {
            get
            {
                return selectedBatchOrUnitValue;
            }
            set
            {
                selectedBatchOrUnitValue = value;
                OnPropertyChanged("SelectedBatchOrUnitValue");
            }
        }
        /// <summary>
        /// SelectedProviderID property
        /// </summary>
        private DataRowView selectedProviderID;
        public DataRowView SelectedProviderID
        {
            get
            {
                return selectedProviderID;
            }
            set
            {
                selectedProviderID = value;
                OnPropertyChanged("SelectedProviderID");
                if (SelectedProviderID != null && ProviderTemp != null && ProviderTemp.Select(" H_EMP_ID='" + SelectedProviderID.Row["H_EMP_ID"] + "'").Length > 0)
                {
                    //Speed Improve
                    //SelectedProviderValue = (ProviderTemp != null && SelectedProviderID != null) ? Convert.ToString(ProviderTemp.Select("H_EMP_ID='" + SelectedProviderID.Row["H_EMP_ID"] + "'")[0]["H_EMP_ID"]) : string.Empty;
                    string tempSelectedProviderValue = (ProviderTemp != null && SelectedProviderID != null) ? Convert.ToString(ProviderTemp.Select("H_EMP_ID='" + SelectedProviderID.Row["H_EMP_ID"] + "'")[0]["H_EMP_ID"]) : string.Empty;
                    if (SelectedProviderValue == null || !SelectedProviderValue.Equals(tempSelectedProviderValue))
                    {
                        SelectedProviderValue = tempSelectedProviderValue;
                    }
                    //Speed Improve
                    if (SelectedProviderID != null)
                    {
                        SelectedProviderIDValue = Convert.ToString(ProviderTemp.Select("H_EMP_ID='" + SelectedProviderID.Row["H_EMP_ID"] + "'")[0]["H_EMP_ID"]);
                        SelectedProviderIDValue = (ProviderTemp != null && SelectedProviderID != null) ? Convert.ToString(ProviderTemp.Select("H_EMP_ID='" + (SelectedProviderID.Row["H_EMP_ID"]) + "'")[0]["H_EMP_ID"]) : string.Empty;
                        if (ProviderTemp != null && ProviderTemp.Columns.Contains("H_EMP_DEPNAME") && SelectedProviderID != null)
                            SelectedSpecialityValue = Convert.ToString(ProviderTemp.Select("H_EMP_ID='" + SelectedProviderID.Row["H_EMP_ID"] + "'")[0]["H_EMP_DEPNAME"]);
                        if ((dtPatientVisit == null || dtPatientVisit.Rows.Count == 0
                            || (dtPatientVisit.KIIsNotNullAndRowCount() && dtPatientVisit.Rows[0]["VISIT_TYPE"] != DBNull.Value && Convert.ToInt16(dtPatientVisit.Rows[0]["VISIT_TYPE"]) != (int)VisitMode.IP))
                             && !isEpisodePopUpSelected && !IsFromCoderReview)//ER order selection-not required doctor selection change
                        {
                            OnLoadEncounterEpisodeNo(SelectedProviderValue, false, false);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private string selectedEncounterNo;
        public string SelectedEncounterNo
        {
            get
            {
                return selectedEncounterNo;
            }
            set
            {
                selectedEncounterNo = value;
                OnPropertyChanged("SelectedEncounterNo");
            }
        }

        public bool proceedBilling = true;

        private bool isEnableCategory = true;
        public bool IsEnableCategory
        {
            get
            {
                return isEnableCategory;
            }
            set
            {
                isEnableCategory = value;
                OnPropertyChanged("IsEnableCategory");
            }
        }

        /// <summary>
        /// IsPharmacyOrdersVisible Property
        /// </summary>
        private bool isPharmacyOrdersVisible = true;
        public bool IsPharmacyOrdersVisible
        {
            get { return isPharmacyOrdersVisible; }
            set
            {
                isPharmacyOrdersVisible = value;
                OnPropertyChanged("IsPharmacyOrdersVisible");//Implement INotifyPropertyChanged
                if (IsPharmacyOrdersVisible)
                    TabServiceType.SelectedIndex = 1;
            }
        }

        /// <summary>
        /// IsServiceOrdersVisible Property
        /// </summary>
        private bool isServiceOrdersVisible = true;
        public bool IsServiceOrdersVisible
        {
            get { return isServiceOrdersVisible; }
            set
            {
                isServiceOrdersVisible = value;
                OnPropertyChanged("IsServiceOrdersVisible");//Implement INotifyPropertyChanged
                //if (IsServiceOrdersVisible)
                //    TabServiceType.SelectedIndex = 0;
            }
        }

        /// <summary>
        /// IsCafeteriaOrdersVisible Property
        /// </summary>
        private bool isCafeteriaOrdersVisible = true;
        public bool IsCafeteriaOrdersVisible
        {
            get { return isCafeteriaOrdersVisible; }
            set
            {
                isCafeteriaOrdersVisible = value;
                OnPropertyChanged("IsCafeteriaOrdersVisible");
                if (IsCafeteriaOrdersVisible)
                {
                    TabServiceType.SelectedIndex = 2;
                    //HasServicePrivilege = false;
                    //HasPharmacyPrivilege = false;
                    //HasCafeteriaPrivilege = true;//CommonData.CheckPrivilege("EMR_FO_PHARMACY_BILLING");
                    //tabCafeteriaOrder.IsSelected = true;
                }
            }
        }

        private decimal totalAmount;
        public decimal TotalAmount
        {
            get
            {
                return totalAmount;
            }
            set
            {
                totalAmount = value;
                OnPropertyChanged("TotalAmount");
            }
        }

        private decimal totalNet;
        public decimal TotalNet
        {
            get
            {
                return totalNet;
            }
            set
            {
                totalNet = value;
                OnPropertyChanged("TotalNet");
            }
        }

        /// <summary>
        /// IsEpisodeEnabled Property
        /// </summary>
        private bool isEpisodeEnabled = true;
        public bool IsEpisodeEnabled
        {
            get { return isEpisodeEnabled; }
            set
            {
                isEpisodeEnabled = value;
                OnPropertyChanged("IsEpisodeEnabled");//Implement INotifyPropertyChanged
            }
        }

        /// <summary>
        /// IsEncounterNoEnabled Property
        /// </summary>
        private bool isEncounterNoEnabled = true;
        public bool IsEncounterNoEnabled
        {
            get { return isEncounterNoEnabled; }
            set
            {
                isEncounterNoEnabled = value;
                OnPropertyChanged("IsEncounterNoEnabled");//Implement INotifyPropertyChanged
            }
        }

        private bool isLoadEMRCPOE = true;
        public bool IsLoadEMRCPOE
        {
            get
            {
                return isLoadEMRCPOE;
            }
            set
            {
                isLoadEMRCPOE = value;
                OnPropertyChanged("IsLoadEMRCPOE");
            }
        }

        /// <summary>
        /// SelectedProvider property
        /// </summary>
        bool isMultipleSelectedProviderRequired = false;
        private DataRowView selectedProvider;
        public DataRowView SelectedProvider
        {
            get
            {
                return selectedProvider;
            }
            set
            {
                selectedProvider = value;
                OnPropertyChanged("SelectedProvider");
                if (!isMultipleSelectedProviderRequired)//Speed Improve
                {
                    try
                    {

                        if (!IsFromCoderReview || (IsEnableProviderChange && !IsFirstProviderChange))
                        {

                            if (isEncounterPopUpSelected && !IsFromClear && (SelectedProvider == null || SelectedProviderID == null) && ProviderTemp.KIIsNotNullAndRowCount() && SelectedProviderValue != null)//SelectedProviderValue added for bug id 40716
                            {
                                DataRow[] dr = ProviderTemp.Select("H_EMP_ID='" + SelectedProviderValue + "'");//Speed Improve
                                if (dr != null && dr.Any())
                                {
                                    //DataRow dr = ProviderTemp.Select("H_EMP_ID='" + SelectedProviderValue + "'").First();
                                    int rowIndex = ProviderTemp.Rows.IndexOf(dr[0]);
                                    if (SelectedProvider == null)
                                    {
                                        isMultipleSelectedProviderRequired = true;//Speed Improve
                                        SelectedProvider = ProviderTemp.DefaultView[rowIndex];
                                        isMultipleSelectedProviderRequired = false;//Speed Improve
                                    }
                                    if (SelectedProviderID == null)
                                    {
                                        SelectedProviderID = ProviderTemp.DefaultView[rowIndex];
                                    }
                                }
                            }

                            if (SelectedProvider != null && SelectedEMROrder == null)//SelectedEMROrder condition added for ER- provider click on pending order list..
                            //&& ProviderTemp != null && ProviderTemp.Select(" H_EMP_ID='" + SelectedProvider.Row["H_EMP_ID"] + "'").Length > 0
                            {
                                SelectedProviderIDValue = SelectedProvider["H_EMP_ID"] != DBNull.Value ? Convert.ToString(SelectedProvider["H_EMP_ID"]) : "";
                                //SelectedProviderIDValue = Convert.ToString(ProviderTemp.Select("H_EMP_ID='" + SelectedProvider.Row["H_EMP_ID"] + "'")[0]["H_EMP_ID"]);
                                //if (ProviderTemp.Columns.Contains("H_EMP_DEPNAME"))
                                //SelectedSpecialityValue = Convert.ToString(ProviderTemp.Select("H_EMP_ID='" + SelectedProvider.Row["H_EMP_ID"] + "'")[0]["H_EMP_DEPNAME"]);
                                if (IsPatient && SelectedProvider != null && SelectedProvider.Row.Table.Columns.Contains("H_EMP_DEPNAME")) // For outsider patient no need to load department
                                    SelectedSpecialityValue = SelectedProvider["H_EMP_DEPNAME"] != DBNull.Value ? Convert.ToString(SelectedProvider["H_EMP_DEPNAME"]) : "";
                                if ((dtPatientVisit == null || dtPatientVisit.Rows.Count == 0
                                    || (dtPatientVisit.KIIsNotNullAndRowCount() && dtPatientVisit.Rows[0]["VISIT_TYPE"] != DBNull.Value && Convert.ToInt16(dtPatientVisit.Rows[0]["VISIT_TYPE"]) != (int)VisitMode.IP))
                                     && !isEpisodePopUpSelected && !IsFromCafeteria && !IsFromCoderReview)//ER order selection-not required doctor selection change
                                {
                                    OnLoadEncounterEpisodeNo(SelectedProviderValue, false, false);
                                }
                                IsLoadEMRCPOE = true;//For testing
                                if (IsPatient)
                                {
                                    DisPenseDetails = FetchDispense();
                                    if (IsDispenseChecked)
                                    {
                                        AddDispenseDetails();
                                    }
                                    if (DefaultSettings.Values.IS_VERIFICATION_REQUIRED && IsFromPharmacyPanel
                                    && Convert.ToInt16(SelectedVisitModeNew) == (int)VisitMode.IP)
                                    {
                                        EnableVerificationSettingBased = true;
                                    }
                                    if (IsFromPharmacyPanel && EnableVerificationSettingBased &&
                                        (SelectedVisitModeNew == (int)VisitMode.IP || (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE") && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.IP)))
                                    {
                                        //skiping by mohd adil for new requiremnt of verification
                                        EMROrderRelation = null;
                                    }
                                    //--- AA0907 --un commented for bug correction Bug ID -20141
                                    else if (!IsMultipleTimeSchemeSelectionChangeRequired && IsLoadEMRCPOE && (SelectedVisitModeNew == (int)VisitMode.IP || (SelectedEncounterDetails != null
                                        && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE") && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.IP)))
                                    {
                                        SetInitalData_EMRCPOE();
                                    }
                                    //--- AA0907
                                }
                            }
                        }
                        if (SelectedProvider == null)
                        {
                            SelectedProviderID = null;
                            SelectedSpeciality = null;
                            //Clear provider deatils
                            SelectedProviderIDValue = string.Empty;
                            isMultipleSelectedProviderRequired = true;
                            SelectedProviderValue = string.Empty;
                            isMultipleSelectedProviderRequired = false;
                            SelectedSpecialityValue = null;//exception on assigning string.empty
                            if ((dtPatientVisit == null || dtPatientVisit.Rows.Count == 0
                                || (dtPatientVisit.Rows[0]["VISIT_TYPE"] != DBNull.Value && Convert.ToInt16(dtPatientVisit.Rows[0]["VISIT_TYPE"]) != (int)VisitMode.IP)) && !IsFromCoderReview)
                            {
                                SelectedPatientFinEncounterID = 0;
                                ClosedPatientFinEncounterID = 0;
                                SelectedIncoPatientSchemeID = 0;
                                SelectedOpenEpisodeID = string.Empty;
                                SelectedEncounterNo = string.Empty;
                                SelectedPatientFinEpisodeID = 0;
                                ClosedPatientFinEpisodeID = 0;
                                SelectedPatientFinEncounterIDActive = 0;
                            }
                            //SetInitalData_EMRCPOE();
                        }
                        else if (!IsHandOverEncounter && !IsEmergencyEncounter && SelectedProvider != null && SelectedProviderValue != string.Empty && SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE")
                            && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) != (int)VisitMode.IP
                            && SelectedEncounterDetails.Row.Table.Columns.Contains("PROVIDER_ID") && SelectedEncounterDetails["PROVIDER_ID"] != DBNull.Value
                            && Convert.ToString(SelectedEncounterDetails["PROVIDER_ID"]) != SelectedProviderValue)
                        {
                            SelectedPatientFinEncounterID = 0;
                            ClosedPatientFinEncounterID = 0;
                            SelectedIncoPatientSchemeID = 0;
                            SelectedOpenEpisodeID = string.Empty;
                            SelectedEncounterNo = string.Empty;
                            SelectedPatientFinEpisodeID = 0;
                            ClosedPatientFinEpisodeID = 0;
                            SelectedPatientFinEncounterIDActive = 0;
                        }
                        else // Commented by benson , episode no and encounter no getting cleared
                        {
                            ////SelectedOpenEpisodeID = string.Empty;
                            ////SelectedEncounterNo = string.Empty;
                        }
                        if (IsFromPharmacyPanel && ERxVisibility == Visibility.Visible)
                        {
                            erxEnable();
                        }
                    }
                    catch (Exception)
                    {

                        throw;
                    }
                    finally
                    {
                        isMultipleSelectedProviderRequired = false;
                    }
                }
            }
        }

        private bool isCPOEOrderExist;
        public bool IsCPOEOrderExist
        {
            get
            {
                return isCPOEOrderExist;
            }
            set
            {
                isCPOEOrderExist = value;
                OnPropertyChanged("IsCPOEOrderExist");
            }
        }
        /// <summary>
        /// 
        /// </summary>
        private int selectedItemServiceType = -1;
        public int SelectedItemServiceType
        {
            get
            {
                return selectedItemServiceType;
            }
            set
            {
                selectedItemServiceType = value;
                OnPropertyChanged("SelectedItemServiceType");
            }
        }

        /// <summary>
        /// SelectedSpecialityValue property
        /// </summary>
        private string selectedSpecialityValue;
        public string SelectedSpecialityValue
        {
            get
            {
                return selectedSpecialityValue;
            }
            set
            {
                selectedSpecialityValue = value;
                OnPropertyChanged("SelectedSpecialityValue");
            }
        }

        /// <summary>
        /// SelectedProviderValue property
        /// </summary>
        private string selectedProviderValue;
        public string SelectedProviderValue
        {
            get
            {
                return selectedProviderValue;
            }
            set
            {
                selectedProviderValue = value;
                OnPropertyChanged("SelectedProviderValue");
            }
        }


        int selectedPharamacyUnitSalesIndex;
        public int SelectedPharamacyUnitSalesIndex
        {
            get
            {
                return selectedPharamacyUnitSalesIndex;
            }
            set
            {
                selectedPharamacyUnitSalesIndex = value;
                OnPropertyChanged("SelectedPharamacyUnitSalesIndex");
            }
        }
        /// <summary>
        /// SelectedProviderIDValue property
        /// </summary>
        private string selectedProviderIDValue;
        public string SelectedProviderIDValue
        {
            get
            {
                return selectedProviderIDValue;
            }
            set
            {
                selectedProviderIDValue = value;
                OnPropertyChanged("SelectedProviderIDValue");
            }
        }

        public decimal TotalCopay;
        public bool IsNotClearBasedOnValidation { get; set; }
        public DataRow EMRSelectedItem { get; set; } ///for getting the selected medicine detials(EMR order printing)

        /// <summary>
        /// 
        /// </summary>
        public DataTable ServiceCriteria { get; set; }


        /// <summary>
        /// Sets the inital data to all billing ui controls.
        /// </summary>
        private DataSet dsBillData;
        public DataSet BillData
        {
            get { return dsBillData; }
            set { dsBillData = value; OnPropertyChanged("BillData"); }
        }

        /// <summary>
        /// TotalTable property
        /// </summary>
        private DataTable totalTable;
        public DataTable TotalTable
        {
            get { return totalTable; }
            set
            {
                totalTable = value;
                OnPropertyChanged("TotalTable");
            }
        }


        /// <summary>
        /// TotalTable property
        /// </summary>
        private DataTable visitdetails;
        public DataTable Visitdetails
        {
            get { return visitdetails; }
            set
            {
                visitdetails = value;
                OnPropertyChanged("Visitdetails");
            }
        }

        /// <summary>
        /// AccShiftOpenID Property
        /// </summary>
        private long accShiftOpenID;
        public long AccShiftOpenID
        {
            get { return accShiftOpenID; }
            set
            {
                accShiftOpenID = value;
                OnPropertyChanged("AccShiftOpenID");//Implement INotifyPropertyChanged
            }
        }

        public DataTable dtPatientVisit { get; set; }

        public DataTable dtPatientEncounter { get; set; }

        /// <summary>
        /// PharamacyUnitSales property
        /// </summary>
        private DataTable pharamacyUnitSales;
        public DataTable PharamacyUnitSales
        {
            get
            {
                return pharamacyUnitSales;
            }
            set
            {
                pharamacyUnitSales = value;
                OnPropertyChanged("PharamacyUnitSales");
                if (value != null)
                {
                    PharamacyUnitSalesGrid = PharamacyUnitSales.Copy();
                }
            }
        }
        public bool IsPatient
        {
            get { return (bool)GetValue(IsPatientProperty); }
            set { SetValue(IsPatientProperty, value); }
        }

        // Using a DependencyProperty as the backing store for IsPatient.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty IsPatientProperty =
            DependencyProperty.Register("IsPatient", typeof(bool), typeof(UIServiceDelivery), new UIPropertyMetadata(true));


        public bool IsDonor
        {
            get { return (bool)GetValue(IsDonorProperty); }
            set { SetValue(IsDonorProperty, value); }
        }

        // Using a DependencyProperty as the backing store for IsDonor.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty IsDonorProperty =
            DependencyProperty.Register("IsDonor", typeof(bool), typeof(UIServiceDelivery), new UIPropertyMetadata(false));


        public DataTable BloodDonorServices { get; set; }


        public bool IsPatientUpdate
        {
            get { return (bool)GetValue(IsPatientUpdateProperty); }
            set { SetValue(IsPatientUpdateProperty, value); }
        }

        // Using a DependencyProperty as the backing store for IsPatientUpdate.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty IsPatientUpdateProperty =
            DependencyProperty.Register("IsPatientUpdate", typeof(bool), typeof(UIServiceDelivery), new UIPropertyMetadata(false));


        /// <summary>
        /// SelectedPackageItem property
        /// </summary>
        private DataRowView selPackageItem;
        public DataRowView SelectedPackageItem
        {
            get { return selPackageItem; }
            set
            {
                selPackageItem = value;
                if (!IsPatientUpdate && SelectedPackageValue >= 0 && value != null)
                {
                    IsPackage = SelectedPackageItem.Row["PKG_SERVICE_ID"] != DBNull.Value &&
                        Convert.ToInt64(SelectedPackageItem.Row["PKG_SERVICE_ID"]) != 0 ? true : false;
                    BillData.Tables["BILL_COMMON_DETAILS"].Rows[0]["ISPACKAGE"] = Convert.ToInt16(IsPackage);
                    ClearService();
                }
                OnPropertyChanged("SelectedPackageItem");
            }
        }

        private long selectedIncoPatientSchemeID;
        public long SelectedIncoPatientSchemeID
        {
            get
            {
                return selectedIncoPatientSchemeID;
            }
            set
            {
                selectedIncoPatientSchemeID = value;
                OnPropertyChanged("SelectedIncoPatientSchemeID");
            }
        }


        /// <summary>
        /// SelectedPackageValue Property
        /// </summary>
        private decimal selectedPackageValue;
        public decimal SelectedPackageValue
        {
            get { return selectedPackageValue; }
            set
            {
                selectedPackageValue = value;
                OnPropertyChanged("SelectedPackageValue");
            }
        }

        /// <summary>
        /// IsPackage property
        /// </summary>
        private bool isPackage = false;
        public bool IsPackage
        {
            get
            {
                return isPackage;
            }
            set
            {
                isPackage = value;
                OnPropertyChanged("IsPackage");
            }
        }


        /// <summary>
        /// 
        /// </summary>
        private string encounterType;
        public string EncounterType
        {
            get
            {
                return encounterType;
            }
            set
            {
                encounterType = value;
                OnPropertyChanged("EncounterType");
            }
        }

       
        public DataTable PatientInformation
        {
            get { return (DataTable)GetValue(PatientInformationProperty); }
            set { SetValue(PatientInformationProperty, value); }
        }

        // Using a DependencyProperty as the backing store for PatientInformation.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty PatientInformationProperty =
            DependencyProperty.Register("PatientInformation", typeof(DataTable), typeof(UIServiceDelivery), new UIPropertyMetadata(null));

        /// <summary>
        /// SelectedServiceType property
        /// </summary>
        private int selectedServiceType;
        public int SelectedServiceType
        {
            get { return selectedServiceType; }
            set
            {
                try
                {
                    selectedServiceType = value;
                    OnPropertyChanged("SelectedServiceType");
                    //IsLoadEMRCPOE = false;
                    if (!IsFromIPAllocation)
                    {
                        if (SelectedServiceType == (int)ServiceType.Pharmacy)
                        {
                            IsCPOEOrderExist = false;
                            EMROrderItems = null;
                            EMROrderRelation = null;
                            OrderItems = null;
                        }
                        if (!IsFromCoderReview)
                        {
                            ClearBillServiceTypeBased(true);
                        }
                        BillData.Tables["BILL_COMMON_DETAILS"].Rows[0]["ACTUAL_SERVICE_TYPE"] = value;
                        this.SetIntitalData(value);
                        if (SelectedServiceType == (int)ServiceType.Pharmacy)
                        {
                            IsPrevMedicationEnable = true;
                        }
                        else
                        {
                            IsPrevMedicationEnable = false;
                        }
                    }
                    if (SelectedServiceType == (int)ServiceType.Cafeteria)
                    {
                        IsEnableCafeteriaTab = true;
                    }
                }
                catch (Exception ex)
                {
                    throw ;
                }
            }
        }
        /// <summary>
        /// 
        /// </summary>
        public DataTable ProviderTemp { get; set; }
        public bool IsExists { get; set; }
        public DataTable EMROrder { get; set; }
        public DataTable EMROrderItems { get; set; }

        /// <summary>
        /// Create the relation between order and details(Only for clear after savinig CPOE)
        /// </summary>
        DataTable orderItems;
        public DataTable OrderItems
        {
            get { return orderItems; }
            set
            {
                orderItems = value;
                OnPropertyChanged("OrderItems");
            }
        }

        private DataSet emrOrderRelation;
        public DataSet EMROrderRelation
        {
            get { return emrOrderRelation; }
            set
            {
                emrOrderRelation = value;
                OnPropertyChanged("EMROrderRelation");
            }
        }

        DataRow selectedEMROrder;
        public DataRow SelectedEMROrder
        {
            get
            {
                return selectedEMROrder;
            }
            set
            {
                selectedEMROrder = value;
                if (!IsPackage && value != null && value.Table.Columns.Contains("PROVIDER_ID"))
                {
                    //if (ProviderChangeValidation())
                    //{
                    //SelectedSpeciality = null;
                    if (SelectedProviderValue != selectedEMROrder["PROVIDER_ID"].ToString() && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount()
                        && !EnableVerificationSettingBased && Convert.ToBoolean(selectedEMROrder["ISSELECT"]))
                    {
                        BillData.Tables["INV_PAT_BILLING"].Rows.Clear();
                    }
                    //else if (SelectedProviderValue != selectedEMROrder["PROVIDER_ID"].ToString() && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount()
                    //    && EnableVerificationSettingBased)
                    //{
                    //    if (BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_DTLS_INV_ORDER_ID"]) > 0 && x["PROVIDER_ID"] != DBNull.Value
                    //             && Convert.ToString(x["PROVIDER_ID"]) != SelectedProviderValue)
                    //                                .Select(x => x).Any())
                    //    {
                    //        BillData.Tables["INV_PAT_BILLING"].Rows.Clear();
                    //    }
                    //    DataRow[] drFilter = EMROrderRelation.Tables["Detail"].AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_MAST_INV_ORDER_ID"]) == IfNullReturnZero(selectedEMROrder["EMR_PAT_MAST_INV_ORDER_ID"]))
                    //                            .Select(x => x).ToArray();
                    //    if (drFilter.Any() && drFilter[0]["PROVIDER_ID"] != selectedEMROrder["EMR_PAT_MAST_INV_ORDER_ID"])
                    //      {
                    //          BillData.Tables["INV_PAT_BILLING"].Rows.Clear();
                    //      }
                    //}
                    //After selecting Emr Order, Checkbox getting unchecked
                    //SelectedProviderValue = selectedEMROrder["PROVIDER_ID"].ToString();
                    //OnLoadEncounterEpisodeNo(SelectedProviderValue,false);
                    OnPropertyChanged("SelectedEMROrder");
                    //}
                }
            }
        }
        /// <summary>
        /// Category property
        /// </summary>
        private DataView category;
        public DataView Category
        {
            get
            {
                return category;
            }
            set
            {
                category = value;
                OnPropertyChanged("Category");
            }
        }
        /// <summary>
        /// CategoryTemp property
        /// </summary>
        private DataTable categoryTemp;
        public DataTable CategoryTemp
        {
            get
            {
                return categoryTemp;
            }
            set
            {
                categoryTemp = value;
                OnPropertyChanged("CategoryTemp");
            }
        }

        /// <summary>
        /// Services property
        /// </summary>
        private DataTable services;
        public DataTable Services
        {
            get { return services; }
            set
            {
                services = value;
                OnPropertyChanged("Services");

            }
        }

        /// <summary>
        /// ServicesTemp property
        /// </summary>
        private DataTable servicesTemp;
        public DataTable ServicesTemp
        {
            get { return servicesTemp; }
            set
            {
                servicesTemp = value;
                OnPropertyChanged("ServicesTemp");
            }
        }

        /// <summary>
        /// Dose property
        /// </summary>
        private DataTable dose;
        public DataTable Dose
        {
            get { return dose; }
            set
            {
                dose = value;
                OnPropertyChanged("Dose");

            }
        }
        /// <summary>
        /// Route property
        /// </summary>
        private DataTable route;
        public DataTable Route
        {
            get { return route; }
            set
            {
                route = value;
                OnPropertyChanged("Route");

            }
        }
        /// <summary>
        /// Route property
        /// </summary>
        private DataTable drugUnit;
        public DataTable DrugUnit
        {
            get { return drugUnit; }
            set
            {
                drugUnit = value;
                OnPropertyChanged("DrugUnit");

            }
        }

        /// <summary>
        /// Route property
        /// </summary>
        private DataTable drugUnittemp;
        public DataTable DrugUnitTemp
        {
            get { return drugUnittemp; }
            set
            {
                drugUnittemp = value;
                OnPropertyChanged("DrugUnitTemp");

            }
        }
        /// <summary>
        /// 
        /// </summary>
        private DataRow editService;
        public DataRow EditService
        {
            get { return editService; }
            set
            {
                editService = value;
                OnPropertyChanged("EditService");
            }
        }
        /// <summary>
        /// 
        /// </summary>
        private decimal retainerAmt;
        public decimal AdvanceAmount
        {
            get { return retainerAmt; }
            set
            {
                retainerAmt = value;
                OnPropertyChanged("AdvanceAmount");
            }
        }
        /// <summary>
        ///  HospitalInformation property
        /// </summary>
        private DataTable hospitalInformation;
        public DataTable HospitalInformation
        {
            get
            {
                return hospitalInformation;
            }
            set
            {
                hospitalInformation = value;
                OnPropertyChanged("HospitalInformation");
            }
        }
        /// <summary>
        /// ProviderDetails property
        /// </summary>
        private DataTable providerDetails;
        public DataTable ProviderDetails
        {
            get
            {
                return providerDetails;
            }
            set
            {
                providerDetails = value;
                OnPropertyChanged("ProviderDetails");
            }
        }

        string remarks;
        public string Remarks
        {
            get { return remarks; }
            set
            {
                remarks = value;
                OnPropertyChanged("Remarks");
            }
        }

        /// <summary>
        /// BillingRemarks Property
        /// </summary>
        private string billingRemarks;
        public string BillingRemarks
        {
            get { return billingRemarks; }
            set
            {
                billingRemarks = value;
                OnPropertyChanged("BillingRemarks");//Implement INotifyPropertyChanged
            }
        }
        /// <summary>
        /// 
        /// </summary>
        private string selectedOpenEpisodeID;
        public string SelectedOpenEpisodeID
        {
            get
            {
                return selectedOpenEpisodeID;
            }
            set
            {
                selectedOpenEpisodeID = value;
                OnPropertyChanged("SelectedOpenEpisodeID");
            }
        }
        private bool isEnableCafeteriaTab = false;
        public bool IsEnableCafeteriaTab
        {
            get
            {
                return isEnableCafeteriaTab;
            }
            set
            {
                isEnableCafeteriaTab = value;
                OnPropertyChanged("IsEnableCafeteriaTab");
                if (IsEnableCafeteriaTab == true)
                {
                    tabCafeteriaOrder.IsSelected = true;
                }
            }
        }
        //private bool isLoadEMRCPOE;
        //public bool IsLoadEMRCPOE
        //{
        //    get
        //    {
        //        return isLoadEMRCPOE;
        //    }
        //    set
        //    {
        //        isLoadEMRCPOE = value;
        //        OnPropertyChanged("IsLoadEMRCPOE");
        //    }
        //}

        public bool PackageServiceStarting { get; set; }
        /// <summary>
        /// CategorySelectedValue property
        /// </summary>
        private decimal? categorySelectedValue;
        public decimal? CategorySelectedValue
        {
            get
            {
                return categorySelectedValue;
            }
            set
            {
               categorySelectedValue = value;
             
                   if (dsServiceData != null)
                   {
                       if (SelectedServiceType == (int)ServiceType.Investigation || SelectedServiceType == (int)ServiceType.Cafeteria ||
                           SelectedServiceType == (int)ServiceType.IncomingService)
                       {

                           Services = dsServiceData.Tables["INV_MAST_SERVICE"].Copy();
                           if (!IsPatient && SelectedServiceType == (int)ServiceType.Cafeteria)  // MyCaf
                           {
                               if (SelectedService != null)
                               {
                                   SelectedService = null;//Clear Selected service on sales category selection change
                               }
                               // Services = dsServiceData.Tables["INV_MAST_SERVICE"].Copy();
                               if (Services.Columns.Contains("SALES_CATEGORY_ID"))
                               {
                                   Services.DefaultView.RowFilter = "SALES_CATEGORY_ID IS NOT NULL AND SALES_CATEGORY_ID=" + SalesCategorySelectedValue;
                                   Services = Services.DefaultView.ToTable();
                               }
                           } // MyCaf
                           if (!IsPatient)
                           {
                               if (Services.Columns.Contains("ISPACKAGE"))
                               {
                                   Services.DefaultView.RowFilter = "ISPACKAGE IS NULL OR ISPACKAGE=0";
                                   Services = Services.DefaultView.ToTable();
                                   SelectedService = null;
                               }
                           }
                           if (value != null && value != -1) //ALL
                           {
                               if (Services.Columns.Contains("PARENT_INV_CATEGORY_ID"))
                               {
                                   if (SelectedServiceType != (int)ServiceType.Cafeteria)
                                   {
                                       Services.DefaultView.RowFilter = "PARENT_INV_CATEGORY_ID=-1 OR PARENT_INV_CATEGORY_ID=" + value;
                                       Services = Services.DefaultView.ToTable();
                                       SelectedService = null;
                                       // Bug ID : 33916 / Benson /Start
                                       if (CategorySelectedValue == 5)
                                       {
                                           if (SelectedPHSubLocationsValue != null && SelectedPHSubLocationsValue > 0 && ServiceMedicine.KIIsNotNullAndRowCount())
                                           {
                                               FOData.FetchMedicines();
                                               ServiceMedicine = FOData.Medicines.Copy();
                                               var Query = ServiceMedicine.AsEnumerable()
                                                              .Where(x => x["PH_SUBLOCATION_ID"] != DBNull.Value && Convert.ToInt32(x["PH_SUBLOCATION_ID"]) == SelectedPHSubLocationsValue)
                                                              .Select(x => x);
                                               if (Query.Any())
                                               {
                                                   dtMedicines = Query.CopyToDataTable().Copy();
                                                   dtMedicines.Columns["INV_MAST_SERVICE_ID"].ColumnName = "PRIMARY_ID";
                                                   Services = dtMedicines.Copy();
                                               }
                                           }
                                       }
                                       else if (SelectedPHSubLocationsValue != null && SelectedPHSubLocationsValue > 0)//Speed Improve
                                       {
                                           IsBlockSelectedPHSubLocationsValueChange = true;
                                           SelectedPHSubLocationsValue = 0;
                                           IsBlockSelectedPHSubLocationsValueChange = false;
                                       }//Speed Improve
                                       // Bug ID : 33916 / Benson /END
                                       if (!IsPatient)
                                       {
                                           if (Services.Columns.Contains("ISPACKAGE"))
                                           {
                                               Services.DefaultView.RowFilter = "ISPACKAGE IS NULL OR ISPACKAGE=0";
                                               Services = Services.DefaultView.ToTable();
                                               SelectedService = null;
                                           }
                                       }
                                   }
                                   else if (SelectedServiceType == (int)ServiceType.Cafeteria)
                                   {
                                       if (SalesCategorySelectedValue != null)
                                       {
                                           Services.DefaultView.RowFilter = "INV_CATEGORY_ID=" + value + "AND SALES_CATEGORY_ID IS NOT NULL AND SALES_CATEGORY_ID=" + SalesCategorySelectedValue + "";
                                       }
                                       else
                                       {
                                           Services.DefaultView.RowFilter = "INV_CATEGORY_ID=" + value;
                                       }
                                       Services = Services.DefaultView.ToTable();
                                       SelectedService = null;
                                   }

                               }
                           }
                           if (value != null && value == -1) //ALL
                           {
                               // Bug ID : 33916 / Benson /Start
                               if (SelectedPHSubLocationsValue != null && SelectedPHSubLocationsValue > 0 && ServiceMedicine.KIIsNotNullAndRowCount())
                               {
                                   FOData.FetchMedicines();
                                   ServiceMedicine = FOData.Medicines.Copy();
                                   var Query = ServiceMedicine.AsEnumerable()
                                                  .Where(x => x["PH_SUBLOCATION_ID"] != DBNull.Value && Convert.ToInt32(x["PH_SUBLOCATION_ID"]) == SelectedPHSubLocationsValue)
                                                  .Select(x => x);
                                   if (Query.Any())
                                   {
                                       dtMedicines = Query.CopyToDataTable().Copy();
                                       dtMedicines.Columns["INV_MAST_SERVICE_ID"].ColumnName = "PRIMARY_ID";
                                       if (Services.KIIsNotNullAndRowCount())
                                       {
                                           Services.Merge(dtMedicines.Copy());
                                       }
                                   }
                               }
                               else if ((SelectedPHSubLocationsValue != null && SelectedPHSubLocationsValue <= 0) || SelectedPHSubLocationsValue == null)//Speed Improve
                               {
                                   if (SelectedServiceType != (int)ServiceType.Cafeteria)
                                   {
                                       Services.DefaultView.RowFilter = "PARENT_INV_CATEGORY_ID=-1 OR PARENT_INV_CATEGORY_ID<>" + 5;
                                       Services = Services.DefaultView.ToTable();
                                   }
                               }//Speed Improve
                               // Bug ID : 33916 / Benson /END
                               SelectedService = null;
                           }
                       }
                       else if (SelectedServiceType == (int)ServiceType.Pharmacy && SelectedLabOrSubLocationValue != -1)
                       {
                           //Services = dsServiceData.Tables["INV_MAST_SERVICE"].Copy();
                           LoadMedicines();
                           if (!IsTapperEnable && !IsEditExecuted)
                           {
                               SelectedService = null;
                           }
                       }
                   }
               
                OnPropertyChanged("CategorySelectedValue");
            }
        }

        DataRowView selectedBatchOrUnit;
        public DataRowView SelectedBatchOrUnit
        {
            get { return selectedBatchOrUnit; }
            set
            {
                selectedBatchOrUnit = value;
                if (value != null)//&& !IsPharmacySelected
                {
                    long ServiceId = Int64.MinValue;
                    if (SelectedService != null)
                    {
                        if (SelectedService.Row.Table.Columns.Contains("PRIMARY_ID") && SelectedService.Row["PRIMARY_ID"] != DBNull.Value)
                        {
                            ServiceId = Convert.ToInt64(SelectedService.Row["PRIMARY_ID"]);
                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INV_MAST_SERVICE_ID"] = ServiceId;
                        }
                        else if (SelectedService.Row["INV_MAST_SERVICE_ID"] != DBNull.Value)
                        {
                            ServiceId = Convert.ToInt64(SelectedService.Row["INV_MAST_SERVICE_ID"]);
                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INV_MAST_SERVICE_ID"] = ServiceId;
                        }
                    }
                    if (value.Row.Table.Columns.Contains("BATCHNO"))
                    {
                        this.SetMedicineDetails(value.Row["BATCHNO"].ToString());
                        if (PharmacyByDevice == "1" && EditService != null)
                        {
                            //IsBarcodeSettingWithBatchChanging = true;
                        }
                    }
                    OnPropertyChanged("SelectedBatchOrUnit");
                }
            }
        }

        /// <summary>
        /// IsApplyPriceByUser property
        /// </summary>
        private bool isApplyPriceByUser;
        public bool IsApplyPriceByUser
        {
            get
            {
                return isApplyPriceByUser;
            }
            set
            {
                isApplyPriceByUser = value;
                OnPropertyChanged("IsApplyPriceByUser");
            }
        }


        /// <summary>
        /// IsApplyPriceByUserEdit property
        /// </summary>
        private bool isApplyPriceByUserEdit = false;
        public bool IsApplyPriceByUserEdit
        {
            get
            {
                return isApplyPriceByUserEdit;
            }
            set
            {
                isApplyPriceByUserEdit = value;
                OnPropertyChanged("IsApplyPriceByUserEdit");
            }
        }


        public bool IsFromOTBilling
        {
            get { return (bool)GetValue(IsFromOTBillingProperty); }
            set { SetValue(IsFromOTBillingProperty, value); }
        }

        // Using a DependencyProperty as the backing store for IsFromOTBilling.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty IsFromOTBillingProperty =
            DependencyProperty.Register("IsFromOTBilling", typeof(bool), typeof(UIServiceDelivery), new UIPropertyMetadata(false));

        private int isMultipleCPTChangeBlock = 0;
        private int isMultipleServiceChangeBlock = 0;

        private DataRowView selectedService;
        /// <summary>
        /// Gets or sets the selected service.
        /// </summary>
        /// <value>The selected service.</value>
        public DataRowView SelectedService
        {
            get { return selectedService; }
            set
            {
                try
                {
                    selectedService = value;

                    if (value == null)
                    {
                        SelectedServiceDetails = null;//Speed Improve
                        if (!IsTapperEnable && !IsEditExecuted && !isServiceCleared)
                        {
                            isMultipleServiceChangeBlock = isMultipleServiceChangeBlock == 1 ? 2 : isMultipleServiceChangeBlock;//Speed Improve
                            if (isMultipleServiceChangeBlock != 2 && isMultipleServiceChangeBlock != 3)//Speed Improve
                                ClearService();
                            isMultipleServiceChangeBlock = isMultipleServiceChangeBlock == 2 ? 0 : isMultipleServiceChangeBlock == 0 ? 1 : isMultipleServiceChangeBlock;//Speed Improve
                        }//Speed Improve
                    }
                    else
                    {
                        isMultipleServiceChangeBlock = 0;//Speed Improve
                        SelectedServiceDetails = selectedService.Row;//Speed Improve
                        if (IsBarCodeSearchbyManual)
                        {
                            //DataRow[] drMedicineRow = null;
                            //if (Services.KIIsNotNullAndRowCount() && Services.Columns.Contains("INV_MAST_SERVICE_ID"))
                            //{
                            //    if (SelectedService.DataView.Table.Columns.Contains("PRIMARY_ID"))
                            //    {
                            //        drMedicineRow = Services.Select("INV_MAST_SERVICE_ID='" + value.Row["INV_MAST_SERVICE_ID"] + "'");
                            //    }
                            //    else
                            //    {
                            //        drMedicineRow = Services.Select("INV_MAST_SERVICE_ID='" + value.Row["PRIMARY_ID"] + "'");
                            //    }
                            //}
                            //else if (Services.KIIsNotNullAndRowCount() && Services.Columns.Contains("PRIMARY_ID"))
                            //{
                            //    if (SelectedService.DataView.Table.Columns.Contains("PRIMARY_ID"))
                            //    {
                            //        drMedicineRow = Services.Select("PRIMARY_ID='" + value.Row["PRIMARY_ID"] + "'");
                            //    }
                            //    else
                            //    {
                            //        drMedicineRow = Services.Select("PRIMARY_ID='" + value.Row["INV_MAST_SERVICE_ID"] + "'");
                            //    }
                            //}
                            long serviceID = 0;
                            if (value.Row.Table.Columns.Contains("PRIMARY_ID"))
                            {
                                serviceID = Convert.ToInt64(value.Row["PRIMARY_ID"]);
                            }
                            else
                            {
                                serviceID = Convert.ToInt64(value.Row["INV_MAST_SERVICE_ID"]);
                            }

                            if (EditService == null && !IsVerificationLoaded && BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0)
                            {
                                var filterBarCodeItems = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => IfNullReturnZero(x["INV_MAST_SERVICE_ID"]) == serviceID &&
                                       ((Convert.ToBoolean(x["IS_BARCODE_READ"]) && Convert.ToString(x["BARCODE"]) == BarCode) || ServiceName != string.Empty) &&
                           IfNullReturnZero(x["EMR_PAT_DTLS_MEDICATION_ID"]) > 0 && IfNullReturnZero(x["IS_DISPENSE"]) != 1 && IfNullReturnZero(x["CONSUMPTION_STATUS"]) == 0
                           && (IfNullReturnZero(x["APPROVAL_STATUS"]) == (int)Infologics.Medilogics.Enumerators.Insurance.InsuranceRequestStatus.Approve ||
                           IfNullReturnZero(x["APPROVAL_STATUS"]) == 0) && IfNullReturnZero(x["ISCASHIERREMOVED"]) != 1);
                                if (filterBarCodeItems.Any())
                                {
                                    isallowvalidationBarcode = false;
                                    filterBarCodeItems.AsDataView()[0]["ISSALE"] = false;
                                    filterBarCodeItems.AsDataView()[0]["ISLABEL"] = false;
                                    drMedicineRowbyManual = filterBarCodeItems.CopyToDataTable().DefaultView[0];
                                    EditService = filterBarCodeItems.CopyToDataTable().Rows[0];
                                    isbarcodeEntered = true;
                                    Executed_EditService(null, null);
                                    //LoadEMROrdersbyBarCodeSearch(drMedicineRow);
                                    isbarcodeEntered = false;
                                    isallowvalidationBarcode = true;
                                    return;
                                }
                            }
                        }
                        if (SelectedService.DataView.Table.Columns.Contains("PRIMARY_ID"))
                        {
                            DataRowView drview = SelectedService;
                            isServiceCleared = true;
                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INV_MAST_SERVICE_ID"] = Convert.ToInt64(SelectedService.Row["PRIMARY_ID"]);
                            if (SelectedService == null)
                            {
                                SelectedService = drview;
                            }
                            //if (EditService != null && EditService.Table.Rows.Count>0 && EnableVerificationSettingBased && IfNullReturnZero(EditService["INV_MAST_SERVICE_ID"]) > 0)
                            //{
                            //    EditService["NAME"] = SelectedService.Row["NAME"];
                            //    EditService["INV_MAST_SERVICE_ID"] = SelectedService.Row["PRIMARY_ID"];
                            //}
                            isServiceCleared = false;
                        }
                        else
                        {
                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INV_MAST_SERVICE_ID"] = Convert.ToInt64(SelectedService.Row["INV_MAST_SERVICE_ID"]);
                        }
                        if (SelectedServiceType == (int)ServiceType.Investigation)
                        {
                            IsAssociatedService(SelectedService);
                        }
                        if (SelectedService != null && SelectedService.Row.Table.Columns.Contains("SERVICE_TYPE") && SelectedService.Row["SERVICE_TYPE"] != DBNull.Value
                            && SelectedItemServiceType != Convert.ToInt16(SelectedService.Row["SERVICE_TYPE"]))
                        {
                            SelectedItemServiceType = SelectedService.Row.Table.Columns.Contains("SERVICE_TYPE") && SelectedService.Row["SERVICE_TYPE"] != DBNull.Value ? Convert.ToInt16(SelectedService.Row["SERVICE_TYPE"]) : -1;
                        }
                        string ServiceFilter = string.Empty;
                        //if (SelectedCPTCodeValue == string.Empty && SelectedService != null )
                        if (SelectedService != null && services != null &&
                            (SelectedCPTCodeValue == string.Empty || (SelectedCPTCodeValue != Convert.ToString(SelectedService.Row["CPT_CODE"]))))
                        {
                            if (SelectedService.Row["CPT_CODE"] != DBNull.Value)//Speed Improve
                            {
                                isMultipleCPTChangeBlock = 1;
                                SelectedCPTCodeValue = Convert.ToString(SelectedService.Row["CPT_CODE"]);
                                isMultipleCPTChangeBlock = 0;
                            }//Speed Improve
                            else
                            {
                                if (SelectedService.Row.Table.Columns.Contains("PRIMARY_ID") && SelectedService.Row["PRIMARY_ID"] != DBNull.Value)
                                //&& services != null
                                //&& Services.Select("PRIMARY_ID='" + SelectedService.Row["PRIMARY_ID"] + "'").Length > 0)
                                {
                                    ServiceFilter = Convert.ToString(SelectedService.Row["PRIMARY_ID"]);
                                    //DataRow[] drService = Services.Select("PRIMARY_ID=" + SelectedService.Row["PRIMARY_ID"]);
                                    //DataTable dtServi = drService.CopyToDataTable();
                                    //SelectedCPTCodeValue = Convert.ToString(dtServi.Rows[0]["CPT_CODE"]);
                                }
                                else if (SelectedService.Row.Table.Columns.Contains("INV_MAST_SERVICE_ID") && SelectedService.Row["INV_MAST_SERVICE_ID"] != DBNull.Value)
                                // && services != null
                                //&& Services.Select("PRIMARY_ID='" + SelectedService.Row["INV_MAST_SERVICE_ID"] + "'").Length > 0)
                                {
                                    ServiceFilter = Convert.ToString(SelectedService.Row["INV_MAST_SERVICE_ID"]);
                                    //SelectedCPTCodeValue = Convert.ToString(Services.Select("PRIMARY_ID='" + SelectedService.Row["INV_MAST_SERVICE_ID"] + "'")[0]["CPT_CODE"]);
                                }
                                DataRow[] drService = Services.Select("PRIMARY_ID=" + ServiceFilter);
                                if (drService != null && drService.Length > 0)
                                {
                                    SelectedCPTCodeValue = Convert.ToString(drService[0]["CPT_CODE"]);
                                }
                            }
                        }
                        if ((SelectedServiceType == (int)ServiceType.Pharmacy || SelectedItemServiceType == (int)ServiceType.Pharmacy) && !IsUSSettingEnable && SelectedService != null)
                        {
                            //for  bill hold checking 
                            //DataTable dtSetting = CommonData.GetDefaultSettings(0, "SALES UNIT CONVERSION APPLICABLE");
                            //if (dtSetting.KIIsNotNullAndRowCount() && Convert.ToInt16(dtSetting.Rows[0]["VALUE"]) == 1)
                            //{
                            //    UnitSalesConversionApplicable = true;
                            //}
                            //else
                            //{
                            //    UnitSalesConversionApplicable = false;
                            //}
                            if (UnitSalesConversionApplicable)
                            {
                                ServiceFilter = string.Empty;
                                DataTable dtCriteria = new DataTable("CRITERIA");
                                dtCriteria.Columns.Add("INV_MAST_SERVICE_ID", typeof(Int64));
                                if (SelectedService.DataView.ToTable().Columns.Contains("PRIMARY_ID") && SelectedService.Row["PRIMARY_ID"] != DBNull.Value)
                                {
                                    dtCriteria.Rows.Add(SelectedService.Row["PRIMARY_ID"]);
                                    ServiceFilter = Convert.ToString(SelectedService.Row["PRIMARY_ID"]);
                                }
                                else if (SelectedService.DataView.ToTable().Columns.Contains("INV_MAST_SERVICE_ID") && SelectedService.Row["INV_MAST_SERVICE_ID"] != DBNull.Value)
                                {
                                    dtCriteria.Rows.Add(SelectedService.Row["INV_MAST_SERVICE_ID"]);
                                    ServiceFilter = Convert.ToString(SelectedService.Row["INV_MAST_SERVICE_ID"]);
                                }
                                if (dtCriteria.KIIsNotNullAndRowCount())
                                {
                                    MainBillingShared objBillingShared = new MainBillingShared();
                                    PharamacyUnitSales = objBillingShared.FetchPharmacyUnitSales(dtCriteria);
                                    if (PharamacyUnitSales.KIIsNotNullAndRowCount() && dsServiceData != null)
                                    {
                                        DataRow[] drFiltered = null;
                                        drFiltered = dsServiceData.Tables["INV_MAST_SERVICE"].Select("PRIMARY_ID=" + Convert.ToDecimal(ServiceFilter));
                                        //if (SelectedService.Row.Table.Columns.Contains("PRIMARY_ID"))
                                        //{
                                        //    drFiltered = dsServiceData.Tables["INV_MAST_SERVICE"].Select("PRIMARY_ID=" + Convert.ToDecimal(SelectedService.Row["PRIMARY_ID"]));
                                        //}
                                        //else if (SelectedService.Row.Table.Columns.Contains("INV_MAST_SERVICE_ID"))
                                        //{
                                        //    drFiltered = dsServiceData.Tables["INV_MAST_SERVICE"].Select("PRIMARY_ID=" + Convert.ToDecimal(SelectedService.Row["INV_MAST_SERVICE_ID"]));
                                        //}
                                        if (drFiltered.Length > 0)
                                        {
                                            string Unit = string.Empty;
                                            if (SelectedVisitModeNew == (int)VisitMode.IP)
                                            {
                                                Unit = Convert.ToString(drFiltered[0]["IP_UNIT"]);
                                            }
                                            else
                                            {
                                                Unit = Convert.ToString(drFiltered[0]["OP_UNIT"]);
                                            }
                                            if (Unit != string.Empty)
                                            {
                                                DataRow[] drRow = PharamacyUnitSales.Select("TO_UNIT_NAME='" + Convert.ToString(Unit) + "'");
                                                if (drRow.Length > 0)
                                                {
                                                    SelectedPharamacyUnitSales = PharamacyUnitSales.DefaultView[PharamacyUnitSales.Rows.IndexOf(drRow[0])];
                                                }
                                            }
                                            //else
                                            //{
                                            //    PharamacyUnitSales = null;
                                            //}
                                        }
                                    }
                                    DataRow dr = null;
                                    if (PharamacyUnitSales.KIIsNotNullAndRowCount() && PharamacyUnitSales.Rows.Count == 1)
                                    {
                                        dr = PharamacyUnitSales.Rows[0];
                                        SelectedPharamacyUnitSales = PharamacyUnitSales.DefaultView[PharamacyUnitSales.Rows.IndexOf(dr)];
                                    }
                                    if (!IsFromPharmacy && EditService == null && PharamacyUnitSales != null && PharamacyUnitSales.Rows.Count > 0) // Pharmacy billing in services
                                    {
                                        dr = PharamacyUnitSales.Rows[0];
                                        SelectedPharamacyUnitSales = PharamacyUnitSales.DefaultView[PharamacyUnitSales.Rows.IndexOf(dr)];
                                    }
                                    if (!IsFromPharmacy && EditService != null && PharamacyUnitSales != null && PharamacyUnitSales.Rows.Count > 0) // Pharmacy bill editing in services
                                    {
                                        dr = PharamacyUnitSales.Select("PH_UNIT_SALES_CONVERSION_ID=" + EditService["PH_UNIT_SALES_CONVERSION_ID"])[0];
                                        SelectedPharamacyUnitSales = PharamacyUnitSales.DefaultView[PharamacyUnitSales.Rows.IndexOf(dr)];
                                    }
                                    if (!isbarcodeEntered)
                                    {
                                        BarCode = string.Empty;
                                    }
                                    if (EnableVerificationSettingBased && IsVerificationLoaded && VerificationQtyUnit != string.Empty)
                                    {
                                        DataRow[] drRow = PharamacyUnitSales.Select("TO_UNIT_NAME='" + Convert.ToString(VerificationQtyUnit) + "'");
                                        if (drRow.Length > 0)
                                        {
                                            SelectedPharamacyUnitSales = PharamacyUnitSales.DefaultView[PharamacyUnitSales.Rows.IndexOf(drRow[0])];
                                        }
                                    }
                                }
                            }
                            if (TempGeneric.KIIsNotNullAndRowCount() && SelectedService["GENERIC_ID"] != DBNull.Value)
                            {
                                TempGeneric.DefaultView.RowFilter = "EMR_LOOKUP_ID=" + SelectedService["GENERIC_ID"];
                                Generic = TempGeneric.DefaultView.ToTable();
                            }
                            //IsConsumable
                            if (SelectedService.Row.Table.Columns.Contains("MATERIAL_TYPE") && SelectedService.Row["MATERIAL_TYPE"] != DBNull.Value &&
                                Convert.ToInt16(SelectedService.Row["MATERIAL_TYPE"]) != 0)
                            {
                                IsConsumable = false;
                            }
                            else
                            {
                                IsConsumable = true;
                            }
                        }
                        else if (SelectedServiceType == (int)ServiceType.Investigation)
                        {

                            if (EditService == null && SelectedService.DataView.ToTable().Columns.Contains("PRICE_BY_USER")
                                && SelectedService.Row["PRICE_BY_USER"] != DBNull.Value && Convert.ToInt16(SelectedService.Row["PRICE_BY_USER"]) == 1)
                            {
                                IsApplyPriceByUser = true;
                            }
                            else if (EditService != null && Services.KIIsNotNullAndRowCount() && Services.Columns.Contains("PRICE_BY_USER")
                                && SelectedService.DataView.ToTable().Columns.Contains("INV_MAST_SERVICE_ID")
                                && SelectedService.Row["INV_MAST_SERVICE_ID"] != DBNull.Value && Services.Columns.Contains("PRIMARY_ID"))
                            {
                                var exist = from dr in Services.AsEnumerable()
                                            where dr.RowState != DataRowState.Deleted && dr["PRIMARY_ID"] != DBNull.Value
                                            && Convert.ToInt64(dr["PRIMARY_ID"]) == Convert.ToInt64(SelectedService.Row["INV_MAST_SERVICE_ID"])
                                            && dr["PRICE_BY_USER"] != DBNull.Value && Convert.ToInt16(dr["PRICE_BY_USER"]) == 1
                                            select dr;
                                if (exist.Count() > 0)
                                {
                                    IsApplyPriceByUserEdit = true;
                                    IsApplyPriceByUser = false;
                                }
                                else
                                {
                                    IsApplyPriceByUserEdit = false;
                                    IsApplyPriceByUser = false;
                                }
                            }
                            else
                            {
                                IsApplyPriceByUser = false;
                            }
                        }
                        if (IsFromPharmacyPanel && !IsEditExecuted)
                        {
                            AssignSelectedService(value.Row);
                        }
                        else if (IsFromPharmacyPanel && IsGeneric)
                        {
                            AssignSelectedService(value.Row);
                        }
                        else if (!IsFromPharmacyPanel)
                        {
                            AssignSelectedService(value.Row);
                        }
                        if (selectedServiceType == (int)ServiceType.Cafeteria)
                        {
                            SelectedItemServiceType = (int)ServiceType.Cafeteria;
                        }
                    }
                    if (!isTaskBilllingEbabled)//Speed Improve
                        EnableControl();
                    OnPropertyChanged("SelectedService");
                }
                catch (Exception)
                {
                    throw;
                    //ExceptionHandler.WriteErrorLog(ex);
                }
                finally
                {
                    isMultipleCPTChangeBlock = 0;//Speed Improve
                }
            }
        }
        public DataTable AdvanceRetainer { get; set; }
        /// <summary>
        /// ServiceName property
        /// </summary>
        private string serviceName;
        public string ServiceName
        {
            get { return serviceName; }
            set
            {
                if (!IsServiceAdded)
                {
                    serviceName = value;
                    if (value == "%" && Services != null)
                    {
                        Services.DefaultView.Sort = "NAME ASC";
                    }
                    OnPropertyChanged("ServiceName");
                }
            }
        }

        /// <summary>
        /// ServiceGeneric property
        /// </summary>
        private string serviceGenirc;
        public string ServiceGenirc
        {
            get { return serviceGenirc; }
            set
            {
                serviceGenirc = value;
                OnPropertyChanged("ServiceGenirc");
            }
        }
        /// <summary>
        /// SelectedCPTCodeValue propety
        /// </summary>
        private string selectedCPTCodeValue;
        public string SelectedCPTCodeValue
        {
            get
            {
                return selectedCPTCodeValue;
            }
            set
            {
                selectedCPTCodeValue = value;
                OnPropertyChanged("SelectedCPTCodeValue");
            }
        }
        /// <summary>
        /// IsUSSettingEnable property
        /// </summary>
        private bool isUSSettingEnable;
        public bool IsUSSettingEnable
        {
            get
            {
                return isUSSettingEnable;
            }
            set
            {
                isUSSettingEnable = value;
                OnPropertyChanged("IsUSSettingEnable");
            }
        }
        /// <summary>
        /// SelectedCPTCode property
        /// </summary>
        private DataRowView selectedCPTCode;
        public DataRowView SelectedCPTCode
        {
            get
            {
                return selectedCPTCode;
            }
            set
            {
                selectedCPTCode = value;
                OnPropertyChanged("SelectedCPTCode");
                if (!fromEMR && EditService == null && (SelectedService != null || value != null) && isMultipleCPTChangeBlock != 2)
                {
                    isMultipleCPTChangeBlock = isMultipleCPTChangeBlock == 1 ? 2 : 0;//Speed Improve
                    string servFilter = string.Empty;
                    if (SelectedService != null && BillData.Tables["INV_PAT_BILLING_TEMP"].KIIsNotNullAndRowCount() &&
                        SelectedService.Row.Table.Columns.Contains("PRIMARY_ID") && SelectedService.Row["PRIMARY_ID"] != DBNull.Value)
                    {
                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INV_MAST_SERVICE_ID"] = Convert.ToInt64(SelectedService.Row["PRIMARY_ID"]);
                    }
                    else if (SelectedCPTCode != null && BillData.Tables["INV_PAT_BILLING_TEMP"].KIIsNotNullAndRowCount() &&
                        SelectedCPTCode.Row.Table.Columns.Contains("PRIMARY_ID") && SelectedCPTCode.Row["PRIMARY_ID"] != DBNull.Value)
                    {
                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INV_MAST_SERVICE_ID"] = Convert.ToInt64(SelectedCPTCode.Row["PRIMARY_ID"]);
                    }

                    if (SelectedService != null && SelectedCPTCode != null && Convert.ToString(SelectedService.Row["CPT_CODE"]) == Convert.ToString(SelectedCPTCode.Row["CPT_CODE"]))//Speed Improve
                    {//Speed Improve

                    }//Speed Improve
                    else if (dsServiceData != null && SelectedCPTCode != null && dsServiceData.Tables["INV_MAST_SERVICE"].KIIsNotNullAndRowCount())
                    {
                        DataRow[] dr = null;
                        if (SelectedService != null && SelectedService.Row.Table.Columns.Contains("PRIMARY_ID") && SelectedService.Row["PRIMARY_ID"] != DBNull.Value)
                        {
                            if (Convert.ToString(SelectedService["CPT_CODE"]) != Convert.ToString(SelectedCPTCode["CPT_CODE"]))
                            {
                                SelectedService = SelectedCPTCode;//Speed Improve
                                ServiceName = Convert.ToString(SelectedService["NAME"]);
                            }
                            //////dr = dsServiceData.Tables["INV_MAST_SERVICE"].Select("CPT_CODE='" + SelectedCPTCode["CPT_CODE"] + "'" + "AND PRIMARY_ID='" + SelectedService["PRIMARY_ID"] + "'");
                            //////if (dr != null && dr.Length > 0 && (SelectedService == null || (SelectedService != null && SelectedService.Row.Table.KIIsNotNullAndRowCount() &&
                            //////  Convert.ToString(SelectedService.Row["CPT_CODE"]) != Convert.ToString(dr[0]["CPT_CODE"]))))
                            //////{
                            //////    SelectedService = dsServiceData.Tables["INV_MAST_SERVICE"].DefaultView[dsServiceData.Tables["INV_MAST_SERVICE"].Rows.IndexOf(dr[0])];
                            //////    ServiceName = Convert.ToString(SelectedService["NAME"]);
                            //////}
                            //////else if (SelectedCPTCode.Row.Table.Columns.Contains("PRIMARY_ID") && SelectedCPTCode.Row["PRIMARY_ID"] != DBNull.Value)
                            //////{
                            //////    dr = dsServiceData.Tables["INV_MAST_SERVICE"].Select("CPT_CODE='" + SelectedCPTCode["CPT_CODE"] + "'" + "AND PRIMARY_ID='" + SelectedCPTCode["PRIMARY_ID"] + "'");
                            //////    if (dr != null && dr.Length > 0 && (SelectedService == null || (SelectedService != null && SelectedService.Row.Table.KIIsNotNullAndRowCount() &&
                            //////      Convert.ToString(SelectedService.Row["CPT_CODE"]) != Convert.ToString(dr[0]["CPT_CODE"]))))
                            //////    {
                            //////        dsServiceData.Tables["INV_MAST_SERVICE"].DefaultView.RowFilter = string.Empty;
                            //////        SelectedService = dsServiceData.Tables["INV_MAST_SERVICE"].DefaultView[dsServiceData.Tables["INV_MAST_SERVICE"].Rows.IndexOf(dr[0])];
                            //////        ServiceName = Convert.ToString(SelectedService["NAME"]);
                            //////    }
                            //////}
                        }
                        else if (SelectedCPTCode.Row.Table.Columns.Contains("PRIMARY_ID") && SelectedCPTCode.Row["PRIMARY_ID"] != DBNull.Value)
                        {
                            SelectedService = SelectedCPTCode;
                            ServiceName = Convert.ToString(SelectedService["NAME"]);
                            ////////dr = dsServiceData.Tables["INV_MAST_SERVICE"].Select("CPT_CODE='" + SelectedCPTCode["CPT_CODE"] + "'" + "AND PRIMARY_ID='" + SelectedCPTCode["PRIMARY_ID"] + "'");
                            ////////if (dr != null && dr.Length > 0 && (SelectedService == null || (SelectedService != null && SelectedService.Row.Table.KIIsNotNullAndRowCount() &&
                            ////////  Convert.ToString(SelectedService.Row["CPT_CODE"]) != Convert.ToString(dr[0]["CPT_CODE"]))))
                            ////////{
                            ////////    dsServiceData.Tables["INV_MAST_SERVICE"].DefaultView.RowFilter = string.Empty;
                            ////////    SelectedService = dsServiceData.Tables["INV_MAST_SERVICE"].DefaultView[dsServiceData.Tables["INV_MAST_SERVICE"].Rows.IndexOf(dr[0])];
                            ////////    ServiceName = Convert.ToString(SelectedService["NAME"]);
                            ////////}
                        }
                    }
                }
            }
        }


        /// <summary>
        /// Quantity property
        /// </summary>
        private decimal quantity = 1;
        public decimal Quantity
        {
            get
            {
                return quantity;
            }
            set
            {
                quantity = value;
                OnPropertyChanged("Quantity");
                if (Quantity == 00)
                {
                    Quantity = 1;
                }
            }
        }
        //jubilee
        public string LocationType { get; set; }

        public bool isERCredit = false;

        private bool isEmergencyEncounter;
        public bool IsEmergencyEncounter
        {
            get
            {
                return isEmergencyEncounter;
            }
            set
            {
                isEmergencyEncounter = value;
                OnPropertyChanged("IsEmergencyEncounter");
            }
        }

        private bool isHandOverEncounter;
        public bool IsHandOverEncounter
        {
            get
            {
                return isHandOverEncounter;
            }
            set
            {
                isHandOverEncounter = value;
                OnPropertyChanged("IsHandOverEncounter");
            }
        }

        private string notes;
        public string Notes
        {
            get
            {
                return notes;
            }
            set
            {
                notes = value;
                OnPropertyChanged("Notes");
            }
        }
        /// <summary>
        /// IsDeferredPayment property
        /// </summary>
        private bool isDeferredPayment;
        public bool IsDeferredPayment
        {
            get
            {
                return isDeferredPayment;
            }
            set
            {
                isDeferredPayment = value;
                OnPropertyChanged("IsDeferredPayment");
            }
        }
        /// <summary>
        /// TotalDeferredBillAmount property
        /// </summary>
        private decimal totalDeferredBillAmount;
        public decimal TotalDeferredBillAmount
        {
            get
            {
                return totalDeferredBillAmount;
            }
            set
            {
                totalDeferredBillAmount = value;
                OnPropertyChanged("TotalDeferredBillAmount");
            }
        }

        /// <summary>
        /// PharamacyUnitSales property
        /// </summary>
        private DataRowView selectedPharamacyUnitSales;
        public DataRowView SelectedPharamacyUnitSales
        {
            get
            {
                return selectedPharamacyUnitSales;
            }
            set
            {
                selectedPharamacyUnitSales = value;
                OnPropertyChanged("SelectedPharamacyUnitSales");
            }
        }

        long selectedPharamacyUnitSalesValue = 0;
        public long SelectedPharamacyUnitSalesValue
        {
            get
            {
                return selectedPharamacyUnitSalesValue;
            }
            set
            {
                selectedPharamacyUnitSalesValue = value;
                OnPropertyChanged("SelectedPharamacyUnitSalesValue");
            }
        }

        public DataRow Service
        {
            get;
            set;
        }

        bool isQtyEditable;
        public bool IsQtyEditable
        {
            get { return isQtyEditable; }
            set
            {
                isQtyEditable = value;
                OnPropertyChanged("IsQtyEditable");
            }
        }

        public DataTable ServiceBaseCharge { get; set; }

        private long selectedPatientFinEncounterID;
        public long SelectedPatientFinEncounterID
        {
            get
            {
                return selectedPatientFinEncounterID;
            }
            set
            {
                selectedPatientFinEncounterID = value;
                OnPropertyChanged("SelectedPatientFinEncounterID");
                //if (SelectedPatientFinEncounterID == 0)//Multiple episode selection  ----- For ER patient PatFinEncounterID is '0'
                //{
                //    SetInitalData_EMRCPOE();
                //}
            }
        }

        private long selectedPatFinEncounterIDFromPHModule;
        public long SelectedPatFinEncounterIDFromPHModule
        {
            get
            {
                return selectedPatFinEncounterIDFromPHModule;
            }
            set
            {
                selectedPatFinEncounterIDFromPHModule = value;
                OnPropertyChanged("SelectedPatFinEncounterIDFromPHModule");
            }
        }

        private long selectedPatientFinEncounterIDActive;
        public long SelectedPatientFinEncounterIDActive
        {
            get
            {
                return selectedPatientFinEncounterIDActive;
            }
            set
            {
                selectedPatientFinEncounterIDActive = value;
                OnPropertyChanged("SelectedPatientFinEncounterIDActive");
            }
        }

        private long closedPatientFinEncounterID = 0;
        public long ClosedPatientFinEncounterID
        {
            get
            {
                return closedPatientFinEncounterID;
            }
            set
            {
                closedPatientFinEncounterID = value;
                OnPropertyChanged("ClosedPatientFinEncounterID");
            }
        }

        private long closedPatientFinEpisodeID = 0;
        public long ClosedPatientFinEpisodeID
        {
            get
            {
                return closedPatientFinEpisodeID;
            }
            set
            {
                closedPatientFinEpisodeID = value;
                OnPropertyChanged("ClosedPatientFinEpisodeID");
            }
        }


        private long erPatientFinEncounterID = 0;
        public long ERPatientFinEncounterID
        {
            get
            {
                return erPatientFinEncounterID;
            }
            set
            {
                erPatientFinEncounterID = value;
                OnPropertyChanged("ERPatientFinEncounterID");
            }
        }

        private long selectedPatientFinEpisodeID;
        public long SelectedPatientFinEpisodeID
        {
            get
            {
                return selectedPatientFinEpisodeID;
            }
            set
            {
                selectedPatientFinEpisodeID = value;
                OnPropertyChanged("SelectedPatientFinEpisodeID");
                //if (SelectedPatientFinEncounterID == 0)//Multiple episode selection  ----- For ER patient PatFinEncounterID is '0'
                //{
                //    SetInitalData_EMRCPOE();
                //}
            }
        }

        DataTable batchOrUnit;
        public DataTable BatchOrUnit
        {
            get
            { return batchOrUnit; }
            set
            {
                batchOrUnit = value;
                OnPropertyChanged("BatchOrUnit");
                if (BatchOrUnit != null && BatchOrUnit.Rows.Count > 0)
                {
                    if (!(BatchOrUnit.Columns.Contains("NEAREXPIRY")))
                    {
                        BatchOrUnit.Columns.Add("NEAREXPIRY", typeof(int));
                    }
                    //DataTable dtValues = CommonData.GetDefaultSettings(0, "PHARMACY_BILLING_EXPIRY_PERIOD");
                    //if (dtValues != null && dtValues.Rows.Count > 0)
                    if (DefaultSettings.Values.PHARMACY_BILLING_EXPIRY_PERIOD >= 0)
                    {
                        foreach (DataRow drRow in BatchOrUnit.Rows)
                        {
                            //if (Convert.ToDateTime(drRow["EXPDATE"]) < DateTime.Now.AddDays(Convert.ToInt32(dtValues.Rows[0]["VALUE"])))
                            if (Convert.ToDateTime(drRow["EXPDATE"]) < DateTime.Now.AddDays(DefaultSettings.Values.PHARMACY_BILLING_EXPIRY_PERIOD))
                            {
                                drRow["NEAREXPIRY"] = 1;
                            }
                        }
                    }
                }
            }
        }

        public DataTable SelectedBaseCharge { get; set; }
        /// <summary>
        /// SelectedVisitMode property
        /// </summary>
        public VisitMode SelectedVisitMode
        {
            get;
            set;
        }

        private int selectedVisitModeNew;
        public int SelectedVisitModeNew
        {
            get
            {
                return selectedVisitModeNew;
            }
            set
            {
                selectedVisitModeNew = value;
                OnPropertyChanged("SelectedVisitModeNew");
                SelectedVisitMode = SelectedVisitModeNew == (int)VisitMode.OPCASH ? VisitMode.OPCASH : SelectedVisitModeNew == (int)VisitMode.OPCREDIT ? VisitMode.OPCREDIT
                    : SelectedVisitModeNew == (int)VisitMode.IP ? VisitMode.IP : VisitMode.OPCASH;
                VisitModeType = (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE") &&
                                SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value
                                && (Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.OPCASH
                                || Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.OPCREDIT)) ? "OP"
                                : (dtPatientVisit == null || dtPatientVisit.Rows.Count == 0
                                || (Convert.ToInt16(dtPatientVisit.Rows[0]["VISIT_TYPE"]) == (int)VisitMode.OPCASH
                                || Convert.ToInt16(dtPatientVisit.Rows[0]["VISIT_TYPE"]) == (int)VisitMode.OPCREDIT)) ? "OP" : "IP";
                if (SelectedSchemeValue != long.MinValue)
                {
                    this.IsValidService(); //to check manual exists 
                    if (SelectedServiceType == (int)ServiceType.Investigation || SelectedServiceType == (int)ServiceType.Pharmacy ||
                        SelectedServiceType == (int)ServiceType.Cafeteria)
                    {
                        isMultipleServiceChangeBlock = 3;//Speed Improve
                        this.ClearService();
                        isMultipleServiceChangeBlock = 0; //Speed Improve
                        this.ReChangeChargeDetails();
                        Service = null;
                    }
                }
                if (SelectedVisitModeNew == 0)
                {
                    IsAdjustmentEnable = true;
                }
                else
                {
                    IsAdjustmentEnable = false;
                }
                if (SelectedVisitModeNew == 1 && IsFromPharmacyPanel)
                {
                    //ERxVisibility = Visibility.Visible;
                    PrescriptionModeIndex = 0;
                }
                else
                {
                    // ERxVisibility = Visibility.Collapsed;
                }
                if (isEpisodePopUpSelected != true)
                {
                    if (IsFromPharmacyPanel &&
                        (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE")
                        && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value
                        && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.IP) || (SelectedVisitModeNew == 0 && SelectedProvider != null))
                    {
                        ERxVisibility = Visibility.Collapsed;
                    }
                    else if (IsFromPharmacyPanel && (SelectedProvider == null || (SelectedEncounterDetails != null &&
                        SelectedEncounterDetails.Row.Table.Columns.Contains("IS_INSURANCE") &&
                        SelectedEncounterDetails.Row["IS_INSURANCE"] != DBNull.Value &&
                        Convert.ToInt16(SelectedEncounterDetails.Row["IS_INSURANCE"]) == 1)))//25256 bug id ganesh
                    {
                        ERxVisibility = Visibility.Visible;
                    }
                    else
                    {
                        ERxVisibility = Visibility.Collapsed;
                    }
                    if (isNormalTopUp) //bug id 39242
                    {
                        if (IsFromPharmacyPanel && (Convert.ToInt16(SelectedVisitModeNew) == (int)VisitMode.OPCREDIT || Convert.ToInt16(SelectedVisitModeNew) == (int)VisitMode.OPCASH) && IS_TOPUP_REQUIRED)
                        {
                            IS_TOPUP_VISIBILE = true;
                        }
                        else
                        {
                            IS_TOPUP_VISIBILE = false;
                        }
                    }
                    if (IsFromPharmacyPanel && Convert.ToInt16(SelectedVisitModeNew) != (int)VisitMode.IP)
                    {
                        EnableVerificationSettingBased = false;
                    }
                    else if (IsFromPharmacyPanel && Convert.ToInt16(SelectedVisitModeNew) == (int)VisitMode.IP)
                    {
                        if (DefaultSettings.Values.IS_VERIFICATION_REQUIRED && IsFromPharmacyPanel)
                        {
                            EnableVerificationSettingBased = true;
                        }
                    }
                    if (IsFromPharmacyPanel && SelectedEncounterDetails != null &&
                        SelectedEncounterDetails.Row.Table.Columns.Contains("CLAIM_FORM_NO") &&
                        SelectedEncounterDetails.Row["CLAIM_FORM_NO"] != DBNull.Value)
                    {
                        ClaimFormNo = SelectedEncounterDetails.Row["CLAIM_FORM_NO"].ToString();
                    }
                }

                //else if (SelectedProvider == null && SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE")
                //    && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value
                //    && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) != (int)VisitMode.IP)
                //{
                //    ERxVisibility = Visibility.Visible;
                //}
                if (SelectedVisitModeNew == (int)VisitMode.IP
                    || (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE") && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.IP) && SelectedVisitModeNew == (int)VisitMode.OPCASH)
                {
                    IsExpiredVisibile = false;
                }
                else
                {
                    IsExpiredVisibile = true;
                }
                if ((SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE")
                      && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value
                      && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.OPCASH)
                      || SelectedVisitMode == (int)VisitMode.OPCASH)
                {
                    CalculateTotalAdjustment();
                }
                else
                {
                    TotalAdjustment = 0;
                }
            }
        }


        public DataTable Scheme
        {
            get { return (DataTable)GetValue(SchemeProperty); }
            set { SetValue(SchemeProperty, value); }
        }

        // Using a DependencyProperty as the backing store for Scheme.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty SchemeProperty =
            DependencyProperty.Register("Scheme", typeof(DataTable), typeof(UIServiceDelivery), new UIPropertyMetadata(null));//, OnSchemeSelectionChanged



        public DataTable SchemeAll
        {
            get { return (DataTable)GetValue(SchemeAllProperty); }
            set { SetValue(SchemeAllProperty, value); }
        }

        // Using a DependencyProperty as the backing store for SchemeAll.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty SchemeAllProperty =
            DependencyProperty.Register("SchemeAll", typeof(DataTable), typeof(UIServiceDelivery), new UIPropertyMetadata(null));



        bool IsFromEncounterSelectectionChange = false;
        private void OnSchemeSelectionChanged(long? patentFinEncounterID)
        {
            if (IsFromEncounterSelectectionChange == false) //Speed Improve
            {
                DataRow[] drScheme = null;
                if (selectedServiceType == (int)ServiceType.Cafeteria && IsPatient == false)
                {
                    SetDefaultScheme();
                    drScheme = Scheme != null ? Scheme.Select("NAME IS NOT NULL") : null;
                }
                if (Scheme != null)
                {
                    if (patentFinEncounterID != null)
                    {
                        if (patentFinEncounterID == 0 && ClosedPatientFinEncounterID > 0)//if encounter closed, based on episode on episode load scheme-for getting credit facility for billing pending order of previous day
                        {
                            patentFinEncounterID = ClosedPatientFinEncounterID;
                        }
                        if (SchemeAll != null && (IsClosedEncounterSelected || IsIPEncounterSelected) && (Scheme.AsEnumerable().Where(x => x["VALID_TO"] == DBNull.Value || (x["VALID_TO"] != DBNull.Value && Convert.ToDateTime(x["VALID_TO"]) > EncounterEndDate))
                            .Select(x => x)).Count() > 0)
                        {
                            Scheme = SchemeAll.AsEnumerable().Where(x => x["VALID_TO"] == DBNull.Value || (x["VALID_TO"] != DBNull.Value && Convert.ToDateTime(x["VALID_TO"]) > EncounterEndDate))
                               .Select(x => x).CopyToDataTable();
                        }
                        else if ((Scheme.AsEnumerable().Where(x => x["VALID_TO"] == DBNull.Value || (x["VALID_TO"] != DBNull.Value && Convert.ToDateTime(x["VALID_TO"]) > DateTime.Now))
                            .Select(x => x)).Count() > 0)
                        {
                            Scheme = Scheme.AsEnumerable().Where(x => x["VALID_TO"] == DBNull.Value || (x["VALID_TO"] != DBNull.Value && Convert.ToDateTime(x["VALID_TO"]) > DateTime.Now))
                                .Select(x => x).CopyToDataTable();
                        }
                        else
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                   "Scheme details are incorrect", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            return;
                        }
                        if ((IsClosedEncounterSelected || IsIPEncounterSelected) && SelectedEncounterDetails != null)
                        {
                            GetPatientFinEncounter(Convert.ToInt64(SelectedEncounterDetails["PAT_FIN_ENCOUNTER_ID"]));
                            if (dtPatientEncounter.KIIsNotNullAndRowCount())
                            {
                                drScheme = Scheme.Select("INCO_MAST_SCHEME_ID=" + Convert.ToInt64(dtPatientEncounter.Rows[0]["INCO_MAST_SCHEME_ID"]));
                                INCO_MAST_SCHEME_ID = Convert.ToInt64(dtPatientEncounter.Rows[0]["INCO_MAST_SCHEME_ID"] != DBNull.Value ? dtPatientEncounter.Rows[0]["INCO_MAST_SCHEME_ID"] : 0);
                            }
                            if (drScheme == null || drScheme.Length == 0)
                            {
                                drScheme = Scheme.Select("INCO_MAST_SCHEME_ID=" + CommonData.DefaultScheme);
                            }
                        }
                        else
                        {
                            GetPatientFinEncounter(patentFinEncounterID);
                            if (dtPatientEncounter.KIIsNotNullAndRowCount())
                            {
                                drScheme = Scheme.Select("INCO_MAST_SCHEME_ID=" + Convert.ToInt64(dtPatientEncounter.Rows[0]["INCO_MAST_SCHEME_ID"]));
                                INCO_MAST_SCHEME_ID = Convert.ToInt64(dtPatientEncounter.Rows[0]["INCO_MAST_SCHEME_ID"] != DBNull.Value ? dtPatientEncounter.Rows[0]["INCO_MAST_SCHEME_ID"] : 0);
                            }
                            if (drScheme == null || drScheme.Length == 0)
                            {
                                drScheme = Scheme.Select("INCO_MAST_SCHEME_ID=" + CommonData.DefaultScheme);
                            }
                        }
                    }
                    else if (InternalExternalDetails.KIIsNotNullAndRowCount() && InternalExternalDetails.Rows[0]["INCO_PATIENT_SCHEME_ID"] != DBNull.Value)
                    {
                        drScheme = Scheme.Select("INCO_PATIENT_SCHEME_ID=" + Convert.ToInt64(InternalExternalDetails.Rows[0]["INCO_PATIENT_SCHEME_ID"]));
                    }

                    if (drScheme != null && drScheme.Length > 0)
                    {
                        //-----
                        DataTable dtcopay = new DataTable();
                        var result = from table in Scheme.AsEnumerable() where Convert.ToInt64(table["INCO_MAST_SCHEME_ID"]) == Convert.ToInt64(INCO_MAST_SCHEME_ID) select table;
                        // var result1 = from table in Scheme.AsEnumerable() where table.Field<int>("INCO_MAST_SCHEME_ID") == INCO_MAST_SCHEME_ID select table.Field<int>("INCO_DTLS_CONTRACT_CLASS_ID");
                        if (result.Count() > 0)
                        {
                            dtcopay = result.CopyToDataTable();
                            INCO_DTLS_CONTRACT_CLASS_ID = Convert.ToInt64(dtcopay.Rows[0]["INCO_DTLS_CONTRACT_CLASS_ID"]);
                            INCO_MAST_CONTRACT_ID = Convert.ToInt64(dtcopay.Rows[0]["INCO_MAST_CONTRACT_ID"]);
                            if (dtcopay.Rows[0]["ISCOPAY_DED_FIXED"] != DBNull.Value &&
                                Convert.ToBoolean(dtcopay.Rows[0]["ISCOPAY_DED_FIXED"]) == false && drScheme[0]["INCO_MAST_SCHEME_ID"] != DBNull.Value &&
                                Convert.ToInt64(drScheme[0]["INCO_MAST_SCHEME_ID"]) != Convert.ToInt64(CommonData.DefaultScheme))
                            {
                                IsVariableDeductableCopay = true;
                            }
                            else
                            {

                                if (drScheme[0]["INCO_MAST_SCHEME_ID"] != DBNull.Value &&
                                    Convert.ToInt64(drScheme[0]["INCO_MAST_SCHEME_ID"]) != Convert.ToInt64(CommonData.DefaultScheme) &&
                                    DefaultSettings.Values.IS_DAE_SETTING_APPLICABLE && CommonData.SelectedModule == Module.Billing)
                                //CommonData.GetDefaultSettings("IS_DAE_SETTING_APPLICABLE") == "1" 
                                {
                                    IsVariableDeductableCopay = true;
                                }
                                else
                                {
                                    IsVariableDeductableCopay = false;
                                }
                            }
                        }
                        //-------
                        if (drScheme[0].Table.Columns.Contains("ISCLAIM_FORM_APPLICABLE") && drScheme[0]["ISCLAIM_FORM_APPLICABLE"] != DBNull.Value && Convert.ToInt16(drScheme[0]["ISCLAIM_FORM_APPLICABLE"]) != 0
                                && Convert.ToInt16(drScheme[0]["ISCLAIM_FORM_APPLICABLE"]) == 1)
                        {
                            IsClaimApplicable = true;
                        }
                        else
                        {
                            IsClaimApplicable = false;
                        }
                        if (selectedServiceType == (int)ServiceType.Cafeteria && IsPatient == false)
                        {
                            SelectedSchemeValue = GetIncoDtlsSchemeID(Scheme, drScheme[0]["INCO_MAST_SCHEME_ID"] != DBNull.Value ? Convert.ToInt64(drScheme[0]["INCO_MAST_SCHEME_ID"]) : 0);
                            SelectedMastSchemeValue = drScheme[0]["INCO_MAST_SCHEME_ID"] != DBNull.Value ? Convert.ToInt64(drScheme[0]["INCO_MAST_SCHEME_ID"]) : 0;
                            SelectedContract = (Scheme.Columns.Contains("NAME") && drScheme[0]["NAME"] != DBNull.Value) ? Convert.ToString(drScheme[0]["NAME"]) : "";
                            SchemeMemNo = (Scheme.Columns.Contains("MEMBERSHIP_NO") && drScheme[0]["MEMBERSHIP_NO"] != DBNull.Value) ? Convert.ToString(drScheme[0]["MEMBERSHIP_NO"]) : "";
                            SchemeExpDate = drScheme[0]["VALID_TO"] != DBNull.Value ? Convert.ToDateTime(drScheme[0]["VALID_TO"]).ToString("dd-MMM-yyyy") : "";
                        }
                        else
                        {
                            SelectedSchemeValue = GetIncoDtlsSchemeID(Scheme, drScheme[0]["INCO_MAST_SCHEME_ID"] != DBNull.Value ? Convert.ToInt64(drScheme[0]["INCO_MAST_SCHEME_ID"]) : 0);
                            SelectedMastSchemeValue = drScheme[0]["INCO_MAST_SCHEME_ID"] != DBNull.Value ? Convert.ToInt64(drScheme[0]["INCO_MAST_SCHEME_ID"]) : 0;
                            SelectedContract = (Scheme.Columns.Contains("CONTRACT_NAME") && drScheme[0]["CONTRACT_NAME"] != DBNull.Value) ? Convert.ToString(drScheme[0]["CONTRACT_NAME"]) : "";
                            SchemeMemNo = (Scheme.Columns.Contains("MEMBERSHIP_NO") && drScheme[0]["MEMBERSHIP_NO"] != DBNull.Value) ? Convert.ToString(drScheme[0]["MEMBERSHIP_NO"]) : "";
                            SchemeExpDate = drScheme[0]["VALID_TO"] != DBNull.Value ? Convert.ToDateTime(drScheme[0]["VALID_TO"]).ToString("dd-MMM-yyyy") : "";
                        }
                        if (BillData == null || BillData.Tables["INV_PAT_BILLING"] == null || BillData.Tables["INV_PAT_BILLING"].Rows.Count == 0)
                        //(SelectedEMROrder == null && ) Bug ID-21357
                        {
                            if (selectedServiceType == (int)ServiceType.Cafeteria && IsPatient == false && IsEmployeeBilling == false)
                            {
                                SetDefaultVisitModes();
                            }
                            else if (selectedServiceType != (int)ServiceType.Cafeteria || !IsPatient)
                            {
                                GetPatientVisit();
                                if (isEncounterPopUpSelected)
                                {
                                    DtVisitMode = objUICommonMethods.SetVisitModeNew(SelectedEncounterDetails, drScheme[0]);
                                }
                                else
                                {
                                    DtVisitMode = objUICommonMethods.SetVisitMode(dtPatientVisit, drScheme[0]);
                                }
                                if (DtVisitMode.KIIsNotNullAndRowCount())
                                {
                                    SelectedVisitMode = DtVisitMode.Rows[0]["ISDEFAULT"] != DBNull.Value ? (VisitMode)DtVisitMode.Rows[0]["ISDEFAULT"] : VisitMode.OPCREDIT;
                                    if (DtVisitMode.Select("KEY=" + (int)SelectedVisitMode).Length > 0)
                                    {
                                        SelectedVisitModeNew = (int)SelectedVisitMode;
                                    }
                                    else
                                    {
                                        SelectedVisitModeNew = DtVisitMode.Rows[0]["KEY"] != DBNull.Value ? Convert.ToInt16(DtVisitMode.Rows[0]["KEY"]) : -1;
                                    }
                                    isERCredit = IsEmergencyEncounter && DtVisitMode.KIIsNotNullAndRowCount() && DtVisitMode.Rows[0]["ISERCREDIT_ELIGIBLE"] != DBNull.Value
                                                              && Convert.ToInt16(DtVisitMode.Rows[0]["ISERCREDIT_ELIGIBLE"]) == 1 ? true : false;
                                }
                                VisitModeType = (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE") &&
                                                SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value
                                                && (Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.OPCASH
                                                || Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.OPCREDIT)) ? "OP"
                                                : (dtPatientVisit == null || dtPatientVisit.Rows.Count == 0
                                                || (Convert.ToInt16(dtPatientVisit.Rows[0]["VISIT_TYPE"]) == (int)VisitMode.OPCASH
                                                || Convert.ToInt16(dtPatientVisit.Rows[0]["VISIT_TYPE"]) == (int)VisitMode.OPCREDIT)) ? "OP" : "IP";
                                /// Change for  IP Closed encounter Billing, Benson , prime OnSite Change
                                if (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE")
                                    && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value
                                     && SelectedEncounterDetails.Row["ENCOUNTER_STATUS"] != DBNull.Value
                                    && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == 2
                                    && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_STATUS"]) == 0)
                                {
                                    VisitModeType = "IP";
                                }
                                //---
                            }
                            else if (selectedServiceType == (int)ServiceType.Cafeteria && IsPatient)
                            {
                                SetDefaultVisitModes();
                                SelectedVisitModeNew = DtVisitMode.Rows[0]["KEY"] != DBNull.Value ? Convert.ToInt16(DtVisitMode.Rows[0]["KEY"]) : -1;

                                VisitModeType = (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE") &&
                                                 SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value
                                                 && (Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.OPCASH
                                                 || Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.OPCREDIT)) ? "OP"
                                                 : (dtPatientVisit == null || dtPatientVisit.Rows.Count == 0
                                                 || (Convert.ToInt16(dtPatientVisit.Rows[0]["VISIT_TYPE"]) == (int)VisitMode.OPCASH
                                                 || Convert.ToInt16(dtPatientVisit.Rows[0]["VISIT_TYPE"]) == (int)VisitMode.OPCREDIT)) ? "OP" : "IP";
                                /// Change for  IP Closed encounter Billing, Benson , prime OnSite Change
                                if (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE")
                                    && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value
                                     && SelectedEncounterDetails.Row["ENCOUNTER_STATUS"] != DBNull.Value
                                    && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == 2
                                    && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_STATUS"]) == 0)
                                {
                                    VisitModeType = "IP";
                                }
                            }

                        }
                    }
                }
                else // for 3.0 testing
                {
                    if (!IsFromIPAllocation)
                    {
                        if (selectedServiceType == (int)ServiceType.Cafeteria)
                        {
                            if (!IsEmployeeBilling)
                            {
                                SelectedSchemeValue = CommonData.DefaultScheme;
                                SelectedMastSchemeValue = CommonData.DefaultScheme;
                                SetDefaultVisitModes();
                            }

                        }
                        else
                        {
                            SelectedSchemeValue = CommonData.DefaultScheme;
                            SelectedMastSchemeValue = CommonData.DefaultScheme;
                        }
                    }
                }
                LoadSchemeAccountDetails(SelectedMastSchemeValue);
            }
        }

        public void SetDefaultScheme()
        {
            if (selectedServiceType == (int)ServiceType.Cafeteria)
            {
                //#####################################
                MainMasterSettings objInco = new MainMasterSettings();
                DataSet ds = objInco.FetchSchemes(CreateDefaultSchemeCriteria(), 2, -1);
                if (IsEmployeeBilling)
                {
                    //DataSet ds = objInco.FetchSchemes(CreateDefaultSchemeCriteria(), 2, -1);
                    if (ds != null && ds.Tables["INCO_DTLS_SCHEME"] != null && ds.Tables["INCO_DTLS_SCHEME"].Rows.Count > 0)
                    {

                        var varScheme = from dr in ds.Tables["INCO_DTLS_SCHEME"].AsEnumerable()
                                        where dr["MRNO"] == DBNull.Value
                                        select dr;
                        if (varScheme.Count() > 0)
                        {
                            Scheme = varScheme.CopyToDataTable();
                        }
                    }
                   
                }
                else
                {
                    // DataSet ds = objInco.FetchSchemes(CreateDefaultSchemeCriteria(), 2, -1);
                    //ds.Tables["INCO_DTLS_SCHEME"].DefaultView.RowFilter = "INCO_DTLS_SCHEME_ID=" + CommonData.DefaultScheme; // CHANGING IN 3.1 VERSION
                    ds.Tables["INCO_DTLS_SCHEME"].DefaultView.RowFilter = "INCO_MAST_SCHEME_ID=" + CommonData.DefaultScheme;

                    Scheme = ds.Tables["INCO_DTLS_SCHEME"].DefaultView.ToTable();
                }
                //#####################################
                if (Scheme != null)
                {
                    DataRow drScheme = null;
                    drScheme = Scheme.Rows[0];
                    SelectedSchemeValue = GetIncoDtlsSchemeID(Scheme, drScheme["INCO_MAST_SCHEME_ID"] != DBNull.Value ? Convert.ToInt64(drScheme["INCO_MAST_SCHEME_ID"]) : 0);
                    SelectedMastSchemeValue = drScheme["INCO_MAST_SCHEME_ID"] != DBNull.Value ? Convert.ToInt64(drScheme["INCO_MAST_SCHEME_ID"]) : 0;
                    SelectedContract = (Scheme.Columns.Contains("NAME") && drScheme["NAME"] != DBNull.Value) ? Convert.ToString(drScheme["NAME"]) : "";
                    SchemeMemNo = (Scheme.Columns.Contains("MEMBERSHIP_NO") && drScheme["MEMBERSHIP_NO"] != DBNull.Value) ? Convert.ToString(drScheme["MEMBERSHIP_NO"]) : "";
                    SchemeExpDate = drScheme["VALID_TO"] != DBNull.Value ? Convert.ToDateTime(drScheme["VALID_TO"]).ToString("dd-MMM-yyyy") : "";
                }
            }
        }
        private void SetDefaultVisitModes()
        {
            DataTable dtVisit = new DataTable();
            dtVisit.Columns.Add("VISIT_TYPE");
            dtVisit.Columns.Add("TYPE_NAME");
            dtVisit.Columns.Add("KEY");
            dtVisit.Columns.Add("VisitModeID");
            dtVisit.Columns.Add("VisitMode");
            dtVisit.Columns.Add("ISERCREDIT_ELIGIBLE");
            DataRow drNew = null;
            drNew = dtVisit.NewRow();
            drNew["VISIT_TYPE"] = "OP";
            drNew["TYPE_NAME"] = "CASH";
            drNew["KEY"] = (int)VisitMode.OPCASH;
            drNew["VisitModeID"] = (int)VisitMode.OPCASH;
            drNew["VisitMode"] = "CASH";
            drNew["ISERCREDIT_ELIGIBLE"] = "0";
            dtVisit.Rows.Add(drNew);
            DtVisitMode = dtVisit.Copy();
            VisitModeType = "OP";
            if (!IsPatient && SelectedItemServiceType == (int)ServiceType.Cafeteria && IsEmployeeBilling == false)
            {
                SelectedVisitModeNew = 0;
            }
        }
        public DataTable CreateDefaultSchemeCriteria()
        {
            try
            {
                DataTable dtPatIns = new DataTable("SCHEMECRITERIA");
                dtPatIns.Columns.Add("INSURANCE_ID", typeof(long));
                dtPatIns.Columns.Add("COMPANY_ID", typeof(long));
                dtPatIns.Columns.Add("NAME");
                dtPatIns.Columns.Add("ISVALID");
                dtPatIns.Columns.Add("INCO_MAST_SCHEME_ID", typeof(long));
                dtPatIns.Columns.Add("INCO_MAST_SCHEME_IDS", typeof(string));
                dtPatIns.Columns.Add("INCO_DTLS_SCHEME_ID", typeof(long));
                dtPatIns.Columns.Add("VALID_FROM");
                dtPatIns.Columns.Add("VALID_TO");
                dtPatIns.Columns.Add("AGE_FROM");
                dtPatIns.Columns.Add("AGE_FROM_UNIT");
                dtPatIns.Columns.Add("AGE_TO");
                dtPatIns.Columns.Add("AGE_TO_UNIT");
                dtPatIns.Columns.Add("ISGENDER_MALE");
                dtPatIns.Columns.Add("ISGENDER_FEMALE");
                dtPatIns.Columns.Add("ISGENDER_OTHERS");
                dtPatIns.Columns.Add("ISGENDER_UNKNOWN");
                dtPatIns.Columns.Add("ISGENDER_SPECIFIED");
                dtPatIns.Columns.Add("ISAGE_LIMIT_SPECIFIED");
                dtPatIns.Columns.Add("MODE");
                DataRow dr = dtPatIns.NewRow();
                dr["COMPANY_ID"] = DBNull.Value;
                dr["ISVALID"] = (byte)Validity.Valid; //to fetch valid schemes
                dr["ISGENDER_SPECIFIED"] = 0;
                dr["ISAGE_LIMIT_SPECIFIED"] = 0;
                if (IsEmployeeBilling)
                {
                    DataTable dtSetting = CommonData.GetDefaultSettings(0, "EMPLOYEE_SCHEME_ID");
                    if (dtSetting.KIIsNotNullAndRowCount())
                    {
                        dr["INCO_MAST_SCHEME_IDS"] = dtSetting.Rows[0]["VALUE"];
                    }
                    dr["INCO_DTLS_SCHEME_ID"] = DBNull.Value;
                    dr["COMPANY_ID"] = DBNull.Value;
                    dr["MODE"] = 2;
                }
                else
                {
                    dr["INCO_MAST_SCHEME_ID"] = CommonData.DefaultScheme;
                    dr["INCO_DTLS_SCHEME_ID"] = DBNull.Value;

                    dr["COMPANY_ID"] = CommonData.DefaultCompany;
                    dr["MODE"] = DBNull.Value;
                }
                dtPatIns.Rows.Add(dr);
                return dtPatIns;
            }
            catch (Exception)
            {
                throw;
            }
        }
        private void GetPatientFinEncounter(long? patentFinEncounterID)
        {
            DataTable dtCriteria = new DataTable();
            dtCriteria.Columns.Add("PAT_FIN_ENCOUNTER_ID");
            dtCriteria.Columns.Add("MODE");
            dtCriteria.Rows.Add(patentFinEncounterID, 2);
            MainCommon objCommon = new MainCommon();
            dtPatientEncounter = objCommon.SelectFinancialEncounter(dtCriteria);
        }


        private bool isEnableVisitType;
        public bool IsEnableVisitType
        {
            get
            {
                return isEnableVisitType;
            }
            set
            {
                isEnableVisitType = value;
                OnPropertyChanged("IsEnableVisitType");
            }
        }

        private DataTable dtVisitMode;
        public DataTable DtVisitMode
        {
            get
            {
                return dtVisitMode;
            }
            set
            {
                dtVisitMode = value;
                OnPropertyChanged("DtVisitMode");
            }
        }

        private DataSet dsDeductCopay;
        public DataSet DsDeductCopay
        {
            get
            {
                return dsDeductCopay;
            }
            set
            {
                dsDeductCopay = value;
                OnPropertyChanged("DsDeductCopay");
            }
        }

        private long selectedSchemeValue;
        public long SelectedSchemeValue
        {
            get
            {
                return selectedSchemeValue;
            }
            set
            {
                selectedSchemeValue = value;
                OnPropertyChanged("SelectedSchemeValue");
            }
        }

        private long selectedMastSchemeValue = CommonData.DefaultScheme;
        public long SelectedMastSchemeValue
        {
            get
            {
                return selectedMastSchemeValue;
            }
            set
            {
                selectedMastSchemeValue = value;
                OnPropertyChanged("SelectedMastSchemeValue");
            }
        }

        # region Receipt Section
        /// <summary>
        /// 
        /// </summary>
        private DataSet cardBank;
        public DataSet CardBank
        {
            get { return cardBank; }
            set
            {
                cardBank = value;
                OnPropertyChanged("CardBank");
            }
        }
        /// <summary>
        /// 
        /// </summary>
        private bool clearReceipt;
        public bool ClearReceipt
        {
            get { return clearReceipt; }
            set
            {
                clearReceipt = value;
                OnPropertyChanged("ClearReceipt");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool ToBeCollectedExists
        {
            get { return (bool)GetValue(ToBeCollectedExistsProperty); }
            set { SetValue(ToBeCollectedExistsProperty, value); }
        }

        // Using a DependencyProperty as the backing store for ToBeCollectedExists.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty ToBeCollectedExistsProperty =
            DependencyProperty.Register("ToBeCollectedExists", typeof(bool), typeof(UIServiceDelivery), new UIPropertyMetadata(false));

        /// <summary>
        /// 
        /// </summary>
        public DataTable TotalAmountTobeCollected
        {
            get { return (DataTable)GetValue(TotalAmountTobeCollectedProperty); }
            set { SetValue(TotalAmountTobeCollectedProperty, value); }
        }

        // Using a DependencyProperty as the backing store for TotalAmountTobeCollected.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty TotalAmountTobeCollectedProperty =
            DependencyProperty.Register("TotalAmountTobeCollected", typeof(DataTable), typeof(UIServiceDelivery), new PropertyMetadata(null));

        /// <summary>
        /// 
        /// </summary>
        bool isResetTotalFromEMROrder = false;
        public bool IsResetTotalFromEMROrder
        {
            get { return isResetTotalFromEMROrder; }
            set
            {
                isResetTotalFromEMROrder = value;
                if (isResetTotalFromEMROrder)
                {
                    BillData.Tables["INV_BILL_PROFILE_SERVICE"].Rows.Clear();
                    ClearService();
                    CalculateServiceTotal();
                }
                OnPropertyChanged("IsResetTotalFromEMROrder");
            }
        }
        /// <summary>
        /// 
        /// </summary>
        bool isClearReceiptAndResetTobeCollect = false;
        public bool IsClearReceiptAndResetTobeCollect
        {
            get { return isClearReceiptAndResetTobeCollect; }
            set
            {
                isClearReceiptAndResetTobeCollect = value;
                OnPropertyChanged("IsClearReceiptAndResetTobeCollect");
            }
        }

        bool refreshAdvance;
        public bool RefreshAdvance
        {
            get { return refreshAdvance; }
            set
            {
                refreshAdvance = value;
                OnPropertyChanged("RefreshAdvance");
                if (refreshAdvance)
                {
                    FetchAdvanceTotalAmt();
                }
                refreshAdvance = false;
            }
        }
        #endregion


        private string defaultPharmacySubLocationValue;
        public string DefaultPharmacySubLocationValue
        {
            get
            {
                return defaultPharmacySubLocationValue;
            }
            set
            {
                defaultPharmacySubLocationValue = value;
                OnPropertyChanged("DefaultPharmacySubLocationValue");
            }
        }

        private decimal? selectedlabOrSubLocationValue;
        public decimal? SelectedLabOrSubLocationValue
        {
            get
            {
                return selectedlabOrSubLocationValue;
            }
            set
            {
                if (!IsFromPharmacyPanel || (IsFromPharmacyPanel && value != null))
                {
                    if (value == null && DefaultPharmacySubLocationValue != string.Empty
                        && DefaultPharmacySubLocationValue != null && DefaultPharmacySubLocationValue != "" && LabOrSubLocations != null)
                    {
                        DataRow[] drFounds = LabOrSubLocations.Table.Select("NAME='" + DefaultPharmacySubLocationValue.ToString().ToUpper().Trim() + "'");
                        if (drFounds.Length > 0)
                        {
                            SelectedLabOrSubLocationValue = Convert.ToDecimal(drFounds[0]["INCO_MAST_ID"]);
                        }

                    }
                    else
                    {
                        selectedlabOrSubLocationValue = value;
                    }
                    if (value != null && value > 0 && LabOrSubLocations != null)
                    {
                        DataRow dr = LabOrSubLocations.Table.Select("INCO_MAST_ID =" + value).ElementAt(0);
                        SelectedLabOrSubLocationItem = LabOrSubLocations.Table.DefaultView[LabOrSubLocations.Table.Rows.IndexOf(dr)];
                    }
                    if (!IsMultipleTimeSchemeSelectionChangeRequired) //Speed Improve
                    {
                        isMultipleServiceChangeBlock = 3; //Speed Improve
                        this.ClearService();
                        isMultipleServiceChangeBlock = 0; //Speed Improve
                    }
                    BillData.Tables["INV_PAT_BILLING"].Clear();
                    BillData.Tables["INV_PAT_BILLING_TOTAL"].RejectChanges();
                    BillData.Tables["INV_PAT_BILLING_TOTAL"].AcceptChanges();
                    if (value != null || SelectedLabOrSubLocationValue != -1)
                    {
                        FetchAllBatch(selectedlabOrSubLocationValue);
                    }
                }
                OnPropertyChanged("SelectedLabOrSubLocationValue");
            }
        }

        private decimal? _IPVerificationLocation;
        public decimal? IPVerificationLocation
        {
            get
            {
                return _IPVerificationLocation;
            }
            set
            {
                _IPVerificationLocation = value;
                OnPropertyChanged("IPVerificationLocation");
            }
        }


        private decimal? associatedSelectedLabOrSubLocationValue;
        public decimal? AssociatedSelectedLabOrSubLocationValue
        {
            get
            {
                return associatedSelectedLabOrSubLocationValue;
            }
            set
            {
                associatedSelectedLabOrSubLocationValue = value;
                this.ClearService();
                BillData.Tables["INV_PAT_BILLING"].Clear();
                BillData.Tables["INV_PAT_BILLING_TOTAL"].RejectChanges();
                BillData.Tables["INV_PAT_BILLING_TOTAL"].AcceptChanges();
                OnPropertyChanged("AssociatedSelectedLabOrSubLocationValue");
            }
        }



        /// <summary>
        /// UnitSalesConversionApplicable property
        /// </summary>
        private bool unitSalesConversionApplicable = false;
        public bool UnitSalesConversionApplicable
        {
            get
            {
                return unitSalesConversionApplicable;
            }
            set
            {
                unitSalesConversionApplicable = value;
                OnPropertyChanged("UnitSalesConversionApplicable");
            }
        }


        DataSet packageMstDtls;
        public DataSet dsPackageMstDtls
        {
            get
            {
                return packageMstDtls;
            }
            set
            {
                packageMstDtls = value;
                OnPropertyChanged("dsPackageMstDtls");
            }
        }


        public DataRow Medicine { get; set; }
        public DataRow MedicineDetails { get; set; }

        public bool IsDepartmentWiseCopayCalculation = false;

        int selectedBatchOrUnitIndex;
        public int SelectedBatchOrUnitIndex
        {
            get
            {
                return selectedBatchOrUnitIndex;
            }
            set
            {
                selectedBatchOrUnitIndex = value;
                OnPropertyChanged("SelectedBatchOrUnitIndex");
            }
        }

        private long selectedLocationValue;
        public long SelectedLocationValue
        {
            get
            {
                return selectedLocationValue;
            }
            set
            {
                selectedLocationValue = value;
                OnPropertyChanged("SelectedLocationValue");
            }
        }

        /// <summary>
        /// IsValidateService Property
        /// </summary>
        private bool isValidateService = true;
        public bool IsValidateService
        {
            get { return isValidateService; }
            set
            {
                isValidateService = value;
                OnPropertyChanged("IsValidateService");
            }
        }

        public DataRow _FindService { get; set; }
        public DataRow EMRItemSelected { get; set; }

        public DataTable dtBillProfile_Service { get; set; }
        /// <summary>
        /// SelectedLocation Property////This will work assiging INCO_MAST_ID assiging time
        /// </summary>
        private DataRowView selectedLocation;
        public DataRowView SelectedLocation
        {
            get { return selectedLocation; }
            set
            {
                selectedLocation = value;
                OnPropertyChanged("SelectedLocation");
                if (SelectedLocation != null && SelectedLocation.Row["INCO_MAST_ID"] != DBNull.Value)
                {
                    SelectedLocationValue = Convert.ToInt64(SelectedLocation.Row["INCO_MAST_ID"]);
                }
            }
        }
        /// <summary>
        /// 
        /// </summary>
        private DataView location;
        public DataView Location
        {
            get
            {
                return location;
            }
            set
            {
                location = value;
                OnPropertyChanged("Location");
            }
        }

        /// <summary>
        /// SelectedCostCenterValue Property
        /// </summary>
        private long? selectedCostCenterValue;
        public long? SelectedCostCenterValue
        {
            get { return selectedCostCenterValue; }
            set
            {
                selectedCostCenterValue = value;
                OnPropertyChanged("SelectedCostCenterValue");//Implement INotifyPropertyChanged
            }
        }

        /// <summary>
        /// SelectedCostCenter Property
        /// </summary>
        private DataRowView selectedCostCenter;
        public DataRowView SelectedCostCenter
        {
            get { return selectedCostCenter; }
            set
            {
                selectedCostCenter = value;
                OnPropertyChanged("SelectedCostCenter");//Implement INotifyPropertyChanged
                if (SelectedCostCenter != null && SelectedCostCenter.Row["H_ADMIN_DEPT_DEPTID"] != DBNull.Value)
                {
                    SelectedCostCenterValue = Convert.ToInt64(SelectedCostCenter.Row["H_ADMIN_DEPT_DEPTID"]);
                }

            }
        }


        /// <summary>
        /// CostCenter Property
        /// </summary>
        private DataTable costCenter;
        public DataTable CostCenter
        {
            get { return costCenter; }
            set
            {
                costCenter = value;
                OnPropertyChanged("CostCenter");//Implement INotifyPropertyChanged
            }
        }

        bool IsAddedService = false;

        decimal toBeCollected;
        public decimal ToBeCollected
        {
            get
            {
                return toBeCollected;
            }
            set
            {
                toBeCollected = value;
                if (ToBeCollected > 0)
                {
                    if (SelectedVisitModeNew == (int)VisitMode.IP || (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE")
                        && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value
                        && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.IP)
                        && SelectedVisitModeNew != (int)VisitMode.OPCASH)
                    {
                        ToBeCollected = 0;
                    }
                }
                OnPropertyChanged("ToBeCollected");
            }
        }

        decimal totalAdjustment;
        public decimal TotalAdjustment
        {
            get
            {
                return totalAdjustment;
            }
            set
            {
                totalAdjustment = value;
                OnPropertyChanged("TotalAdjustment");
            }
        }

        /// <summary>
        /// IsTapperEnable property
        /// </summary>
        private bool isTapperEnable;
        public bool IsTapperEnable
        {
            get
            {
                return isTapperEnable;
            }
            set
            {
                isTapperEnable = value;
                OnPropertyChanged("IsTapperEnable");
            }
        }

        /// <summary>
        /// IsVerificationEnable property
        /// </summary>
        private bool isVerificationEnable;
        public bool IsVerificationEnable
        {
            get
            {
                return isVerificationEnable;
            }
            set
            {
                isVerificationEnable = value;
                OnPropertyChanged("IsVerificationEnable");
            }
        }

        /// <summary>
        /// IsSaveEnable property
        /// </summary>
        private bool isSaveEnable;
        public bool IsSaveEnable
        {
            get
            {
                return isSaveEnable;
            }
            set
            {
                isSaveEnable = value;
                OnPropertyChanged("IsSaveEnable");
            }
        }

        /// <summary>
        /// IsVerificationCollapse property
        /// </summary>
        private Visibility isVerificationCollapse;
        public Visibility IsVerificationCollapse
        {
            get
            {
                return isVerificationCollapse;
            }
            set
            {
                isVerificationCollapse = value;
                OnPropertyChanged("IsVerificationCollapse");
            }
        }

        /// <summary>
        /// StartDate property
        /// </summary>
        private DateTime startDate = System.DateTime.Now;
        public DateTime StartDate
        {
            get
            {
                return startDate;
            }
            set
            {
                startDate = value;
                OnPropertyChanged("StartDate");
            }
        }

        /// <summary>
        /// StrDuration property
        /// </summary>
        private string strDuration = "1";
        public string StrDuration
        {
            get
            {
                return strDuration;
            }
            set
            {
                strDuration = value;
                OnPropertyChanged("StrDuration");
            }
        }


        /// <summary>
        /// StrUnit property
        /// </summary>
        private string strUnit = "1";
        public string StrUnit
        {
            get
            {
                return strUnit;
            }
            set
            {
                strUnit = value;
                OnPropertyChanged("StrUnit");
            }
        }

        /// <summary>
        /// EnableAddService Property
        /// </summary>
        private bool enableAddService = true;
        public bool EnableAddService
        {
            get
            {
                return enableAddService;
            }
            set
            {
                enableAddService = value;
                OnPropertyChanged("EnableAddService");//Implement INotifyPropertyChanged
            }
        }

        /// <summary>
        /// EncounterDate Property
        /// </summary>
        private DateTime encounterEndDate;
        public DateTime EncounterEndDate
        {
            get { return encounterEndDate; }
            set
            {
                encounterEndDate = value;
                OnPropertyChanged("EncounterEndDate");//Implement INotifyPropertyChanged   
                if ((IsClosedEncounterSelected || IsIPEncounterSelected) && SelectedEncounterDetails != null && SelectedEncounterDetails["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value
                    && !IsFromPharmacyPanel && !IsMultipleTimeSchemeSelectionChangeRequired) //Speed Improve
                {
                    OnSchemeSelectionChanged(Convert.ToInt64(SelectedEncounterDetails["PAT_FIN_ENCOUNTER_ID"]));
                }
            }
        }

        /// <summary>
        /// EncounterStartDate Property
        /// </summary>
        private DateTime encounterStartDate;
        public DateTime EncounterStartDate
        {
            get { return encounterStartDate; }
            set
            {
                encounterStartDate = value;
                OnPropertyChanged("EncounterStartDate");//Implement INotifyPropertyChanged
            }
        }

        private bool _IsAllergicOrder = true;
        public bool IsAllergicOrder
        {
            get
            {
                return _IsAllergicOrder;
            }
            set
            {
                _IsAllergicOrder = value;
                OnPropertyChanged("IsAllergicOrder");
            }
        }

        private DataTable _PHSubLocations;
        public DataTable PHSubLocations
        {
            get
            {
                return _PHSubLocations;
            }
            set
            {
                _PHSubLocations = value;
                OnPropertyChanged("PHSubLocations");
            }
        }

        private DataTable _ServiceMedicine;
        public DataTable ServiceMedicine
        {
            get
            {
                return _ServiceMedicine;
            }
            set
            {
                _ServiceMedicine = value;
                OnPropertyChanged("ServiceMedicine");
            }
        }
        bool IsBlockSelectedPHSubLocationsValueChange = false;
        private decimal? _SelectedPHSubLocationsValue;
        public decimal? SelectedPHSubLocationsValue
        {
            get
            {
                return _SelectedPHSubLocationsValue;
            }
            set
            {
                _SelectedPHSubLocationsValue = value;
                OnPropertyChanged("SelectedPHSubLocationsValue");
                if (IsBlockSelectedPHSubLocationsValueChange == false) //Speed Improve
                {
                    filterMedicineInServices();
                } //Speed Improve
                ConsumptionMessage = false;
            }
        }
        #endregion

        #region Incoming Services


        bool isEnabledLabOrSubLocationValue = false;
        public bool IsEnabledLabOrSubLocationValue
        {
            get
            {
                return isEnabledLabOrSubLocationValue;
            }
            set
            {
                isEnabledLabOrSubLocationValue = value;
                OnPropertyChanged("IsEnabledLabOrSubLocationValue");
            }
        }

        DataView labOrSubLocations;
        public DataView LabOrSubLocations
        {
            get
            {
                return labOrSubLocations;
            }
            set
            {
                labOrSubLocations = value;
                OnPropertyChanged("LabOrSubLocations");
            }
        }

        DataView alllabOrSubLocations;
        public DataView AllLabOrSubLocations
        {
            get
            {
                return alllabOrSubLocations;
            }
            set
            {
                alllabOrSubLocations = value;
                OnPropertyChanged("AllLabOrSubLocations");
            }
        }

        DataView associatedLabOrSubLocations;
        public DataView AssociatedLabOrSubLocations
        {
            get
            {
                return associatedLabOrSubLocations;
            }
            set
            {
                associatedLabOrSubLocations = value;
                OnPropertyChanged("AssociatedLabOrSubLocations");
            }
        }

        DataRowView selectedLabOrSubLocationItem;
        public DataRowView SelectedLabOrSubLocationItem
        {
            get
            {
                return selectedLabOrSubLocationItem;
            }
            set
            {
                selectedLabOrSubLocationItem = value;
                if (value != null)
                {
                    LocationType = string.Empty;
                    if (SelectedServiceType == (int)ServiceType.Pharmacy)//&& IsBlockSelectedItem == false
                    {
                        LocationType = Convert.ToInt32(value["ISPHARMACY"]) == 1 ? "PH" : "STR";
                        //SelectedLabOrSubLocationValue = Convert.ToDecimal(value["INCO_MAST_ID"]);
                        this.LoadMedicines();
                    }
                    if (SelectedServiceType == (int)ServiceType.IncomingService)// (int)ServiceType.IncomingService)
                    {
                        LoadIncomingLabServices();
                    }
                }
                else
                {
                    dsServiceData = null;
                    Services = null;
                }
                OnPropertyChanged("SelectedLabOrSubLocationItem");
            }
        }

        private DataSet scanning;
        public DataSet Scanning
        {
            get
            {
                return scanning;
            }
            set
            {
                scanning = value;
                OnPropertyChanged("Scanning");
            }
        }

        int selectedSubLocationIndex;
        public int SelectedSubLocationIndex
        {
            get
            {
                return selectedSubLocationIndex;
            }
            set
            {
                selectedSubLocationIndex = value;
                OnPropertyChanged("SelectedSubLocationIndex");
            }
        }

        DataRowView selectedRoute;
        public DataRowView SelectedRoute
        {
            get
            {
                return selectedRoute;
            }
            set
            {
                selectedRoute = value;
                OnPropertyChanged("SelectedRoute");
                if (SelectedRoute != null)
                {
                    OnselectedRouteChanged();
                }
            }
        }

        DataRowView selectedDose;
        public DataRowView SelectedDose
        {
            get
            {
                return selectedDose;
            }
            set
            {
                selectedDose = value;
                OnPropertyChanged("SelectedDose");
            }
        }

        /// <summary>
        /// Frequency property
        /// </summary>
        private DataTable frequency;
        public DataTable Frequency
        {
            get { return frequency; }
            set
            {
                frequency = value;
                OnPropertyChanged("Frequency");

            }
        }

        /// <summary>
        /// Frequency property
        /// </summary>
        private DataTable frequencytemp;
        public DataTable FrequencyTemp
        {
            get { return frequencytemp; }
            set
            {
                frequencytemp = value;
                OnPropertyChanged("FrequencyTemp");

            }
        }

        DataRowView selectedFrequency;
        public DataRowView SelectedFrequency
        {
            get
            {
                return selectedFrequency;
            }
            set
            {
                selectedFrequency = value;
                OnPropertyChanged("SelectedFrequency");
                if (SelectedFrequency != null && Convert.ToString(SelectedFrequency["FIELD6"]) == "-2" && !IsVerificationLoaded) //!IsVerificationLoaded for bug id 42294
                {
                    IsHourlyVisible = true;
                }
                else
                {
                    IsHourlyVisible = false;
                }
            }
        }

        // private decimal? selectedFrequencyvalue;
        //public decimal? SelectedFrequencyvalue
        //{
        //    get
        //    {
        //        return selectedFrequencyvalue;
        //    }
        //    set
        //    {
        //        selectedFrequencyvalue = value;
        //        if (value != null)
        //        {
        //            DataRow[] dr = Frequency.Select("EMR_LOOKUP_ID=" + selectedFrequencyvalue);
        //            if (dr.Any())
        //            {
        //                SelectedFrequency = Frequency.DefaultView[Frequency.Rows.IndexOf(dr[0])];
        //            }
        //        }
        //        if (SelectedFrequency != null && SelectedFrequencyvalue == null)
        //        {
        //            SelectedFrequencyvalue = IfNullReturnZero(SelectedFrequency.Row["EMR_LOOKUP_ID"]);
        //        }
        //        OnPropertyChanged("SelectedFrequencyvalue");
        //    }
        //}
        /// <summary>
        /// Duratioin property
        /// </summary>
        private DataTable duratioin;
        public DataTable Duratioin
        {
            get { return duratioin; }
            set
            {
                duratioin = value;
                OnPropertyChanged("Duratioin");

            }
        }

        DataRowView selectedDuratioin;
        public DataRowView SelectedDuratioin
        {
            get
            {
                return selectedDuratioin;
            }
            set
            {
                selectedDuratioin = value;
                OnPropertyChanged("SelectedDuratioin");
            }
        }

        /// <summary>
        /// Duratioin property
        /// </summary>
        private DataTable form;
        public DataTable Form
        {
            get { return form; }
            set
            {
                form = value;
                OnPropertyChanged("Form");

            }
        }

        DataRowView selectedForm;
        public DataRowView SelectedForm
        {
            get
            {
                return selectedForm;
            }
            set
            {
                selectedForm = value;
                OnPropertyChanged("SelectedForm");
            }
        }

        DataRowView selectedAdmnInst;
        public DataRowView SelectedAdmnInst
        {
            get
            {
                return selectedAdmnInst;
            }
            set
            {
                selectedAdmnInst = value;
                OnPropertyChanged("SelectedAdmnInst");
            }
        }



        /// <summary>
        /// Duratioin property
        /// </summary>
        private DataTable generic;
        public DataTable Generic
        {
            get { return generic; }
            set
            {
                generic = value;
                OnPropertyChanged("Generic");
            }
        }
        

        /// <summary>
        /// Duratioin property
        /// </summary>
        private DataTable tempgeneric;
        public DataTable TempGeneric
        {
            get { return tempgeneric; }
            set
            {
                tempgeneric = value;
                OnPropertyChanged("TempGeneric");

            }
        }

        DataRowView selectedGeneric = null;
        public DataRowView SelectedGeneric
        {
            get
            {
                return selectedGeneric;
            }
            set
            {
                selectedGeneric = value;
                if (value != null)
                {
                    dsServiceData.Tables["INV_MAST_SERVICE"].DefaultView.RowFilter = "GENERIC_ID=" + SelectedGeneric["EMR_LOOKUP_ID"];
                    Services = dsServiceData.Tables["INV_MAST_SERVICE"].DefaultView.ToTable();
                }
                else
                {
                    dsServiceData.Tables["INV_MAST_SERVICE"].DefaultView.RowFilter = string.Empty;
                    Services = dsServiceData.Tables["INV_MAST_SERVICE"];
                }
                OnPropertyChanged("SelectedGeneric");
            }
        }

        /// <summary>
        /// Duratioin property
        /// </summary>
        private DataTable urgency;
        public DataTable Urgency
        {
            get { return urgency; }
            set
            {
                urgency = value;
                OnPropertyChanged("Urgency");

            }
        }

        DataRowView selectedUrgency;
        public DataRowView SelectedUrgency
        {
            get
            {
                return selectedUrgency;
            }
            set
            {
                selectedUrgency = value;
                OnPropertyChanged("SelectedUrgency");
            }
        }

        public DataTable dtMedicationdtls { get; set; }

        /// <summary>
        /// IsRefreshTask Property
        /// </summary>
        private bool isRefreshTask;
        public bool IsRefreshTask
        {
            get { return isRefreshTask; }
            set
            {
                isRefreshTask = value;
                OnPropertyChanged("IsRefreshTask");
                if (IsRefreshTask == true)
                {
                    RefreshTask();
                }
            }
        }

        /// <summary>
        /// IssuingRemarks Property
        /// </summary>
        private string issuingRemarks;
        public string IssuingRemarks
        {
            get { return issuingRemarks; }
            set
            {
                issuingRemarks = value;
                OnPropertyChanged("IssuingRemarks");
            }
        }

        private DataTable gridBatchOrUnit;
        public DataTable GridBatchOrUnit
        {
            get
            {
                return gridBatchOrUnit;
            }
            set
            {
                gridBatchOrUnit = value;
                OnPropertyChanged("GridBatchOrUnit");
            }
        }
        private static void RefreshTask()
        {
            try
            {
                CommonTask objTask = new Task.UIContainer.CommonTask();
                objTask.GetTotalTaskCount();
            }
            catch (Exception)
            {
                throw;
            }

        }

        /// <summary>
        /// DtTestPriority Property
        /// </summary>
        private DataTable dtTestPriority;
        public DataTable DtTestPriority
        {
            get { return dtTestPriority; }
            set
            {
                dtTestPriority = value;
                OnPropertyChanged("DtTestPriority");
            }
        }

        /// <summary>
        /// SelectedPriority Property
        /// </summary>
        private DataRowView selectedPriority;
        public DataRowView SelectedPriority
        {
            get { return selectedPriority; }
            set
            {
                selectedPriority = value;
                OnPropertyChanged("SelectedPriority");
            }
        }

        /// <summary>
        /// SelectedPriorityValue Property
        /// </summary>
        private int? selectedPriorityValue;
        public int? SelectedPriorityValue
        {
            get { return selectedPriorityValue; }
            set
            {
                selectedPriorityValue = value;
                OnPropertyChanged("SelectedPriorityValue");
            }
        }

        /// <summary>
        /// GenProfileContact Property
        /// </summary>
        private DataTable genProfileContact;
        public DataTable GenProfileContact
        {
            get { return genProfileContact; }
            set
            {
                genProfileContact = value;
                OnPropertyChanged("GenProfileContact");
            }
        }

        /// <summary>
        /// EnableVerification Property
        /// </summary>
        private bool enableVerification;
        public bool EnableVerification
        {
            get { return enableVerification; }
            set
            {
                enableVerification = value;
                OnPropertyChanged("EnableVerification");
            }
        }

        private bool isServicePanel = false;
        public bool IsServicePanel
        {
            get
            {
                return isServicePanel;
            }
            set
            {
                isServicePanel = value;
                OnPropertyChanged("IsServicePanel");
            }
        }

        private bool isfromPharmacyPanel = false;
        public bool IsFromPharmacyPanel
        {
            get
            {
                return isfromPharmacyPanel;
            }
            set
            {
                isfromPharmacyPanel = value;
                OnPropertyChanged("IsFromPharmacyPanel");
                if (IsFromPharmacyPanel)
                {
                    isMultipleServiceChangeBlock = 3; //Speed Improve
                    ClearService();
                    isMultipleServiceChangeBlock = 0; //Speed Improve
                    //bug id 42516
                    PhRXDtlsInfo = null;
                    PhRXDtlsInfoNotApproved = null;
                    //end
                    isOnloadPharmacy = true;
                    PreviousResultColumnValue = 2;
                    ERxVisibility = Visibility.Visible;
                    if (!(Boolean)tabPharmacyOrder.IsSelected)
                    {
                        tabPharmacyOrder.IsSelected = true;
                    }
                    else
                    {
                        this.SetIntitalData((int)ServiceType.Pharmacy);
                    }
                  //  tabPharmacyOrder.IsSelected = true;
                    if (SelectedServiceType == (int)ServiceType.Pharmacy && SelectedPatFinEncounterIDFromPHModule > 0)
                    {
                        isEncounterSelectedfromPharmacy = true;
                        OnLoadEncounterEpisodeforPharmacy(SelectedPatFinEncounterIDFromPHModule);
                        isEncounterSelectedfromPharmacy = false;
                        OnLoadEMROrderSelection();
                    }
                    else
                    {                        
                        if (IfNullReturnZero(SelectedPatFinEncounterIDFromPHModule) == 0)
                        {
                            isEncounterPopUpSelected = false;
                            SelectedEncounterDetails = null;
                            OnSchemeSelectionChanged(0);
                            selectedEMROrder = null;
                            SelectedProvider = null;
                            Is_TopUP_checked = false;
                            Top_payer_id = 0;
                            isMultipleServiceChangeBlock = 3; //Speed Improve
                            ClearService();
                            isMultipleServiceChangeBlock = 0; //Speed Improve
                        }
                        LoadDefaultIPProvider();
                        SetInitalData_EMRCPOE();
                    }
                    EnableVerificationSettingBased = false;
                    if (IsIPEncounterSelected)
                    {
                        if (DefaultSettings.Values.IS_VERIFICATION_REQUIRED && IsFromPharmacyPanel
                            && Convert.ToInt16(SelectedVisitModeNew) == (int)VisitMode.IP)
                        {
                            EnableVerificationSettingBased = true;
                        }
                        //Commented by Mohd Adil for new requiremnt of verified order
                        //VerificationFetch();
                    }
                    if (!AllLabOrSubLocations.KIIsNotNullOrEmpty() && EnableVerificationSettingBased)
                    {
                        FetchAllSubLocations();
                    }
                    //for resetting the order selection checkbox
                    if (EnableVerificationSettingBased && IsPendingOrderChecked)
                    {
                        IsPendingOrderChecked = false;
                    }
                    if (EnableVerificationSettingBased && IsVerifiedChecked)
                    {
                        IsVerifiedChecked = false;
                    }
                    if (EnableVerificationSettingBased && IsVerifiedOmniChecked)
                    {
                        IsVerifiedOmniChecked = false;
                    }
                    LoadMedicines();
                    if (Services.KIIsNotNullAndRowCount())
                    {
                        ServicesTemp = Services.Copy();
                    }
                    isOnloadPharmacy = false;
                }
            }
        }

        /// <summary>
        /// IsFromPharmacy Property
        /// </summary>
        private bool isfrompharmacy;
        public bool IsFromPharmacy
        {
            get { return isfrompharmacy; }
            set
            {
                isfrompharmacy = value;
                OnPropertyChanged("IsFromPharmacy");//Implement INotifyPropertyChanged
            }
        }

        /// <summary>
        /// IsClaimApplicable Property
        /// </summary>
        private bool isclaimapplicable;
        public bool IsClaimApplicable
        {
            get { return isclaimapplicable; }
            set
            {
                isclaimapplicable = value;
                OnPropertyChanged("IsClaimApplicable");//Implement INotifyPropertyChanged
            }
        }

        ////public Infologics.Medilogics.Enumerators.General.Module SelectedModule
        ////{
        ////    get { return (Infologics.Medilogics.Enumerators.General.Module)GetValue(SelectedModuleProperty); }
        ////    set { SetValue(SelectedModuleProperty, value); }
        ////}

        ////// Using a DependencyProperty as the backing store for SelectedModule.  This enables animation, styling, binding, etc...
        ////public static readonly DependencyProperty SelectedModuleProperty =
        ////    DependencyProperty.Register("SelectedModule", typeof(Infologics.Medilogics.Enumerators.General.Module), typeof(UIServiceDelivery), new UIPropertyMetadata(null));        

        private bool isEditExecuted = false;
        public bool IsEditExecuted
        {
            get
            {
                return isEditExecuted;
            }
            set
            {
                isEditExecuted = value;
                OnPropertyChanged("IsEditExecuted");
                if (IsEditExecuted && IsGeneric)
                {
                    IsGenericEnable = true;
                    IsDescriptionEnable = false;
                }
                else if (IsEditExecuted && !IsGeneric)
                {
                    IsGenericEnable = true;
                    IsDescriptionEnable = true;
                }
                else
                {
                    IsGenericEnable = false;
                    IsDescriptionEnable = false;
                }
            }
        }

        private bool isPharmacySelected = false;
        public bool IsPharmacySelected
        {
            get
            {
                return isPharmacySelected;
            }
            set
            {
                isPharmacySelected = value;
                OnPropertyChanged("IsPharmacySelected");
            }
        }

        private DataTable pharamacyUnitSalesGrid;
        public DataTable PharamacyUnitSalesGrid
        {
            get
            {
                return pharamacyUnitSalesGrid;
            }
            set
            {
                pharamacyUnitSalesGrid = value;
                OnPropertyChanged("PharamacyUnitSalesGrid");
            }
        }


        private bool isGroupByChecked = false;
        public bool IsGroupByChecked
        {
            get
            {
                return isGroupByChecked;
            }
            set
            {
                isGroupByChecked = value;
                OnPropertyChanged("IsGroupByChecked");
            }
        }
        private bool isPendingOrderChecked = false;
        public bool IsPendingOrderChecked
        {
            get
            {
                return isPendingOrderChecked;
            }
            set
            {
                isPendingOrderChecked = value;
                if (isPendingOrderChecked)
                {
                    IsVerifiedChecked = false;
                    IsVerifiedOmniChecked = false;
                    SetInitalData_EMRCPOE();
                }
                else
                {
                    EMROrderRelation = null;
                }
                OnPropertyChanged("IsPendingOrderChecked");
            }
        }
        private bool isVerifiedChecked = false;
        public bool IsVerifiedChecked
        {
            get
            {
                return isVerifiedChecked;
            }
            set
            {
                isVerifiedChecked = value;
                if (isVerifiedChecked)
                {
                    IsPendingOrderChecked = false;
                    IsVerifiedOmniChecked = false;
                    SetInitalData_EMRCPOE();
                }
                else
                {
                    EMROrderRelation = null;
                }
                OnPropertyChanged("IsVerifiedChecked");
            }
        }
        private bool isVerifiedOmniChecked = false;
        public bool IsVerifiedOmniChecked
        {
            get
            {
                return isVerifiedOmniChecked;
            }
            set
            {
                isVerifiedOmniChecked = value;
                if (isVerifiedOmniChecked)
                {
                    IsPendingOrderChecked = false;
                    IsVerifiedChecked = false;
                    SetInitalData_EMRCPOE();
                }
                else
                {
                    EMROrderRelation = null;
                }
                OnPropertyChanged("IsVerifiedOmniChecked");
            }
        }
        private bool isAllChecked = false;
        public bool IsAllChecked
        {
            get
            {
                return isAllChecked;
            }
            set
            {
                isAllChecked = value;
                OnPropertyChanged("IsAllChecked");
                //Clearing issue
                if (BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
                {
                    DataTable dtPatBilling = BillData.Tables["INV_PAT_BILLING"].Copy();
                    foreach (DataRow drPatBilling in dtPatBilling.Rows)
                    {
                        if (drPatBilling["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value && FindServiceAdded(Convert.ToInt64(drPatBilling["INV_MAST_SERVICE_ID"]), string.Empty))
                        {
                            BillData.Tables["INV_PAT_BILLING"].Rows.Remove(_FindService);
                        }
                    }
                }
                //End

                IsLoadEMRCPOE = true;
                if(DefaultSettings.Values.IS_VERIFICATION_REQUIRED && IsFromPharmacyPanel
                  && Convert.ToInt16(SelectedVisitModeNew) == (int)VisitMode.IP)
                {
                    EnableVerificationSettingBased = true;
                }
                if (IsFromPharmacyPanel && EnableVerificationSettingBased && SelectedVisitModeNew == (int)VisitMode.IP)
                {
                    //skiping by mohd adil for new requiremnt of verification
                    EMROrderRelation = null;
                }
                else if (IsLoadEMRCPOE && SelectedProvider != null && !IsMultipleTimeSchemeSelectionChangeRequired)
                {
                    SetInitalData_EMRCPOE();
                }
                //If expired orders are selected then load deafult scheme 
                if (!IsMultipleTimeSchemeSelectionChangeRequired)
                    OnSchemeSelectionChanged(SelectedPatientFinEncounterID);

            }
        }

        private bool isGeneric = false;
        public bool IsGeneric
        {
            get
            {
                return isGeneric;
            }
            set
            {
                isGeneric = value;
                OnPropertyChanged("IsGeneric");
            }
        }

        private bool isDescriptionEnable = false;
        public bool IsDescriptionEnable
        {
            get
            {
                return isDescriptionEnable;
            }
            set
            {
                isDescriptionEnable = value;
                OnPropertyChanged("IsDescriptionEnable");
            }
        }

        private bool isGenericEnable = false;
        public bool IsGenericEnable
        {
            get
            {
                return isGenericEnable;
            }
            set
            {
                isGenericEnable = value;
                OnPropertyChanged("IsGenericEnable");
            }
        }

        private DataSet dsEmrOrderData;
        public DataSet DsEMROrderData
        {
            get
            {
                return dsEmrOrderData;
            }
            set
            {
                dsEmrOrderData = value;
                OnPropertyChanged("DsEMROrderData");
            }
        }

        public bool IsAdjustmentClear { get; set; }
        private bool isDispenseChecked;
        public bool IsDispenseChecked
        {
            get
            {
                return isDispenseChecked;
            }
            set
            {
                isDispenseChecked = value;
                OnPropertyChanged("IsDispenseChecked");
                IsAdjustmentClear = true;
                if (IsEditExecuted)//vinujohn bug Id:34316     
                {
                    isDispenseChecked = false;
                }
                if (IsDispenseChecked)
                {
                    DisPenseDetails = FetchDispense();
                    AddDispenseDetails();
                }
                else
                {
                    if (!IsEditExecuted)//vinujohn  bug Id:34316    
                    {
                        if (BillData.Tables["INV_PAT_BILLING"] != null && BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0)
                        {
                            ClearService();
                            if (EditService != null)
                            {
                                EditService = null;
                            }
                            if (SelectedService != null)
                            {
                                SelectedService = null;
                            }
                            IsEditExecuted = false;
                            var Query = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                .Where(x => x["IS_DISPENSE"] == DBNull.Value)
                                .Select(x => x);

                            //BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                            //    .Where(x => x["IS_DISPENSE"] != DBNull.Value)
                            //    .Select(x=>x)
                            //    .ForEach(x => x.Delete());

                            if (Query.Count() > 0)
                            {
                                DataTable dtTemp = Query.CopyToDataTable();
                                investigationduplication = false;
                                BillData.Tables["INV_PAT_BILLING"].Rows.Clear();
                                BillData.Tables["INV_PAT_BILLING"].Merge(dtTemp.Copy());
                                investigationduplication = true;
                            }
                            else
                            {
                                investigationduplication = false;
                                BillData.Tables["INV_PAT_BILLING"].Rows.Clear();
                                investigationduplication = true;
                            }
                            ClearService();
                        }
                    }
                }
                SerialNoCount();
                DisableOnServiceAddedIntoGrid();
            }
        }

        private DataTable disPenseDetails;
        public DataTable DisPenseDetails
        {
            get
            {
                return disPenseDetails;
            }
            set
            {
                disPenseDetails = value;
                OnPropertyChanged("DisPenseDetails");
            }
        }


        private DataTable adminInstruction;
        public DataTable AdminInstruction
        {
            get
            {
                return adminInstruction;
            }
            set
            {
                adminInstruction = value;
                OnPropertyChanged("AdminInstruction");
            }
        }

        private DataTable adminInstructiontemp;
        public DataTable AdminInstructionTemp
        {
            get
            {
                return adminInstructiontemp;
            }
            set
            {
                adminInstructiontemp = value;
                OnPropertyChanged("AdminInstructionTemp");
            }
        }

        ///// <summary>
        ///// IsEnableProvider property
        ///// </summary>
        //private bool isEnableProvider;
        //public bool IsEnableProvider
        //{
        //    get
        //    {
        //        return isEnableProvider;
        //    }
        //    set
        //    {
        //        isEnableProvider = value;
        //        OnPropertyChanged("IsEnableProvider");
        //    }
        //}

        /// <summary>
        /// EnableVerification Property
        /// </summary>
        private bool enableVerificationSettingBased;
        public bool EnableVerificationSettingBased
        {
            get { return enableVerificationSettingBased; }
            set
            {
                enableVerificationSettingBased = value;
                OnPropertyChanged("EnableVerificationSettingBased");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private string selectedContract;
        public string SelectedContract
        {
            get
            {
                return selectedContract;
            }
            set
            {
                selectedContract = value;
                OnPropertyChanged("SelectedContract");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private string schemeExpDate;
        public string SchemeExpDate
        {
            get
            {
                return schemeExpDate;
            }
            set
            {
                schemeExpDate = value;
                OnPropertyChanged("SchemeExpDate");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private string schemeMemNo;
        public string SchemeMemNo
        {
            get
            {
                return schemeMemNo;
            }
            set
            {
                schemeMemNo = value;
                OnPropertyChanged("SchemeMemNo");
            }
        }

        /// <summary>
        /// DrugDetails
        /// </summary>
        private string drugDetails;
        public string DrugDetails
        {
            get
            {
                return drugDetails;
            }
            set
            {
                drugDetails = value;
                OnPropertyChanged("DrugDetails");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private string selectedEpisodefromPanel;
        public string SelectedEpisodefromPanel
        {
            get
            {
                return selectedEpisodefromPanel;
            }
            set
            {
                selectedEpisodefromPanel = value;
                OnPropertyChanged("SelectedEpisodefromPanel");
                if (value != null)
                {
                    LoadProviderFromPharmacyPanel();
                }
            }
        }

        /// <summary>
        /// AssociatedSelectedLabOrSubLocationItem
        /// </summary>
        private DataRowView associatedSelectedLabOrSubLocationItem;
        public DataRowView AssociatedSelectedLabOrSubLocationItem
        {
            get
            {
                return associatedSelectedLabOrSubLocationItem;
            }
            set
            {
                associatedSelectedLabOrSubLocationItem = value;
                OnPropertyChanged("AssociatedSelectedLabOrSubLocationItem");
            }
        }

        string allergyRemarks;
        public string AllergyRemarks
        {
            get
            {
                return allergyRemarks;
            }
            set
            {
                allergyRemarks = value;
                OnPropertyChanged("AllergyRemarks");
            }
        }

        /// <summary>
        /// ApprovalNo Property
        /// </summary>
        private string approvalNo;
        public string ApprovalNo
        {
            get { return approvalNo; }
            set
            {
                approvalNo = value;
                OnPropertyChanged("ApprovalNo");//Implement INotifyPropertyChanged
            }
        }
        /// <summary>
        /// SelectedDate Property
        /// </summary>
        private DateTime selectedDate;
        public DateTime SelectedDate
        {
            get { return selectedDate; }
            set
            {
                selectedDate = value;
                OnPropertyChanged("SelectedDate");//Implement INotifyPropertyChanged
            }
        }

        /// <summary>
        /// Controlvisible Property
        /// </summary>
        private bool controlvisible = false;
        public bool Controlvisible
        {
            get { return controlvisible; }
            set
            {
                controlvisible = value;
                OnPropertyChanged("Controlvisible");//Implement INotifyPropertyChanged
            }
        }

        /// <summary>
        /// EndDate Property
        /// </summary>
        private DateTime endDate = DateTime.Now;
        public DateTime EndDate
        {
            get { return endDate; }
            set
            {
                endDate = value;
                OnPropertyChanged("EndDate");//Implement INotifyPropertyChanged
            }
        }

        string strDrugUnit;
        public string StrDrugUnit
        {
            get
            {
                return strDrugUnit;
            }
            set
            {
                if (value != string.Empty && value.StartsWith("."))
                {
                    value = "0" + value;
                }
                strDrugUnit = value;
                OnPropertyChanged("StrDrugUnit");
            }
        }

        private bool isExpiredVisibile = true;
        public bool IsExpiredVisibile
        {
            get
            {
                return isExpiredVisibile;
            }
            set
            {
                isExpiredVisibile = value;
                OnPropertyChanged("IsExpiredVisibile");
            }
        }

        /// <summary>
        /// IsServiceSettingEnable Property
        /// </summary>
        private bool isServiceSettingEnable;
        public bool IsServiceSettingEnable
        {
            get { return isServiceSettingEnable; }
            set
            {
                isServiceSettingEnable = value;
                OnPropertyChanged("IsServiceSettingEnable");
            }
        }

        /// <summary>
        /// IsPhamracySettingEnable Property
        /// </summary>
        private bool isPhamracySettingEnable;
        public bool IsPhamracySettingEnable
        {
            get { return isPhamracySettingEnable; }
            set
            {
                isPhamracySettingEnable = value;
                OnPropertyChanged("IsPhamracySettingEnable");
            }
        }

        private string strDiagnosis;
        public string StrDiagnosis
        {
            get
            {
                return strDiagnosis;
            }
            set
            {
                strDiagnosis = value;
                OnPropertyChanged("StrDiagnosis");
            }
        }

        private bool isNormalOrder = true;
        public bool IsNormalOrder
        {
            get
            {
                return isNormalOrder;
            }
            set
            {
                isNormalOrder = value;
                OnPropertyChanged("IsNormalOrder");
            }
        }

        private bool isSubstitution = false;
        public bool IsSubstitution
        {
            get
            {
                return isSubstitution;
            }
            set
            {
                isSubstitution = value;
                OnPropertyChanged("IsSubstitution");
            }
        }

        private string strFreqHours;
        public string StrFreqHours
        {
            get
            {
                return strFreqHours;
            }
            set
            {
                strFreqHours = value;
                OnPropertyChanged("StrFreqHours");
            }
        }

        private bool isHourlyVisible = false;
        public bool IsHourlyVisible
        {
            get
            {
                return isHourlyVisible;
            }
            set
            {
                isHourlyVisible = value;
                OnPropertyChanged("IsHourlyVisible");
            }
        }

        private bool isAdjustmentEnable;
        public bool IsAdjustmentEnable
        {
            get
            {
                return isAdjustmentEnable;
            }
            set
            {
                isAdjustmentEnable = value;
                OnPropertyChanged("IsAdjustmentEnable");
            }
        }

        private decimal totalCopayAmount = 0;
        public decimal TotalCopayAmount
        {
            get
            {
                return totalCopayAmount;
            }
            set
            {
                totalCopayAmount = value;
                OnPropertyChanged("TotalCopayAmount");
            }
        }

        private decimal _GrpCopayUsed = 0;
        public decimal GrpCopayUsed
        {
            get
            {
                return _GrpCopayUsed;
            }
            set
            {
                _GrpCopayUsed = value;
                OnPropertyChanged("GrpCopayUsed ");
            }
        }

        private string txtserviceRemarks;
        public string txtServiceRemarks
        {
            get
            {
                return txtserviceRemarks;
            }
            set
            {
                txtserviceRemarks = value;
                OnPropertyChanged("txtServiceRemarks");
            }
        }

        private bool isPrevMedicationEnable;
        public bool IsPrevMedicationEnable
        {
            get
            {
                return isPrevMedicationEnable;
            }
            set
            {
                isPrevMedicationEnable = value;
                OnPropertyChanged("IsPrevMedicationEnable");
            }
        }

        private string admnInstName;
        public string AdmnInstName
        {
            get
            {
                return admnInstName;
            }
            set
            {
                admnInstName = value;
                OnPropertyChanged("AdmnInstName");
            }
        }

        private bool isConusmable = true;
        public bool IsConsumable
        {
            get
            {
                return isConusmable;
            }
            set
            {
                isConusmable = value;
                OnPropertyChanged("IsConsumable");
                if (!IsConsumable)
                {
                    ComboBox cbxRoute = UcPharmacyOrderDtls.FindName("cbxRoute") as ComboBox;
                    if (cbxRoute != null)
                        cbxRoute.IsEnabled = false;
                    ComboBox cbxForm = UcPharmacyOrderDtls.FindName("cbxForm") as ComboBox;
                    if (cbxForm != null)
                        cbxForm.IsEnabled = false;
                }
            }
        }

        string pharmacyUnitName;
        public string PharmacyUnitName
        {
            get
            {
                return pharmacyUnitName;
            }
            set
            {
                pharmacyUnitName = value;
                OnPropertyChanged("PharmacyUnitName");
            }
        }

        private bool isInvestigationCPTCodeEnter;
        public bool IsInvestigationCPTCodeEnter
        {
            get { return isInvestigationCPTCodeEnter; }
            set
            {
                isInvestigationCPTCodeEnter = value;
                OnPropertyChanged("IsInvestigationCPTCodeEnter");
            }
        }

        private string barCode;
        public string BarCode
        {
            get
            {
                return barCode;
            }
            set
            {
                barCode = value;
                OnPropertyChanged("BarCode");
            }
        }

        private decimal dueAmount;
        public decimal DueAmounts
        {
            get
            {
                return dueAmount;
            }
            set
            {
                dueAmount = value;
                OnPropertyChanged("DueAmounts");
            }
        }

        private Visibility eRxVisibility = Visibility.Collapsed;
        public Visibility ERxVisibility
        {
            get
            {
                return eRxVisibility;
            }
            set
            {
                eRxVisibility = value;
                OnPropertyChanged("ERxVisibility");
            }
        }

        private bool eRxEnable = true;
        public bool ERxEnable
        {
            get
            {
                return eRxEnable;
            }
            set
            {
                eRxEnable = value;
                OnPropertyChanged("ERxEnable");
            }
        }
        private DataTable prescriptionMode;
        public DataTable PrescriptionMode
        {
            get
            {
                return prescriptionMode;
            }
            set
            {
                prescriptionMode = value;
                OnPropertyChanged("PrescriptionMode");
            }
        }

        private DataTable prescriptionType;
        public DataTable PrescriptionType
        {
            get
            {
                return prescriptionType;
            }
            set
            {
                prescriptionType = value;
                OnPropertyChanged("PrescriptionMode");
            }
        }

        private DataTable internalExternalCriteria;
        public DataTable InternalExternalCriteria
        {
            get
            {
                return internalExternalCriteria;
            }
            set
            {
                internalExternalCriteria = value;
                OnPropertyChanged("InternalExternalCriteria");
            }
        }

        private DataTable internalExternalDetails;
        public DataTable InternalExternalDetails
        {
            get
            {
                return internalExternalDetails;
            }
            set
            {
                internalExternalDetails = value;
                OnPropertyChanged("InternalExternalDetails");
            }
        }

        private DataTable _ItemDetails;
        public DataTable ItemDetailsData
        {
            get
            {
                return _ItemDetails;
            }
            set
            {
                _ItemDetails = value;
                OnPropertyChanged("ItemDetailsData");
            }
        }

        private DataTable _PhRXDtlsInfo;
        public DataTable PhRXDtlsInfo
        {
            get
            {
                return _PhRXDtlsInfo;
            }
            set
            {
                _PhRXDtlsInfo = value;
                OnPropertyChanged("PhRXDtlsInfo");
            }
        }

        private DataTable _PhRXDtlsInfoNotApproved;
        public DataTable PhRXDtlsInfoNotApproved
        {
            get
            {
                return _PhRXDtlsInfoNotApproved;
            }
            set
            {
                _PhRXDtlsInfoNotApproved = value;
                OnPropertyChanged("PhRXDtlsInfoNotApproved");
            }
        }

        private int prescriptionModeIndex = 1;
        public int PrescriptionModeIndex
        {
            get
            {
                return prescriptionModeIndex;
            }
            set
            {
                prescriptionModeIndex = value;
                OnPropertyChanged("PrescriptionModeIndex");
            }
        }

        private int prescriptionModeValue;
        public int PrescriptionModeValue
        {
            get
            {
                return prescriptionModeValue;
            }
            set
            {
                prescriptionModeValue = value;
                OnPropertyChanged("PrescriptionModeValue");
                //SetInitalData_EMRCPOE();
            }
        }

        private string eRxNo = string.Empty;
        public string ERXNo
        {
            get
            {
                return eRxNo;
            }
            set
            {
                eRxNo = value;
                OnPropertyChanged("ERXNo");
            }
        }

        /// <summary>
        /// ClaimFormNo Property
        /// </summary>
        private string claimformno;
        public string ClaimFormNo
        {
            get { return claimformno; }
            set
            {
                claimformno = value;
                OnPropertyChanged("ClaimFormNo");//Implement INotifyPropertyChanged
            }
        }


        private int previousResultColumnValue = 2;
        public int PreviousResultColumnValue
        {
            get
            {
                return previousResultColumnValue;
            }
            set
            {
                previousResultColumnValue = value;
                OnPropertyChanged("PreviousResultColumnValue");
            }
        }


        public bool IsBarCodeFocus
        {
            get { return (bool)GetValue(IsBarCodeFocusProperty); }
            set { SetValue(IsBarCodeFocusProperty, value); }
        }

        // Using a DependencyProperty as the backing store for IsBarCodeFocus.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty IsBarCodeFocusProperty =
            DependencyProperty.Register("IsBarCodeFocus", typeof(bool), typeof(UIServiceDelivery), new UIPropertyMetadata(false));

        private bool isAddButtonFocus;
        public bool IsAddButtonFocus
        {
            get
            {
                return isAddButtonFocus;
            }
            set
            {
                isAddButtonFocus = value;
                OnPropertyChanged("IsAddButtonFocus");
            }
        }

        private string _ClinicianID = string.Empty;
        public string ClinicianID
        {
            get
            {
                return _ClinicianID;
            }
            set
            {
                _ClinicianID = value;
                OnPropertyChanged("ClinicianID");
            }
        }

        private bool _IsNonConsultantEncounter = false;
        public bool IsNonConsultantEncounter
        {
            get
            {
                return _IsNonConsultantEncounter;
            }
            set
            {
                _IsNonConsultantEncounter = value;
                OnPropertyChanged("IsNonConsultantEncounter");
            }
        }

        private int _Is_PBM = 0;
        public int Is_PBM
        {
            get
            {
                return _Is_PBM;
            }
            set
            {
                _Is_PBM = value;
                OnPropertyChanged("Is_PBM");
            }
        }

        private int _IP_Gen_App_Sub_Location;
        public int IP_Gen_App_Sub_Location
        {
            get
            {
                return _IP_Gen_App_Sub_Location;
            }
            set
            {
                _IP_Gen_App_Sub_Location = value;
                OnPropertyChanged("IP_Gen_App_Sub_Location");
            }
        }

        private bool _IS_TOPUP_VISIBILE;
        public bool IS_TOPUP_VISIBILE
        {
            get
            {
                return _IS_TOPUP_VISIBILE;
            }
            set
            {
                _IS_TOPUP_VISIBILE = value;
                OnPropertyChanged("IS_TOPUP_VISIBILE");
                if (IS_TOPUP_VISIBILE)
                {
                    MainBillingShared objbilling = new MainBillingShared();
                    DataTable dtFetch = new DataTable();
                    dtFetch.Columns.Add("PAT_FIN_ENCOUNTER_ID", typeof(long));
                    dtFetch.Columns.Add("MRNO", typeof(string));
                    dtFetch.Columns.Add("MODE", typeof(int));
                    dtFetch.Columns.Add("INCO_MAST_SCHEME_ID", typeof(long));
                    dtFetch.Rows.Add(SelectedPatientFinEncounterID, PatientInformation.Rows[0]["MRNO"], 1, IfNullReturnZero(SelectedMastSchemeValue));
                    DataTable dtTopup = objbilling.FetchIncoDtlsPatTopUp(dtFetch);
                    if (dtTopup.KIIsNotNullAndRowCount())
                    {
                        Top_payer_id = Convert.ToInt64(IfNullReturnZero(dtTopup.Rows[0]["TOPUP_PAYER_ID"]));
                    }
                    else
                    {
                        Top_payer_id = 0;
                    }
                }
                else
                {
                    Top_payer_id = 0;
                }
            }
        }

        private bool _IS_TOPUP_REQUIRED;
        public bool IS_TOPUP_REQUIRED
        {
            get
            {
                return _IS_TOPUP_REQUIRED;
            }
            set
            {
                _IS_TOPUP_REQUIRED = value;
                OnPropertyChanged("IS_TOPUP_REQUIRED");
            }
        }

        private bool _Is_TopUP_checked;
        public bool Is_TopUP_checked
        {
            get
            {
                return _Is_TopUP_checked;
            }
            set
            {
                _Is_TopUP_checked = value;
                OnPropertyChanged("Is_TopUP_checked");                
            }
        }

        private long _Top_payer_id = 0;
        public long Top_payer_id
        {
            get
            {
                return _Top_payer_id;
            }
            set
            {
                _Top_payer_id = value;
                OnPropertyChanged("Top_payer_id");
                if (Top_payer_id > 0 && Convert.ToInt16(SelectedVisitModeNew) == (int)VisitMode.OPCREDIT)
                {
                    Is_TopUP_checkBoxEnable = true;
                }
                else
                {
                    Is_TopUP_checkBoxEnable = false;
                }
            }
        }

        private bool _Is_TopUP_checkBoxEnable;
        public bool Is_TopUP_checkBoxEnable
        {
            get
            {
                return _Is_TopUP_checkBoxEnable;
            }
            set
            {
                _Is_TopUP_checkBoxEnable = value;
                OnPropertyChanged("Is_TopUP_checkBoxEnable");
                if (Is_TopUP_checkBoxEnable)
                {
                    Is_TopUP_checked = true;
                }
                else
                {
                    Is_TopUP_checked = false;
                }
            }
        }

        private bool _IS_EDITRX_REQUIRED;
        public bool IS_EDITRX_REQUIRED
        {
            get
            {
                return _IS_EDITRX_REQUIRED;
            }
            set
            {
                _IS_EDITRX_REQUIRED = value;
                OnPropertyChanged("IS_EDITRX_REQUIRED");
            }
        }
        #endregion

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;
        private void OnPropertyChanged(string name)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(name));
            }
        }
        #endregion

        #region Methods & Functions
        private DataSet LoadServices()
        {
            try
            {
                DataSet dsData = null;
                DataTable dtData = null;
                //Load Services
                BillData.Tables["SERVICE_CRITERIA"].Clear();
                DataRow dr = BillData.Tables["SERVICE_CRITERIA"].NewRow();
                if (PatientInformation != null)
                {
                    dr["AGE"] = PatientInformation.Rows[0]["AGE"];
                    dr["GENDER"] = PatientInformation.Rows[0]["GENDER"];
                    dr["VALIDATION_MODE"] = (int)ValidationMode.BasicValidation;
                }
                dr["SERVICE_TYPE"] = SelectedServiceType;
                if (IsPatient)
                {
                    dr["VISIT_TYPE"] = (int)SelectedVisitMode;
                }
                else
                {
                    dr["VISIT_TYPE"] = 3;
                }
                BillData.Tables["SERVICE_CRITERIA"].Rows.Add(dr);
                MainServiceShared objMainServiceShared = null;
                if (SelectedServiceType == (int)ServiceType.Investigation &&
                    BillData.Tables["SERVICE_CRITERIA"].Rows[0]["AGE"] != string.Empty
                  && BillData.Tables["SERVICE_CRITERIA"].Rows[0]["AGE"] != DBNull.Value)
                {

                    if (IsDonor && CommonData.StaticBloodbankData != null && CommonData.StaticBloodbankData.Tables.Contains("INV_MAST_SERVICE")
                        && CommonData.StaticBloodbankData.Tables["INV_MAST_SERVICE"].Rows.Count > 0)
                    {
                        dsData = CommonData.StaticBloodbankData.Copy();
                    }
                    else
                    {

                        BloodDonorServices = null;
                        BloodDonorServices = CommonData.GetLookupData("BLOOD BANK DEFAULT TEST");
                        if (IsDonor)
                        {
                            if (BloodDonorServices.KIIsNotNullAndRowCount())
                            {
                                BillData.Tables["SERVICE_CRITERIA"].Rows[0]["INV_MAST_SERVICE_ID"] =
                                    BloodDonorServices.KIAppendCharacter(",", "LOOKUP_VALUE");
                            }
                        }
                        if (!IsPackage)
                        {
                            DataSet dsService = new DataSet();
                            if (FOData.DsServiceDetails == null && DsServiceDetails == null)
                            {
                                if (CommonData.SelectedModule == Infologics.Medilogics.Enumerators.General.Module.FoodAndBeverage)
                                {
                                    FetchCafeteriaServices();
                                }
                                else
                                {
                                    FetchHospitalServices();
                                }
                            }
                            if (FOData.DsServiceDetails != null)
                            {
                                dsService = FOData.DsServiceDetails.Copy();
                            }
                            else if (FOData.DsServiceDetails == null && DsServiceDetails != null)
                            {
                                dsService = DsServiceDetails.Copy();
                            }
                            MainBillingShared objBillingShared = new MainBillingShared();
                            dsData = objBillingShared.FilterHospitalServices(dsService, BillData.Tables["SERVICE_CRITERIA"]);
                            dtData = dsData.Tables["INV_MAST_SERVICE"].Copy();
                            //Disabling package items from loading in the billing window --- 3.0 UAE Version 19.05.2016
                            dtData.DefaultView.RowFilter = "ISPACKAGE IS NULL OR ISPACKAGE=0";
                            dtData = dtData.DefaultView.ToTable().Copy();
                            dsData.Tables["INV_MAST_SERVICE"].Clear();
                            dsData.Tables["INV_MAST_SERVICE"].Merge(dtData.DefaultView.ToTable());
                            //Completed

                            ////Item association billing
                            //DataTable dtCriteria = new DataTable("SEARCH_CRITERIA");
                            //dtCriteria.Columns.Add("DEFAULT_LOCATION");
                            //dtCriteria.Columns.Add("REFERENCE_CODE");
                            //dtCriteria.Rows.Add();
                            //string SubLocation = System.Configuration.ConfigurationSettings.AppSettings["DefaultPharmacySublocation"];
                            //if (SubLocation != string.Empty && SubLocation != null && SubLocation != "" && LabOrSubLocations != null)
                            //{
                            //    DataRow[] drFounds = LabOrSubLocations.Table.Select("NAME='" + SubLocation.ToString().ToUpper().Trim() + "'");
                            //    if (drFounds.Length > 0 && SelectedLabOrSubLocationValue == Convert.ToDecimal(drFounds[0]["INCO_MAST_ID"]))
                            //    {
                            //        dtCriteria.Rows[0]["DEFAULT_LOCATION"] = 1;
                            //    }
                            //    else
                            //    {
                            //        dtCriteria.Rows[0]["DEFAULT_LOCATION"] = 0;
                            //    }
                            //}
                            //else
                            //{
                            //    dtCriteria.Rows[0]["DEFAULT_LOCATION"] = 1;
                            //}
                            //dtCriteria.Rows[0]["REFERENCE_CODE"] = SelectedLabOrSubLocationItem != null ? SelectedLabOrSubLocationItem.Row["REFERENCE_CODE"] : DBNull.Value;
                            //DataTable dtMedicineData = FOData.Medicines.Copy();
                            //dtMedicines = objBillingShared.FilterMedicines(dtMedicineData, dtCriteria);
                            //dtData.Merge(dtMedicines.Copy());
                            MainBilling objBilling = new MainBilling();
                            DataTable dtConsCriteria = new DataTable("CRITERIA");
                            dtConsCriteria.Columns.Add("MODE");
                            dtConsCriteria.Rows.Add(0);
                            DataTable dtConsultaion = objBilling.FetchConsulationServices(dtConsCriteria);
                            if (dtConsultaion.KIIsNotNullAndRowCount())
                            {
                                dtData.Merge(dtConsultaion.Copy());
                            }
                            //End
                        }
                        else //if selected Item is a package
                        {
                            if (SelectedPackageItem != null)
                            {
                                DataTable dtCriteria = new DataTable();
                                dtCriteria.Columns.Add("PKG_MAST_PATIENT_ID");
                                dtCriteria.Columns.Add("HOSPITAL_ID");
                                dtCriteria.Columns.Add("SERVICE_TYPE");
                                dtCriteria.Columns.Add("MODE");
                                dtCriteria.Rows.Add();
                                dtCriteria.Rows[0]["PKG_MAST_PATIENT_ID"] = SelectedPackageItem.Row["PKG_MAST_PATIENT_ID"];
                                dtCriteria.Rows[0]["HOSPITAL_ID"] = InvestigationData.HospitalID;
                                dtCriteria.Rows[0]["SERVICE_TYPE"] = SelectedServiceType;
                                dtCriteria.Rows[0]["MODE"] = 2;
                                MainBilling objMainBilling = new MainBilling();
                                dsData = objMainBilling.FetchPackageDtls(dtCriteria);
                                dsData.Tables["PKG_DTLS_PATIENT_SERVICE"].TableName = "INV_MAST_SERVICE";
                                var filterAvailedData = from drFilter in dsData.Tables["INV_MAST_SERVICE"].AsEnumerable()
                                                        where drFilter.RowState != DataRowState.Deleted && drFilter["ACTUAL_QTY"] != DBNull.Value
                                                        && (drFilter["AVAILED_QTY"] == DBNull.Value || drFilter["AVAILED_QTY"] != DBNull.Value
                                                        && Convert.ToDecimal(drFilter["ACTUAL_QTY"]) > Convert.ToDecimal(drFilter["AVAILED_QTY"]))
                                                        select drFilter;
                                if (filterAvailedData.Count() > 0)
                                {
                                    dtData = filterAvailedData.CopyToDataTable().Copy();
                                    dtData.TableName = "INV_MAST_SERVICE";
                                }
                                else
                                {
                                    if (dsData.Tables.Contains("INV_MAST_SERVICE") && dsData.Tables["INV_MAST_SERVICE"].KIIsNotNullAndRowCount())
                                    {
                                        dsData.Tables["INV_MAST_SERVICE"].Rows.Clear();
                                    }
                                }
                            }
                        }
                        //dtData.DefaultView.RowFilter = "ISCHARGEABLE=1 AND SCHEDULE_TYPE<>1";
                        if (dtData != null && dtData.KIIsNotNullAndRowCount())
                        {
                            if (IsPackage)// for package billing
                            {
                                if (!IsDonor && BloodDonorServices.KIIsNotNullAndRowCount())
                                {
                                    dtData.DefaultView.RowFilter = "INV_MAST_SERVICE_ID NOT IN (" +
                                        BloodDonorServices.KIAppendCharacter(",", "LOOKUP_VALUE") + ")";
                                }
                            }
                            else
                            {
                                if (IsDonor && BloodDonorServices.KIIsNotNullAndRowCount())
                                {
                                    dtData.DefaultView.RowFilter = "ISCHARGEABLE=1";
                                }
                                else if (!IsDonor && BloodDonorServices.KIIsNotNullAndRowCount())
                                {
                                    dtData.DefaultView.RowFilter = "INV_MAST_SERVICE_ID NOT IN (" +
                                        BloodDonorServices.KIAppendCharacter(",", "LOOKUP_VALUE") + ")";
                                }
                                //Commented by implementing price by user feature
                                //ISCHARGEABLE=1 AND 
                                //else
                                //{
                                //    dtData.DefaultView.RowFilter = "ISCHARGEABLE=1";
                                //}
                            }
                            dtData.DefaultView.Sort = "NAME";
                            dsData.Tables["INV_MAST_SERVICE"].Clear();
                            dsData.Tables["INV_MAST_SERVICE"].Merge(dtData.DefaultView.ToTable());
                            dtData = null;
                        }

                        if (IsDonor)
                        {
                            CommonData.StaticBloodbankData = dsData.Copy();
                        }
                        else
                        {
                            CommonData.StaticServicesData = dsData.Copy();
                        }
                    }
                }
                else if (!IsPatient && SelectedServiceType == (int)ServiceType.Investigation &&
                    BillData.Tables["SERVICE_CRITERIA"].Rows[0]["AGE"] == DBNull.Value)
                {
                    DataSet dsService = new DataSet();
                    if (FOData.DsServiceDetails != null)
                    {
                        dsService = FOData.DsServiceDetails.Copy();
                    }
                    else if (FOData.DsServiceDetails == null && DsServiceDetails != null)
                    {
                        dsService = DsServiceDetails.Copy();
                    }
                    MainBillingShared objBillingShared = new MainBillingShared();
                    dsData = objBillingShared.FilterHospitalServices(dsService, BillData.Tables["SERVICE_CRITERIA"]);
                    dtData = dsData.Tables["INV_MAST_SERVICE"].Copy();
                    dtData.DefaultView.RowFilter = "ISCHARGEABLE=1";
                    dtData.DefaultView.Sort = "NAME";
                    dsData.Tables["INV_MAST_SERVICE"].Clear();
                    dsData.Tables["INV_MAST_SERVICE"].Merge(dtData.DefaultView.ToTable());
                    dtData = null;
                }
                // TASK A1
                else
                {
                    //Commented by Saranya On 16/01/2013 for package billing
                    if (SelectedServiceType == (int)ServiceType.Cafeteria && CommonData.StaticCafeteriaData != null &&
                        CommonData.StaticCafeteriaData.Tables.Contains("INV_MAST_SERVICE") &&
                        CommonData.StaticCafeteriaData.Tables["INV_MAST_SERVICE"].Rows.Count > 0)
                    {
                        dsData = CommonData.StaticCafeteriaData.Copy();
                    }
                    if (SelectedServiceType == (int)ServiceType.Pharmacy && CommonData.StaticPharmacyData != null &&
                    CommonData.StaticPharmacyData.Tables.Contains("INV_MAST_SERVICE") &&
                    CommonData.StaticPharmacyData.Tables["INV_MAST_SERVICE"].Rows.Count > 0)
                    {
                        dsData = CommonData.StaticPharmacyData.Copy();
                    }
                    else
                    {
                        objMainServiceShared = new MainServiceShared();
                        string[] parentCategory = (from row in Category.ToTable().Select("SERVICE_TYPE=" + SelectedServiceType).AsEnumerable()
                                                   select row["ROOT_INV_CATEGORY_ID"].ToString()).ToArray();
                        string parentCategoryID = string.Empty;
                        if (SelectedServiceType==(int)ServiceType.Cafeteria)
                        {
                            parentCategoryID = CommonData.GetDefaultSettings("CAFETERIA CATEGORY ID").KIIsNotNullOrEmpty() ? CommonData.GetDefaultSettings("CAFETERIA CATEGORY ID") : string.Empty;
                        }
                        else
                        {
                             parentCategoryID = String.Join(",", parentCategory);
                        }
                        
                        BillData.Tables["SERVICE_CRITERIA"].Rows[0]["PARENT_INV_CATEGORY_ID"] = parentCategoryID;
                        if (parentCategoryID != String.Empty)
                        {
                            if (!IsPackage)
                            {
                                if (SelectedServiceType == (int)ServiceType.Cafeteria)
                                {
                                    BillData.Tables["SERVICE_CRITERIA"].Rows[0]["MODE"] = 13;
                                }
                                dsData = objMainServiceShared.FetchInvestigations(BillData.Tables["SERVICE_CRITERIA"]);
                            }
                            else
                            {
                                if (SelectedPackageItem != null)
                                {
                                    DataTable dtCriteria = new DataTable();
                                    dtCriteria.Columns.Add("PKG_MAST_PATIENT_ID");
                                    dtCriteria.Columns.Add("SERVICE_TYPE");
                                    dtCriteria.Columns.Add("MODE");
                                    dtCriteria.Rows.Add();
                                    dtCriteria.Rows[0]["PKG_MAST_PATIENT_ID"] = SelectedPackageItem.Row["PKG_MAST_PATIENT_ID"];
                                    dtCriteria.Rows[0]["SERVICE_TYPE"] = SelectedServiceType;
                                    dtCriteria.Rows[0]["MODE"] = 3;
                                    MainBilling objMainBilling = new MainBilling();
                                    dsData = objMainBilling.FetchPackageDtls(dtCriteria);
                                    dsData.Tables["PKG_DTLS_PATIENT_SERVICE"].TableName = "INV_MAST_SERVICE";
                                    var filterAvailedData = from drFilter in dsData.Tables["INV_MAST_SERVICE"].AsEnumerable()
                                                            where drFilter.RowState != DataRowState.Deleted && drFilter["ACTUAL_QTY"] != DBNull.Value
                                                            && (drFilter["AVAILED_QTY"] == DBNull.Value || drFilter["AVAILED_QTY"] != DBNull.Value
                                                            && Convert.ToDecimal(drFilter["ACTUAL_QTY"]) > Convert.ToDecimal(drFilter["AVAILED_QTY"]))
                                                            select drFilter;
                                    if (filterAvailedData.Count() > 0)
                                    {
                                        dtData = filterAvailedData.CopyToDataTable().Copy();
                                        dtData.TableName = "INV_MAST_SERVICE";
                                        if (dtData.KIIsNotNullAndRowCount())
                                        {
                                            dsData.Tables.Remove("INV_MAST_SERVICE");
                                            dsData.Tables.Add(dtData.Copy());
                                        }
                                    }
                                    else
                                    {
                                        if (dsData.Tables.Contains("INV_MAST_SERVICE") && dsData.Tables["INV_MAST_SERVICE"].KIIsNotNullAndRowCount())
                                        {
                                            dsData.Tables["INV_MAST_SERVICE"].Rows.Clear();
                                        }
                                    }
                                }
                            }
                        }
                        if (SelectedServiceType == (int)ServiceType.Pharmacy && dsData != null)
                        {
                            CommonData.StaticPharmacyData = dsData.Copy();
                        }
                    }
                }
                return dsData;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// Sets the bind data.
        /// </summary>
        private void SetBindData()
        {
            ServiceBaseCharge = new DataTable();
            dsBillXSD = new Infologics.Medilogics.CommonXSD.XSD.Billing();
            dsSOP = new ERP.GPTransaction.XSD.SOP();
            BillData = this.CreateBillDataset();
            BillData.Tables["LIMIT_CRITERIA"].Rows.Add(1);
            BillData.Tables["LIMIT_CRITERIA"].AcceptChanges();
            BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows.Add(1);
            BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["DECIMAL_PLACE"] = CommonData.DecimalPlace.ToString();
            BillData.Tables["SERVICE_CHARGE_CRITERIA"].AcceptChanges();
            BillData.Tables["GEN_PAT_BILLING"].Rows.Add(1);
            BillData.Tables["GEN_PAT_BILLING"].AcceptChanges();
            BillData.Tables["EMR_PAT_DTLS_INV_ORDER"].Rows.Add(1);
            BillData.Tables["EMR_PAT_DTLS_INV_ORDER"].AcceptChanges();
            dtTemp = BillData.Tables["INV_PAT_BILLING"].Clone();
            dtTemp.TableName = "INV_PAT_BILLING_TEMP";
            BillData.Tables.Add(dtTemp);
            DataRow drTemp;
            drTemp = BillData.Tables["INV_PAT_BILLING_TEMP"].NewRow();
            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows.Add(drTemp);
            BillData.Tables["INV_PAT_BILLING_TEMP"].AcceptChanges();
            dtTemp = BillData.Tables["INV_PAT_BILLING"].Clone();
            dtTemp.TableName = "INV_PAT_BILLING_TOTAL";
            BillData.Tables.Add(dtTemp);
            BillData.Tables["INV_PAT_BILLING_TOTAL"].Rows.Add(1);
            BillData.Tables["INV_PAT_BILLING_TOTAL"].AcceptChanges();
            dtTemp = BillData.Tables["INV_PAT_BILLING"].Clone();
            dtTemp.TableName = "INV_PAT_BILLING_RESET";
            BillData.Tables.Add(dtTemp);
            BillData.Tables["INV_PAT_BILLING_RESET"].Rows.Add(1);
            BillData.Tables["INV_PAT_BILLING_RESET"].AcceptChanges();
            dtTemp = BillData.Tables["INV_PAT_BILLING"].Clone();
            dtTemp.TableName = "INV_PAT_BILLING_RESET_FINAL";
            BillData.Tables.Add(dtTemp.Copy());
            BillData.Tables["INV_PAT_BILLING_RESET_FINAL"].Rows.Add(1);
            BillData.Tables["INV_PAT_BILLING_RESET_FINAL"].AcceptChanges();
            //dtTemp = BillData.Tables["INV_PAT_BILLING"].Clone();
            //dtTemp.TableName = "INV_PAT_BILLING_REMOVE_SERVICE";
            //BillData.Tables.Add(dtTemp.Copy());
            //BillData.Tables["INV_PAT_BILLING_REMOVE_SERVICE"].AcceptChanges();
            BillData.Tables["REG_PAT_BILLING"].Rows.Add(1);
            BillData.Tables["REG_PAT_BILLING"].AcceptChanges();
            BillData.Tables["REG_PATIENT_REGISTRATION"].Rows.Add(1);
            BillData.Tables["REG_PATIENT_REGISTRATION"].AcceptChanges();
            BillData.Tables["CON_PAT_BILLING"].Rows.Add(1);
            BillData.Tables["CON_PAT_BILLING"].AcceptChanges();
            BillData.Tables["FREE_RULE_INFORMATION"].Rows.Add(1);
            BillData.Tables["FREE_RULE_INFORMATION"].AcceptChanges();
            BillData.Tables["PROVIDER_INFORMATION"].Rows.Add(1);
            BillData.Tables["PROVIDER_INFORMATION"].AcceptChanges();
            dtTemp = BillData.Tables["GEN_CARD_TRANSACTION"].Clone();
            dtTemp.TableName = "GEN_CARD_TRANSACTION_TEMP";
            BillData.Tables.Add(dtTemp);
            BillData.Tables["GEN_CARD_TRANSACTION_TEMP"].Rows.Add(1);
            BillData.Tables["GEN_CARD_TRANSACTION_TEMP"].AcceptChanges();
            dtTemp = BillData.Tables["GEN_BANK_TRANSACTION"].Clone();
            dtTemp.TableName = "GEN_BANK_TRANSACTION_TEMP";
            BillData.Tables.Add(dtTemp);
            BillData.Tables["GEN_BANK_TRANSACTION_TEMP"].Rows.Add(1);
            BillData.Tables["GEN_BANK_TRANSACTION_TEMP"].AcceptChanges();
            BillData.Tables["RECEIPT_DATA_BIND"].Rows.Add();
            BillData.Tables["RECEIPT_DATA_BIND"].AcceptChanges();

            BillData.Tables["ADT_PAT_BILLING"].Rows.Add(1);
            BillData.Tables["ADT_PAT_BILLING"].AcceptChanges();
           
            //Display the total- actual,bill amount,copay
            DataTable dtTotal = new DataTable("INV_PAT_TOTAL");
            dtTotal.Columns.Add("AMOUNT_TOTAL", typeof(decimal));
            dtTotal.Columns.Add("OTHER_CHARGE_TOTAL", typeof(decimal));
            dtTotal.Columns.Add("DISCOUNT_MARKUP_TOTAL", typeof(decimal));
            dtTotal.Columns.Add("DISCOUNT_TOTAL", typeof(decimal));
            dtTotal.Columns.Add("MARKUP_TOTAL", typeof(decimal));
            dtTotal.Columns.Add("NET_AMOUNT_TOTAL", typeof(decimal));
            dtTotal.Columns.Add("CO_PAY_AMOUNT_TOTAL", typeof(decimal));
            dtTotal.Columns.Add("SERVICE_TAX_TOTAL", typeof(decimal));
            dtTotal.Columns.Add("PACKAGE_DISCOUNT_TOTAL", typeof(decimal));
            dtTotal.Columns.Add("GEN_PATIENT_SHARE", typeof(decimal));
            dtTotal.Columns.Add("SERVICE_TYPE", typeof(decimal));
            dtTotal.Columns.Add("GEN_PAT_BILLING_ID", typeof(decimal));
            dtTotal.Rows.Add();
            TotalTable = dtTotal;
            BillData.Tables.Add(TotalTable.Copy());
            BillData.Tables["BILL_COMMON_DETAILS"].Rows.Add();
            DataTable dtPrescriptionCriteria = new DataTable("Prescription");
            dtPrescriptionCriteria.Columns.Add("MRNO", typeof(string));
            dtPrescriptionCriteria.Columns.Add("EMR_PROVIDER_VISIT_ID", typeof(decimal));
            dtPrescriptionCriteria.Columns.Add("MODE", typeof(decimal));
            dtPrescriptionCriteria.Rows.Add();
            dtPrescriptionCriteria.AcceptChanges();
            //PrescriptionCriteria = dtPrescriptionCriteria.Copy();
            dtPrescriptionCriteria.Columns.Add("SERVICEIDS");
            dtPrescriptionCriteria.Columns.Add("BILL_DATE");
            ServiceCriteria = dtPrescriptionCriteria.Copy();
           
            CommonXSD.XSD.FO objxsd = new CommonXSD.XSD.FO();
            if (!BillData.Tables.Contains("PAT_FIN_ENCOUNTER"))
            {
                BillData.Tables.Add(objxsd.PAT_FIN_ENCOUNTER.Clone());
            }
            if (!BillData.Tables.Contains("PAT_FIN_EPISODE"))
            {
                BillData.Tables.Add(objxsd.PAT_FIN_EPISODE.Clone());
            }
            if (!BillData.Tables.Contains("PAT_FIN_EPISODE_HISTORY"))
            {
                BillData.Tables.Add(objxsd.PAT_FIN_EPISODE_HISTORY.Clone());
            }
            if (!BillData.Tables.Contains("PAT_FIN_DTLS_EPISODE"))
            {
                BillData.Tables.Add(objxsd.PAT_FIN_DTLS_EPISODE.Clone());
            }
            if (!BillData.Tables.Contains("PAT_FIN_DTLS_EPISODE_HISTORY"))
            {
                BillData.Tables.Add(objxsd.PAT_FIN_DTLS_EPISODE_HISTORY.Clone());
            }
            if (!BillData.Tables.Contains("PAT_PATIENT_VISIT_ENCOUNTER"))
            {
                BillData.Tables.Add(objxsd.PAT_PATIENT_VISIT_ENCOUNTER.Clone());
            }
            if (!BillData.Tables.Contains("INCO_PATIENT_SCHEME"))
            {
                BillData.Tables.Add(objxsd.INCO_PATIENT_SCHEME.Clone());
            }
            //LoadVisitType();
            if (!IsFromPharmacyPanel)
            {
                OnSchemeSelectionChanged(0);
            }
            //Commented and add code for new change, no need to load provider by deafult as said by shamsu sir
            if ((ConsumerType != null && IsPatient == false) || IsCafeteriaPatientSearch)
            {
                ProviderTemp = LoadCafeteriaProvider();
            }
            if (Provider.KIIsNotNullAndRowCount())
            {
                Provider.DefaultView.Sort = "EMPLOYEE_NAME";
            }
            if (!IsFromPharmacyPanel)
            {
                LoadDefaultIPProvider();
            }
            EncounterEndDate = System.DateTime.Now;
        }

        private void LoadDefaultIPProvider()
        {
            if (dtPatientVisit.KIIsNotNullAndRowCount() && dtPatientVisit.Rows[0]["VISIT_TYPE"] != DBNull.Value
                && Convert.ToInt16(dtPatientVisit.Rows[0]["VISIT_TYPE"]) == (int)VisitMode.IP && !IsFromCoderReview)
            {
                MainADTShared objMain = new MainADTShared();
                DataTable dtCriteria = new DataTable("CRITERIA_TABLE");
                dtCriteria.Columns.Add("MRNO", typeof(string));
                dtCriteria.Columns.Add("VISIT_NO", typeof(int));
                dtCriteria.Columns.Add("ISINPATIENT", typeof(int));
                DataRow drNew = dtCriteria.NewRow();
                drNew["MRNO"] = dtPatientVisit.Rows[0]["MRNO"];
                drNew["VISIT_NO"] = dtPatientVisit.Rows[0]["VISIT_NO"];               
                drNew["ISINPATIENT"] = 1;
                dtCriteria.Rows.Add(drNew);
                DataTable dtInchargeData = objMain.FetchBedDetails(dtCriteria, 6);
                if (dtInchargeData != null && dtInchargeData.Rows.Count > 0)
                {
                    //OnLoadEncounterEpisodeNo(dtInchargeData.Rows[0]["INCHARGE_PROVIDER_ID"].ToString(), false, false);
                    OnLoadEncounterEpisodeNoForIP(Convert.ToString(dtInchargeData.Rows[0]["INCHARGE_PROVIDER_ID"]));
                    EnableVerificationSettingBased = false;//bug id 39367
                    if (DefaultSettings.Values.IS_VERIFICATION_REQUIRED && IsFromPharmacyPanel
                        && Convert.ToInt16(SelectedVisitModeNew) == (int)VisitMode.IP)
                    {
                        EnableVerificationSettingBased = true;
                    }
                    //VerificationFetch();
                }
            }
            if (SelectedEncounterDetails != null && SelectedEncounterDetails["EPISODE_STATUS"].ToString().Equals("IP") && IsFromCoderReview) // In case of window loading from coder review
            {            
                MainADTShared objMain = new MainADTShared();
                DataTable dtCriteria = new DataTable("CRITERIA_TABLE");
                dtCriteria.Columns.Add("MRNO", typeof(string));
                dtCriteria.Columns.Add("VISIT_NO", typeof(int));
                dtCriteria.Columns.Add("ISINPATIENT", typeof(int));
                DataRow drNew = dtCriteria.NewRow();
                //drNew["MRNO"] = dtPatientVisit.Rows[0]["MRNO"];
                //drNew["VISIT_NO"] = dtPatientVisit.Rows[0]["VISIT_NO"];
                drNew["MRNO"] = SelectedEncounterDetails["MRNO"];
                drNew["VISIT_NO"] = SelectedEncounterDetails["VISIT_NO"];
                drNew["ISINPATIENT"] = 1;
                dtCriteria.Rows.Add(drNew);
                DataTable dtInchargeData = objMain.FetchBedDetails(dtCriteria, 6);
                if (dtInchargeData != null && dtInchargeData.Rows.Count > 0)
                {
                    //OnLoadEncounterEpisodeNo(dtInchargeData.Rows[0]["INCHARGE_PROVIDER_ID"].ToString(), false, false);
                    OnLoadEncounterEpisodeNoForIP(Convert.ToString(dtInchargeData.Rows[0]["INCHARGE_PROVIDER_ID"]));
                    //EnableVerificationSettingBased = false;
                    //DataTable dtGenSetting = CommonData.GetDefaultSettings(0, "IS_VERIFICATION_REQUIRED");
                    //if (dtGenSetting.KIIsNotNullAndRowCount() && Convert.ToInt16(dtGenSetting.Rows[0]["VALUE"]) == 1 && IsFromPharmacyPanel)
                    //{
                    //    EnableVerificationSettingBased = true;
                    //}
                    //VerificationFetch();
                }
                else if (Convert.ToInt16(SelectedEncounterDetails["ENCOUNTER_STATUS"]) == 0 && SelectedEncounterDetails["PROVIDER_ID"] != DBNull.Value) // IP Closed Encounter BIlling from code review
                {
                    OnLoadEncounterEpisodeNoForIP(Convert.ToString(SelectedEncounterDetails["PROVIDER_ID"]));
                }
            }
        }
        public bool IsFromResubmission { get; set; }

        private bool IsFirstProviderChange = true;
        private void LoadSelectedOPEncounterForCoderReview()
        {
            try
            {
                IsFirstProviderChange = true;
                if (PatientInformation != null && PatientInformation.Rows.Count > 0 && PatientInformation.Rows[0]["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value)
                {
                    DataTable dtCriteria = new DataTable("SEARCH_CRITERIA");
                    dtCriteria.Columns.Add("MRNO", typeof(string));
                    dtCriteria.Columns.Add("MODE", typeof(int));
                    dtCriteria.Columns.Add("IS_FROM_PHARMACY", typeof(int));
                    dtCriteria.Rows.Add();
                    dtCriteria.Rows[0]["MRNO"] = PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Rows[0]["MRNO"] != DBNull.Value
                        ? PatientInformation.Rows[0]["MRNO"] : DBNull.Value;
                    if (IsFromResubmission)
                    {
                        dtCriteria.Rows[0]["MODE"] = 17;
                    }
                    else
                    {
                        dtCriteria.Rows[0]["MODE"] = 7;
                    }
                    dtCriteria.Rows[0]["IS_FROM_PHARMACY"] = 0;
                    MainCommon objCommon = new MainCommon();
                    DataTable dtPatientEpisode = objCommon.FetchFinancialEpisodes(dtCriteria);
                    // dtCriteria.Rows.Add(7, MRNO, null, null, null, null, 1, 0);
                    //DtEncounterFetch = objMainCommon.FetchFinancialEpisodes(dtCriteria);
                    if (dtPatientEpisode.KIIsNotNullAndRowCount())
                    {
                        //var query = from dr in dtPatientEpisode.AsEnumerable()
                        //            where Convert.ToInt64(dr["PAT_FIN_ENCOUNTER_ID"]) == Convert.ToInt64(PatientInformation.Rows[0]["PAT_FIN_ENCOUNTER_ID"])
                        //            && !dr["EPISODE_STATUS"].ToString().Equals("IP")
                        //            select dr;
                        var query = from dr in dtPatientEpisode.AsEnumerable()
                                    where Convert.ToInt64(dr["PAT_FIN_ENCOUNTER_ID"]) == Convert.ToInt64(PatientInformation.Rows[0]["PAT_FIN_ENCOUNTER_ID"])
                                    select dr;
                        if (query.Any())
                        {
                            EncounterSelectionChanged(query.CopyToDataTable().DefaultView[0]);
                            if (query.CopyToDataTable().DefaultView[0]["EPISODE_STATUS"].ToString().Equals("IP")) // If IP Encounter
                            {
                                LoadDefaultIPProvider();
                            }
                            else // If OP Encounter
                            {
                                DataRow dr = Provider.Select("H_EMP_ID=" + SelectedProviderValue).First();
                                int rowIndex = Provider.Rows.IndexOf(dr);
                                if (SelectedProvider == null)
                                    SelectedProvider = Provider.DefaultView[rowIndex];
                                if (SelectedProviderID == null)
                                    SelectedProviderID = Provider.DefaultView[rowIndex];
                            }
                            OnSchemeSelectionChanged(SelectedPatientFinEncounterID);
                        }
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                IsFirstProviderChange = false;
            }
        }
    


        private DataSet CreateBillDataset()
        {
            try
            {
                DataSet dsTemp = new DataSet();
                dsTemp.Tables.Add(dsBillXSD.RECEIPT_DATA_BIND.Clone());
                dsTemp.Tables.Add(dsBillXSD.GEN_CARD_TRANSACTION.Clone());
                dsTemp.Tables.Add(dsBillXSD.GEN_BANK_TRANSACTION.Clone());
                dsTemp.Tables.Add(dsBillXSD.GEN_AUDIT.Clone());
                dsTemp.Tables.Add(dsBillXSD.INV_AUDIT.Clone());
                dsTemp.Tables.Add(dsBillXSD.INV_PROFILE_SERVICE.Clone());
                dsTemp.Tables.Add(dsBillXSD.EMR_PAT_DTLS_INV_ORDER.Clone());//
                dsTemp.Tables.Add(dsBillXSD.INV_BILL_PROFILE_SERVICE.Clone());
                dsTemp.Tables.Add(dsBillXSD.FREE_RULE_INFORMATION.Clone());//
                dsTemp.Tables.Add(dsBillXSD.CON_PAT_BILLING.Clone());//
                dsTemp.Tables.Add(dsBillXSD.REG_PAT_BILLING.Clone());//
                dsTemp.Tables.Add(dsBillXSD.REG_PATIENT_REGISTRATION.Clone());//
                dsTemp.Tables.Add(dsBillXSD.INV_PAT_BILLING.Clone());
                dsTemp.Tables.Add(dsBillXSD.GEN_CARD.Clone());
                dsTemp.Tables.Add(dsBillXSD.GEN_MAST_BANK.Clone());
                dsTemp.Tables.Add(dsBillXSD.GEN_PAT_BILLING.Clone());
                dsTemp.Tables.Add(dsBillXSD.GEN_PAT_BILL_ALLOCATION.Clone());//
                dsTemp.Tables.Add(dsBillXSD.INCO_DTLS_SCHEME_ACC.Clone());//
                dsTemp.Tables.Add(dsBillXSD.INCO_DTLS_SCHEME_LIMIT.Clone());//
                dsTemp.Tables.Add(dsBillXSD.BILL_COMMON_DETAILS.Clone());
                dsTemp.Tables.Add(dsBillXSD.PROVIDER_INFORMATION.Clone());//
                dsTemp.Tables.Add(dsBillXSD.SERVICE_CHARGE_CRITERIA.Clone());
                dsTemp.Tables.Add(dsBillXSD.SERVICE_CRITERIA.Clone());
                dsTemp.Tables.Add(dsBillXSD.BILLING_CRITERIA.Clone());//
                dsTemp.Tables.Add(dsBillXSD.GEN_TRANSACTION_HISTORY.Clone());//
                dsTemp.Tables.Add(dsBillXSD.GEN_TRANSACTION.Clone());//
                dsTemp.Tables.Add(dsBillXSD.ADVRET_PAT_BILLING.Clone());
                dsTemp.Tables.Add(dsBillXSD.PAT_PATIENT_ADVRET.Clone());
                dsTemp.Tables.Add(dsBillXSD.ACC_MAST_TRANSACTION.Clone());//
                dsTemp.Tables.Add(dsBillXSD.ACC_DTLS_TRANSACTION.Clone());//
                dsTemp.Tables.Add(dsBillXSD.ACC_DTLS_CHARGE_SPLITUP.Clone());//
                dsTemp.Tables.Add(dsBillXSD.APPT_ALLOCATION.Clone());
                dsTemp.Tables.Add(dsBillXSD.SCHEME_ACCOUNTHEAD_CRITERIA.Clone());//
                dsTemp.Tables.Add(dsBillXSD.PH_AUDIT.Clone());//
                dsTemp.Tables.Add(dsBillXSD.BILLING_AUDIT.Clone());//
                dsTemp.Tables.Add(dsBillXSD.EMR_AUDIT.Clone());//
                dsTemp.Tables.Add(dsBillXSD.PAT_REFERENCE_LETTER.Clone());//
                dsTemp.Tables.Add(dsBillXSD.LIMIT_CRITERIA.Clone());//
                dsTemp.Tables.Add(dsBillXSD.BILLING_PRIORITY.Clone());//
                dsTemp.Tables.Add(dsBillXSD.SCHEME_LIMIT_FETCH.Clone());//
                dsTemp.Tables.Add(dsBillXSD.INCO_APPROVAL_TRANSACTION.Clone());//
                dsTemp.Tables.Add(dsBillXSD.INCO_MAST_APPROVAL.Clone());//
                dsTemp.Tables.Add(dsBillXSD.GEN_BILL_DISCOUNT.Clone());
                /// TASK A1
                dsTemp.Tables.Add(dsBillXSD.ACC_MAST_REVENUE.Clone());//
                dsTemp.Tables.Add(dsBillXSD.ACC_DTLS_REVENUE.Clone());//
                /// TASK A1
                dsTemp.Tables.Add(dsBillXSD.GEN_EXTERNAL_LAB_BILLING.Clone());//
                dsTemp.Tables.Add(dsBillXSD.RADIO_REPORT_STATUS.Clone());//for pacs
                dsTemp.Tables.Add(dsBillXSD.RADIOLOGY_ORDER.Clone());//for pacs
                //for package
                dsTemp.Tables.Add(dsBillXSD.PKG_MAST_PATIENT.Clone());
                dsTemp.Tables.Add(dsBillXSD.PKG_DTLS_PATIENT_SERVICE.Clone());
                dsTemp.Tables.Add(dsBillXSD.PKG_DTLS_PATIENT_LIMIT.Clone());
                dsTemp.Tables.Add(dsBillXSD.PKG_AUDIT.Clone());//
                dsTemp.Tables.Add(dsBillXSD.EMR_PAT_DTLS_PH_ORDER_AUTH.Clone());//
                //GP Transaction
                dsTemp.Tables.Add(dsSOP.InvTransaction.Clone());//
                dsTemp.Tables.Add(dsBillXSD.PH_PAT_DTLS_ORDER.Clone());
                //SCAN
                dsTemp.Tables.Add(dsBillXSD.SCAN_MAST_FILE.Clone());
                dsTemp.Tables.Add(dsBillXSD.SCAN_DTLS_FILE.Clone());
                dsTemp.Tables.Add(dsBillXSD.GEN_FILE_ATTACHMENTS.Clone());
                dsTemp.Tables.Add(dsBillXSD.INCO_DTLS_CONTRACT_ACC.Clone());
                dsTemp.Tables.Add(dsBillXSD.GEN_PAT_BILL_DTLS_ALLOCATION.Clone());//
                dsTemp.Tables.Add(dsBillXSD.ADT_AUDIT.Clone());//
                dsTemp.Tables.Add(dsBillXSD.OT_AUDIT.Clone());//
                dsTemp.Tables.Add(dsBillXSD.GEN_PAT_BILL_ICD.Clone());
                //ADT
                dsTemp.Tables.Add(dsBillXSD.ADT_PAT_BILLING.Clone());
                
                return dsTemp;

            }
            catch (Exception)
            {
                throw;
            }
        }
        bool IsMultipleTimeClearServiceRequired = false;
        private void ClearService()
        {
            try
            {
                if (!IsMultipleTimeClearServiceRequired) //Speed Improve
                {
                    EMRItemSelected = null;
                    //IsQtyEditable = false;//Commented Bug ID-18568
                    IsValidateService = true;
                    BillData.Tables["INV_PAT_BILLING_TEMP"].RejectChanges();
                    BillData.Tables["INV_PAT_BILLING_TEMP"].AcceptChanges();
                    if (BillData.Tables["INV_PAT_BILLING_TEMP"].Rows.Count > 0)
                    {
                        if (SelectedServiceType == (int)ServiceType.Pharmacy)
                        {
                            if (PharmacyDefaultQty != string.Empty)
                            {
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["QTY"] = PharmacyDefaultQty;
                            }
                            StrDuration = "1";
                            StrUnit = "1";
                        }
                        else if (SelectedServiceType == (int)ServiceType.Cafeteria)
                        {
                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["QTY"] = 0;
                        }
                        else
                        {
                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["QTY"] = 1;
                        }
                    }
                    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["AMOUNT"] = 0;
                    IsServiceAdded = false;
                    if (!string.IsNullOrEmpty(ServiceName))
                    {
                        ServiceName = "Nothing";//Set  focus after add a item
                        ServiceName = string.Empty;
                    }
                    BatchOrUnit = null;
                    if (SelectedServiceType != (int)ServiceType.Pharmacy)
                    {
                        EditService = null;
                    }
                    Medicine = null;
                    if (SelectedService != null)
                    {
                        SelectedService = null;
                    }
                    SelectedServiceDetails = null;
                    _FindService = null;
                    IsApplyPriceByUser = false;
                    IsApplyPriceByUserEdit = false;
                    IsDepartmentWiseCopayCalculation = false;
                    Location = null;
                    if (SelectedCPTCode != null)
                        SelectedCPTCode = null;
                    IsServiceNameEnable = true;
                    //bug id 41033
                    ServiceGenirc = string.Empty;
                    IsEditExecuted = false;
                    //end
                    BarCode = string.Empty;
                    if (string.IsNullOrEmpty(SelectedCPTCodeValue) == false) //Speed Improve 
                        SelectedCPTCodeValue = string.Empty;
                    PharamacyUnitSales = null;
                    Quantity = 1;
                    if (Notes != string.Empty)
                    {
                        Notes = string.Empty;
                    }
                    IsGeneric = false;
                    isEmrOrder = false;
                    AllergyRemarks = string.Empty;
                    ApprovalNo = string.Empty;
                    SelectedDate = DateTime.Now;
                    Remarks = string.Empty;
                    BillingRemarks = string.Empty;
                    DisableOnServiceAddedIntoGrid();
                    if (Form.KIIsNotNullAndRowCount())
                    {
                        Form = null;
                    }
                    if (Route.KIIsNotNullAndRowCount())
                    {
                        Route = null;
                    }
                    if (Frequency.KIIsNotNullAndRowCount())
                    {
                        Frequency = null;
                    }
                    if (Duratioin.KIIsNotNullAndRowCount())
                    {
                        Duratioin = null;
                    }
                    if (Urgency.KIIsNotNullAndRowCount())
                    {
                        Urgency = null;
                    }
                    if (DrugUnit.KIIsNotNullAndRowCount())
                    {
                        DrugUnit = null;
                    }
                    if (AdminInstruction.KIIsNotNullOrEmpty())
                    {
                        AdminInstruction = null;
                    }
                    StartDate = System.DateTime.Now;
                    if (TempGeneric.KIIsNotNullAndRowCount())
                    {
                        TempGeneric.DefaultView.RowFilter = string.Empty;
                        Generic = TempGeneric;
                    }
                    DrugDetails = string.Empty;
                    StrDrugUnit = string.Empty;
                    AllergyRemarks = string.Empty;
                    IsNormalOrder = true;
                    DoseValue = 0;
                    DoseUnit = string.Empty;
                    txtServiceRemarks = string.Empty;
                    DtTestPriority = null;
                    AdmnInstName = string.Empty;
                    IsConsumable = true;
                    StrFreqHours = string.Empty;
                    SelectedBatchOrUnit = null;
                    SelectedPharamacyUnitSales = null;
                    IsBarCodeSearchbyManual = true;
                    drMedicineRowbyManual = null;
                    //SelectedFrequencyvalue = null;
                    //IsBarCodeSearch = false;
                    IsBarCodeFocus = true;
                    IsBarCodeFocus = false;
                    barcodeBatch = string.Empty;
                    EditService = null; //bug id 40686
                    SelectedCostCenterValue = -1;
                    if (IsClearDiscRow)
                    {
                        drDisContinueStatus = null;
                    }

                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void FillPriority()
        {
            DataTable dtTempPriority = new DataTable();
            dtTempPriority.Columns.Add("PriorityId", typeof(int));
            dtTempPriority.Columns.Add("PriorityName", typeof(string));
            dtTempPriority.Rows.Add(0, Infologics.Medilogics.Enumerators.Investigations.TestPriority.Routine);
            dtTempPriority.Rows.Add(1, Infologics.Medilogics.Enumerators.Investigations.TestPriority.STAT);
            dtTempPriority.Rows.Add(2, Infologics.Medilogics.Enumerators.Investigations.TestPriority.ASAP);
            dtTempPriority.Rows.Add(3, Infologics.Medilogics.Enumerators.Investigations.TestPriority.PreOp);
            DtTestPriority = dtTempPriority;
        }

        private void tblServiceType_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (e.OriginalSource is TabControl)
            {
                UICursorService.SetCursorState();
                if (tabServiceOrder.IsSelected == true)
                {
                    ucServiceDeliveryServicesDescription.IsArrangeServiceOrderColumn = true;
                    SelectedServiceType = IsCafeteriaOthersBilling == true ? (int)ServiceType.Cafeteria : IsEmployeeBilling == true ? (int)ServiceType.Cafeteria
                        : IsCafeteriaBillingForIP == true ? (int)ServiceType.Cafeteria : (int)ServiceType.Investigation;
                    ucServiceDeliveryServiceOrderDtls.SelectedServiceType = SelectedServiceType;
                    IsPharmacySelected = false;
                }
                else if (tabPharmacyOrder.IsSelected == true)
                {
                    ucServiceDeliveryPharmacyDescription.IsFromPharmacyPanel = IsFromPharmacyPanel;
                    ucServiceDeliveryPharmacyDescription.IsArrangeServiceOrderColumn = false;                    
                    SelectedServiceType = (int)ServiceType.Pharmacy;
                    IsVerificationCollapse = Visibility.Collapsed;
                    IsPharmacySelected = true;
                    StrDiagnosis = "Pharmacy Order                    Diagnosis :";
                    //if (!EnableVerificationSettingBased)
                    //{
                    //    ucServiceDeliveryPharmacyDescription.EnableVerificationSettingBased = false;
                    //}
                    //if (BillData != null && BillData.Tables.Contains("INV_PAT_BILLING") && BillData.Tables["INV_PAT_BILLING"].Rows.Count == 0)
                    //{
                    //    VerificationFetch();
                    //}
                    if (Generic.KIIsNotNullAndRowCount())
                    {
                        TempGeneric = Generic.Copy();
                    }
                }
                else if (tabCafeteriaOrder.IsSelected == true)
                {
                    //ucCafeteriaDeliveryServicesDescription.IsArrangeServiceOrderColumn = true;
                    //SelectedServiceType = IsCafeteriaOthersBilling == true ? (int)ServiceType.Cafeteria : IsEmployeeBilling == true ? (int)ServiceType.Cafeteria
                    //    : IsCafeteriaBillingForIP == true ? (int)ServiceType.Cafeteria : (int)ServiceType.Investigation;
                    //ucServiceDeliveryServiceOrderDtls.SelectedServiceType = SelectedServiceType;
                    //IsPharmacySelected = false;
                    ucCafeteriaDeliveryServicesDescription.IsArrangeServiceOrderColumn = true;
                    SelectedServiceType = (int)ServiceType.Cafeteria;
                    ucCafeteriaDeliveryServiceOrderDtls.SelectedServiceType = SelectedServiceType;

                    IsPharmacySelected = false;
                }
            }
        }

        private void VerificationFetch()
        {
            try
            {
                if (PatientInformation != null && PatientInformation.Rows.Count > 0 && EnableVerificationSettingBased)
                {
                    LoadMedicines();
                    MainBilling objMainBilling = new MainBilling();
                    DataTable dtFetch = new DataTable();
                    dtFetch.Columns.Add("MRNO", typeof(string));
                    dtFetch.Columns.Add("MODE", typeof(int));
                    dtFetch.Columns.Add("EMR_PAT_DTLS_PH_ORDER_ID", typeof(long));
                    DataTable dtTempVal = new DataTable();
                    if (VerificationEmrOrderData.KIIsNotNullAndRowCount())
                    {
                        dtTempVal = VerificationEmrOrderData.Copy();
                    }
                    else
                    {
                        dtFetch.Rows.Add(PatientInformation.Rows[0]["MRNO"], 1, DBNull.Value);
                        dtTempVal = objMainBilling.FetchPhDtlsOrder(dtFetch);
                    }
                    if (dtTempVal != null && dtTempVal.Rows.Count > 0)
                    {
                        //if (BillData.Tables["PH_PAT_DTLS_ORDER"] != null && BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Count > 0)
                        //{
                        //    BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Clear();
                        //}
                        //BillData.Tables["PH_PAT_DTLS_ORDER"].Merge(dtTempVal);
                        foreach (DataRow drRow in dtTempVal.Rows)
                        {
                            if (FOData.Medicines.KIIsNotNullAndRowCount() && FOData.Medicines.Select("INV_MAST_SERVICE_ID=" + drRow["BRAND_ID"]).Count() > 0)
                            //(dsServiceData != null && dsServiceData.Tables["INV_MAST_SERVICE"].KIIsNotNullAndRowCount() && dsServiceData.Tables["INV_MAST_SERVICE"].Select("PRIMARY_ID=" + drRow["BRAND_ID"]).Count() > 0)
                            {
                                if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail") && EMROrderRelation.Tables["Detail"].KIIsNotNullAndRowCount())
                                {
                                    DataRow[] drFilter = EMROrderRelation.Tables["Detail"].AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_DTLS_INV_ORDER_ID"]) == IfNullReturnZero(drRow["EMR_PAT_DTLS_PH_ORDER_ID"]))
                                                .Select(x => x).ToArray();
                                    if (drFilter.Any())
                                    {
                                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["ENTRY_DATE"] = drFilter[0]["ENTRY_DATE"];
                                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PROVIDER_VISIT_ID"] = drFilter[0]["EMR_PROVIDER_VISIT_ID"];
                                        if (Convert.ToString(drFilter[0]["PROVIDER_ID"]) != SelectedProviderIDValue && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
                                        {
                                         /*   Executed_RefreshItemList(null, null);
                                            IsVerificationLoaded = false;
                                            emrPatDtlsID = 0;
                                            VerificationQtyUnit = string.Empty;
                                            continue;*/
                                        }
                                        else if (Convert.ToString(drFilter[0]["PROVIDER_ID"]) != SelectedProviderIDValue && BillData.Tables["INV_PAT_BILLING"].Rows.Count == 0 && !isOnloadPharmacy)
                                        {
                                            IsClearDiscRow = false;//bug id 43034
                                            OnLoadEncounterEpisodeNo(Convert.ToString(drFilter[0]["PROVIDER_ID"]), false, true);
                                            IsClearDiscRow = true;
                                        }
                                        //to handle the O-D quantity unit and combobox quantity unit mismatch
                                        Int64 billedqty = 0;
                                        billedqty = Convert.ToInt64(IfNullReturnZero(drFilter[0]["BILLED_QTY"])) - Convert.ToInt64(IfNullReturnZero(drFilter[0]["RETURN_QTY"]));
                                        if (billedqty == 0)
                                        {
                                            drFilter[0]["QTY"] = IfNullReturnZero(drRow["QUANTITY"]);
                                        }
                                        //end
                                    }
                                }
                                DataTable dtPatDtls = new DataTable();
                                dtPatDtls = drRow.Table.Clone();
                                dtPatDtls.Columns["SL_NO"].DataType = typeof(Int32);
                                dtPatDtls.Columns["SUBSTITUTE_MEDICINE_ID"].DataType = typeof(Int64);
                                dtPatDtls.Rows.Add();
                                dtPatDtls.Rows[0].ItemArray = drRow.ItemArray;
                                IsVerificationLoaded = true;
                                if (drRow["EMR_PAT_DTLS_PH_ORDER_ID"] != DBNull.Value)
                                {
                                    emrPatDtlsID = Convert.ToInt64(drRow["EMR_PAT_DTLS_PH_ORDER_ID"]);
                                }
                                decimal FilterSubLoc = IfNullReturnZero(drRow["IS_HL7_ORDER"]) == 0 ? IP_Gen_App_Sub_Location : IfNullReturnZero(IPVerificationLocation);
                                DataRow dr = FOData.Medicines.Select("INV_MAST_SERVICE_ID=" + drRow["BRAND_ID"] + " AND PH_SUBLOCATION_ID = " + FilterSubLoc).First();
                                DataTable dttemp = new DataTable();
                                if (dsServiceData != null)
                                {
                                    dttemp = dsServiceData.Tables["INV_MAST_SERVICE"].Clone();
                                }
                                else
                                {
                                    dttemp = FOData.Medicines.Clone();
                                    if (!dttemp.Columns.Contains("Name"))
                                    {
                                        dtMedicines.Columns.Add("Name");
                                    }
                                    if (dttemp.Columns.Contains("INV_MAST_SERVICE_ID") && !dttemp.Columns.Contains("PRIMARY_ID"))
                                    {
                                        dttemp.Columns["INV_MAST_SERVICE_ID"].ColumnName = "PRIMARY_ID";
                                    }
                                }                                
                                dttemp.Rows.Add();
                                dttemp.Rows[0].ItemArray = dr.ItemArray;
                                VerificationQtyUnit = Convert.ToString(drRow["QUANTITY_UNIT"]);
                                SelectedService = dttemp.DefaultView[dttemp.Rows.IndexOf(dttemp.Rows[0])];
                                Service = dr;
                                StrDuration = Convert.ToString(drRow["DURATION"]);
                                StrDrugUnit = Convert.ToString(drRow["DOSE"]);
                                if (drRow.Table.Columns.Contains("FREQUENCY") && FrequencyTemp.KIIsNotNullAndRowCount() && drRow["FREQUENCY"] != DBNull.Value)
                                {
                                    if (FrequencyTemp.Select("EMR_LOOKUP_ID='" + drRow["FREQUENCY"] + "'").Count() > 0)
                                    {
                                        DataRow DrRow = FrequencyTemp.Select("EMR_LOOKUP_ID=" + Convert.ToInt64(drRow["FREQUENCY"])).First();
                                        SelectedFrequency = FrequencyTemp.DefaultView[FrequencyTemp.Rows.IndexOf(DrRow)];
                                    }
                                }
                                if (drRow.Table.Columns.Contains("DOSE_UNIT") && DrugUnitTemp.KIIsNotNullAndRowCount() && drRow["DOSE_UNIT"] != DBNull.Value)
                                {
                                    if (DrugUnitTemp.Select("LOOKUP_VALUE='" + drRow["DOSE_UNIT"] + "'").Count() > 0)
                                    {
                                        DataRow DrRow = DrugUnitTemp.Select("LOOKUP_VALUE='" + drRow["DOSE_UNIT"] + "'").First();
                                        SelectedDose = DrugUnitTemp.DefaultView[DrugUnitTemp.Rows.IndexOf(DrRow)];
                                    }
                                }
                                if (drRow.Table.Columns.Contains("DURATION_TYPE") && Duratioin.KIIsNotNullAndRowCount() && drRow["DURATION_TYPE"] != DBNull.Value)
                                {
                                    if (Duratioin.Select("KEY=" + drRow["DURATION_TYPE"]).Count() > 0)
                                    {
                                        DataRow DrRow = Duratioin.Select("KEY=" + drRow["DURATION_TYPE"]).First();
                                        SelectedDuratioin = Duratioin.DefaultView[Duratioin.Rows.IndexOf(DrRow)];
                                    }
                                }
                                if (drRow.Table.Columns.Contains("ROUTE") && Route.KIIsNotNullAndRowCount() && drRow["ROUTE"] != DBNull.Value)
                                {
                                    if (Route.Select("ROUTE='" + drRow["ROUTE"] + "'").Count() > 0)
                                    {
                                        DataRow DrRow = Route.Select("ROUTE='" + drRow["ROUTE"] + "'").First();
                                        SelectedRoute = Route.DefaultView[Route.Rows.IndexOf(DrRow)];
                                    }
                                }
                                if (drRow.Table.Columns.Contains("FORM") && Form.KIIsNotNullAndRowCount() && drRow["FORM"] != DBNull.Value)
                                {
                                    if (Form.Select("FORM='" + drRow["FORM"] + "'").Count() > 0)
                                    {
                                        DataRow DrRow = Form.Select("FORM='" + drRow["FORM"] + "'").First();
                                        SelectedForm = Form.DefaultView[Form.Rows.IndexOf(DrRow)];
                                    }
                                }
                                if (drRow.Table.Columns.Contains("PRIORITY") && drRow["PRIORITY"] != DBNull.Value
                                        && Urgency.KIIsNotNullAndRowCount())
                                {
                                    dr = Urgency.Select("KEY=" + drRow["PRIORITY"]).First();
                                    SelectedUrgency = Urgency.DefaultView[Urgency.Rows.IndexOf(dr)];
                                }
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["QTY"] = IfNullReturnZero(drRow["QUANTITY"]);
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["ISVERIFICATION"] = true;
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_VERIFIED"] = 1;
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_INV_ORDER_ID"] = IfNullReturnZero(drRow["EMR_PAT_DTLS_PH_ORDER_ID"]);
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_MEDICATION_ID"] = IfNullReturnZero(drRow["EMR_PAT_DTLS_PH_ORDER_ID"]);                                
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["PH_PAT_DTLS_ORDER_ID"] = IfNullReturnZero(drRow["PH_PAT_DTLS_ORDER_ID"]);
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["ISORDERWISEBILL"] = 1;
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["GENERIC_ID"] = IfNullReturnZero(drRow["GENERIC_ID"]);
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["GRANULAR_UNIT"] = IfNullReturnZero(drRow["GRANULAR_UNIT"]);
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["ALLERGY_REASON"] = drRow["REASON_OVERRIDE_ALLERGY"];
                                if (BillData.Tables["INV_PAT_BILLING"].Rows.Count == 0 &&
                                    BillData.Tables["PH_PAT_DTLS_ORDER"] != null && BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Count > 0)
                                {
                                    BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Clear();
                                }                                
                                if (SelectedProvider != null)
                                {
                                    isThrowMessage = false;
                                    this.AddPharmacy();
                                    isThrowMessage = true;
                                    //this lines are using for label print
                                    if (dtPatDtls.KIIsNotNullAndRowCount() && IfNullReturnZero(dtPatDtls.Rows[0]["EMR_PAT_DTLS_PH_ORDER_ID"]) > 0)
                                    {
                                        AddColumn<string>(dtPatDtls, "DOSE_FOR_PRESCRIPTION");
                                        AddColumn<string>(dtPatDtls, "NUMBER_OF_DOSE");
                                        AddColumn<string>(dtPatDtls, "ISCONSUMABLE");
                                        AddColumn<string>(dtPatDtls, "ISINFUSION");
                                        AddColumn<string>(dtPatDtls, "GENERIC_NAME");
                                        AddColumn<string>(dtPatDtls, "FLUID_NAME");
                                        AddColumn<string>(dtPatDtls, "IV_QUANTITY");
                                        AddColumn<string>(dtPatDtls, "IV_QUANTITY_UNIT");
                                        AddColumn<string>(dtPatDtls, "RATE");
                                        AddColumn<decimal>(dtPatDtls, "ISLABEL");
                                        DataTable dtCriteria = new DataTable();
                                        dtCriteria.Columns.Add("MODE");
                                        dtCriteria.Columns.Add("EMR_PAT_DTLS_PH_ORDER_ID");
                                        dtCriteria.Rows.Add(15, dtPatDtls.Rows[0]["EMR_PAT_DTLS_PH_ORDER_ID"]);
                                        DataTable dtPrintData = new CommonShared.PharmacyMain.MainPharmacyShared().FetchPharmacyPrintingDetails(dtCriteria);
                                        dtPatDtls.Rows[0]["DOSE_FOR_PRESCRIPTION"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["DOSE_FOR_PRESCRIPTION"] : string.Empty;
                                        dtPatDtls.Rows[0]["NUMBER_OF_DOSE"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["NUMBER_OF_DOSE"] : 0;
                                        dtPatDtls.Rows[0]["ISCONSUMABLE"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["ISCONSUMABLE"] : 0;
                                        dtPatDtls.Rows[0]["ISINFUSION"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["ISINFUSION"] : 0;
                                        dtPatDtls.Rows[0]["GENERIC_NAME"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["GENERIC_NAME"] : string.Empty;
                                        dtPatDtls.Rows[0]["FLUID_NAME"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["FLUID_NAME"] : string.Empty;
                                        dtPatDtls.Rows[0]["IV_QUANTITY"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["IV_QUANTITY"] : string.Empty;
                                        dtPatDtls.Rows[0]["IV_QUANTITY_UNIT"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["IV_QUANTITY_UNIT"] : string.Empty;
                                        dtPatDtls.Rows[0]["RATE"] = (dtPrintData.Rows.Count > 0 && dtPrintData.Rows[0]["DURATION_UNIT_TYPE"] != DBNull.Value) ? Convert.ToString(dtPrintData.Rows[0]["DURATION_UNIT"]) + " " + new Infologics.Medilogics.General.Control.Common().GetDescription((Enumerators.EMR.DurationUnitType)(Convert.ToInt32(dtPrintData.Rows[0]["DURATION_UNIT_TYPE"]))) : string.Empty;
                                        if (BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_DTLS_INV_ORDER_ID"]) ==
                                            IfNullReturnZero(dtPatDtls.Rows[0]["EMR_PAT_DTLS_PH_ORDER_ID"]) && IfNullReturnZero(x["IS_CHILD_ITEM"]) == 0).Any())
                                        {
                                            dtPatDtls.Rows[0]["ISLABEL"] = true;
                                        }
                                    }
                                    //this lines are using for label print
                                    BillData.Tables["PH_PAT_DTLS_ORDER"].Merge(dtPatDtls.Copy());
                                }
                                if (BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
                                {
                                    int count = BillData.Tables["INV_PAT_BILLING"].Rows.Count - 1;
                                    if (IfNullReturnZero(BillData.Tables["INV_PAT_BILLING"].Rows[count]["EMR_PAT_DTLS_INV_ORDER_ID"]) == 0)
                                    {
                                        BillData.Tables["INV_PAT_BILLING"].Rows[count]["EMR_PAT_DTLS_INV_ORDER_ID"] = IfNullReturnZero(drRow["EMR_PAT_DTLS_PH_ORDER_ID"]);
                                    }
                                }
                                IsVerificationLoaded = false;
                                emrPatDtlsID = 0;
                                VerificationQtyUnit = string.Empty;
                            }
                        }
                        SerialNoCount();
                    }
                }
            }
            catch (Exception)
            {                
                throw;
            }
        }

        /// <summary>
        /// Changes the intital data based on the servicetype..
        /// </summary>
        /// <param name="serviceType">Type of the service.</param>
        private void SetIntitalData(int serviceType)
        {
            try
            {
                Mouse.OverrideCursor = Cursors.Wait;
                Services = null;
                DataRow drDetails = BillData.Tables["BILL_COMMON_DETAILS"].Rows[0];
                drDetails["ISRELATED_SERVICE"] = 0;
                drDetails["ISMULTIHOSPITAL"] = CommonData.IsMultiHospital;
                string PACS = CommonData.GetDefaultSettings("PACS HAS INTEGRATION");
                drDetails["PACS_INTEGRATION"] = PACS;
                //Set rounding decimal places.
                drDetails["DECIMAL_PLACE"] = CommonData.DecimalPlace;
                DataTable dtCommon = null;
                if (ProviderTemp == null && Provider != null)
                {
                    ProviderTemp = Provider.Copy();
                }
                switch ((ServiceType)serviceType)
                {
                    case ServiceType.IncomingService:
                        SelectedVisitMode = VisitMode.OPCREDIT;
                        IsEnabledLabOrSubLocationValue = true;
                        this.LoadCategory();
                        drDetails["HOSPITAL_ID"] = CommonData.HospitalID;
                        LoadExternalLab();
                        break;
                    case ServiceType.Advance:
                        break;
                    case ServiceType.Investigation:
                        IsCPOEKOTOrderExist = false;
                        LoadSubLocations();
                        if (FOData.SubLocations.KIIsNotNullAndRowCount())
                        {
                            PHSubLocations = FOData.SubLocations.Copy();
                        }
                        else
                        {
                            FOData.FetchSubLocations();
                            PHSubLocations = FOData.SubLocations.Copy();
                        }
                        if (PHSubLocations.KIIsNotNullAndRowCount())
                        {
                            PHSubLocations.Columns["PH_SUBLOCATION_ID"].ColumnName = "INCO_MAST_ID";
                        }
                        if (FOData.Medicines.KIIsNotNullAndRowCount())
                        {
                            ServiceMedicine = FOData.Medicines.Copy();
                        }
                        else
                        {
                            FOData.FetchMedicines();
                            ServiceMedicine = FOData.Medicines.Copy();
                        }
                        IsEnabledLabOrSubLocationValue = false;
                        if (ProviderTemp.KIIsNotNullAndRowCount())
                        {
                            Provider = ProviderTemp.Copy();
                        }
                        if (PatientInformation != null && PatientInformation.Rows.Count > 0)
                        {
                            //     1. EMR Details
                            //this.SetInitalData_EMRCPOE(); // implemented in clearbill()
                            ///    2. Services details
                            ///    
                            if (SelectedProvider != null && IsLoadEMRCPOE) //&& !
                            {
                                this.SetInitalData_EMRCPOE();
                            }
                            if (Services == null || Category == null)
                            {
                                this.SetInitalData_Services();
                            }
                            CategorySelectedValue = 0;
                            CategorySelectedValue = -1;
                            drDetails["HOSPITAL_ID"] = InvestigationData.HospitalID;
                            dtCommon = CommonData.GetDefaultSettings(0, "INVESTIGATION DISCOUNT ACCOUNT HEAD");
                            if (IsPackage && SelectedPackageItem != null)
                            {
                                SelectedProviderValue = SelectedPackageItem["PROVIDER_ID"].ToString();
                            }
                        }
                        if (SelectedVisitModeNew == 0)
                        {
                            IsAdjustmentEnable = true;
                        }
                        if (IsDonor)
                        {
                            //LoadVisitType();
                            //DataRow drNew = VisitType.NewRow();
                            //drNew["VISIT_TYPE"] = "OP";
                            //drNew["TYPE_NAME"] = "CASH";
                            //drNew["KEY"] = (int)VisitMode.OPCASH;
                            //VisitType.Rows.Add(drNew);
                            SelectedVisitModeNew = 0;
                            IsEnableVisitType = false;
                            ucServiceDeliveryServicesDescription.IsArrangeServiceOrderColumn = false;
                            ucServiceDeliveryServicesDescription.IsDonor = true;
                            ucServiceDeliveryServicesDescription.IsArrangeServiceOrderColumn = true;

                            ucCafeteriaDeliveryServicesDescription.IsArrangeServiceOrderColumn = false;
                            ucCafeteriaDeliveryServicesDescription.IsDonor = true;
                            ucCafeteriaDeliveryServicesDescription.IsArrangeServiceOrderColumn = true;

                            this.LoadDonorServices();
                        }
                        if (CommonData.SelectedModule == Infologics.Medilogics.Enumerators.General.Module.Pharmacy)
                        {
                            SelectedPHSubLocationsValue = SelectedLabOrSubLocationValue;
                        }
                        else
                        {
                            SelectedPHSubLocationsValue = DBNull.Value.KIToDecimal();
                        }
                        break;
                    case ServiceType.Pharmacy:
                        IsCPOEKOTOrderExist = false;
                        IsEnabledLabOrSubLocationValue = true;
                        if (ProviderTemp.KIIsNotNullAndRowCount())
                        {
                            Provider = ProviderTemp.Copy();
                        }
                        //JUBILEE
                        dtCommon = CommonData.GetDefaultSettings(0, "IS INVENTORY APPLICABLE");
                        drDetails["INVENTORY_APPLICABLE"] = (dtCommon != null && dtCommon.Rows.Count > 0) ? dtCommon.Rows[0]["VALUE"] : 0;
                        this.LoadCategory();

                        if (DefaultSettings.Values.IS_VERIFICATION_REQUIRED && IsFromPharmacyPanel 
                            && Convert.ToInt16(SelectedVisitModeNew) == (int)VisitMode.IP)
                        {
                            EnableVerificationSettingBased = true;
                        }
                        if (IsFromPharmacyPanel && EnableVerificationSettingBased && SelectedVisitModeNew == (int)VisitMode.IP)
                        {
                            //skiping by mohd adil for new requiremnt of verification
                            EMROrderRelation = null;
                        }
                        else if (SelectedProvider != null && IsLoadEMRCPOE) //&& !IsLoadEMRCPOE
                        {
                            this.SetInitalData_EMRCPOE();
                        }
                        this.LoadSubLocations();
                        dtCommon = CommonData.GetDefaultSettings(0, "PHARMACY DISCOUNT ACCOUNT HEAD");
                        drDetails["HOSPITAL_ID"] = InvestigationData.HospitalID;
                        if (Generic == null || Generic.Rows.Count == 0)
                        {
                            if (FOData.Generics != null)
                            {
                                Generic = FOData.Generics.Copy();
                            }
                            else if (FOData.Generics == null && Generics != null)
                            {
                                Generic = Generics.Copy();
                            }
                            if(Generic!=null && Generic.Rows.Count>0)
                                Generic.DefaultView.Sort = "LOOKUP_VALUE ASC";
                        }
                        if (SelectedVisitModeNew == 0)
                        {
                            IsAdjustmentEnable = true;
                        }
                        break;
                    case ServiceType.Cafeteria:
                        if (Services == null || Category == null)
                        {
                            this.SetInitalData_Services();
                        }
                        LoadSalesCategoryType();
                        if (IsPatient == false || (IsFromCafeteria && !IsCafeteriaBillingForIP))
                        {
                            Provider = LoadCafeteriaProvider();
                        }
                        CategorySelectedValue = 0;
                        CategorySelectedValue = -1;
                        SalesCategorySelectedValue = SalesCategory != null && SalesCategory.ToTable().Rows.Count > 0
                            && SalesCategory.ToTable().Rows[0]["FIELD1"] != DBNull.Value
                         ? Convert.ToDecimal(SalesCategory.ToTable().Rows[0]["FIELD1"]) : -1;
                        this.SetInitalData_EMRCPOE();
                        dtCommon = CommonData.GetDefaultSettings(0, "CAFETERIA DISCOUNT ACCOUNT HEAD");
                        drDetails["HOSPITAL_ID"] = InvestigationData.HospitalID;
                        DataTable dtServiceCharge = CommonData.GetDefaultSettings(0, "CAFETERIA SERVICE CHARGE SERVICE TAX RATE");
                        break;
                    default:
                        break;
                }
                if (dtCommon != null && dtCommon.Rows.Count > 0)
                {
                    drDetails["DISCOUNTSERVICE_ACCHEAD"] = dtCommon.Rows[0]["VALUE"];
                }
                else
                {
                    drDetails["DISCOUNTSERVICE_ACCHEAD"] = DBNull.Value;
                }
                dtCommon = CommonData.GetDefaultSettings(0, "PACKAGE_DISCOUNT_ACCHEAD");
                if (dtCommon.KIIsNotNullAndRowCount())
                {
                    drDetails["PACKAGE_DISCOUNT_ACCHEAD"] = dtCommon.Rows[0]["VALUE"];
                }
                dtCommon = CommonData.GetDefaultSettings(0, "CONTROL ACCOUNT HEAD");
                if (dtCommon != null && dtCommon.Rows.Count > 0)
                {
                    drDetails["CONTROL_ACCOUNT_HEAD"] = dtCommon.Rows[0]["VALUE"]; ;
                }
                dtCommon = CommonData.GetDefaultSettings(0, "SERVICE_TAX_ACCOUNT_HEAD");
                if (dtCommon != null && dtCommon.Rows.Count > 0)
                {
                    drDetails["SERVICE_TAX_ACCOUNT_HEAD"] = dtCommon.Rows[0]["VALUE"]; ;
                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                Mouse.OverrideCursor = null;
            }
        }
        private void LoadSalesCategoryType()
        {
            try
            {
                bool HasPrivilege = false;
                StringBuilder Filter = new StringBuilder();
                Filter.Append("FIELD5='aaa'");
                SalesCategory = CommonData.GetLookupData("CAFETERIA SALES CATEGORY").DefaultView;
                //HasPrivilege = CommonData.CheckPrivilege("FO_CAFETERIA_ROOMSERVICE"); // Commented By Soorajlal for Food and Beverage
                if (CommonData.SelectedModule == Infologics.Medilogics.Enumerators.General.Module.FoodAndBeverage)
                {
                    Filter.Append(" OR FIELD5=" + "'FO_CAFETERIA_ROOMSERVICE'");
                }
                //HasPrivilege = CommonData.CheckPrivilege("FO_CAFETERIA_RESTAURANT"); // Commented By Soorajlal for Food and Beverage
                if (CommonData.SelectedModule == Infologics.Medilogics.Enumerators.General.Module.FoodAndBeverage)
                {
                    Filter.Append(" OR FIELD5=" + "'FO_CAFETERIA_RESTAURANT'");
                }
                //HasPrivilege = CommonData.CheckPrivilege("FO_CAFETERIA_ADMINISTRATOR"); // Commented By Soorajlal for Food and Beverage
                if (CommonData.SelectedModule == Infologics.Medilogics.Enumerators.General.Module.FoodAndBeverage)
                {
                    Filter.Append(" OR FIELD5=" + "'FO_CAFETERIA_ADMINISTRATOR'");
                }
                SalesCategory.RowFilter = Filter.ToString();
                //////FIELD6 = 0 -- All (but not set for any category)
                //////FIELD6 = 1 –- Billing possible for Others only
                //////FIELD6 = 2 -- Billing possible for Others and Employee
                //////FIELD6 = 3 -- Billing possible for IP only
                ////if (IsCafeteriaOthersBilling)
                ////{
                ////    SalesCategory.RowFilter = "FIELD6 IS NOT NULL AND FIELD6 IN(0,1,2)";
                ////}
                ////else if (IsEmployeeBilling)
                ////{
                ////    SalesCategory.RowFilter = "FIELD6 IS NOT NULL AND FIELD6 IN(0,2)";
                ////}
                ////else if (IsCafeteriaBillingForIP)
                ////{
                ////    SalesCategory.RowFilter = "FIELD6 IS NOT NULL AND FIELD6 IN(0,3)";
                ////}
                SalesCategorySelectedValue = SalesCategory != null && SalesCategory.ToTable().Rows.Count > 0 && SalesCategory.ToTable().Rows[0]["FIELD1"] != DBNull.Value
                    ? Convert.ToDecimal(SalesCategory.ToTable().Rows[0]["FIELD1"]) : -1;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void SetInitalData_Services()
        {
            try
            {
                if (IsFromEMRBilling)
                {
                    FetchStaticData();
                }

                //Category
                this.LoadCategory();
                //Services
                if (!IsFromCoderReview)
                    dsServiceData = this.LoadServices();
                if (IsFromCoderReview && dsServiceData == null)
                    dsServiceData = this.LoadServices();
                if (dsServiceData != null)
                {
                    if (dsServiceData.Tables["INV_MAST_SERVICE"].Columns.Contains("INV_MAST_SERVICE_ID")
                           && !dsServiceData.Tables["INV_MAST_SERVICE"].Columns.Contains("PRIMARY_ID"))
                    {
                        dsServiceData.Tables["INV_MAST_SERVICE"].Columns["INV_MAST_SERVICE_ID"].ColumnName = "PRIMARY_ID";
                    }
                }
                if (!IsPackage)
                {
                }
                else
                {
                    string[] parentID = (from dr in dsServiceData.Tables["INV_MAST_SERVICE"].AsEnumerable()
                                         where dr.RowState != DataRowState.Deleted && dr["PARENT_INV_CATEGORY_ID"] != DBNull.Value
                                         select Convert.ToString(dr["PARENT_INV_CATEGORY_ID"])).ToArray();
                    if (parentID.Length > 0)
                    {
                        Category.RowFilter = "INV_CATEGORY_ID=-1 OR (ISROOT=1 AND SERVICE_TYPE=" + SelectedServiceType + ") AND ROOT_INV_CATEGORY_ID IN(" + string.Join(",", parentID) + ")";
                        Category.Sort = "NAME ASC";
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }


        private void LoadCategory()
        {
            try
            {
                if (dtCategory == null)
                {
                    MainMasterSettings objMainInvestigation = new MainMasterSettings();
                    dtCategory = objMainInvestigation.FetchCategory(0, 4, Validity.Valid); //4-selectMode -FETCH ALL
                    
                    // Disabling Package Category from loading in ServiceDelivery Window -- Version 3.0 UAE  19.05.2016
                    DataTable dtBaseCategory = CommonClient.Controls.StaticData.CommonData.GetLookupData("BASE CATEGORY");
                    DataRow[] drBaseCat = dtBaseCategory.Select("FIELD2 = '" + Convert.ToInt16(BaseCategory.Package) + "'");
                    if (drBaseCat.Any())
                    {
                        dtCategory.DefaultView.RowFilter = "ROOT_INV_CATEGORY_ID NOT IN (" + Convert.ToInt32(drBaseCat[0]["LOOKUP_VALUE"]) + ")";
                        dtCategory = dtCategory.DefaultView.ToTable();
                    }
                    //Completed
                    dtCategory.Rows.Add(-1, "All", null, null, null, null, null, 1, null, null);
                }
                Category = dtCategory.Copy().DefaultView;
   
                int SelectedServiceTypeTemp = SelectedServiceType == (int)ServiceType.IncomingService ? (int)ServiceType.Investigation : SelectedServiceType;

                if (SelectedServiceTypeTemp != (int)ServiceType.Cafeteria)
                {
                    int PharmacyService = (int)ServiceType.Pharmacy;
                    int roomtype = (int)ServiceType.ADT;
                    string filter = string.Empty;
                    if (SelectedVisitMode == VisitMode.IP)
                    {
                        if (IsFromCoderReview)
                        {
                            filter = "INV_CATEGORY_ID = -1 OR (ISROOT=1 AND SERVICE_TYPE IN (" + SelectedServiceTypeTemp + "," + PharmacyService + "))";
                        }
                        else
                        {
                            filter = "INV_CATEGORY_ID = -1 OR (ISROOT=1 AND SERVICE_TYPE IN (" + SelectedServiceTypeTemp + "," + PharmacyService + "," + roomtype + "))";
                        }
                    }
                    else
                    {
                        filter = "INV_CATEGORY_ID = -1 OR (ISROOT=1 AND SERVICE_TYPE IN (" + SelectedServiceTypeTemp + "," + PharmacyService + "))";
                    }
                    Category.Table.TableName = "INV_CATEGORY_TEMP";
                    Category.RowFilter = filter;
                    Category.Sort = "NAME ASC";
                    CategoryTemp = dtCategory.Copy();
                }
                else if (SelectedServiceTypeTemp == (int)ServiceType.Cafeteria)
                {
                    string filter = string.Empty;
                    filter = "INV_CATEGORY_ID = -1 OR (ISROOT<>1 AND SERVICE_TYPE IN (" + SelectedServiceTypeTemp + "))";
                    Category.Table.TableName = "INV_CATEGORY_TEMP";
                    Category.RowFilter = filter;
                    Category.Sort = "NAME ASC";
                    CategoryTemp = dtCategory.Copy();
                }

            }
            catch (Exception)
            {
                throw;
            }
        }

        DataRowView SelectedParentAssociationService = null;

        private bool isAssociatedService = false;
        public bool ISAssociatedService
        {
            get
            {
                return isAssociatedService;
            }
            set
            {
                isAssociatedService = value;
                OnPropertyChanged("ISAssociatedService");
            }
        }

        decimal ParentBaseCharge = 0;
        decimal AssociatedServiceCharge = 0;
        DataTable dtParentExternalLab = null;
        int AssociatedServiceQuanity = 0;

        private void AssignItemAssociationServices(DataRow value)
        {
            try
            {
                 if (SelectedServiceType == (int)ServiceType.Investigation || SelectedServiceType == (int)ServiceType.IncomingService
                  || SelectedServiceType == (int)ServiceType.Pharmacy || SelectedServiceType == (int)ServiceType.Cafeteria)
            {
                if (AssociatedServices.KIIsNotNullAndRowCount())
                {
                    if (Mouse.OverrideCursor == null)
                        Mouse.OverrideCursor = Cursors.Wait;
                    foreach (DataRow dr in AssociatedServices.Rows)
                    {
                        if (dr["ISVALID"] != DBNull.Value && Convert.ToInt16(dr["ISVALID"]) == 1)
                        {
                            DataRow[] drService = SelectedParentAssociationService.Row.Table.Select("PRIMARY_ID = '" + dr["INV_MAST_SUB_SERVICE_ID"] + "'");
                            if (drService.Count() > 0)
                            {
                                ISAssociatedService = true;
                                if (dr["PERCENTAGE"] != DBNull.Value && ParentBaseCharge > 0)
                                {
                                    AssociatedServiceCharge = ParentBaseCharge * (Convert.ToDecimal(dr["PERCENTAGE"]) / 100);
                                }
                                if (dr["QUANTITY"] != DBNull.Value && Convert.ToInt16(dr["QUANTITY"]) > 0)
                                {
                                    AssociatedServiceQuanity = Convert.ToInt16(dr["QUANTITY"]);
                                }
                                else
                                {
                                    AssociatedServiceQuanity = 1;
                                }
                                SelectedService = SelectedParentAssociationService.Row.Table.DefaultView[SelectedParentAssociationService.Row.Table.Rows.IndexOf(drService[0])];
                                if (dr["SERVICE_TYPE"] != DBNull.Value && Convert.ToInt16(dr["SERVICE_TYPE"]) == (int)ServiceType.Investigation)
                                {
                                    AddService();
                                }
                                else if (dr["SERVICE_TYPE"] != DBNull.Value && Convert.ToInt16(dr["SERVICE_TYPE"]) == (int)ServiceType.Pharmacy)
                                {
                                    AddPharmacy();
                                }
                                else if (dr["SERVICE_TYPE"] != DBNull.Value && Convert.ToInt16(dr["SERVICE_TYPE"]) == (int)ServiceType.Consultation)
                                {
                                    AddService();
                                }
                            }
                        }
                    }
                }
            }
            }
            catch (Exception)
            {
                
                throw;
            }

            finally
            {
                Mouse.OverrideCursor = null;
            }
        }
        DataTable dtBedDetails = null;
        private void AssignSelectedService(DataRow value)
        {
            try
            {
                long ServiceId = 0;
                if (SelectedServiceType == (int)ServiceType.Investigation || SelectedServiceType == (int)ServiceType.IncomingService
                || SelectedServiceType == (int)ServiceType.Pharmacy || SelectedServiceType == (int)ServiceType.Cafeteria)
                {
                    Service = value;
                    DataTable dtLocation = new DataTable();
                    if (SelectedServiceType == (int)ServiceType.Investigation || SelectedServiceType == (int)ServiceType.IncomingService
                        || SelectedServiceType == (int)ServiceType.Pharmacy || SelectedServiceType == (int)ServiceType.Cafeteria)
                    {

                        if (EMRItemSelected != null && EMRItemSelected.Table.Columns.Contains("COST_CENTER_ID") && EMRItemSelected["COST_CENTER_ID"] != DBNull.Value)
                        {
                            if (EMRItemSelected.Table.Columns.Contains("OP_COST_CENTER_BASED_ON") && EMRItemSelected["OP_COST_CENTER_BASED_ON"] != DBNull.Value &&
                                Convert.ToInt16(EMRItemSelected["OP_COST_CENTER_BASED_ON"]) == (int)Infologics.Medilogics.Enumerators.Accounts.OPCostCenterBasedOn.OPRevenueBasedOnSubStore)
                                SelectedCostCenterValue = -1;
                        }
                        else
                        {
                            if (SelectedEncounterDetails != null && Convert.ToInt32(SelectedEncounterDetails["ENCOUNTER_MODE"]) == (int)VisitMode.IP)
                            {
                                if (value != null && value.Table.Columns.Contains("IP_COST_CENTER_BASED_ON") && value["IP_COST_CENTER_BASED_ON"] != DBNull.Value)
                                {
                                    if (Convert.ToInt32(value["IP_COST_CENTER_BASED_ON"]) == (int)Infologics.Medilogics.Enumerators.Accounts.IPCostCenterBasedOn.IPRevenueToProviderCostCenter)
                                    {
                                        SelectedCostCenterValue = SelectedProvider != null && SelectedProvider["COST_CENTER_ID"] != DBNull.Value ? Convert.ToInt64(SelectedProvider["COST_CENTER_ID"]) : -1;
                                    }
                                    else if (Convert.ToInt32(value["IP_COST_CENTER_BASED_ON"]) == (int)Infologics.Medilogics.Enumerators.Accounts.IPCostCenterBasedOn.IPDefaultCostCenter)
                                    {
                                        SelectedCostCenterValue = value["IPREVENUE_DEPT_ID"] != DBNull.Value ? Convert.ToInt64(value["IPREVENUE_DEPT_ID"]) : -1;
                                    }
                                    else if (Convert.ToInt32(value["IP_COST_CENTER_BASED_ON"]) == (int)Infologics.Medilogics.Enumerators.Accounts.IPCostCenterBasedOn.IPRevenueBasedOnRoom)
                                    {
                                        if (dtBedDetails != null && dtBedDetails.Rows.Count > 0)
                                        {
                                            SelectedCostCenterValue = dtBedDetails.Rows[0]["COST_CENTER_ID"] != DBNull.Value ? Convert.ToInt64(dtBedDetails.Rows[0]["COST_CENTER_ID"]) : -1;
                                        }
                                        else
                                        {
                                            SelectedCostCenterValue = -1;
                                        }
                                    }
                                    else if (Convert.ToInt32(value["IP_COST_CENTER_BASED_ON"]) == (int)Infologics.Medilogics.Enumerators.Accounts.IPCostCenterBasedOn.IPRevenueBasedOnSubStore)
                                    {
                                        SelectedCostCenterValue = value["PH_COST_CENTER_ID"] != DBNull.Value ? Convert.ToInt64(value["PH_COST_CENTER_ID"]) : -1;
                                    }
                                    else
                                    {
                                        SelectedCostCenterValue = -1;
                                    }
                                }
                                else
                                {
                                    SelectedCostCenterValue = -1;
                                }


                            }
                            else if (value != null && value.Table.Columns.Contains("OP_COST_CENTER_BASED_ON") && value["OP_COST_CENTER_BASED_ON"] != DBNull.Value)
                            {

                                if (Convert.ToInt32(value["OP_COST_CENTER_BASED_ON"]) == (int)Infologics.Medilogics.Enumerators.Accounts.OPCostCenterBasedOn.OPRevenueToProviderCostCenter)
                                {
                                    SelectedCostCenterValue = SelectedProvider != null && SelectedProvider["COST_CENTER_ID"] != DBNull.Value ? Convert.ToInt64(SelectedProvider["COST_CENTER_ID"]) : -1;
                                }
                                else if (Convert.ToInt32(value["OP_COST_CENTER_BASED_ON"]) == (int)Infologics.Medilogics.Enumerators.Accounts.OPCostCenterBasedOn.OPDefaultCostCenter)
                                {
                                    SelectedCostCenterValue = value["OPREVENUE_DEPT_ID"] != DBNull.Value ? Convert.ToInt64(value["OPREVENUE_DEPT_ID"]) : -1;
                                }
                                else if (Convert.ToInt32(value["OP_COST_CENTER_BASED_ON"]) == (int)Infologics.Medilogics.Enumerators.Accounts.OPCostCenterBasedOn.OPRevenueBasedOnSubStore)
                                {
                                    SelectedCostCenterValue = value["PH_COST_CENTER_ID"] != DBNull.Value ? Convert.ToInt64(value["PH_COST_CENTER_ID"]) : -1;
                                }
                                else
                                {
                                    SelectedCostCenterValue = -1;
                                }

                            }
                            else
                            {
                                SelectedCostCenterValue = -1;
                            } 
                        }
                          
                

                        if (value.Table.Columns.Contains("PRIMARY_ID"))
                        {
                            ServiceId = Convert.ToInt64(value["PRIMARY_ID"]);
                        }
                        else
                        {
                            ServiceId = Convert.ToInt64(value["INV_MAST_SERVICE_ID"]);
                        }
                        if (dsServiceData != null && dsServiceData.Tables.Contains("INV_EXTERNAL_LAB"))
                        {
                            DataTable Loc = dsServiceData.Tables["INV_EXTERNAL_LAB"].Copy();
                            if (SelectedServiceType == (int)ServiceType.IncomingService)//incoming lab in default lab ore row returing
                            {
                                Location = Loc.DefaultView;
                                dtLocation = Location.ToTable();
                            }
                            else
                            {
                                if (ISAssociatedService == true && SelectedParentAssociationService != null)
                                {
                                    Loc.DefaultView.RowFilter = "INV_MAST_SERVICE_ID=" + Convert.ToInt64(SelectedParentAssociationService["PRIMARY_ID"]) +
                                                                " AND HOSPITAL_ID=" + InvestigationData.HospitalID + " AND ISVALID=1";
                                }
                                else
                                {
                                    Loc.DefaultView.RowFilter = "INV_MAST_SERVICE_ID=" + ServiceId + " AND HOSPITAL_ID=" + InvestigationData.HospitalID + " AND ISVALID=1";
                                }

                                if (Loc.DefaultView.ToTable().Rows.Count==0)
                                {
                                    DataTable dtCommon = CommonData.GetDefaultSettings(0, "DEFAULT HOSPITAL LAB");
                                    if (dtCommon!=null && dtCommon.Rows.Count>0 && dtCommon.Rows[0]["VALUE"]!=DBNull.Value)
                                    {
                                        Loc.DefaultView.RowFilter = "INCO_MAST_ID = " +Convert.ToInt32(dtCommon.Rows[0]["VALUE"]) + " AND HOSPITAL_ID=" + InvestigationData.HospitalID + " AND ISVALID=1";
                                    }
                                    
                                }

                                Location = Loc.DefaultView;
                                //Newly added
                                if (dsCompany == null)
                                {
                                    MainMasterSettings objIncoCorporate = new MainMasterSettings();
                                    DataTable dtCriteria = new DataTable();
                                    dtCriteria.Columns.Add("GEN_PROFILE_CATEGORY_ID");
                                    dtCriteria.Columns.Add("MODE");
                                    dtCriteria.Rows.Add((int)Enumerators.Address.ProfileCategory.ExternalInstitutionOutgoing, 2);
                                    dsCompany = objIncoCorporate.FetchInsuranceCorporate(dtCriteria, 1, 1);

                                }
                                if (dsCompany.Tables["INCO_MAST"] != null && dsCompany.Tables["INCO_MAST"].Rows.Count > 0 &&
                                    Location.ToTable().Rows.Count > 0)
                                {
                                    string[] incoMastIds = (from dr in dsCompany.Tables["INCO_MAST"].AsEnumerable()
                                                            select dr["INCO_MAST_ID"].ToString()).ToArray();
                                    if (incoMastIds != null && incoMastIds.Length > 0)
                                    {
                                        Location = Location.ToTable().AsDataView();
                                        Location.RowFilter = "INCO_MAST_ID IN(" + string.Join(",", incoMastIds) + ")";
                                    }
                                }
                                //end
                                dtLocation = Location != null ? Location.ToTable() : new DataTable();

                            }
                            if (dtLocation.KIIsNotNullAndRowCount())
                            {
                                DataRow[] drFounds = dtLocation.Select("ISDEFAULT=1");
                                if (drFounds.Length > 0)
                                {
                                    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCO_MAST_ID"] = drFounds[0]["INCO_MAST_ID"];
                                }
                                else
                                {
                                    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCO_MAST_ID"] = dtLocation.Rows[0]["INCO_MAST_ID"];
                                }
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["OUTGOING_LAB_ID"] = dtLocation.Rows[0]["INCO_MAST_ID"];
                                //if (IsApplyPriceByUser)
                                //{
                                //    SetChargeIsApplicablePriceByUser(dtLocation.Rows[0], ServiceId);
                                //}
                            }

                        }

                        //To add the default hospital lab ID for cafeteria billing as said by shamsu
                        if (SelectedServiceType == (int)ServiceType.Cafeteria && BillData != null && BillData.Tables.Contains("BILL_COMMON_DETAILS")
                            && BillData.Tables["BILL_COMMON_DETAILS"].Rows.Count > 0 && BillData.Tables["BILL_COMMON_DETAILS"].Columns.Contains("DEFAULT_HOSPITAL_LAB"))
                        {
                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCO_MAST_ID"] = BillData.Tables["BILL_COMMON_DETAILS"].Rows[0]["DEFAULT_HOSPITAL_LAB"];
                        }
                        SelectedLocationValue = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCO_MAST_ID"] != DBNull.Value
                            ? Convert.ToInt64(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCO_MAST_ID"]) : -1;
                        //this.CreateServiceDescription(ServiceId, SelectedService);
                        if (SelectedServiceType == (int)ServiceType.Pharmacy || SelectedItemServiceType == (int)ServiceType.Pharmacy)
                        {
                            if (ServiceId > 0)
                            {
                                LoadPharmacyDetails(ServiceId);
                            }
                        }
                    }
                }
                //else
                //{
                //    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCLUSION_EXCLUSION_NA"] = (int)InclusionExclusionStatus.Exclusion;
                //}
                if (DtTestPriority == null || DtTestPriority.Rows.Count == 0)
                    this.FillPriority();
                if (SelectedServiceType != (int)ServiceType.Cafeteria)
                {
                    if (SelectedServiceType == (int)ServiceType.Investigation)
                    {
                        SelectedPriorityValue = (int)CommonData.DefaultCPOEPriority;
                    }
                    else
                    {
                        SelectedPriorityValue = 1;
                    }
                }
                if (this.CheckQuantityEditable())
                {
                    IsQtyEditable = true;
                }
                else
                {
                    IsQtyEditable = false;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool CheckQuantityEditable()
        {
            try
            {
                long ParentID = 0;
                bool Status = false;
                if (SelectedServiceType == (int)ServiceType.Cafeteria)
                {
                    Status = true;
                }
                else
                {
                    if (Service != null && ((Service.Table.Columns.Contains("PARENT_INV_CATEGORY_ID") &&
                                Service["PARENT_INV_CATEGORY_ID"] != DBNull.Value)))
                    {
                        ParentID = Convert.ToInt16(Service["PARENT_INV_CATEGORY_ID"]);
                    }
                    else if (Service != null && Service.Table.Columns.Contains("INV_PARENT_CATEGORY_ID") &&
                                (Service["INV_PARENT_CATEGORY_ID"] != DBNull.Value))
                    {
                        ParentID = Convert.ToInt16(Service["INV_PARENT_CATEGORY_ID"]);
                    }
                    //done by sreeroop as said by shamsu to chk only root category
                    //DataRow[] drFounds = Category.ToTable().Select("ROOT_INV_CATEGORY_ID=" + ParentID);
                    //Change Later TODO
                    //Uncommented by sreeja
                    DataRow[] drFounds = null;
                    if (Service != null && Service.Table.Columns.Contains("INV_CATEGORY_ID") && Service["INV_CATEGORY_ID"] != DBNull.Value && dtCategory.KIIsNotNullAndRowCount())
                    {
                        drFounds = dtCategory.Select("INV_CATEGORY_ID=" + Convert.ToInt16(Service["INV_CATEGORY_ID"]));
                    }

                    if (drFounds != null && drFounds.Length > 0)
                    {
                        //Set provider Mandatory
                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_PROVIDER_MANDATORY"] = drFounds[0]["IS_PROVIDER_MANDATORY"];
                        if (drFounds[0]["ENABLE_COUNT"] != DBNull.Value && Convert.ToInt16(drFounds[0]["ENABLE_COUNT"]) == 1)
                        {
                            Status = true;
                        }
                        else
                        {
                            Status = false;
                        }
                    }
                }
                return Status;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool RowWiseQuantityEditableChecking(long categoryID)
        {
            try
            {
                bool Status = false;
                if (SelectedServiceType == (int)ServiceType.Cafeteria)
                {
                    Status = true;
                }
                else if (dtCategory.KIIsNotNullAndRowCount())
                {
                    DataRow[] drFounds = dtCategory.Select("INV_CATEGORY_ID=" + categoryID);
                    if (drFounds != null && drFounds.Length > 0)
                    {
                        if (drFounds[0]["ENABLE_COUNT"] != DBNull.Value && Convert.ToInt16(drFounds[0]["ENABLE_COUNT"]) == 1)
                        {
                            Status = true;
                        }
                        else
                        {
                            Status = false;
                        }
                    }
                }
                return Status;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// To validate all mandatory fields are selected or not, while saving investigation
        /// </summary>
        /// <value>"true" if [valid bill]; otherwise, "false".</value>
        public bool ValidBill
        {
            get { return ValidateBill(); }
        }


        public bool LoadServiceChargeDetails(long ServiceId, DataRow drSelectedItem, DataSet DsChargeDetailsFromFB = null)
        {
            //DsChargeDetailsFromFB != null -- calling from final billing
            try
            {
                if (SelectedServiceType == (int)ServiceType.Investigation || SelectedServiceType == (int)ServiceType.IncomingService
                        || SelectedServiceType == (int)ServiceType.Pharmacy || SelectedServiceType == (int)ServiceType.Cafeteria || DsChargeDetailsFromFB != null)
                {
                    if (drSelectedItem != null && drSelectedItem.Table.Columns.Contains("SERVICE_TYPE") && drSelectedItem["SERVICE_TYPE"] != DBNull.Value)
                    {
                        SelectedItemServiceType = Convert.ToInt16(drSelectedItem["SERVICE_TYPE"]);
                    }
                    if (!drSelectedItem.Table.Columns.Contains("IsSales") && SelectedServiceType == (int)ServiceType.Cafeteria)
                    {
                        drSelectedItem.Table.Columns.Add("IsSales");
                        drSelectedItem.Table.Columns.Add("SalesCategory");
                        drSelectedItem["IsSales"] = "Y";
                        drSelectedItem["SalesCategory"] = SalesCategorySelectedValue;
                    }
                    decimal Charge = 0;
                    dsCharge = DsChargeDetailsFromFB ?? this.GetServiceCharge(ServiceId, drSelectedItem);
                    if (dsCharge != null && dsCharge.Tables["SERVICE_BASE_CHARGE"] != null
                        && dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows.Count > 0)
                    {
                        //for max min copay
                        if (dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Contains("COPAY_AGAINST") && drSelectedItem.Table.Columns.Contains("COPAY_AGAINST"))
                        {
                            drSelectedItem["COPAY_AGAINST"] = dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows[0]["COPAY_AGAINST"];
                        }
                        if (dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Contains("INCO_INV_CATEGORY_ID") && drSelectedItem.Table.Columns.Contains("INCO_INV_CATEGORY_ID"))
                        {
                            drSelectedItem["INCO_INV_CATEGORY_ID"] = dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows[0]["INCO_INV_CATEGORY_ID"];
                        }
                        if (dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Contains("GROUP_MAX_LIMIT") && drSelectedItem.Table.Columns.Contains("GROUP_MAX_LIMIT"))
                        {
                            drSelectedItem["GROUP_MAX_LIMIT"] = dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows[0]["GROUP_MAX_LIMIT"];
                        }
                        //end
                        if (!isEmrOrder && dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows[0]["PRICE"] == DBNull.Value)
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                "Base charge not defined", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            return false;
                        }
                        // NO need of Showing message while adding emr orders to grid,Validation is on Check box Click
                        ////if (isEmrOrder && SelectedItemServiceType != (int)ServiceType.Consultation && dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows[0]["PRICE"] == DBNull.Value) // Bug ID : 31483, Benson.For Emr order also it should show , except zero charge consultation
                        ////{
                        ////    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                        ////       "Base charge not defined", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        ////    return false;
                        ////}
                        Charge = dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows[0]["PRICE"] != DBNull.Value ?
                            Convert.ToDecimal(dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows[0]["PRICE"]) : 0;
                        object ChargeSplitup = DBNull.Value;
                        //if (SelectedServiceType == (int)ServiceType.Cafeteria)///for cafeteria....investigation in SelectedLocation
                        //{
                        //    if (SalesCategorySelectedValue != null)
                        //    {
                        //        DataRow[] drFilterService = dsCharge.Tables["SERVICE_BASE_CHARGE"].Select("SALES_CATEGORY_ID=" + SalesCategorySelectedValue);
                        //        if (drFilterService.Length > 0)
                        //        {
                        //            ChargeSplitup = drFilterService[0]["ACC_MAST_CHARGE_SPLITUP_ID"];
                        //            Charge = Convert.ToDecimal(drFilterService[0]["CHARGE_AMOUNT"]);
                        //            SelectedBaseCharge = drFilterService.CopyToDataTable().Copy();
                        //        }
                        //    }
                        //}
                        if (SelectedServiceType == (int)ServiceType.Cafeteria && drSelectedItem.Table.Columns.Contains("IsSales"))
                        {
                            drSelectedItem.Table.Columns.Remove("IsSales");
                            drSelectedItem.Table.Columns.Remove("SalesCategory");
                        }
                        //Implented InvestigationChargeDetails callling in SelectedLocation property for Investigation 
                        if ((SelectedServiceType != (int)ServiceType.Investigation && SelectedServiceType != (int)ServiceType.IncomingService)
                            || SelectedItemServiceType == (int)ServiceType.Pharmacy)
                        {
                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["ACTUAL_BASE_CHARGE"] = Charge;
                            InvestigationChargeDetails(ServiceId, SelectedVisitMode, ChargeSplitup,
                                drSelectedItem, dsCharge.Tables["SERVICE_BASE_CHARGE"]);
                        }
                        else
                        {
                            InvestigationChargeDetails(ServiceId, SelectedVisitMode, 1, drSelectedItem, dsCharge.Tables["SERVICE_BASE_CHARGE"]);// for 3.0 testing
                        }
                    }
                }
                return true;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private DataRow FindService(long ServiceID)
        {
            DataRow[] drRows = null;
            DataRow drRow = null;
            if (dsServiceData != null && dsServiceData.Tables.Contains("INV_MAST_SERVICE") && dsServiceData.Tables["INV_MAST_SERVICE"].Rows.Count > 0)
            {
                drRows = dsServiceData.Tables["INV_MAST_SERVICE"].Select("PRIMARY_ID=" + ServiceID);
            }
            if (drRows != null && drRows.Length > 0)
            {
                drRow = drRows[0];
            }
            if (isPharmacyInServiceBilling || isConsumptionBilling)
            {
                if (Services != null && Services.Rows.Count > 0)
                {
                    drRows = Services.Select("PRIMARY_ID=" + ServiceID);
                }
                if (drRows != null && drRows.Length > 0)
                {
                    drRow = drRows[0];
                }
            }
            return drRow;
        }

        private bool FindServiceWithDtlsOrderID(long emrPatDtlsOrderID,long ServiceID)
        {
            DataRow[] drRows = null;
            DataRow drRow = null;
            bool isAdded = false;
            if (BillData != null && BillData.Tables.Contains("INV_PAT_BILLING") && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
            {
                drRows = BillData.Tables["INV_PAT_BILLING"].Select("EMR_PAT_DTLS_INV_ORDER_ID IS NOT NULL AND EMR_PAT_DTLS_INV_ORDER_ID=" + emrPatDtlsOrderID
                    +" AND INV_MAST_SERVICE_ID="+ServiceID);
            }
            if (drRows != null && drRows.Length > 0)
            {
                drRow = drRows[0];
                isAdded = true;
            }          
            return isAdded;
        }

        private bool FindPharmacyWithDtlsOrderID(long emrPatDtlsOrderID, long emrDrugAdminId)
        {
            DataRow[] drRows = null;
            DataRow drRow = null;
            bool isAdded = false;
            if (BillData != null && BillData.Tables.Contains("INV_PAT_BILLING") && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
            {
                drRows = BillData.Tables["INV_PAT_BILLING"].Select("EMR_PAT_DTLS_INV_ORDER_ID IS NOT NULL AND EMR_PAT_DTLS_INV_ORDER_ID=" + emrPatDtlsOrderID + " AND EMR_PAT_PH_DRUG_ADMIN_ID IS NOT NULL AND EMR_PAT_PH_DRUG_ADMIN_ID=" + emrDrugAdminId);
            }
            if (drRows != null && drRows.Length > 0)
            {
                drRow = drRows[0];
                isAdded = true;
            }
            return isAdded;
        }

        private bool FindPharmacyWithDtlsOrderIDandDateRange(long ServiceID, string Batch, DataRow drEMR)
        {
            try
            {
                DataRow[] drRows = null;
                DataRow[] drBillData = null;
                bool isAdded = false;
                if (BillData != null && BillData.Tables.Contains("INV_PAT_BILLING") && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
                {
                    drBillData = BillData.Tables["INV_PAT_BILLING"].Select("INV_MAST_SERVICE_ID=" + ServiceID + " AND BATCHNO='" + Batch + "'");
                }
                if (drBillData != null && drBillData.Length > 0 && EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail") && EMROrderRelation.Tables["Detail"].KIIsNotNullAndRowCount())
                {
                    foreach (DataRow dr in drBillData)
                    {
                        drRows = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID IS NOT NULL AND EMR_PAT_DTLS_INV_ORDER_ID=" + Convert.ToInt64(IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"])));
                        if (drRows != null && drRows.Length > 0)
                        {
                            if (Convert.ToDateTime(drEMR["START_DATE"]) == Convert.ToDateTime(drRows[0]["START_DATE"]) || Convert.ToDateTime(drEMR["START_DATE"]) == Convert.ToDateTime(drRows[0]["END_DATE"]) || Convert.ToDateTime(drEMR["END_DATE"]) == Convert.ToDateTime(drRows[0]["START_DATE"]) || Convert.ToDateTime(drEMR["END_DATE"]) == Convert.ToDateTime(drRows[0]["END_DATE"]))
                            {
                                isAdded = true;
                                break;
                            }
                            else if (Convert.ToDateTime(drEMR["START_DATE"]) > Convert.ToDateTime(drRows[0]["START_DATE"]) && Convert.ToDateTime(drEMR["START_DATE"]) < Convert.ToDateTime(drRows[0]["END_DATE"]))
                            {
                                isAdded = true;
                                break;
                            }
                            else if (Convert.ToDateTime(drEMR["START_DATE"]) < Convert.ToDateTime(drRows[0]["START_DATE"]) && Convert.ToDateTime(drEMR["END_DATE"]) > Convert.ToDateTime(drRows[0]["START_DATE"]))// && _todate < Convert.ToDateTime(dr["END_DATE"]))
                            {
                                isAdded = true;
                                break;
                            }
                        }
                    }
                }
                return isAdded;
            }
            catch (Exception)
            {

                throw;
            }

        }


        private void SetChargeIsApplicablePriceByUser(DataRow drData, long serviceID)
        {
            dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows[0]["CHARGE_AMOUNT"] = 0;
            dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows[0]["INV_EXTERNAL_LAB_ID"] = drData["INV_EXTERNAL_LAB_ID"];
            dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows[0]["INCO_MAST_NAME"] = drData["INCO_MAST_NAME"];
            dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows[0]["INCO_MAST_ID"] = drData["INCO_MAST_ID"];
            dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows[0]["ISDEFAULT"] = drData["ISDEFAULT"];
            dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows[0]["ISVALID_CHARGE_CATEGORY"] = 1;
            dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows[0]["ISVALID_LAB"] = drData["ISVALID"];
            DataRow[] drServiceBaseCharge = ServiceBaseCharge.Select("INV_MAST_SERVICE_ID=" + serviceID);
            if (drServiceBaseCharge.Length > 0)
            {
                Int32 count = ServiceBaseCharge.Rows.IndexOf(drServiceBaseCharge[0]);
                ServiceBaseCharge.Rows[count]["CHARGE_AMOUNT"] = 0;
                ServiceBaseCharge.Rows[count]["INV_EXTERNAL_LAB_ID"] = drData["INV_EXTERNAL_LAB_ID"];
                ServiceBaseCharge.Rows[count]["INCO_MAST_NAME"] = drData["INCO_MAST_NAME"];
                ServiceBaseCharge.Rows[count]["INCO_MAST_ID"] = drData["INCO_MAST_ID"];
                ServiceBaseCharge.Rows[count]["ISDEFAULT"] = drData["ISDEFAULT"];
                ServiceBaseCharge.Rows[count]["ISVALID_CHARGE_CATEGORY"] = 1;
                ServiceBaseCharge.Rows[count]["ISVALID_LAB"] = drData["ISVALID"];
            }
        }

        private void LoadPharmacyDetails(long ServiceId)
        {
            try
            {
                dsCharge = this.GetPharmacyCharge(ServiceId);//, IncludeExcludeNA
                if (IsUSSettingEnable && SelectedServiceType == (int)ServiceType.Pharmacy)
                {
                    DataTable dtPharmacyCharge = ItemDetails.GetLotByItem(ServiceId, Convert.ToInt64(SelectedLabOrSubLocationValue));
                    if (dsCharge.Tables.Contains("SERVICE_BASE_CHARGE"))
                    {
                        dsCharge.Tables.Remove("SERVICE_BASE_CHARGE");
                    }
                    dtPharmacyCharge.TableName = "SERVICE_BASE_CHARGE";
                    dsCharge.Tables.Add(dtPharmacyCharge.Copy());
                }
                if (dsCharge != null && dsCharge.Tables["SERVICE_BASE_CHARGE"] != null
                    && dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows.Count > 0)
                {
                    if (ISAssociatedService && SelectedItemServiceType == (int)ServiceType.Pharmacy && SelectedServiceType == (int)ServiceType.Investigation)
                    {
                        dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows[0]["PRICE"] = AssociatedServiceCharge;
                        dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows[0]["MRP"] = AssociatedServiceCharge;
                        dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows[0]["ACTUAL_RATE"] = AssociatedServiceCharge;
                    }
                    //IsBaseChargeExits = true;
                    object ChargeSplitup = DBNull.Value;
                    if (SelectedServiceType == (int)ServiceType.Pharmacy || SelectedItemServiceType == (int)ServiceType.Pharmacy)
                    {
                        if (IsUSSettingEnable)
                        {
                            //Charge = Convert.ToDecimal(dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows[0]["PRICE"]);
                            BatchOrUnit = dsCharge.Tables["SERVICE_BASE_CHARGE"].Copy();
                            BatchItemWise = BatchOrUnit;
                            BatchOrUnit.Columns["LOTNUMBER"].ColumnName = "BATCHNO";
                        }
                        else
                        {
                            if (dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Contains("IP_PRICE_LIST") && SelectedVisitMode == VisitMode.IP)
                            {
                                DataTable dtPharmacyCharge = dsCharge.Tables["SERVICE_BASE_CHARGE"].AsEnumerable().Select(row => { row["PRICE"] = row["IP_PRICE_LIST"]; return row; }).CopyToDataTable();
                                if (dsCharge.Tables.Contains("SERVICE_BASE_CHARGE") && dtPharmacyCharge.KIIsNotNullAndRowCount())
                                {
                                    dsCharge.Tables.Remove("SERVICE_BASE_CHARGE");
                                    dtPharmacyCharge.TableName = "SERVICE_BASE_CHARGE";
                                    dsCharge.Tables.Add(dtPharmacyCharge.Copy());
                                }
                            }
                            //Charge = Convert.ToDecimal(dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows[0]["PRICE"]);
                            //PharmacyIncludeExcludeNA = IncludeExcludeNA;
                            //DataTable dtSetting = CommonData.GetDefaultSettings(0, "IS_EXTERNAL_PHARMACY");
                            //if (dtSetting != null && dtSetting.Rows.Count > 0 && Convert.ToInt16(dtSetting.Rows[0]["VALUE"]) == 1)
                            if (DefaultSettings.Values.IS_EXTERNAL_PHARMACY)
                            {
                                var query = from row in dsCharge.Tables["SERVICE_BASE_CHARGE"].AsEnumerable()
                                            where (row["PH_SUBLOCATION_ID"] != DBNull.Value && Convert.ToInt32(row["PH_SUBLOCATION_ID"]) == Convert.ToInt32(SelectedLabOrSubLocationValue))
                                            group row by new
                                            {
                                                BATCHNO = row["BATCHNO"],
                                                EXPDATE = row["EXPDATE"],
                                                PRICE = row["PRICE"],
                                                MEDICINE_CODE = row["MEDICINE_CODE"],
                                                ACTUAL_RATE = row["ACTUAL_RATE"],
                                                WT_AVG = row["WT_AVG"],
                                                TAX_FROM_CUSTOMER = row["TAX_FROM_CUSTOMER"],
                                                RACK_CODE = row["RACK_CODE"],
                                                GRN = row["GRN"],
                                                MFGDATE = row["MFGDATE"],
                                                BARCODE = row["BARCODE"],
                                            } into groupedTable
                                            orderby groupedTable.Key.EXPDATE
                                            select new
                                            {
                                                BATCHNO = groupedTable.Key.BATCHNO,
                                                //  EXPDATE = groupedTable.Key.EXPDATE,
                                                EXPDATE = groupedTable.Key.EXPDATE != null && groupedTable.Key.EXPDATE != DBNull.Value
                                              ? Convert.ToDateTime(groupedTable.Key.EXPDATE).ToString("dd-MMM-yyyy") : String.Empty,
                                                PRICE = groupedTable.Key.PRICE,
                                                MEDICINE_CODE = groupedTable.Key.MEDICINE_CODE,
                                                ACTUAL_RATE = groupedTable.Key.ACTUAL_RATE,
                                                WT_AVG = groupedTable.Key.WT_AVG,
                                                TAX_FROM_CUSTOMER = groupedTable.Key.TAX_FROM_CUSTOMER,
                                                RACK_CODE = groupedTable.Key.RACK_CODE,
                                                QTY = groupedTable.Sum(r => r.Field<decimal?>("QTY")),
                                                MRP = groupedTable.Sum(r => r.Field<decimal?>("MRP")),
                                                GRN = groupedTable.Key.GRN,
                                                BARCODE = groupedTable.Key.BARCODE,
                                                // MFGDATE = groupedTable.Key.MFGDATE != null && groupedTable.Key.MFGDATE != DBNull.Value
                                                //? Convert.ToDateTime(groupedTable.Key.MFGDATE).ToString("dd-MMM-yyyy") : String.Empty
                                            };
                                Common objCommon = new Common();
                                BatchOrUnit = objCommon.LINQToDataTable(query);
                            }
                            else
                            {
                                var query = from row in dsCharge.Tables["SERVICE_BASE_CHARGE"].AsEnumerable()
                                            group row by new
                                            {
                                                BATCHNO = row["BATCHNO"],
                                                EXPDATE = row["EXPDATE"],
                                                PRICE = row["PRICE"],
                                                MEDICINE_CODE = row["MEDICINE_CODE"],
                                                ACTUAL_RATE = row["ACTUAL_RATE"],
                                                WT_AVG = row["WT_AVG"],
                                                TAX_FROM_CUSTOMER = row["TAX_FROM_CUSTOMER"],
                                                RACK_CODE = row["RACK_CODE"],
                                                GRN = row["GRN"],
                                                MFGDATE = row["MFGDATE"],
                                            } into groupedTable
                                            orderby groupedTable.Key.EXPDATE
                                            select new
                                            {
                                                BATCHNO = groupedTable.Key.BATCHNO,
                                                //  EXPDATE = groupedTable.Key.EXPDATE,
                                                EXPDATE = groupedTable.Key.EXPDATE != null && groupedTable.Key.EXPDATE != DBNull.Value
                                              ? Convert.ToDateTime(groupedTable.Key.EXPDATE).ToString("dd-MMM-yyyy") : String.Empty,
                                                PRICE = groupedTable.Key.PRICE,
                                                MEDICINE_CODE = groupedTable.Key.MEDICINE_CODE,
                                                ACTUAL_RATE = groupedTable.Key.ACTUAL_RATE,
                                                WT_AVG = groupedTable.Key.WT_AVG,
                                                TAX_FROM_CUSTOMER = groupedTable.Key.TAX_FROM_CUSTOMER,
                                                RACK_CODE = groupedTable.Key.RACK_CODE,
                                                QTY = groupedTable.Sum(r => r.Field<decimal?>("QTY")),
                                                MRP = groupedTable.Sum(r => r.Field<decimal?>("MRP")),
                                                GRN = groupedTable.Key.GRN,
                                                // MFGDATE = groupedTable.Key.MFGDATE != null && groupedTable.Key.MFGDATE != DBNull.Value
                                                //? Convert.ToDateTime(groupedTable.Key.MFGDATE).ToString("dd-MMM-yyyy") : String.Empty
                                            };
                                Common objCommon = new Common();
                                BatchOrUnit = objCommon.LINQToDataTable(query);
                            }
                            if (EnableVerificationSettingBased && (SelectedService != null || SelectedServiceDetails != null))
                            {
                                //decimal location = SelectedService.Row["EXTERNAL_SERVICE_CODE"] == DBNull.Value ? IfNullReturnZero(IP_Gen_App_Sub_Location) : IfNullReturnZero(IPVerificationLocation);
                                var query = from row in dsCharge.Tables["SERVICE_BASE_CHARGE"].AsEnumerable()
                                            //where (IfNullReturnZero(row["PH_SUBLOCATION_ID"]) == IfNullReturnZero(location))
                                            group row by new
                                            {
                                                BATCHNO = row["BATCHNO"],
                                                EXPDATE = row["EXPDATE"],
                                                PRICE = row["PRICE"],
                                                MEDICINE_CODE = row["MEDICINE_CODE"],
                                                ACTUAL_RATE = row["ACTUAL_RATE"],
                                                WT_AVG = row["WT_AVG"],
                                                TAX_FROM_CUSTOMER = row["TAX_FROM_CUSTOMER"],
                                                RACK_CODE = row["RACK_CODE"],
                                                GRN = row["GRN"],
                                                MFGDATE = row["MFGDATE"],
                                                BARCODE = row["BARCODE"],
                                            } into groupedTable
                                            orderby groupedTable.Key.EXPDATE
                                            select new
                                            {
                                                BATCHNO = groupedTable.Key.BATCHNO,
                                                //  EXPDATE = groupedTable.Key.EXPDATE,
                                                EXPDATE = groupedTable.Key.EXPDATE != null && groupedTable.Key.EXPDATE != DBNull.Value
                                              ? Convert.ToDateTime(groupedTable.Key.EXPDATE).ToString("dd-MMM-yyyy") : String.Empty,
                                                PRICE = groupedTable.Key.PRICE,
                                                MEDICINE_CODE = groupedTable.Key.MEDICINE_CODE,
                                                ACTUAL_RATE = groupedTable.Key.ACTUAL_RATE,
                                                WT_AVG = groupedTable.Key.WT_AVG,
                                                TAX_FROM_CUSTOMER = groupedTable.Key.TAX_FROM_CUSTOMER,
                                                RACK_CODE = groupedTable.Key.RACK_CODE,
                                                QTY = groupedTable.Sum(r => r.Field<decimal?>("QTY")),
                                                MRP = groupedTable.Sum(r => r.Field<decimal?>("MRP")),
                                                GRN = groupedTable.Key.GRN,
                                                BARCODE = groupedTable.Key.BARCODE,
                                                // MFGDATE = groupedTable.Key.MFGDATE != null && groupedTable.Key.MFGDATE != DBNull.Value
                                                //? Convert.ToDateTime(groupedTable.Key.MFGDATE).ToString("dd-MMM-yyyy") : String.Empty
                                            };
                                Common objCommon = new Common();
                                BatchOrUnit = objCommon.LINQToDataTable(query);
                            }
                           //DataTable dtExpired = CommonData.GetDefaultSettings(0, "IS_VISIBILE_EXPIRED_MEDICINES");
                            //if (dtExpired != null && dtExpired.Rows.Count > 0)
                            //{

                                //if (Convert.ToInt32(dtExpired.Rows[0]["VALUE"]) == 0)
                            if (DefaultSettings.Values.IS_VISIBILE_EXPIRED_MEDICINES == false)
                            {
                                if (BatchOrUnit != null)
                                {
                                    var Query = BatchOrUnit.AsEnumerable()
                                        .Where(x => Convert.ToDateTime(x["EXPDATE"]) > DateTime.Today)
                                        .Select(x => x);
                                    if (Query.Count() > 0)
                                    {
                                        DataTable dtTemp = new DataTable();
                                        dtTemp = Query.CopyToDataTable();
                                        BatchOrUnit = null;
                                        BatchOrUnit = dtTemp;
                                    }
                                    else
                                    {
                                        BatchOrUnit = null;
                                    }
                                }
                            }
                            //}
                            BatchItemWise = BatchOrUnit;
                        }
                        if (BatchOrUnit != null && BatchOrUnit.Rows.Count > 0)
                        {
                            this.SetMedicineDetails(BatchOrUnit.Rows[0]["BATCHNO"].ToString());
                        }
                        SelectedBatchOrUnitIndex = BatchOrUnit != null && BatchOrUnit.Rows.Count == 1 ? 0 : -1;
                        if (SelectedBatchOrUnit == null && SelectedBatchOrUnitIndex == 0)
                        {
                            SelectedBatchOrUnit = BatchOrUnit.DefaultView[BatchOrUnit.Rows.IndexOf(BatchOrUnit.Rows[0])];
                        }
                        if (UnitSalesConversionApplicable && PharamacyUnitSales.KIIsNotNullAndRowCount() && !IsUSSettingEnable)
                        {
                            if (SelectedPharamacyUnitSalesIndex == null)
                            {
                                SelectedPharamacyUnitSalesIndex = 0;
                            }
                            if (SelectedPharamacyUnitSales == null && SelectedPharamacyUnitSalesIndex == 0)
                            {
                                SelectedPharamacyUnitSales = PharamacyUnitSales.DefaultView[PharamacyUnitSales.Rows.IndexOf(PharamacyUnitSales.Rows[0])];
                            }
                            if (SelectedPharamacyUnitSales == null)
                            {
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["SALES_UNIT_NAME"] = PharamacyUnitSales.Rows[0]["TO_UNIT_NAME"];
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["PH_UNIT_SALES_CONVERSION_ID"] = PharamacyUnitSales.Rows[0]["PH_UNIT_SALES_CONVERSION_ID"];
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BASE_QTY"] = PharamacyUnitSales.Rows[0]["BASE_QTY"];
                            }
                            else
                            {
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["SALES_UNIT_NAME"] = SelectedPharamacyUnitSales["TO_UNIT_NAME"];
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["PH_UNIT_SALES_CONVERSION_ID"] = SelectedPharamacyUnitSales["PH_UNIT_SALES_CONVERSION_ID"];
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BASE_QTY"] = SelectedPharamacyUnitSales["BASE_QTY"];
                            }
                        }
                        if (!IsUSSettingEnable)
                        {
                            //this.CreatePharmacyStockDescription(BatchOrUnit);
                        }
                        if (PharmacyDefaultQty != String.Empty)
                        {
                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["QTY"] = PharmacyDefaultQty;
                        }
                    }
                }
                if ((SelectedService != null || SelectedServiceDetails != null) && (SelectedServiceType == (int)ServiceType.Pharmacy || SelectedItemServiceType == (int)ServiceType.Pharmacy))
                {
                    if (!IsFromPharmacyPanel)
                        GetMedicineDetails(ServiceId);
                    else if (IsFromPharmacyPanel && ((EnableVerificationSettingBased && EditService == null) || !EnableVerificationSettingBased) && ((isEmrOrder && EditService == null) || !isEmrOrder))
                        GetMedicineDetails(ServiceId);
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Gets the service charge.
        /// </summary>
        /// <param name="ServiceId">The service id.</param>
        /// <param name="IncludeOrExclude">To identify service is included or excluded (inclusion 1 or exclusion. 0.</param>
        private DataSet GetPharmacyCharge(long ServiceId)
        {
            try
            {
                MainMasterSettings objMaster = new MainMasterSettings();
                BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["INCO_DTLS_SCHEME_ID"] = SelectedSchemeValue;
                BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["INV_MAST_SERVICE_ID"] = ServiceId;

                if (SelectedServiceDetails != null && SelectedServiceDetails.Table.Columns.Contains("INV_CATEGORY_ID") //Speed Improve
                    && SelectedServiceDetails.Table.Columns.Contains("PARENT_INV_CATEGORY_ID")) 
                {
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["INV_CATEGORY_ID"] = SelectedServiceDetails["INV_CATEGORY_ID"];
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["PARENT_INV_CATEGORY_ID"] = SelectedServiceDetails["PARENT_INV_CATEGORY_ID"];
                } //Speed Improve
                else if (SelectedService != null && SelectedService.Row.Table.Columns.Contains("INV_CATEGORY_ID")
                                && SelectedService.Row.Table.Columns.Contains("PARENT_INV_CATEGORY_ID"))
                {
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["INV_CATEGORY_ID"] = SelectedService.Row["INV_CATEGORY_ID"];
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["PARENT_INV_CATEGORY_ID"] = SelectedService.Row["PARENT_INV_CATEGORY_ID"];
                }
                else if (Service != null && Service.Table.Columns.Contains("INV_CATEGORY_ID") && Service.Table.Columns.Contains("PARENT_INV_CATEGORY_ID"))
                {
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["INV_CATEGORY_ID"] = Service["INV_CATEGORY_ID"];
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["PARENT_INV_CATEGORY_ID"] = Service["PARENT_INV_CATEGORY_ID"];
                }
                //if (SchemeDetails != null)
                //{
                BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["CHARGE_CATEGORY_ID"] = 11;
                //}
                if (isTaskBilllingEbabled && SelectedEncounterDetails != null) //Speed Improve
                {
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["AGE"] = TaskPatDetails.GetTaskPatDetails.Age;
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["GENDER"] = TaskPatDetails.GetTaskPatDetails.Gender; ;
                    if (BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["AGE"] == DBNull.Value || BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["GENDER"] == DBNull.Value)
                    {
                        BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["MODE"] = 1;
                    }
                } //Speed Improve
                else if (!isTaskBilllingEbabled && PatientInformation != null)
                {
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["AGE"] = PatientInformation.Rows[0]["AGE"];
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["GENDER"] = PatientInformation.Rows[0]["GENDER"];
                    if (BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["AGE"] == DBNull.Value || BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["GENDER"] == DBNull.Value)
                    {
                        BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["MODE"] = 1;
                    }
                }
                else
                {
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["AGE"] = 0;
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["GENDER"] = (int)Infologics.Medilogics.Enumerators.General.Gender.Others;
                }
                BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["BILL_DATE"] = DateTime.Now;
                BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["VISIT_MODE"] = -1;// (int)SelectedVisitMode; 
                BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["HOSPITAL_ID"] = InvestigationData.HospitalID;
                BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["SERVICE_TYPE"] = (int)ServiceType.Pharmacy;
                if (SelectedServiceType == (int)ServiceType.Pharmacy || SelectedItemServiceType == (int)ServiceType.Pharmacy)
                {
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["SUBLOCATION"] = IfNullReturnZero(SelectedLabOrSubLocationValue);
                    if (dtMedicines != null)
                    {
                        DataRow[] drData = null;
                        if (dtMedicines.Columns.Contains("INV_MAST_SERVICE_ID"))
                        {
                            drData = dtMedicines.Select("INV_MAST_SERVICE_ID=" + ServiceId);
                        }
                        else
                        {
                            drData = dtMedicines.Select("PRIMARY_ID=" + ServiceId);
                        }
                        Medicine = null;
                        if (drData != null && drData.Length > 0)
                        {
                            Medicine = drData[0];
                            BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["MEDICINE_CODE"] = IsUSSettingEnable ? 0 : drData[0]["MEDICINE_CODE"];
                        }
                    }
                    //JUBILEE
                    if (SelectedService != null || SelectedServiceDetails != null)
                    {
                        if (SelectedServiceDetails != null && SelectedServiceDetails.Table.Columns.Contains("IS_STORE")) //Speed Improve
                        {
                            BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["IS_STORE"] = SelectedServiceDetails["IS_STORE"];
                        } //Speed Improve
                        else if (SelectedService != null && SelectedService.Row.Table.Columns.Contains("IS_STORE"))
                        {
                            BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["IS_STORE"] = SelectedService["IS_STORE"];
                        }

                        if (SelectedServiceDetails != null && SelectedServiceDetails.Table.Columns.Contains("H_STR_CATEGORY_ID")) //Speed Improve
                        {
                            BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["H_STR_CATEGORY_ID"] = SelectedServiceDetails["H_STR_CATEGORY_ID"];
                        } //Speed Improve
                        else if (SelectedService != null && SelectedService.Row.Table.Columns.Contains("H_STR_CATEGORY_ID"))
                        {
                            BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["H_STR_CATEGORY_ID"] = SelectedService["H_STR_CATEGORY_ID"];
                        }
                    }
                    dsCharge = objMaster.FetchServiceCharges(BillData.Tables["SERVICE_CHARGE_CRITERIA"]);
                }
                return dsCharge;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Gets the service charge.
        /// </summary>
        /// <param name="ServiceId">The service id.</param>
        /// <param name="IncludeOrExclude">To identify service is included or excluded (inclusion 1 or exclusion. 0.</param>
        private DataSet GetServiceCharge(long ServiceId, DataRow drSelectedItem)//, InclusionExclusionStatus IncludeExcludeNA)//, InclusionExclusionStatus IncludeExcludeNA
        {
            try
            {

                MainMasterSettings objMaster = new MainMasterSettings();
                //Adding Temp Columns 
                if (!BillData.Tables["SERVICE_CHARGE_CRITERIA"].Columns.Contains("IsSales"))
                {
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Columns.Add("IsSales");
                }
                if (!BillData.Tables["SERVICE_CHARGE_CRITERIA"].Columns.Contains("SalesCategory"))
                {
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Columns.Add("SalesCategory");
                }
                if (!BillData.Tables["SERVICE_CHARGE_CRITERIA"].Columns.Contains("ISREJECTION_DISCOUNT"))
                {
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Columns.Add("ISREJECTION_DISCOUNT");
                }
                if (!BillData.Tables["SERVICE_CHARGE_CRITERIA"].Columns.Contains("EDITED_STATUS"))
                {
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Columns.Add("EDITED_STATUS", typeof(Int16));
                }
                if (drSelectedItem != null && drSelectedItem.Table.Columns.Contains("IsSales"))
                {
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["IsSales"] = drSelectedItem["IsSales"];
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["SalesCategory"] = drSelectedItem["SalesCategory"];
                }
                BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["MODE"] = 0;
                BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["VISIT_TYPE"] = (int)SelectedVisitMode;
                BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["INCO_MAST_SCHEME_ID"] = SelectedMastSchemeValue > 0 ? SelectedMastSchemeValue : CommonData.DefaultScheme;
                BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["INV_MAST_SERVICE_ID"] = ServiceId;
                if (IsIpClosedEncounterBill && IsClosedEncounterSelected && SelectedEncounterDetails != null && SelectedEncounterDetails["END_DATE"] != DBNull.Value)//changed by riyas
                {
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["BILL_DATE"] = SelectedEncounterDetails["END_DATE"];
                }
                else
                {
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["BILL_DATE"] = EncounterEndDate;
                }
                //end
                if (SelectedServiceType != (int)ServiceType.Cafeteria && EMRItemSelected != null && EMRItemSelected["PROVIDER_ID"] != DBNull.Value && ProviderTemp.KIIsNotNullAndRowCount())
                {
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["PROVIDER_ID"] = EMRItemSelected["PROVIDER_ID"];
                    DataRow drDept = ProviderTemp.Select("H_EMP_ID=" + Convert.ToString(EMRItemSelected["PROVIDER_ID"])).First();
                    if (drDept != null)
                    {
                        BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["DEPARTMENT_ID"] = drDept["H_EMP_DEPNAME"];
                    }
                }
                else
                {
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["PROVIDER_ID"] = SelectedProvider != null && SelectedProvider.Row["H_EMP_ID"] != DBNull.Value
                        ? SelectedProvider.Row["H_EMP_ID"] : DBNull.Value;
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["DEPARTMENT_ID"] = SelectedProvider != null
                        && SelectedProvider.Row.Table.Columns.Contains("H_EMP_DEPNAME") && SelectedProvider.Row["H_EMP_DEPNAME"] != DBNull.Value
                        ? SelectedProvider.Row["H_EMP_DEPNAME"] : DBNull.Value;
                }

                //BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["PROVIDER_ID"] = SelectedProvider != null && SelectedProvider.Row["H_EMP_ID"] != DBNull.Value ? SelectedProvider.Row["H_EMP_ID"] : DBNull.Value;
                if (SelectedProvider != null && SelectedProvider.Row.Table.Columns.Contains("H_EMP_DEPNAME"))
                {
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["DEPARTMENT_ID"] = SelectedProvider != null && SelectedProvider.Row["H_EMP_DEPNAME"] != DBNull.Value ? SelectedProvider.Row["H_EMP_DEPNAME"] : DBNull.Value;
                }
                if (SelectedItemServiceType == (int)ServiceType.Consultation)
                {
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["INCO_MAST_ID"] = DefaultSettings.Values.defaultHospitalID;
                }
                else if (SelectedItemServiceType == (int)ServiceType.Pharmacy) // bUG id :31937 
                {
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["INCO_MAST_ID"] = DefaultSettings.Values.defaultHospitalID;
                }
                else
                {
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["INCO_MAST_ID"] = (EMRItemSelected != null
                        && EMRItemSelected.Table.Columns.Contains("INCO_MAST_ID")) ? EMRItemSelected["INCO_MAST_ID"] :
                       (drSelectedItem != null && drSelectedItem.Table.Columns.Contains("INCO_MAST_ID") && drSelectedItem["INCO_MAST_ID"] != DBNull.Value)
                        ? drSelectedItem["INCO_MAST_ID"] : SelectedLocationValue > 0
                        ? SelectedLocationValue : DefaultSettings.Values.defaultHospitalID > 0
                        ? DefaultSettings.Values.defaultHospitalID : 2;
                }
                BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["MRNO"] = PatientInformation.KIIsNotNullAndRowCount() ? PatientInformation.Rows[0]["MRNO"] : "";
                if (drSelectedItem != null)
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["EDITED_STATUS"] = drSelectedItem["EDITED_STATUS"];
                MainBillingShared objMainBillingShared = new MainBillingShared();
                # region Admission WEF Date  -- wiil be released later
                //if (IsPatientIP() && SelectedEncounterDetails != null && Convert.ToInt16(SelectedEncounterDetails["ENCOUNTER_MODE"]) == 2 && !IsClosedEncounterSelected)
                if (SelectedEncounterDetails != null && Convert.ToInt16(SelectedEncounterDetails["ENCOUNTER_MODE"]) == 2 && !IsClosedEncounterSelected) //Speed Improve
                {
                    //MainADTShared objMainADTShared = new MainADTShared();
                    //DataTable DtCriteria = new DataTable();
                    //DtCriteria.Columns.Add("MODE");
                    //DtCriteria.Columns.Add("MRNO");
                    //DtCriteria.Columns.Add("PAT_FIN_ENCOUNTER_IDS");
                    //DtCriteria.Rows.Add(16, SelectedEncounterDetails["MRNO"], SelectedEncounterDetails["PAT_FIN_ENCOUNTER_ID"]);
                    //DataTable DtADTMastAdmnDtls = objMainADTShared.FetchAdtMastAdmn(DtCriteria);
                    //if (DtADTMastAdmnDtls != null && DtADTMastAdmnDtls.Rows.Count > 0 && DtADTMastAdmnDtls.Rows[0]["EFFECTIVE_DATE"] != DBNull.Value)
                    //    dsCharge = objMainBillingShared.SchemeChargeRuleLimit(BillData.Tables["SERVICE_CHARGE_CRITERIA"], Convert.ToDateTime(DtADTMastAdmnDtls.Rows[0]["EFFECTIVE_DATE"]));
                    //else
                    dsCharge = objMainBillingShared.SchemeChargeRuleLimit(BillData.Tables["SERVICE_CHARGE_CRITERIA"]);
                }
                # endregion
                else
                {
                    #region E/M Settings Charge fetching for Followup Encounter
                    if (!BillData.Tables["SERVICE_CHARGE_CRITERIA"].Columns.Contains("SELECTED_ITEM_SERVICETYPE"))
                        BillData.Tables["SERVICE_CHARGE_CRITERIA"].Columns.Add("SELECTED_ITEM_SERVICETYPE");
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["SELECTED_ITEM_SERVICETYPE"] = SelectedItemServiceType;
                    if (SelectedItemServiceType == (int)ServiceType.Consultation)
                    {
                        Int64 EncounterParentCategory = Convert.ToInt64(CommonData.GetLookupData("BASE CATEGORY").Select("FIELD2 ='" + Convert.ToInt16(BaseCategory.Encounter) + "'")[0]["LOOKUP_VALUE"]);
                        if (EMROrderItems.KIIsNotNullAndRowCount() && EMROrderItems.Select("PARENT_INV_CATEGORY_ID=" + EncounterParentCategory).Length > 0
                            && Is_EM_SettingsEnabled//DT_EM_Settings != null && DT_EM_Settings.Rows.Count > 0 && Convert.ToInt16(DT_EM_Settings.Rows[0]["VALUE"]) == 1
                            && SelectedItemServiceType == (int)ServiceType.Consultation)
                        {
                            DataRow[] Dr = EMROrderItems.Select("PARENT_INV_CATEGORY_ID=" + EncounterParentCategory);
                            if (Convert.ToInt16(Dr[0]["ISNEWCASE"]) == (int)ConsultCategory.FreeEncounter)
                            {
                                if (!BillData.Tables["SERVICE_CHARGE_CRITERIA"].Columns.Contains("ISNEWCASE"))
                                {
                                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Columns.Add("ISNEWCASE", typeof(Int16));
                                }
                                BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["ISNEWCASE"] = Dr[0]["ISNEWCASE"];
                                //dsCharge = objMainBillingShared.SchemeChargeRuleLimit(BillData.Tables["SERVICE_CHARGE_CRITERIA"]);
                            }
                        }
                        //else
                        //{
                        //    dsCharge = objMainBillingShared.SchemeChargeRuleLimit(BillData.Tables["SERVICE_CHARGE_CRITERIA"]);
                        //}
                    }
                    # endregion
                    //else
                    //{
                    dsCharge = objMainBillingShared.SchemeChargeRuleLimit(BillData.Tables["SERVICE_CHARGE_CRITERIA"]);
                    //}
                }
                if (dsCharge != null)
                {
                    dsCharge.Tables.Add(BillData.Tables["INV_PAT_BILLING_TEMP"].Copy());
                }
                if (Convert.ToInt64(ServiceId) == DefaultSettings.Values.PIV_Free_Encounter_ID)
                {
                    dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows[0]["INCLUSION_EXCLUSION_STATUS"] = (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Inclusion;
                }
                return dsCharge;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Assigns the services details.
        /// </summary>
        /// <param name="ServiceId"></param>
        /// <param name="IncludeExcludeNA"></param>
        /// <param name="visitMode"></param>
        /// <param name="BaseCharge"></param>
        /// <param name="AccMastSplitupID"></param>
        /// <param name="drTemp"></param>
        private void InvestigationChargeDetails(long ServiceId, VisitMode visitMode, object AccMastSplitupID, DataRow drTemp, DataTable dtCharge)
        {
            try
            {
                if (investigationduplication)
                {

                    if (SelectedServiceDetails != null && SelectedServiceDetails.Table.Columns.Contains("SERVICE_TYPE") && SelectedServiceDetails["SERVICE_TYPE"] != DBNull.Value
                             && SelectedItemServiceType != Convert.ToInt16(SelectedServiceDetails["SERVICE_TYPE"])) //Speed Improve
                    {
                        SelectedItemServiceType = Convert.ToInt16(SelectedServiceDetails["SERVICE_TYPE"]);
                    }
                    else if (drTemp != null && drTemp["SERVICE_TYPE"] != DBNull.Value)
                    {
                        SelectedItemServiceType = Convert.ToInt16(drTemp["SERVICE_TYPE"]);
                    }
                    //GEN_PAT_BILLING 
                    if (BillData.Tables["GEN_PAT_BILLING"].Rows[0]["SERVICE_TYPE"] == DBNull.Value)
                    {
                        BillData.Tables["GEN_PAT_BILLING"].Rows[0]["GEN_PAT_BILLING_ID"] = -1;
                        BillData.Tables["GEN_PAT_BILLING"].Rows[0]["SERVICE_TYPE"] = SelectedItemServiceType;
                    }
                    else
                    {
                        if (BillData.Tables["GEN_PAT_BILLING"].Select("GEN_PAT_BILLING_ID IS NOT NULL AND SERVICE_TYPE=" + SelectedItemServiceType).Length > 0)
                        {

                        }
                        else
                        {

                            int count = BillData.Tables["GEN_PAT_BILLING"].Rows.Count;
                            DataRow drGenPatBilling = BillData.Tables["GEN_PAT_BILLING"].NewRow();
                            if (!IsFromIPAllocation)
                            {
                                drGenPatBilling["GEN_PAT_BILLING_ID"] = (BillData.Tables["GEN_PAT_BILLING"].Rows[count - 1]["GEN_PAT_BILLING_ID"] != DBNull.Value ?
                                                        Convert.ToDecimal(BillData.Tables["GEN_PAT_BILLING"].Rows[count - 1]["GEN_PAT_BILLING_ID"]) : -1) - 1;
                            }
                            else
                            {
                                BillData.Tables["GEN_PAT_BILLING"].Rows[0]["GEN_PAT_BILLING_ID"] = -1;
                            }
                            drGenPatBilling["SERVICE_TYPE"] = SelectedItemServiceType;
                            BillData.Tables["GEN_PAT_BILLING"].Rows.Add(drGenPatBilling);
                        }
                    }
                    //END
                    decimal BaseCharge = IsPackage ? SelectedPackageServiceCharge() : ISAssociatedService ? AssociatedServiceCharge : dtCharge.Rows[0]["PRICE"] != DBNull.Value ? Convert.ToDecimal(dtCharge.Rows[0]["PRICE"]) : 0;
                    BaseCharge = CalculateTier(BaseCharge, drTemp, dtCharge);
                    DataTable dtServiceCharge = null;
                    decimal Qty = 0;
                    if ((Convert.ToDecimal(drTemp["QTY"]) == 0 || drTemp["QTY"] == DBNull.Value) && IsVerificationLoaded)
                    {                        
                        if (BillData.Tables["PH_PAT_DTLS_ORDER"].KIIsNotNullAndRowCount() && BillData.Tables["PH_PAT_DTLS_ORDER"].Rows[0]["FREQUENCY"] != DBNull.Value &&
                            Frequency.Select("EMR_LOOKUP_ID=" + BillData.Tables["PH_PAT_DTLS_ORDER"].Rows[0]["FREQUENCY"]).Count() > 0)
                        {
                            Quantity = Convert.ToDecimal(BillData.Tables["PH_PAT_DTLS_ORDER"].Rows[0]["QUANTITY"]);
                            drTemp["SALES_UNIT_NAME"] = Convert.ToString(BillData.Tables["PH_PAT_DTLS_ORDER"].Rows[0]["QUANTITY_UNIT"]);
                            GetMedicineDetails(Convert.ToInt64(BillData.Tables["PH_PAT_DTLS_ORDER"].Rows[0]["BRAND_ID"]));
                            DataRow dr = Frequency.Select("EMR_LOOKUP_ID=" + BillData.Tables["PH_PAT_DTLS_ORDER"].Rows[0]["FREQUENCY"]).First();
                            SelectedFrequency = Frequency.DefaultView[Frequency.Rows.IndexOf(dr)];
                            //SelectedFrequencyvalue = IfNullReturnZero(BillData.Tables["PH_PAT_DTLS_ORDER"].Rows[0]["FREQUENCY"]);
                            if (IsConsumable && SelectedFrequency != null)
                            {
                                drTemp["FREQUENCY"] = SelectedFrequency.Row["LOOKUP_VALUE"];
                            }
                            drTemp["ISVERIFICATION"] = true;
                        }
                    }
                    else if ((Convert.ToDecimal(drTemp["QTY"]) == 0 || drTemp["QTY"] == DBNull.Value) && Convert.ToInt64(Quantity) == 1)
                    {
                        Qty = 1;
                    }
                    else if ((Convert.ToDecimal(drTemp["QTY"]) != 0 || drTemp["QTY"] != DBNull.Value) && Convert.ToInt64(Quantity) == 1 && EditService == null)
                    {
                        Qty = Convert.ToDecimal(drTemp["QTY"]);
                        Quantity = Qty;
                    }
                    else if ((Convert.ToDecimal(drTemp["QTY"]) != 0 || drTemp["QTY"] != DBNull.Value) && Convert.ToInt64(Quantity) == 1 && EditService != null)
                    {
                        Qty = Quantity;
                    }
                    else
                    {
                        Qty = Quantity;
                    }
                    if ((SelectedServiceType == (int)ServiceType.Pharmacy && UnitSalesConversionApplicable && drTemp["BASE_QTY"] != DBNull.Value) ||
                        (SelectedServiceType == (int)ServiceType.Investigation && SelectedItemServiceType == (int)ServiceType.Pharmacy))
                    {
                        Qty = Qty * Convert.ToDecimal(drTemp["BASE_QTY"]);
                    }
                    removeDublication = true;
                    drTemp["QTY"] = ISAssociatedService ? AssociatedServiceQuanity : Qty;
                    drTemp["PRIORITY"] = 0;
                    removeDublication = false;
                    if (IsPackage)
                    {
                        drTemp["BASE_CHARGE"] = SelectedPackageServiceCharge();
                        if (EditService == null)
                        {
                            drTemp["SCHEME_DISCOUNT_MARKUP"] = Convert.ToDecimal(SelectedServiceDetails["AVAILED_RATE"]) - Convert.ToDecimal(drTemp["BASE_CHARGE"]);
                            if (Convert.ToDecimal(drTemp["SCHEME_DISCOUNT_MARKUP"]) != 0 && Convert.ToDecimal(drTemp["SCHEME_DISCOUNT_MARKUP"]) < 0)
                            {
                                drTemp["SCHEME_DISCOUNT"] = drTemp["SCHEME_DISCOUNT_MARKUP"];
                            }
                            else if (Convert.ToDecimal(drTemp["SCHEME_DISCOUNT_MARKUP"]) != 0 && Convert.ToDecimal(drTemp["SCHEME_DISCOUNT_MARKUP"]) > 0)
                            {
                                drTemp["SCHEME_MARKUP"] = drTemp["SCHEME_DISCOUNT_MARKUP"];
                            }
                        }
                    }
                    else
                    {
                        drTemp["BASE_CHARGE"] = BaseCharge;
                    }
                    drTemp["AMOUNT"] = BaseCharge * Qty;
                    if (SelectedServiceType == (int)ServiceType.Consultation)
                    {
                        drTemp["BASEDON"] = dtCharge.Rows[0]["DEDUCT_BASEDON"];
                    }
                    else
                    {
                        drTemp["BASEDON"] = dtCharge.Rows[0]["COPAY_BASEDON"];
                    }
                    drTemp["ACC_MAST_CHARGE_SPLITUP_ID"] = AccMastSplitupID;
                    if (SelectedServiceDetails != null && SelectedServiceDetails.Table.Columns.Contains("IS_PACS_ENABLE")) //Speed Improve
                    {
                        drTemp["IS_PACS_ENABLE"] = SelectedServiceDetails["IS_PACS_ENABLE"];
                    }
                    drTemp["ISSALE"] = SelectedItemServiceType == (int)ServiceType.Consultation ? true : false;
                    drTemp["SERVICE_TYPE"] = SelectedItemServiceType;
                    if (SelectedItemServiceType != (int)ServiceType.Pharmacy)
                    {
                        drTemp["ISNEWCASE"] = EMRItemSelected != null ? EMRItemSelected["ISNEWCASE"] : drTemp["ISNEWCASE"];
                    }
                    drTemp["IS_FREE"] = (drTemp["ISNEWCASE"] != DBNull.Value && Convert.ToInt16(drTemp["ISNEWCASE"]) == 3) ? 1 : 0;
                    if ((drTemp["APPROVAL_STATUS"] != DBNull.Value && drTemp["IS_COLORCODE_ENABLE"] != DBNull.Value)
                       && (Convert.ToInt16(drTemp["IS_COLORCODE_ENABLE"]) == 1 && (Convert.ToInt16(drTemp["APPROVAL_STATUS"]) == 1 || Convert.ToInt16(drTemp["APPROVAL_STATUS"]) == 2)
                   || Convert.ToInt16(drTemp["APPROVAL_STATUS"]) == 3 || Convert.ToInt16(drTemp["APPROVAL_STATUS"]) == 4))
                    {
                        drTemp["ISSALE"] = false;
                    }
                    if (!IsPackage)
                    {
                        drTemp["SCHEME_MARKUP"] = dtCharge.Rows[0]["SCHEME_MARKUP"] != DBNull.Value ? (Convert.ToDecimal(dtCharge.Rows[0]["SCHEME_MARKUP"]) * Qty) : 0;
                        drTemp["SCHEME_DISCOUNT_MARKUP"] = dtCharge.Rows[0]["SCHEME_DISCOUNT_MARKUP"] != DBNull.Value ? (Convert.ToDecimal(dtCharge.Rows[0]["SCHEME_DISCOUNT_MARKUP"]) * Qty) : 0;
                        drTemp["SCHEME_MARK_DISC_TEMP"] = dtCharge.Rows[0]["SCHEME_DISCOUNT_MARKUP"] != DBNull.Value ? (Convert.ToDecimal(dtCharge.Rows[0]["SCHEME_DISCOUNT_MARKUP"])) : 0;
                        drTemp["DISCOUNT_MARKUP"] = dtCharge.Rows[0]["DISCOUNT_MARKUP"] != DBNull.Value ? (Convert.ToDecimal(dtCharge.Rows[0]["DISCOUNT_MARKUP"]) * Qty) : 0;
                        drTemp["DISCOUNT_MARKUP_PER_ITEM"] = dtCharge.Rows[0]["DISCOUNT_MARKUP"];
                        drTemp["AMOUNT_SCHEME"] = dtCharge.Rows[0]["AMOUNT_SCHEME"] != DBNull.Value ? (Convert.ToDecimal(dtCharge.Rows[0]["DISCOUNT_MARKUP"]) * Qty) : 0;
                        drTemp["SCHEME_DISCOUNT"] = dtCharge.Rows[0]["SCHEME_DISCOUNT"] != DBNull.Value ? (Convert.ToDecimal(dtCharge.Rows[0]["SCHEME_DISCOUNT"]) * Qty) : 0;
                        drTemp["SCHEME_MARKUP_IN_PERC"] = dtCharge.Rows[0]["SCHEME_MARKUP_IN_PERC"];
                        drTemp["SCHEME_DISCOUNT_IN_PERC"] = dtCharge.Rows[0]["SCHEME_DISCOUNT_IN_PERC"];
                        drTemp["NET_AMOUNT"] = dtCharge.Rows[0]["NET_AMOUNT"] != DBNull.Value ? (Convert.ToDecimal(dtCharge.Rows[0]["NET_AMOUNT"]) * Qty) : 0;
                        drTemp["CHARGE_FIXED"] = dtCharge.Rows[0]["NET_AMOUNT"] != DBNull.Value ? (Convert.ToDecimal(dtCharge.Rows[0]["NET_AMOUNT"]) * Qty) : 0;
                        // drTemp["DEDUCTIBLE"] = dtCharge.Rows[0]["DEDUCT_AMOUNT"];
                        if (Convert.ToInt16(drTemp["SERVICE_TYPE"]) == (int)ServiceType.Consultation && IfNullReturnZero(dtCharge.Rows[0]["DEDUCT_AMOUNT"]) > 0
                        && drTemp["ISNEWCASE"] != DBNull.Value && Convert.ToInt16(drTemp["ISNEWCASE"]) == 0)
                        {
                            if (IfNullReturnZero(dtCharge.Rows[0]["DEDUCTIBLE_MIN"]) < IfNullReturnZero(dtCharge.Rows[0]["DEDUCT_AMOUNT"]))
                            {
                                drTemp["DEDUCTIBLE"] =IfNullReturnZero(dtCharge.Rows[0]["DEDUCT_AMOUNT"]);
                            }
                            else
                            {
                                drTemp["DEDUCTIBLE"] = IfNullReturnZero(dtCharge.Rows[0]["DEDUCTIBLE_MIN"]);
                            }
                        }
                    
                        drTemp["CO_PAY_IN_PER"] = dtCharge.Rows[0]["CO_PAY_IN_PER"] != DBNull.Value ? Convert.ToDecimal(dtCharge.Rows[0]["CO_PAY_IN_PER"]) : 0;
                        drTemp["COPAY_MIN_LIMIT_AMT"] = dtCharge.Rows[0]["COPAY_MIN_LIMIT_AMT"] != DBNull.Value ? Convert.ToDecimal(dtCharge.Rows[0]["COPAY_MIN_LIMIT_AMT"]) : 0;
                        drTemp["COPAY_MAX_LIMIT_AMT"] = dtCharge.Rows[0]["COPAY_MAX_LIMIT_AMT"] != DBNull.Value ? Convert.ToDecimal(dtCharge.Rows[0]["COPAY_MAX_LIMIT_AMT"]) : 99999999;
                        drTemp["ACTUAL_COPAY"] = IfNullReturnZero(dtCharge.Rows[0]["CO_PAY_AMOUNT"]);
                        drTemp["DEDUCTIBLE_MIN"] = dtCharge.Rows[0]["DEDUCTIBLE_MIN"];
                        if (IfNullReturnZero(drTemp["DISCOUNT_MARKUP"]) < 0)
                        {
                            if ((-1 * IfNullReturnZero(drTemp["DISCOUNT_MARKUP"])) > IfNullReturnZero(drTemp["BASE_CHARGE"]))
                            {
                                drTemp["DISCOUNT_MARKUP"] = -1 * IfNullReturnZero(drTemp["BASE_CHARGE"]);
                            }
                        }
                        if (IfNullReturnZero(drTemp["SCHEME_DISCOUNT_MARKUP"]) < 0)
                        {
                            if ((-1 * IfNullReturnZero(drTemp["SCHEME_DISCOUNT_MARKUP"])) > IfNullReturnZero(drTemp["BASE_CHARGE"]))
                            {
                                drTemp["SCHEME_DISCOUNT_MARKUP"] = -1 * IfNullReturnZero(drTemp["BASE_CHARGE"]);
                            }
                        }
                        if (IfNullReturnZero(drTemp["SCHEME_MARK_DISC_TEMP"]) < 0)
                        {
                            if ((-1 * IfNullReturnZero(drTemp["SCHEME_MARK_DISC_TEMP"])) > IfNullReturnZero(drTemp["BASE_CHARGE"]))
                            {
                                drTemp["SCHEME_MARK_DISC_TEMP"] = -1 * IfNullReturnZero(drTemp["BASE_CHARGE"]);
                            }
                        }
                        if (!isEdited && IfNullReturnZero(drTemp["IS_EDITED"]) == 0)
                        {
                            drTemp["INCEXLCSTATUS"] = dtCharge.Rows[0]["INCLUSION_EXCLUSION_STATUS"];
                        }
                        //Calculate Copayment 
                        CalculateCopayment(drTemp, dtCharge, Qty);
                        drTemp["VALIDATION_STATUS"] = dtCharge.Rows[0]["VALIDATION_STATUS"];
                        drTemp["CHARGE_CATEGORY"] = dtCharge.Rows[0]["CHARGE_CATEGORY_ID"];
                    }
                    //Add TEMP_COPY here for bug correction 17640     
                    if (Qty != 0)  //condition checked for bug id 39332
                    {
                        drTemp["TEMP_COPAY"] = IfNullReturnZero(drTemp["CO_PAY_AMOUNT"]) / Qty;
                    }
                    DataRow drTempSelectedService = null;
                    if (SelectedServiceDetails != null) //Speed Improve
                    {
                        drTempSelectedService = SelectedServiceDetails; //Speed Improve
                    }
                    else if (SelectedService != null)
                    {
                        drTempSelectedService = SelectedService.Row;
                    }
                    else if (Service != null)
                    {
                        drTempSelectedService = Service;
                    }
                    if (drTempSelectedService != null)
                    {
                        //INV_PARENT_CATEGORY_ID
                        if (drTempSelectedService.Table.Columns.Contains("INV_PARENT_CATEGORY_ID") && drTempSelectedService["INV_PARENT_CATEGORY_ID"] != DBNull.Value)
                        {
                            drTemp["INV_PARENT_CATEGORY_ID"] = drTempSelectedService["INV_PARENT_CATEGORY_ID"];
                        }
                        else if (drTempSelectedService.Table.Columns.Contains("PARENT_INV_CATEGORY_ID"))
                        {
                            drTemp["INV_PARENT_CATEGORY_ID"] = drTempSelectedService["PARENT_INV_CATEGORY_ID"];
                        }
                        //CATEGORY
                        if (drTempSelectedService.Table.Columns.Contains("INV_CATEGORY_ID"))
                        {
                            drTemp["INV_CATEGORY_ID"] = drTempSelectedService["INV_CATEGORY_ID"];
                        }
                        else if (Services != null && Service.Table.Columns.Contains("INV_MAST_SERVICE_ID")
                        && Service["INV_MAST_SERVICE_ID"] != DBNull.Value)
                        {
                            DataRow[] drRows = Services.Select("PRIMARY_ID=" + drTempSelectedService["INV_MAST_SERVICE_ID"]);
                            if (drRows.Length > 0)
                            {
                                drTemp["INV_CATEGORY_ID"] = drRows[0]["INV_CATEGORY_ID"];
                            }
                        }
                    }
                    drTemp["NET_AMOUNT"] = (drTemp["DISCOUNT_MARKUP"] != DBNull.Value ? Convert.ToDecimal(drTemp["DISCOUNT_MARKUP"]) : 0) + (BaseCharge * Qty) +
                           (drTemp["OTHER_CHARGE"] == DBNull.Value ? 0 : Convert.ToDecimal(drTemp["OTHER_CHARGE"])) +
                           (drTemp["SERVICE_TAX"] == DBNull.Value ? 0 : Convert.ToDecimal(drTemp["SERVICE_TAX"])) - (drTemp["INC_SERVICE_TAX"] == DBNull.Value
                           ? 0 : Convert.ToDecimal(drTemp["INC_SERVICE_TAX"]));
                    //if (Convert.ToInt16(drTemp["SERVICE_TYPE"]) == (int)ServiceType.Consultation)
                    //{
                    //    drTemp["NET_AMOUNT"] = IfNullReturnZero(drTemp["NET_AMOUNT"]) + Convert.ToDecimal(-1 * IfNullReturnZero(drTemp["DISCOUNT_MARKUP"]));
                    //}
                    //fixed charge rounding issue
                    if (dtServiceCharge != null && dtServiceCharge.Rows.Count > 0 && dtServiceCharge.Rows[0]["CHARGE_FIXED"] != DBNull.Value && drTemp["NET_AMOUNT"] != DBNull.Value
                        && Convert.ToDecimal(drTemp["NET_AMOUNT"]) > Convert.ToDecimal(dtServiceCharge.Rows[0]["CHARGE_FIXED"]))
                    {
                        decimal adjustment = Convert.ToDecimal(drTemp["NET_AMOUNT"]) - Convert.ToDecimal(dtServiceCharge.Rows[0]["CHARGE_FIXED"]);
                        drTemp["DISCOUNT_MARKUP"] = Convert.ToDecimal(drTemp["DISCOUNT_MARKUP"]) - adjustment;
                    }
                    //end
                    drTemp["NET"] = Convert.ToDecimal(drTemp["NET_AMOUNT"]) + Convert.ToDecimal(-1 * IfNullReturnZero(drTemp["DISCOUNT_MARKUP"]));
                    drTemp["TOTAL"] = drTemp["NET_AMOUNT"];
                    drTemp["DOSE_VALUE"] = IfNullReturnZero(drTemp["DOSE_VALUE"]) == 0 ? DoseValue : drTemp["DOSE_VALUE"];
                    drTemp["DOSE_UNIT"] = drTemp["DOSE_UNIT"] == DBNull.Value ? DoseUnit : drTemp["DOSE_UNIT"];
                    drTemp["GROSS_AMOUNT"] = drTemp["NET_AMOUNT"];
                    drTemp["IS_COLORCODE_ENABLE"] = SelectedMastSchemeValue != CommonData.DefaultScheme ? SelectedVisitMode != VisitMode.OPCASH ? 1 : 0 : 0;
                    if (Convert.ToBoolean(drTemp["ISSALE"]))
                    {
                        if (IsPhamracySettingEnable || IsServiceSettingEnable)
                        {
                            drTemp["ADJUSTMENT"] = drTemp["ADJUSTMENT"];
                            //drTemp["NET_AMOUNT"] = IfNullReturnZero(drTemp["NET"]) - IfNullReturnZero(drTemp["ADJUSTMENT"]);
                            if (SelectedVisitMode == VisitMode.OPCASH)
                            {
                                drTemp["PATIENT_SHARE"] = drTemp["NET_AMOUNT"];
                                drTemp["SPONSOR"] = 0;
                            }
                            else if (IfNullReturnZero(drTemp["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion)
                            {
                                if (SelectedItemServiceType == (int)ServiceType.Consultation)
                                {
                                    drTemp["PATIENT_SHARE"] = drTemp["CO_PAY_AMOUNT"];
                                }
                                else
                                {
                                    drTemp["PATIENT_SHARE"] = drTemp["CO_PAY_AMOUNT"];
                                }
                                drTemp["SPONSOR"] = IfNullReturnZero(drTemp["NET_AMOUNT"]) - IfNullReturnZero(drTemp["PATIENT_SHARE"]);
                                if (IfNullReturnZero(drTemp["SPONSOR"]) < 0)
                                {
                                    drTemp["SPONSOR"] = 0;
                                }
                            }
                            else if (IfNullReturnZero(drTemp["INCEXLCSTATUS"]) == (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion)
                            {
                                //drTemp["PATIENT_SHARE"] = IfNullReturnZero(drTemp["BASE_CHARGE"]) * IfNullReturnZero(drTemp["QTY"]);//Commented for Excluded/selfpay amount calculatuion with default scheme
                                drTemp["PATIENT_SHARE"] = IfNullReturnZero(drTemp["NET_AMOUNT"]);
                                drTemp["NET"] = IfNullReturnZero(drTemp["NET_AMOUNT"]) + Convert.ToDecimal(-1 * IfNullReturnZero(drTemp["DISCOUNT_MARKUP"]));
                                // Bug Id : 32634
                                //drTemp["NET"] = drTemp["PATIENT_SHARE"];
                                //drTemp["NET_AMOUNT"] = drTemp["PATIENT_SHARE"];
                                // 32634 END
                                drTemp["SPONSOR"] = 0;
                                drTemp["CO_PAY_AMOUNT"] = 0;
                                drTemp["TEMP_COPAY"] = 0;
                                drTemp["DEDUCTIBLE"] = 0;
                                drTemp["ACTUAL_COPAY"] = 0;
                                if (drTemp["IS_EDITED"] == DBNull.Value)
                                {
                                    drTemp["EDITED_STATUS"] = (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.Excluded;
                                }
                            }
                            if (IfNullReturnZero(drTemp["APPROVAL_STATUS"]) == (int)Infologics.Medilogics.Enumerators.Insurance.InsuranceRequestStatus.Open
                               && IfNullReturnZero(drTemp["IS_EDITED"]) != 1)
                            {
                                drTemp["PATIENT_SHARE"] = 0;
                                drTemp["SPONSOR"] = 0;
                            }
                        }
                    }
                    else
                    {
                        drTemp["PATIENT_SHARE"] = 0;
                        drTemp["SPONSOR"] = 0;
                        //drTemp["NET_AMOUNT"] = IfNullReturnZero(drTemp["BASE_CHARGE"]) * IfNullReturnZero(drTemp["QTY"]);//Commented for Excluded/selfpay amount calculatuion with default scheme
                        //if (SelectedServiceType == (int)ServiceType.Pharmacy)
                        //{
                        //    drTemp["NET_AMOUNT"] = IfNullReturnZero(drTemp["NET_AMOUNT"]) * IfNullReturnZero(drTemp["BASE_QTY"]);
                        //}
                        //Added for Excluded/selfpay amount calculatuion with default scheme
                        if (IfNullReturnZero(drTemp["INCEXLCSTATUS"]) == (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion
                        || IfNullReturnZero(drTemp["EDITED_STATUS"]) == (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.InclusiontoExclusion
                        || IfNullReturnZero(drTemp["EDITED_STATUS"]) == (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.Needapprovaltoselfpay
                        || IfNullReturnZero(drTemp["EDITED_STATUS"]) == (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.Waitingforapprovaltoselfpay)
                        {
                            drTemp["NET"] = Convert.ToDecimal(drTemp["NET_AMOUNT"]) + Convert.ToDecimal(-1 * IfNullReturnZero(drTemp["DISCOUNT_MARKUP"]));
                            //drTemp["NET"] = IfNullReturnZero(drTemp["NET_AMOUNT"]) - IfNullReturnZero(drTemp["OTHER_CHARGE"]);
                            //drTemp["PATIENT_SHARE"] = IfNullReturnZero(drTemp["NET_AMOUNT"]);
                        }
                        else
                        {
                            drTemp["NET_AMOUNT"] = IfNullReturnZero(drTemp["BASE_CHARGE"]) * IfNullReturnZero(drTemp["QTY"]);
                            drTemp["NET"] = drTemp["NET_AMOUNT"];
                        }
                    }
                    if (SelectedServiceType == (int)ServiceType.Pharmacy && !Convert.ToBoolean(IfNullReturnZero(drTemp["IS_EDITED"])))
                    {
                        if (MedicineDetails != null && !isvisittypechange)
                        {
                            removeDublication = true;
                            drTemp["MEDICINE_CODE"] = drTemp["MEDICINE_CODE"] == DBNull.Value ? IsUSSettingEnable ? DBNull.Value : MedicineDetails["MEDICINE_CODE"] : drTemp["MEDICINE_CODE"];
                            removeDublication = false;
                            drTemp["TAX_FROM_CUSTOMER"] = drTemp["TAX_FROM_CUSTOMER"] == DBNull.Value ? IsUSSettingEnable ? DBNull.Value : MedicineDetails["TAX_FROM_CUSTOMER"] : drTemp["TAX_FROM_CUSTOMER"];
                        }

                        if (SelectedServiceDetails != null) //Speed Improve
                        {
                            drTemp["NAME"] = SelectedServiceDetails["NAME"];
                        }
                        else if (SelectedService != null)
                        {
                            drTemp["NAME"] = SelectedService["NAME"];
                        }
                        if (SelectedBatchOrUnit != null)
                        {
                            removeDublication = true;
                            drTemp["BATCHNO"] = SelectedBatchOrUnit.Row["BATCHNO"];
                            removeDublication = false;
                            drTemp["SALES_RATE"] = SelectedBatchOrUnit.Row["PRICE"];// MedicineDetails["PRICE"];
                            drTemp["PURCHASE_RATE"] = IsUSSettingEnable ? SelectedBatchOrUnit.Row["PRICE"] : MedicineDetails != null ? MedicineDetails["ACTUAL_RATE"] : DBNull.Value;
                            drTemp["WT_AVG"] = IsUSSettingEnable ? DBNull.Value : MedicineDetails != null ? MedicineDetails["WT_AVG"] : DBNull.Value;
                            if (!string.IsNullOrEmpty(Convert.ToString(SelectedBatchOrUnit.Row["EXPDATE"])))
                            {
                                drTemp["EXP_DATE"] = SelectedBatchOrUnit.Row["EXPDATE"];
                            }
                            else
                            {
                                drTemp["EXP_DATE"] = DBNull.Value;
                            }

                        }
                        if (SelectedServiceDetails != null && SelectedServiceDetails.Table.Columns.Contains("MATERIAL_TYPE") &&
                            SelectedServiceDetails["MATERIAL_TYPE"] != DBNull.Value)
                        {
                            drTemp["MATERIAL_TYPE"] = SelectedServiceDetails["MATERIAL_TYPE"]; //Speed Improve
                        }
                        drTemp["INCO_MAST_ID"] = DBNull.Value;
                    }
                    if (drTempSelectedService != null && EditService != null && drTempSelectedService.Table.Columns.Contains("IS_PROVIDER_MANDATORY"))
                    {
                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_PROVIDER_MANDATORY"] = drTempSelectedService["IS_PROVIDER_MANDATORY"];
                    }
                    removeDublication = true;
                    drTemp["QTY"] = Quantity;
                    removeDublication = false;
                    if (UnitSalesConversionApplicable && drTemp["QTY"] != DBNull.Value
                                   && BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BASE_QTY"] != DBNull.Value
                                   && BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BASE_CHARGE"] != DBNull.Value)
                    {
                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["SALES_ACTUAL_QTY"] = Convert.ToDecimal(drTemp["QTY"])
                            * Convert.ToDecimal(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BASE_QTY"]);
                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["UNIT_BASE_CHARGE"] = Convert.ToDecimal(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BASE_CHARGE"])
                            * Convert.ToDecimal(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BASE_QTY"]);
                    }
                    else
                    {
                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["UNIT_BASE_CHARGE"] = DBNull.Value;
                    }
                    //Adding default priority
                    if (drTempSelectedService != null && drTempSelectedService.Table.Columns.Contains("PRIORITY"))
                    {
                        drTemp["PRIORITY"] = drTempSelectedService["PRIORITY"] != DBNull.Value ? drTempSelectedService["PRIORITY"] : 0;
                    }
                    else if (SelectedPriorityValue != null)
                    {
                        drTemp["PRIORITY"] = SelectedPriorityValue != null ? SelectedPriorityValue : 0;
                    }
                    if (drTempSelectedService != null && drTempSelectedService.Table.Columns.Contains("SERVICE_CATEGORY"))
                    {
                        drTemp["SERVICE_CATEGORY"] = drTempSelectedService["SERVICE_CATEGORY"];
                    }
                    if (drTempSelectedService != null && drTempSelectedService.Table.Columns.Contains("INCLUSIVE_OF_TAX"))
                    {
                        drTemp["INCLUSIVE_OF_TAX"] = drTempSelectedService["INCLUSIVE_OF_TAX"];
                        //IsInclusiveOfTax = drTemp["INCLUSIVE_OF_TAX"] != DBNull.Value ? Convert.ToInt16(drTemp["INCLUSIVE_OF_TAX"]) : 0;
                    }
                    drTemp["PERCENT_VALUE_FIXED"] = DBNull.Value;  //SelectedValueMode
                    drTemp["INCREASE_DECREASE"] = DBNull.Value; // IncreaseDecreaseMode;
                    drTemp["INCEXLCSTATUS"] = drTemp["INCEXLCSTATUS"];
                    if (SelectedServiceType == (int)ServiceType.Investigation && !isvisittypechange)
                    {
                        drTemp["PRIORITY"] = SelectedPriority != null ? SelectedPriority["PriorityId"] : 0;
                        if (drTemp != null && drTemp["PRIORITY"] != DBNull.Value && Convert.ToDecimal(TestPriority.STAT) == Convert.ToDecimal(drTemp["PRIORITY"]))
                        {
                            drTemp["IS_STAT"] = 1;
                        }
                        else
                        {
                            drTemp["IS_STAT"] = 0;
                        }
                    }
                    //////if (SelectedLocation != null)
                    //////{
                    //////    drTemp["INCO_MAST_NAME"] = SelectedLocation["INCO_MAST_NAME"];
                    //////}
                    //Adding EMR datas 
                    if (EditService == null && SelectedServiceType == (int)ServiceType.Investigation) /// TASK A1
                    {
                        if (EMRItemSelected != null || (drTemp["ISORDERWISEBILL"] != DBNull.Value && Convert.ToInt16(drTemp["ISORDERWISEBILL"]) == 1))
                        {
                            drTemp["EMR_PROVIDER_VISIT_ID"] = EMRItemSelected != null ? EMRItemSelected["EMR_PROVIDER_VISIT_ID"] : drTemp["EMR_PROVIDER_VISIT_ID"];
                            drTemp["EMR_PAT_DTLS_INV_ORDER_ID"] = EMRItemSelected != null ? EMRItemSelected["EMR_PAT_DTLS_INV_ORDER_ID"] : drTemp["EMR_PAT_DTLS_INV_ORDER_ID"];
                            drTemp["ISORDERWISEBILL"] = 1;  //CPOE WISE
                            drTemp["EMR_PROVIDER_ID"] = EMRItemSelected != null ? SelectedProviderValue : drTemp["EMR_PROVIDER_ID"];
                            drTemp["CLINICAL_INDICATION"] = EMRItemSelected != null ? EMRItemSelected["CLINICAL_INDICATION"] : drTemp["CLINICAL_INDICATION"];
                            drTemp["REMARKS"] = EMRItemSelected != null ? EMRItemSelected["REMARKS"] : drTemp["REMARKS"];
                            drTemp["REASON_FOR_ORDER"] = EMRItemSelected != null ? EMRItemSelected["REASON_FOR_ORDER"] : drTemp["REASON_FOR_ORDER"];
                            drTemp["PROPOSED_DATE"] = EMRItemSelected != null ? EMRItemSelected["PROPOSED_DATE"] : drTemp["PROPOSED_DATE"];
                            drTemp["ENTRY_DATE"] = EMRItemSelected != null ? EMRItemSelected["ENTRY_DATE"] : drTemp["ENTRY_DATE"];
                            drTemp["BILL_STATUS"] = EMRItemSelected != null ? EMRItemSelected["CPOE_STATUS"] : drTemp["BILL_STATUS"];
                            drTemp["SERVICE_EXECUTED"] = EMRItemSelected != null ? EMRItemSelected["SERVICE_EXECUTED"] : drTemp["SERVICE_EXECUTED"];
                            drTemp["COST_CENTER_ID"] = EMRItemSelected != null && EMRItemSelected.Table.Columns.Contains("COST_CENTER_ID") ? EMRItemSelected["COST_CENTER_ID"] : drTemp["COST_CENTER_ID"];
                            if (SelectedServiceType == (int)ServiceType.Investigation && !isvisittypechange)
                            {
                                drTemp["PRIORITY"] = EMRItemSelected != null ? EMRItemSelected["PRIORITY"] : 0;
                            }
                            if (EMRItemSelected != null && EMRItemSelected["PRIORITY"] != DBNull.Value && Convert.ToDecimal(TestPriority.STAT) == Convert.ToDecimal(EMRItemSelected["PRIORITY"]))
                            {
                                drTemp["IS_STAT"] = 1;
                            }
                            drTemp["ISNEWCASE"] = EMRItemSelected != null ? EMRItemSelected["ISNEWCASE"] : drTemp["ISNEWCASE"];
                            drTemp["IS_FREE"] = (drTemp["ISNEWCASE"] != DBNull.Value && Convert.ToInt16(drTemp["ISNEWCASE"]) == 3) ? 1 : 0;
                            if (drTemp["ISNEWCASE"] != DBNull.Value && Convert.ToInt16(drTemp["ISNEWCASE"]) != 0 && dtCharge.Rows[0]["DEDUCT_AMOUNT"] != DBNull.Value && Convert.ToInt16(dtCharge.Rows[0]["DEDUCT_AMOUNT"]) > 0)
                            {
                                drTemp["CO_PAY_AMOUNT"] = DBNull.Value;
                            }
                            drTemp["INCO_MAST_ID"] = (EMRItemSelected != null && EMRItemSelected.Table.Columns.Contains("INCO_MAST_ID")) ? EMRItemSelected["INCO_MAST_ID"] : DBNull.Value;
                            drTemp["ISPROFILE"] = EMRItemSelected != null ? EMRItemSelected["ISPROFILE"] : drTemp["ISPROFILE"];
                        }
                        else
                        {
                            if (SelectedItemServiceType == (int)ServiceType.Pharmacy &&
                           SelectedServiceType == (int)ServiceType.Investigation &&
                           IfNullReturnZero(drTemp["CONSUMPTION_STATUS"]) == 1 && drTemp["EMR_PROVIDER_VISIT_ID"] != DBNull.Value)
                            {
                            }
                            else
                            {
                                drTemp["EMR_PROVIDER_VISIT_ID"] = DBNull.Value;
                                drTemp["EMR_PAT_DTLS_INV_ORDER_ID"] = DBNull.Value;
                                drTemp["ISORDERWISEBILL"] = 0;  //CPOE WISE
                                drTemp["CLINICAL_INDICATION"] = DBNull.Value;
                                drTemp["REMARKS"] = DBNull.Value;
                                drTemp["REASON_FOR_ORDER"] = DBNull.Value;
                                drTemp["ENTRY_DATE"] = DBNull.Value; //DateTime.Now;--Code commented -for shamsu sir suggestion on 20/Jan/2014
                                drTemp["PROPOSED_DATE"] = DateTime.Now;
                            }
                            drTemp["INCO_MAST_ID"] = SelectedLocationValue > 0 ? SelectedLocationValue : DefaultSettings.Values.defaultHospitalID;
                            if (drTempSelectedService != null)
                            {
                                drTemp["ISPROFILE"] = drTempSelectedService["ISPROFILE"];
                            }
                        }
                    }
                    else if (EditService == null && SelectedServiceType == (int)ServiceType.Cafeteria && EMRItemSelected != null) 
                    {
                        drTemp["EMR_PAT_DTLS_INV_ORDER_ID"] = EMRItemSelected["EMR_PAT_DTLS_INV_ORDER_ID"];
                        drTemp["ENTRY_DATE"] = EMRItemSelected != null ? EMRItemSelected["SERVICE_DATE"] : drTemp["ENTRY_DATE"];
                        drTemp["PROPOSED_DATE"] = EMRItemSelected != null ? EMRItemSelected["ENTRY_DATE"] : drTemp["ENTRY_DATE"];
                    }
                    else if (EditService != null && SelectedServiceType == (int)ServiceType.Investigation && SelectedItemServiceType != (int)ServiceType.Pharmacy) /// TASK A1
                    {
                        drTemp["INCO_MAST_ID"] = SelectedLocationValue;
                    }


                    if (Location.KIIsNotNullOrEmpty() && drTemp["INCO_MAST_ID"] != DBNull.Value)
                    {
                        DataRow[] drLocation = Location.ToTable().Select("INCO_MAST_ID=" + Convert.ToInt64(drTemp["INCO_MAST_ID"]));
                        if (drLocation.Length > 0)
                        {
                            drTemp["INCO_MAST_NAME"] = drLocation[0]["INCO_MAST_NAME"];
                        }
                    }

                    if (SelectedCostCenterValue.KIIsNotNullOrEmpty() && SelectedCostCenterValue != -1)
                    {
                        drTemp["COST_CENTER_ID"] = SelectedCostCenterValue;
                    }
                    if (CostCenter.KIIsNotNullOrEmpty() && drTemp["COST_CENTER_ID"] != DBNull.Value)
                    {
                        DataRow[] drCostCenter = CostCenter.Select("H_ADMIN_DEPT_DEPTID=" + Convert.ToInt64(drTemp["COST_CENTER_ID"]));
                        if (drCostCenter.Length > 0)
                        {
                            drTemp["H_ADMIN_DEPT_DNAME"] = drCostCenter[0]["H_ADMIN_DEPT_DNAME"];
                        }
                    }


                    if (drTemp["INCO_MAST_ID"] != DBNull.Value && BillData.Tables["BILL_COMMON_DETAILS"].Columns.Contains("DEFAULT_HOSPITAL_LAB")
                        && BillData.Tables["BILL_COMMON_DETAILS"].Rows[0]["DEFAULT_HOSPITAL_LAB"] != DBNull.Value && Convert.ToInt64(drTemp["INCO_MAST_ID"]) == Convert.ToInt64(BillData.Tables["BILL_COMMON_DETAILS"].Rows[0]["DEFAULT_HOSPITAL_LAB"]))
                    {
                        drTemp["ISEXTERNAL_LAB"] = (int)LabType.DefaultLab;
                    }
                    else
                    {
                        //to incoming then sent to outside lab
                        drTemp["ISEXTERNAL_LAB"] = (int)LabType.OutgoingLab;
                    }
                    drTemp["REMARKS"] = txtServiceRemarks;
                    if (isStockExist)
                    {
                        Infologics.Medilogics.CommonShared.ServiceMain.MainServiceShared objMainBilling = new Infologics.Medilogics.CommonShared.ServiceMain.MainServiceShared();
                        DataSet dtMed = null;
                        DataSet ds = new DataSet();
                        DataTable dtcriteria = new DataTable();
                        dtcriteria.Columns.Add("INV_MAST_SERVICE_ID");
                        DataRow drNew = dtcriteria.NewRow();
                        if (SelectedServiceDetails != null && SelectedServiceDetails.Table.Columns.Contains("PRIMARY_ID")) //Speed Improve
                        {
                            drNew["INV_MAST_SERVICE_ID"] = SelectedServiceDetails["PRIMARY_ID"];
                        }
                        dtcriteria.Rows.Add(drNew);
                        dtcriteria.TableName = "INV_MAST_SERVICE_CRITERIA";
                        ds.Tables.Add(dtcriteria);
                        if (drTempSelectedService != null)
                        {
                            dtMed = objMainBilling.FetchEMRServiceAndVitalsData(ds);
                        }
                        if (dtMed != null && dtMed.Tables[0].Rows.Count > 0)
                        {
                            if (Convert.ToInt16(dtMed.Tables[0].Rows[0]["ISVALID"]) == 0)
                            {
                                drTemp["IS_STOCK_EXIST"] = 2;
                            }
                            else
                            {
                                if (!IsVerificationLoaded && (BatchOrUnit == null || BatchOrUnit.Rows.Count == 0)) //BatchOrUnit condition added for bug ID 38081
                                {
                                    drTemp["IS_STOCK_EXIST"] = 1;
                                }
                            }
                        }
                        else
                        {
                            drTemp["IS_STOCK_EXIST"] = 2;
                        }
                    }
                    //Adding EMR datas 
                    if (SelectedServiceType == (int)ServiceType.Investigation && drTempSelectedService != null && drTempSelectedService.Table.Columns.Contains("ISTOKEN_REQUIRED"))
                    {
                        drTemp["ISTOKEN_REQUIRED"] = drTempSelectedService["ISTOKEN_REQUIRED"];
                    }
                    if (drTemp["NAME"] == DBNull.Value)
                    {
                        drTemp["NAME"] = drTempSelectedService["NAME"].ToString();
                    }
                    if (StrDrugUnit != null && SelectedDose != null && SelectedDose["LOOKUP_VALUE"] != DBNull.Value)
                    {
                        drTemp["DOSE"] = StrDrugUnit + SelectedDose["LOOKUP_VALUE"].ToString();
                    }
                    if (drTempSelectedService != null)
                    {
                        drTemp["INV_CATEGORY_NAME"] = drTempSelectedService["INV_CATEGORY_NAME"].ToString();
                    }
                    if (drTempSelectedService != null && drTempSelectedService.Table.Columns.Contains("LOINC_ID"))
                    {
                        drTemp["LOINC_ID"] = drTempSelectedService["LOINC_ID"].ToString();
                    }
                    if (drTempSelectedService != null && drTempSelectedService.Table.Columns.Contains("MODALITY_ID"))
                    {
                        drTemp["MODALITY_ID"] = drTempSelectedService["MODALITY_ID"].ToString();
                    }
                    if (EditService == null)
                    {
                        if (drTempSelectedService != null)
                        {
                            drTemp["CPT_CODE"] = drTempSelectedService["CPT_CODE"];
                        }
                        drTemp["SERVICE_UTILISATION_UNIT"] = DBNull.Value;//dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows[0]["CHARGE_UNIT"].ToString();//for 3.0 testing
                        drTemp["MINIMUM_AMOUNT"] = 0;
                    }
                    drTemp["SERVICE_UTILISATION"] = drTemp["QTY"];

                    drTemp["EXCLUDED_SERVICE"] = drTemp["INCEXLCSTATUS"] != DBNull.Value && Convert.ToInt16(drTemp["INCEXLCSTATUS"]) == (int)InclusionExclusionStatus.Exclusion ? 1 : 0;
                    drTemp["GEN_PAT_BILLING_ID"] = BillData.Tables["GEN_PAT_BILLING"].KIIsNotNullAndRowCount() && BillData.Tables["GEN_PAT_BILLING"].Select("SERVICE_TYPE=" + SelectedItemServiceType).Length > 0
                           && BillData.Tables["GEN_PAT_BILLING"].Select("SERVICE_TYPE=" + SelectedItemServiceType).ElementAt(0)["GEN_PAT_BILLING_ID"] != DBNull.Value
                           ? BillData.Tables["GEN_PAT_BILLING"].Select("SERVICE_TYPE=" + SelectedItemServiceType).ElementAt(0)["GEN_PAT_BILLING_ID"] : -1;
                    if (drTemp["INCEXLCSTATUS"] != DBNull.Value)
                    {
                        drTemp["GEN_PATIENT_SHARE"] = Convert.ToInt16(drTemp["INCEXLCSTATUS"]) == (int)InclusionExclusionStatus.Exclusion ? drTemp["NET_AMOUNT"] : 0;
                    }
                    drTemp["CO_PAY_AMOUNT_COLLECT"] = SelectedVisitMode != (int)VisitMode.OPCASH && Convert.ToInt16(drTemp["EXCLUDED_SERVICE"]) == 1 && IsCopaySettingExist ? drTemp["NET_AMOUNT"]
                            : SelectedVisitMode != (int)VisitMode.OPCASH && Convert.ToInt16(drTemp["EXCLUDED_SERVICE"]) == 1 && !IsServicePayingPartyPatient ? drTemp["NET_AMOUNT"]
                            : this.CalculateCopay(drTemp); //for calculate the copay if payment is patient

                    //////drTemp["CO_PAY_AMOUNT"] = SelectedVisitMode != (int)VisitMode.OPCASH && Convert.ToInt16(drTemp["INCEXLCSTATUS"]) != (int)InclusionExclusionStatus.Exclusion && IsCopaySettingExist ? drTemp["NET_AMOUNT"]
                    //////       : SelectedVisitMode != (int)VisitMode.OPCASH && Convert.ToInt16(drTemp["INCEXLCSTATUS"]) != (int)InclusionExclusionStatus.Exclusion && !IsServicePayingPartyPatient ? drTemp["NET_AMOUNT"]
                    //////       : drTemp["CO_PAY_AMOUNT"]; //for calculate the copay if payment is patient

                    if (IsPackage)
                    {

                    }
                    else if (EditService == null && drTempSelectedService != null)//for package
                    {
                        drTemp["ISPACKAGE_SERVICE"] = drTempSelectedService.Table.Columns.Contains("ISOP_PACKAGE")
                            && drTempSelectedService["ISOP_PACKAGE"] != DBNull.Value && Convert.ToInt16(drTempSelectedService["ISOP_PACKAGE"]) == 1
                            ? 1 : drTempSelectedService.Table.Columns.Contains("ISOPCREDIT_PACKAGE")
                            && drTempSelectedService["ISOPCREDIT_PACKAGE"] != DBNull.Value && Convert.ToInt16(drTempSelectedService["ISOPCREDIT_PACKAGE"]) == 1
                            ? 1 : drTempSelectedService.Table.Columns.Contains("ISIP_PACKAGE")
                            && drTempSelectedService["ISIP_PACKAGE"] != DBNull.Value && Convert.ToInt16(drTempSelectedService["ISIP_PACKAGE"]) == 1 ? 1 : 0;
                    }
                    if (drTempSelectedService != null)
                    {
                        drTemp["VALIDITY_DAYS"] = drTempSelectedService.Table.Columns.Contains("VALIDITY_DAYS")
                            && drTempSelectedService["VALIDITY_DAYS"] != DBNull.Value ? drTempSelectedService["VALIDITY_DAYS"] : DBNull.Value;
                        drTemp["IP_DAYS"] = drTempSelectedService.Table.Columns.Contains("IP_DAYS")
                            && drTempSelectedService["IP_DAYS"] != DBNull.Value ? drTempSelectedService["IP_DAYS"] : DBNull.Value;
                    }
                    if (ISAssociatedService)
                    {
                        drTemp["PRIMARY_SERVICE_ID"] = SelectedParentAssociationService != null && SelectedParentAssociationService.Row.Table.Rows.Count > 0
                                   && SelectedParentAssociationService.Row.Table.Columns.Contains("INV_MAST_SERVICE_ID")
                                   && SelectedParentAssociationService.Row["INV_MAST_SERVICE_ID"] != DBNull.Value
                                   ? SelectedParentAssociationService.Row["INV_MAST_SERVICE_ID"] : SelectedParentAssociationService != null
                                   && SelectedParentAssociationService.Row.Table.Rows.Count > 0
                                   && SelectedParentAssociationService.Row.Table.Columns.Contains("PRIMARY_ID")
                                   && SelectedParentAssociationService.Row["PRIMARY_ID"] != DBNull.Value
                                   ? SelectedParentAssociationService.Row["PRIMARY_ID"] : ServiceId;
                    }
                    if (SelectedServiceType != (int)ServiceType.Pharmacy)
                    {
                        long categoryID = drTemp["INV_CATEGORY_ID"] != DBNull.Value ? Convert.ToInt64(drTemp["INV_CATEGORY_ID"]) : 0;
                        drTemp["ISEDIT_COUNT"] = RowWiseQuantityEditableChecking(categoryID) ? true : false;
                    }
                    else
                        drTemp["ISEDIT_COUNT"] = true;
                    //Pharmacy charge 
                    PharmacyChargeDetails(ServiceId, drTemp, drTempSelectedService);

                    //For KOT  Billing
                    drTemp["EMR_PAT_DTLS_KOT_ID"] = (SelectedServiceType == (int)ServiceType.Cafeteria
                                                    && EMRItemSelected != null && EMRItemSelected.Table.Columns.Contains("EMR_PAT_DTLS_INV_ORDER_ID"))
                                                    ? EMRItemSelected["EMR_PAT_DTLS_INV_ORDER_ID"] : drTemp["EMR_PAT_DTLS_KOT_ID"];
                    if (drTemp["EMR_PAT_DTLS_KOT_ID"] != DBNull.Value && Convert.ToInt16(drTemp["EMR_PAT_DTLS_KOT_ID"]) > 0)
                    {
                        drTemp["ORDER_EXIST"] = 1;
                    }

                    BillData.Tables["INV_PAT_BILLING_RESET"].Rows[0].ItemArray = drTemp.ItemArray;
                }
            }
            catch (Exception)
            {
                throw;
                //ExceptionHandler.WriteErrorLog(ex);
            }
        }

        private void CalculateCopayment(DataRow drTemp, DataTable dtCharge, decimal Qty)
        {
            try
            {
                drTemp["CO_PAY_AMOUNT"] = DBNull.Value;// Bug ID-21352
                if (Convert.ToBoolean(drTemp["ISSALE"]))
                {
                    FetchCopayAmountUsed();
                    TotalCopayAmount = TotalCopayAmount + (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                                           where dr.RowState != DataRowState.Deleted && dr["CO_PAY_AMOUNT"] != DBNull.Value
                                                           select Convert.ToDecimal(dr["CO_PAY_AMOUNT"])).Sum();
                    if (((Convert.ToInt16(drTemp["SERVICE_TYPE"]) == (int)ServiceType.Consultation && IfNullReturnZero(drTemp["DEDUCTIBLE"]) == 0) ||
                                 Convert.ToInt16(drTemp["SERVICE_TYPE"]) != (int)ServiceType.Consultation)
                                 && SelectedVisitModeNew != (int)VisitMode.OPCASH
                                 && Convert.ToInt16(drTemp["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion)
                    {
                        //drTemp["CO_PAY_AMOUNT"] = Convert.ToDecimal(dtCharge.Rows[0]["CO_PAY_AMOUNT"]) * Qty;
                        if (dtCharge.Rows[0]["CO_PAY_AMOUNT"] != DBNull.Value && Convert.ToDecimal(drTemp["COPAY_MIN_LIMIT_AMT"]) > 0 &&
                           Convert.ToDecimal(drTemp["COPAY_MIN_LIMIT_AMT"]) > Convert.ToDecimal(drTemp["NET_AMOUNT"]))
                        {
                            drTemp["CO_PAY_AMOUNT"] = Convert.ToDecimal(drTemp["NET_AMOUNT"]) * Qty;
                            TotalCopayAmount = TotalCopayAmount + (Convert.ToDecimal(drTemp["NET_AMOUNT"]) * Qty);
                        }
                        else if (dtCharge.Rows[0]["CO_PAY_AMOUNT"] != DBNull.Value && Convert.ToDecimal(drTemp["COPAY_MIN_LIMIT_AMT"]) > 0 &&
                          (Convert.ToDecimal(dtCharge.Rows[0]["CO_PAY_AMOUNT"]) * Qty) < Convert.ToDecimal(drTemp["COPAY_MIN_LIMIT_AMT"]) &&
                        (TotalCopayAmount + (Convert.ToDecimal(drTemp["COPAY_MIN_LIMIT_AMT"]) * Qty)) <= Convert.ToDecimal(drTemp["COPAY_MAX_LIMIT_AMT"]))
                        {
                            drTemp["CO_PAY_AMOUNT"] = Convert.ToDecimal(drTemp["COPAY_MIN_LIMIT_AMT"]) * Qty;
                            TotalCopayAmount = TotalCopayAmount + (Convert.ToDecimal(drTemp["COPAY_MIN_LIMIT_AMT"]) * Qty);
                        }
                        else if (dtCharge.Rows[0]["CO_PAY_AMOUNT"] != DBNull.Value && Convert.ToDecimal(drTemp["COPAY_MAX_LIMIT_AMT"]) > 0 &&
                          (TotalCopayAmount + (Convert.ToDecimal(dtCharge.Rows[0]["CO_PAY_AMOUNT"]) * Qty)) <= Convert.ToDecimal(drTemp["COPAY_MAX_LIMIT_AMT"]))
                        {
                            drTemp["CO_PAY_AMOUNT"] = Convert.ToDecimal(dtCharge.Rows[0]["CO_PAY_AMOUNT"]) * Qty;
                            TotalCopayAmount = TotalCopayAmount + (Convert.ToDecimal(dtCharge.Rows[0]["CO_PAY_AMOUNT"]) * Qty);
                        }
                        else if (dtCharge.Rows[0]["CO_PAY_AMOUNT"] != DBNull.Value && Convert.ToDecimal(drTemp["COPAY_MAX_LIMIT_AMT"]) > 0 &&
                        (Convert.ToDecimal(dtCharge.Rows[0]["CO_PAY_AMOUNT"]) * Qty) >= Convert.ToDecimal(drTemp["COPAY_MAX_LIMIT_AMT"]) &&
                      (TotalCopayAmount + (Convert.ToDecimal(drTemp["COPAY_MAX_LIMIT_AMT"])) <= Convert.ToDecimal(drTemp["COPAY_MAX_LIMIT_AMT"])))
                        {
                            drTemp["CO_PAY_AMOUNT"] = drTemp["COPAY_MAX_LIMIT_AMT"];
                            TotalCopayAmount = TotalCopayAmount + Convert.ToDecimal(drTemp["COPAY_MAX_LIMIT_AMT"]);
                        }
                        else if (dtCharge.Rows[0]["CO_PAY_AMOUNT"] != DBNull.Value && drTemp["COPAY_MAX_LIMIT_AMT"] != DBNull.Value && Convert.ToDecimal(drTemp["COPAY_MAX_LIMIT_AMT"]) > 0
                            && ((TotalCopayAmount + (Convert.ToDecimal(dtCharge.Rows[0]["CO_PAY_AMOUNT"]) * Qty)) > Convert.ToDecimal(drTemp["COPAY_MAX_LIMIT_AMT"])))
                        {
                            drTemp["CO_PAY_AMOUNT"] = Convert.ToDecimal(drTemp["COPAY_MAX_LIMIT_AMT"]) - TotalCopayAmount;
                            TotalCopayAmount = TotalCopayAmount + IfNullReturnZero(drTemp["CO_PAY_AMOUNT"]);
                        }
                        else
                        {
                            drTemp["CO_PAY_AMOUNT"] = 0;
                        }
                    }
                    else if (Convert.ToInt16(drTemp["SERVICE_TYPE"]) == (int)ServiceType.Consultation && IfNullReturnZero(drTemp["DEDUCTIBLE"]) > 0
                        && drTemp["ISNEWCASE"] != DBNull.Value && Convert.ToInt16(drTemp["ISNEWCASE"]) == 0)
                    {
                        if (IfNullReturnZero(drTemp["DEDUCTIBLE_MIN"]) < IfNullReturnZero(drTemp["DEDUCTIBLE"]))
                        {
                            drTemp["CO_PAY_AMOUNT"] = drTemp["DEDUCTIBLE"];
                        }
                        else
                        {
                            drTemp["CO_PAY_AMOUNT"] = drTemp["DEDUCTIBLE_MIN"];
                        }
                    }
                }
            }
            catch (Exception)
            {
                throw;
                //ExceptionHandler.WriteErrorLog(ex);
            }
        }

        private void PharmacyChargeDetails(long ServiceId, DataRow drTemp, DataRow drTempSelectedService)
        {
            try
            {
                if (drTemp["SERVICE_TYPE"] != DBNull.Value && Convert.ToInt16(drTemp["SERVICE_TYPE"]) == (int)ServiceType.Pharmacy)
                {
                    bool ISFromEMR = false;
                    if (!IsPharmacyOrderSelected)
                    {
                        if (EMROrderRelation != null && IsVerificationLoaded && EMROrderRelation.Tables["Detail"].KIIsNotNullAndRowCount() &&
                                      (EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID='" + emrPatDtlsID + "'").Count() > 0))
                        {
                            Int64 emrPatMastId = Convert.ToInt64(EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID='" + emrPatDtlsID + "'").First()["EMR_PAT_MAST_INV_ORDER_ID"]);
                            DataRow[] drFound = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_MAST_INV_ORDER_ID='" + emrPatMastId + "'");
                            if (drFound.Length > 0)
                            {
                                SelectedEMROrder = drFound[0];
                            }
                        }                        
                        IsServiceAdded = true; //Solve the problem of selection change working(property ServiceName)
                        if (drTemp["INV_MAST_SERVICE_ID"] == DBNull.Value
                            && SelectedServiceDetails != null && SelectedServiceDetails.Table.Columns.Contains("PRIMARY_ID") && SelectedServiceDetails["PRIMARY_ID"] != DBNull.Value)
                        {
                            drTemp["INV_MAST_SERVICE_ID"] = SelectedServiceDetails["PRIMARY_ID"];
                        }
                        if (EditService != null && EditService.Table.Rows.Count > 0 && EnableVerificationSettingBased && IfNullReturnZero(EditService["INV_MAST_SERVICE_ID"]) > 0
                          && SelectedServiceDetails.Table.Columns.Contains("PRIMARY_ID") && SelectedServiceDetails["PRIMARY_ID"] != DBNull.Value) //Speed Improve
                        {
                            EditService["NAME"] = SelectedServiceDetails["NAME"];
                            isBlockBatchSelectionChange = true;
                            removeDublication = true;
                            EditService["INV_MAST_SERVICE_ID"] = SelectedServiceDetails["PRIMARY_ID"]; //Speed Improve
                            drTemp["INV_MAST_SERVICE_ID"] = SelectedServiceDetails["PRIMARY_ID"]; //Speed Improve
                            isBlockBatchSelectionChange = false;
                            removeDublication = false;
                            drTemp["NAME"] = SelectedService.Row["NAME"];
                        }
                        DataRow drItem = this.GetEMRCPOEPrescription(drTemp);
                        //DataTable dtValues = CommonData.GetDefaultSettings(0, "PHARMACY_PRESCRIPTION_EXPIRY_PERIOD");
                        //if (dtValues != null && dtValues.Rows.Count > 0 && drItem != null && drItem["ENTRY_DATE"] != DBNull.Value)
                        if (DefaultSettings.Values.PHARMACY_PRESCRIPTION_EXPIRY_PERIOD >= 0 && drItem != null && drItem["ENTRY_DATE"] != DBNull.Value)
                        {
                            //if (Convert.ToDateTime(drItem["ENTRY_DATE"]) < Convert.ToDateTime(drItem["ENTRY_DATE"]).AddDays(Convert.ToInt32(dtValues.Rows[0]["VALUE"])))         
                            //if ((DateTime.Now - Convert.ToDateTime(drItem["ENTRY_DATE"])).TotalDays >= Convert.ToInt32(dtValues.Rows[0]["VALUE"]))
                            if ((DateTime.Now - Convert.ToDateTime(drItem["ENTRY_DATE"])).TotalDays >= DefaultSettings.Values.PHARMACY_PRESCRIPTION_EXPIRY_PERIOD)
                            {
                                drTemp["NEAREXPIRY"] = 1;
                            }
                            //else if (DateTime.Compare(Convert.ToDateTime(Convert.ToDateTime(drItem["ENTRY_DATE"]).ToShortDateString()), DateTime.Now.Date) >= Convert.ToInt32(dtValues.Rows[0]["VALUE"]))
                            else if (DateTime.Compare(Convert.ToDateTime(Convert.ToDateTime(drItem["ENTRY_DATE"]).ToShortDateString()), DateTime.Now.Date) >= DefaultSettings.Values.PHARMACY_PRESCRIPTION_EXPIRY_PERIOD)
                            {
                                drTemp["NEAREXPIRY"] = 1;
                            }
                            else
                            {
                                drTemp["NEAREXPIRY"] = 0;
                            }
                        }
                        if (EditService == null)//IsPharmacyOrderSelected, order from nursing location etc
                        {
                            if (!Frequency.KIIsNotNullAndRowCount())
                            {
                                //DataTable dtCriteria = new DataTable();
                                //dtCriteria.Columns.Add("LOOKUP_TYPE");
                                //dtCriteria.Rows.Add("FREQUENCY");
                                Frequency = FrequencyTemp;// getValidEmrData(dtCriteria);
                            }
                            if (drItem != null)
                            {
                                drTemp["ISEDIT_COUNT"] = true;
                                drTemp["EMR_PROVIDER_VISIT_ID"] = drItem["EMR_PROVIDER_VISIT_ID"];
                                drTemp["EMR_PAT_DTLS_INV_ORDER_ID"] = drItem["EMR_PAT_DTLS_INV_ORDER_ID"];//EMR_PAT_DTLS_INV_ORDER_ID=EMR_PAT_DTLS_PH_ORDER_ID
                                drTemp["EMR_PAT_DTLS_MEDICATION_ID"] = drItem["EMR_PAT_DTLS_INV_ORDER_ID"];//EMR_PAT_DTLS_INV_ORDER_ID=EMR_PAT_DTLS_PH_ORDER_ID
                                if (drItem.Table.Columns.Contains("REF_DTLS_PH_ORDER_ID") && drItem["REF_DTLS_PH_ORDER_ID"]!=DBNull.Value)
                                {
                                    drTemp["REF_DTLS_PH_ORDER_ID"] = drItem["REF_DTLS_PH_ORDER_ID"];
                                    drTemp["IS_CHILD_ITEM"] = 1;
                                   
                                }
                                if (drItem.Table.Columns.Contains("IS_ADDITIVE"))
                                {
                                    drTemp["IS_ADDITIVE"] = drItem["IS_ADDITIVE"];
                                }
                                if (drItem.Table.Columns.Contains("EMR_PAT_PH_DRUG_ADMIN_ID"))
                                {
                                    drTemp["EMR_PAT_PH_DRUG_ADMIN_ID"] = drItem["EMR_PAT_PH_DRUG_ADMIN_ID"];
                                }
                                if (drItem.Table.Columns.Contains("CONSUMPTION_STATUS") && !isEdited)//!isEdited for skipping inc_to_exc or exc_to_inc case
                                {
                                    drTemp["CONSUMPTION_STATUS"] = drItem["CONSUMPTION_STATUS"];
                                }
                                if (drItem.Table.Columns.Contains("PROVIDER_ID") && drTemp.Table.Columns.Contains("PROVIDER_ID"))
                                {
                                    drTemp["PROVIDER_ID"] = drItem["PROVIDER_ID"];
                                }
                                drTemp["ISORDERWISEBILL"] = 1;  //CPOE WISE
                                drTemp["ENTRY_DATE"] = drItem["ENTRY_DATE"];
                                if (drItem.Table.Columns.Contains("FREQUENCY") && drItem["FREQUENCY"] != DBNull.Value && Frequency.KIIsNotNullAndRowCount() &&
                                    Frequency.Select("EMR_LOOKUP_ID=" + drItem["FREQUENCY"]).Count() > 0)
                                {
                                    drTemp["FREQUENCY"] = Frequency.Select("EMR_LOOKUP_ID=" + drItem["FREQUENCY"]).First()["LOOKUP_VALUE"];
                                }
                                else if (drItem.Table.Columns.Contains("FREQUENCY_FREETEXT") && drItem["FREQUENCY_FREETEXT"] != DBNull.Value)
                                {
                                    drTemp["FREQUENCY"] = drItem["FREQUENCY_FREETEXT"].ToString();
                                }
                                if (drItem.Table.Columns.Contains("QTY") && IfNullReturnZero(drItem["QTY"]) > 0)
                                {
                                    decimal tempQty = IfNullReturnZero(drItem["QTY"]);
                                    Int64 tempQty1 = (Int64)tempQty;
                                    if ((tempQty - tempQty1) > 0)
                                    {
                                        ++tempQty1;
                                    }
                                    if (string.IsNullOrEmpty(drTemp["ORDER_QTY"].ToString()))
                                    {
                                        Int64 billedqty = 0, ordderedQty = 0;
                                        if (drItem.Table.Columns.Contains("EMR_PAT_PH_DRUG_ADMIN_ID") && IfNullReturnZero(drItem["EMR_PAT_PH_DRUG_ADMIN_ID"]) > 0)
                                        {
                                            billedqty = PhUnitconvertion(Convert.ToInt64(IfNullReturnZero(drItem["BILLED_QTY"])) - Convert.ToInt64(IfNullReturnZero(drItem["RETURN_QTY"])), Convert.ToInt64(IfNullReturnZero(drItem["INV_MAST_SERVICE_ID"])), drItem);
                                            ordderedQty = PhUnitconvertion(Convert.ToInt64(Convert.ToDecimal(tempQty1)), Convert.ToInt64(IfNullReturnZero(drItem["INV_MAST_SERVICE_ID"])), drItem);
                                            if (ordderedQty == 0)
                                            {
                                                ordderedQty = tempQty1;
                                            }
                                            drTemp["ORDER_QTY"] = ordderedQty + " - " + billedqty;
                                        }
                                        else
                                        {
                                            billedqty = PhUnitconvertion(Convert.ToInt64(IfNullReturnZero(drItem["BILLED_QTY"])) - Convert.ToInt64(IfNullReturnZero(drItem["RETURN_QTY"])), Convert.ToInt64(IfNullReturnZero(drItem["INV_MAST_SERVICE_ID"])), drItem);
                                            ordderedQty = PhUnitconvertion(Convert.ToInt64(Convert.ToDecimal(tempQty1)), Convert.ToInt64(IfNullReturnZero(drItem["INV_MAST_SERVICE_ID"])));
                                            if (ordderedQty == 0)
                                            {
                                                ordderedQty = tempQty1;
                                            }
                                            drTemp["ORDER_QTY"] = ordderedQty + " - " + billedqty;
                                        }
                                        if (IsFromPharmacyPanel && ERxVisibility == Visibility.Visible)
                                            drTemp["IS_SALE_ENABLE"] = billedqty > 0 ? 1 : 0;
                                    }
                                    //Quantity = Convert.ToDecimal(drItem["QTY"]) - Convert.ToDecimal(drItem["BILLED_QTY"]);
                                }
                                //DataTable dtTemp = Fetch_PhdtlsOrder(Convert.ToInt64(drItem["EMR_PAT_DTLS_INV_ORDER_ID"]));
                                //if (dtTemp != null && dtTemp.Rows.Count > 0 && EnableVerificationSettingBased)
                                //{
                                //    drTemp["ISVERIFICATION"] = Convert.ToBoolean(dtTemp.Rows[0]["AUTHORIZATION_STATUS"]) == true ? true : false;
                                //    EnableVerification = false;
                                //}
                                if (drTempSelectedService != null && drTempSelectedService.Table.Columns.Contains("CPOE_STATUS"))
                                {
                                    drTemp["BILL_STATUS"] = drTempSelectedService["CPOE_STATUS"];
                                }
                                drTemp["ISSALE"] = false;
                                if (!Duratioin.KIIsNotNullAndRowCount())
                                {
                                    Duratioin = fillDuration();
                                }
                                if (drItem.Table.Columns.Contains("DURATION_TYPE") && drItem["DURATION_TYPE"] != DBNull.Value && Duratioin.KIIsNotNullAndRowCount() && Duratioin.Select("KEY=" + drItem["DURATION_TYPE"]).Count() > 0)
                                {
                                    DataRow dr = Duratioin.Select("KEY=" + drItem["DURATION_TYPE"]).First();
                                    SelectedDuratioin = Duratioin.DefaultView[Duratioin.Rows.IndexOf(dr)];
                                }
                                if (drItem.Table.Columns.Contains("DURATION") && drItem["DURATION"] != DBNull.Value && IsConsumable)
                                {
                                    StrDuration = Convert.ToString(drItem["DURATION"]);
                                }
                                else if (drItem.Table.Columns.Contains("DURATION") && drItem["DURATION"] == DBNull.Value)
                                {
                                    StrDuration = string.Empty;
                                }
                                if (drItem.Table.Columns.Contains("QUANTITY_UNIT") && drItem["QUANTITY_UNIT"] != DBNull.Value && DrugUnit.KIIsNotNullAndRowCount() && DrugUnit.Select("LOOKUP_VALUE='" + drItem["QUANTITY_UNIT"] + "'").Count() > 0)
                                {
                                    DataRow dr = DrugUnit.Select("LOOKUP_VALUE='" + drItem["QUANTITY_UNIT"] + "'").First();
                                    SelectedDose = DrugUnit.DefaultView[DrugUnit.Rows.IndexOf(dr)];
                                }
                                if (drItem.Table.Columns.Contains("QUANTITY") && drItem["QUANTITY"] != DBNull.Value)
                                {
                                    StrDrugUnit = Convert.ToString(drItem["QUANTITY"]);
                                }
                                if (StrDrugUnit != null && SelectedDose != null && SelectedDose["LOOKUP_VALUE"] != DBNull.Value)
                                {
                                    drTemp["DOSE"] = StrDrugUnit + SelectedDose["LOOKUP_VALUE"].ToString();
                                }
                                if (drItem.Table.Columns.Contains("PRIORITY") && Convert.ToDecimal(MedicinePriority.STAT) == Convert.ToDecimal(drItem["PRIORITY"]))
                                {
                                    drTemp["IS_STAT"] = 1;
                                }
                                else if (drItem.Table.Columns.Contains("PRIORITY") && Convert.ToDecimal(MedicinePriority.DischargeMedicine) == Convert.ToDecimal(drItem["PRIORITY"]))
                                {
                                    drTemp["IS_STAT"] = 2;
                                }
                                else if (drItem.Table.Columns.Contains("PRIORITY") && Convert.ToDecimal(MedicinePriority.Urgent) == Convert.ToDecimal(drItem["PRIORITY"]))
                                {
                                    drTemp["IS_STAT"] = 3;
                                }
                                ISFromEMR = true;
                                if (isStockExist)
                                {
                                    Infologics.Medilogics.CommonShared.ServiceMain.MainServiceShared objMainBilling = new Infologics.Medilogics.CommonShared.ServiceMain.MainServiceShared();
                                    DataSet dtMed = null;
                                    DataSet ds = new DataSet();
                                    DataTable dtcriteria = new DataTable();
                                    dtcriteria.Columns.Add("INV_MAST_SERVICE_ID");
                                    DataRow drNew = dtcriteria.NewRow();
                                    if (SelectedServiceDetails != null && SelectedServiceDetails.Table.Columns.Contains("PRIMARY_ID")) //Speed Improve
                                    {
                                        drNew["INV_MAST_SERVICE_ID"] = SelectedServiceDetails["PRIMARY_ID"];
                                    }
                                    dtcriteria.Rows.Add(drNew);
                                    dtcriteria.TableName = "INV_MAST_SERVICE_CRITERIA";
                                    ds.Tables.Add(dtcriteria);
                                    if (drTempSelectedService != null)
                                    {
                                        dtMed = objMainBilling.FetchEMRServiceAndVitalsData(ds);
                                    }
                                    if (dtMed != null && dtMed.Tables[0].Rows.Count > 0)
                                    {
                                        if (Convert.ToInt16(dtMed.Tables[0].Rows[0]["ISVALID"]) == 0)
                                        {
                                            drTemp["IS_STOCK_EXIST"] = 2;
                                        }
                                        else
                                        {
                                            if (!IsVerificationLoaded && (BatchOrUnit == null || BatchOrUnit.Rows.Count == 0)) //BatchOrUnit condition added for bug ID 38081
                                            {
                                                drTemp["IS_STOCK_EXIST"] = 1;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        drTemp["IS_STOCK_EXIST"] = 2;
                                    }
                                    //drTemp["IS_STOCK_EXIST"] = 1;
                                }
                                //else if (drItem["STOP_DATE"] != DBNull.Value)
                                //{
                                //    if (Convert.ToDateTime(drItem["STOP_DATE"]) < DateTime.Now)
                                //    {
                                //        drTemp["NEAREXPIRY"] = 1;
                                //    }
                                //}
                                //else if (drItem["END_DATE"] != DBNull.Value)
                                //{
                                //    if (Convert.ToDateTime(drItem["END_DATE"]) < DateTime.Now)
                                //    {
                                //        drTemp["NEAREXPIRY"] = 1;
                                //    }
                                //}
                            }
                            else
                            {
                                if (SelectedItemServiceType == (int)ServiceType.Pharmacy &&
                               SelectedServiceType == (int)ServiceType.Investigation &&
                               IfNullReturnZero(drTemp["CONSUMPTION_STATUS"]) == 1 && drTemp["EMR_PROVIDER_VISIT_ID"] != DBNull.Value)
                                {
                                }
                                else
                                {
                                    if (drTemp.Table.Columns.Contains("IS_ADDITIVE"))
                                    {
                                        drTemp["IS_ADDITIVE"] = 0;
                                    }
                                    drTemp["EMR_PROVIDER_VISIT_ID"] = DBNull.Value;
                                    drTemp["EMR_PAT_DTLS_INV_ORDER_ID"] = DBNull.Value;
                                    drTemp["ISORDERWISEBILL"] = 0;  //CPOE WISE
                                }
                                //drTemp["ISSALE"] = true;                           
                                if (SelectedFrequency != null)
                                {
                                    drTemp["FREQUENCY"] = SelectedFrequency["LOOKUP_VALUE"];
                                }
                            }
                            if (drTempSelectedService != null && drTempSelectedService["IS_NARCOTIC_DRUG"] != DBNull.Value &&
                                    Convert.ToBoolean(drTempSelectedService["IS_NARCOTIC_DRUG"]) == true)
                            {
                                drTemp["IS_NARCOTIC_DRUG"] = 1;
                            }
                            if (Service != null)
                            {
                                drTemp["CPT_CODE"] = Service["CPT_CODE"];
                            }
                        }
                        else
                        {
                            if (drItem != null)
                            {
                                drTemp["EMR_PROVIDER_VISIT_ID"] = drItem["EMR_PROVIDER_VISIT_ID"];
                                drTemp["EMR_PAT_DTLS_INV_ORDER_ID"] = drItem["EMR_PAT_DTLS_INV_ORDER_ID"];//EMR_PAT_DTLS_INV_ORDER_ID=EMR_PAT_DTLS_PH_ORDER_ID
                                drTemp["EMR_PAT_DTLS_MEDICATION_ID"] = drItem["EMR_PAT_DTLS_INV_ORDER_ID"];//EMR_PAT_DTLS_INV_ORDER_ID=EMR_PAT_DTLS_PH_ORDER_ID
                                if (drItem.Table.Columns.Contains("REMARKS") && drTemp.Table.Columns.Contains("REMARKS")) //Added by shuaib use when convert gen. into brand
                                {
                                    drTemp["REMARKS"] = drItem["REMARKS"];
                                }
                                if (drItem.Table.Columns.Contains("EMR_PAT_PH_DRUG_ADMIN_ID"))
                                {
                                    drTemp["EMR_PAT_PH_DRUG_ADMIN_ID"] = drItem["EMR_PAT_PH_DRUG_ADMIN_ID"];
                                }
                                if (drItem.Table.Columns.Contains("CONSUMPTION_STATUS"))
                                {
                                    drTemp["CONSUMPTION_STATUS"] = drItem["CONSUMPTION_STATUS"];
                                }
                                if (drItem.Table.Columns.Contains("EMR_PAT_PH_DRUG_ADMIN_ID"))
                                {
                                    drTemp["EMR_PAT_PH_DRUG_ADMIN_ID"] = drItem["EMR_PAT_PH_DRUG_ADMIN_ID"];
                                }
                                if (drItem.Table.Columns.Contains("CONSUMPTION_STATUS"))
                                {
                                    drTemp["CONSUMPTION_STATUS"] = drItem["CONSUMPTION_STATUS"];
                                }
                                if (drItem.Table.Columns.Contains("PROVIDER_ID") && drTemp.Table.Columns.Contains("PROVIDER_ID"))
                                {
                                    drTemp["PROVIDER_ID"] = drItem["PROVIDER_ID"];
                                }
                                //DataTable dtTemp = Fetch_PhdtlsOrder(Convert.ToInt64(drItem["EMR_PAT_DTLS_INV_ORDER_ID"]));
                                //if (dtTemp != null && dtTemp.Rows.Count > 0)
                                //{
                                //    drTemp["ISVERIFICATION"] = true;
                                //    EnableVerification = false;
                                //}
                                if (isStockExist)
                                {
                                    Infologics.Medilogics.CommonShared.ServiceMain.MainServiceShared objMainBilling = new Infologics.Medilogics.CommonShared.ServiceMain.MainServiceShared();
                                    DataSet dtMed = null;
                                    DataSet ds = new DataSet();
                                    DataTable dtcriteria = new DataTable();
                                    dtcriteria.Columns.Add("INV_MAST_SERVICE_ID");
                                    DataRow drNew = dtcriteria.NewRow();
                                    if (SelectedServiceDetails != null && SelectedServiceDetails.Table.Columns.Contains("PRIMARY_ID"))
                                    {
                                        drNew["INV_MAST_SERVICE_ID"] = SelectedServiceDetails["PRIMARY_ID"];
                                    }
                                    dtcriteria.Rows.Add(drNew);
                                    dtcriteria.TableName = "INV_MAST_SERVICE_CRITERIA";
                                    ds.Tables.Add(dtcriteria);
                                    if (drTempSelectedService != null)
                                    {
                                        dtMed = objMainBilling.FetchEMRServiceAndVitalsData(ds);
                                    }
                                    if (dtMed != null && dtMed.Tables[0].Rows.Count > 0)
                                    {
                                        if (Convert.ToInt16(dtMed.Tables[0].Rows[0]["ISVALID"]) == 0)
                                        {
                                            drTemp["IS_STOCK_EXIST"] = 2;
                                        }
                                        else
                                        {
                                            drTemp["IS_STOCK_EXIST"] = 1;
                                        }
                                    }
                                    else
                                    {
                                        drTemp["IS_STOCK_EXIST"] = 2;
                                    }
                                    //drTemp["IS_STOCK_EXIST"] = 1;
                                }
                                //else if (drItem["STOP_DATE"] != DBNull.Value)
                                //{
                                //    if (Convert.ToDateTime(drItem["STOP_DATE"]) < DateTime.Now)
                                //    {
                                //        drTemp["NEAREXPIRY"] = 1;
                                //    }
                                //}
                                //else if (drItem["END_DATE"] != DBNull.Value)
                                //{
                                //    if (Convert.ToDateTime(drItem["END_DATE"]) < DateTime.Now)
                                //    {
                                //        drTemp["NEAREXPIRY"] = 1;
                                //    }
                                //}
                            }
                            else
                            {
                                if (SelectedFrequency != null)
                                {
                                    drTemp["FREQUENCY"] = SelectedFrequency["LOOKUP_VALUE"];
                                }
                            }
                            if (drTempSelectedService != null && drTempSelectedService["IS_NARCOTIC_DRUG"] != DBNull.Value &&
                                    Convert.ToBoolean(drTempSelectedService["IS_NARCOTIC_DRUG"]) == true)
                            {
                                drTemp["IS_NARCOTIC_DRUG"] = 1;
                            }
                        }
                    }
                    if (StrDuration != string.Empty && SelectedDuratioin != null && SelectedDuratioin["VALUE"] != DBNull.Value && IsConsumable)
                    {
                        drTemp["DURATION"] = strDuration + SelectedDuratioin["VALUE"].ToString().ToLower().First();
                    }
                    if (SelectedUrgency != null && Convert.ToInt16(SelectedUrgency["KEY"]) == 1 && !isEmrOrder)
                    {
                        drTemp["IS_STAT"] = 1;
                    }
                    else if (SelectedUrgency != null && Convert.ToInt16(SelectedUrgency["KEY"]) == 3 && !isEmrOrder)
                    {
                        drTemp["IS_STAT"] = 3;
                    }
                    else if (!isEmrOrder)
                    {
                        drTemp["IS_STAT"] = 0;
                    }
                    //if (IsConsumable)
                    //{
                    //    drTemp["FREQUENCY"] = SelectedFrequency != null ? SelectedFrequency["LOOKUP_VALUE"] : drTemp["FREQUENCY"] != DBNull.Value ? drTemp["FREQUENCY"] : DBNull.Value;
                    //}
                    drTemp["ISTAPPER_ENABLE"] = IsTapperEnable;
                    DataRow drEMRItem = this.GetEMRCPOEPrescription(drTemp);
                    if (drEMRItem != null && drEMRItem.Table.Columns.Contains("GENERIC_ID") && drEMRItem["GENERIC_ID"] != DBNull.Value) //if generic is changed in master that time need to take GENERIC_ID from emr order
                    {
                        drTemp["GENERIC_ID"] = drEMRItem["GENERIC_ID"].ToString();
                    }
                    else if (drTempSelectedService != null && drTempSelectedService["GENERIC_ID"] != DBNull.Value)
                    {
                        drTemp["GENERIC_ID"] = drTempSelectedService["GENERIC_ID"].ToString();
                    }
                    if (SelectedBatchOrUnit != null)
                    {
                        removeDublication = true;
                        drTemp["BATCHNO"] = SelectedBatchOrUnit.Row["BATCHNO"];
                        removeDublication = false;
                        drTemp["SALES_RATE"] = SelectedBatchOrUnit.Row["PRICE"];// MedicineDetails["PRICE"];
                        drTemp["PURCHASE_RATE"] = IsUSSettingEnable ? SelectedBatchOrUnit.Row["PRICE"] : MedicineDetails["ACTUAL_RATE"];
                        drTemp["WT_AVG"] = IsUSSettingEnable ? DBNull.Value : MedicineDetails["WT_AVG"];
                        if (UnitSalesConversionApplicable && BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["QTY"] != DBNull.Value
                            && BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BASE_QTY"] != DBNull.Value)
                        {
                            drTemp["SALES_RATE"] = IfNullReturnZero(drTemp["SALES_RATE"]) * IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BASE_QTY"]);
                            drTemp["PURCHASE_RATE"] = IfNullReturnZero(drTemp["PURCHASE_RATE"]) * IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BASE_QTY"]);
                            drTemp["WT_AVG"] = IsUSSettingEnable ? 0
                                : IfNullReturnZero(drTemp["WT_AVG"]) * IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BASE_QTY"]);
                        }
                        if (!string.IsNullOrEmpty(Convert.ToString(SelectedBatchOrUnit.Row["EXPDATE"])))
                        {
                            drTemp["EXP_DATE"] = SelectedBatchOrUnit.Row["EXPDATE"];
                        }
                        else
                        {
                            drTemp["EXP_DATE"] = DBNull.Value;
                        }
                        if (!Convert.ToBoolean(IfNullReturnZero(drTemp["IS_EDITED"])))
                        {
                            isBlockBatchSelectionChange = true;
                            drTemp["MEDICINE_CODE"] = drTemp["MEDICINE_CODE"] == DBNull.Value ? IsUSSettingEnable ? DBNull.Value : MedicineDetails["MEDICINE_CODE"] : drTemp["MEDICINE_CODE"];
                            isBlockBatchSelectionChange = false;
                            drTemp["TAX_FROM_CUSTOMER"] = drTemp["TAX_FROM_CUSTOMER"] == DBNull.Value ? IsUSSettingEnable ? DBNull.Value : MedicineDetails["TAX_FROM_CUSTOMER"] : drTemp["TAX_FROM_CUSTOMER"];
                        }
                    }
                    else
                    {
                        if (BatchItemWise != null && BatchItemWise.Rows.Count > 0 && drTemp["BATCHNO"] != DBNull.Value)
                        {
                            var Query = from row in BatchItemWise.AsEnumerable()
                                        where (Convert.ToString(row["BATCHNO"]) != string.Empty && Convert.ToString(row["EXPDATE"]) != string.Empty && Convert.ToString(row["BATCHNO"]) == Convert.ToString(drTemp["BATCHNO"]))
                                        select row;
                            if (Query.Any())
                            {
                                DataTable dt = Query.CopyToDataTable();
                                drTemp["EXP_DATE"] = dt.Rows[0]["EXPDATE"];
                            }
                        }
                        isBlockBatchSelectionChange = true;
                        if (drTempSelectedService != null && drTempSelectedService.Table.KIIsNotNullAndRowCount()
                            && drTempSelectedService.Table.Columns.Contains("MEDICINE_CODE") && drTempSelectedService["MEDICINE_CODE"] != DBNull.Value && !Convert.ToBoolean(IfNullReturnZero(drTemp["IS_EDITED"])))
                        {
                            drTemp["MEDICINE_CODE"] = drTemp["MEDICINE_CODE"] == DBNull.Value ? IsUSSettingEnable ? DBNull.Value : drTempSelectedService["MEDICINE_CODE"] : drTemp["MEDICINE_CODE"];
                        }
                        isBlockBatchSelectionChange = false;
                    }
                    //else if (SelectedItemServiceType == (int)ServiceType.Pharmacy && drTemp["MEDICINE_CODE"] != DBNull.Value && SelectedService.Row.Table.Columns.Contains("MEDICINE_CODE"))
                    //{
                    //    drTemp["MEDICINE_CODE"] = SelectedService.Row["MEDICINE_CODE"];
                    //}
                    if (SelectedBatchOrUnit != null && SelectedBatchOrUnit.Row.Table.Columns.Contains("MRP"))
                    {
                        drTemp["SALES_MRP"] = SelectedBatchOrUnit.Row["MRP"];
                    }
                    if (SelectedBatchOrUnit != null && SelectedBatchOrUnit.Row.Table.Columns.Contains("GRN"))
                    {
                        drTemp["GRN"] = SelectedBatchOrUnit.Row["GRN"];
                    }
                    //if (SubstituteMedicine != null)
                    //{
                    //    drTemp["SUB_INV_MAST_SERVICE_ID"] = SubstituteMedicine.Row["INV_MAST_SERVICE_ID"];
                    //    drTemp["ISSUBSTITUTE"] = 1;
                    //}
                    ///JUBILEE
                    if (Service != null && Service.Table.Columns.Contains("IS_STORE"))
                    {
                        drTemp["IS_INVENTORY"] = Service["IS_STORE"];
                    }
                    if (drTempSelectedService != null)
                    {
                        drTemp["EXCLUDED_SERVICE"] = drTempSelectedService.Table.Columns.Contains("INCEXCLUSTATUS")
                              && drTempSelectedService["INCEXCLUSTATUS"] != DBNull.Value && Convert.ToInt16(drTempSelectedService["INCEXCLUSTATUS"]) == (int)InclusionExclusionStatus.Exclusion ? 1 : 0;
                    }
                    if (SelectedPharamacyUnitSales != null)
                    {
                        drTemp["SALES_ACTUAL_QTY"] = Convert.ToDecimal(Quantity * Convert.ToDecimal(SelectedPharamacyUnitSales["BASE_QTY"]));
                    }
                    drTemp["GEN_PAT_BILLING_ID"] = BillData.Tables["GEN_PAT_BILLING"].KIIsNotNullAndRowCount() && BillData.Tables["GEN_PAT_BILLING"].Select("SERVICE_TYPE=" + SelectedItemServiceType).Length > 0
                       && BillData.Tables["GEN_PAT_BILLING"].Select("SERVICE_TYPE=" + SelectedItemServiceType).ElementAt(0)["GEN_PAT_BILLING_ID"] != DBNull.Value
                       ? BillData.Tables["GEN_PAT_BILLING"].Select("SERVICE_TYPE=" + SelectedItemServiceType).ElementAt(0)["GEN_PAT_BILLING_ID"] : -1;
                    drTemp["GEN_PATIENT_SHARE"] = drTemp["INCEXLCSTATUS"] != DBNull.Value ? Convert.ToInt16(drTemp["INCEXLCSTATUS"]) == (int)InclusionExclusionStatus.Exclusion ? drTemp["NET_AMOUNT"] : 0 : 0;
                    drTemp["CO_PAY_AMOUNT_COLLECT"] = SelectedVisitMode != (int)VisitMode.OPCASH && Convert.ToInt16(drTemp["EXCLUDED_SERVICE"]) == 1 && IsCopaySettingExist ? drTemp["NET_AMOUNT"]
                        : SelectedVisitMode != (int)VisitMode.OPCASH && Convert.ToInt16(drTemp["EXCLUDED_SERVICE"]) == 1 && !IsServicePayingPartyPatient ? drTemp["NET_AMOUNT"]
                        : this.CalculateCopay(drTemp); //for calculate the copay if payment is patient
                    drTemp["CO_PAY_AMOUNT"] = Convert.ToInt16(drTemp["EXCLUDED_SERVICE"]) == 1 && IsCopaySettingExist ? drTemp["NET_AMOUNT"]
                        : Convert.ToInt16(drTemp["EXCLUDED_SERVICE"]) == 1 && !IsServicePayingPartyPatient ? drTemp["NET_AMOUNT"]
                        : drTemp["CO_PAY_AMOUNT"]; //for calculate the copay if payment is patient
                    //drTemp["COPAY_DEPT_WISE"] = IsDepartmentWiseCopayCalculation ? 1 : 0;
                    drTemp["SERVICE_TYPE"] = (int)ServiceType.Pharmacy;
                    ////drTemp["PRIMARY_SERVICE_ID"] = SelectedParentAssociationService != null && SelectedParentAssociationService.Row.Table.Rows.Count > 0
                    ////      && SelectedParentAssociationService.Row.Table.Columns.Contains("INV_MAST_SERVICE_ID")
                    ////      && SelectedParentAssociationService.Row["INV_MAST_SERVICE_ID"] != DBNull.Value
                    ////      ? SelectedParentAssociationService.Row["INV_MAST_SERVICE_ID"] : SelectedParentAssociationService != null
                    ////      && SelectedParentAssociationService.Row.Table.Rows.Count > 0
                    ////      && SelectedParentAssociationService.Row.Table.Columns.Contains("PRIMARY_ID")
                    ////      && SelectedParentAssociationService.Row["PRIMARY_ID"] != DBNull.Value
                    ////      ? SelectedParentAssociationService.Row["PRIMARY_ID"] : ServiceId;
                    if (SelectedServiceType != (int)ServiceType.Pharmacy)
                        drTemp["ISEDIT_COUNT"] = IsQtyEditable ? true : false;
                    else
                        drTemp["ISEDIT_COUNT"] = true;
                    drTemp["ISPENDING"] = drTemp["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value ? 1 : 0;
                    isBlockBatchSelectionChange = true;
                    if (EnableVerificationSettingBased && SelectedVisitModeNew == (int)VisitMode.IP &&
                                 IfNullReturnZero(drTemp["EMR_PAT_DTLS_MEDICATION_ID"]) > 0 && SelectedServiceDetails != null)
                    {
                        if (FOData.Medicines.KIIsNotNullAndRowCount())
                        {
                            decimal service_Id = 0;
                            if (SelectedServiceDetails.Table.Columns.Contains("PRIMARY_ID")) //Speed Improve
                            {
                                service_Id = IfNullReturnZero(SelectedServiceDetails["PRIMARY_ID"]); //Speed Improve
                            }
                            else
                            {
                                service_Id = IfNullReturnZero(SelectedServiceDetails["INV_MAST_SERVICE_ID"]); //Speed Improve
                            }
                            var filterMachine = FOData.Medicines.AsEnumerable().Where(x => IfNullReturnZero(x["INV_MAST_SERVICE_ID"])
                                         == service_Id
                                         ).Select(x => x).ToArray();
                            if (filterMachine.Any())
                            {
                                drTemp["IS_OMNICELL_ITEM"] = filterMachine[0]["EXTERNAL_SERVICE_CODE"] == DBNull.Value ? 0 : 1;//IS_OMNICELL_ITEM default value is 0

                                if (!Convert.ToBoolean(drTemp["IS_VERIFIED"]) && Convert.ToBoolean(drTemp["IS_OMNICELL_ITEM"]) && Convert.ToBoolean(IfNullReturnZero(drTemp["IS_ADDITIVE"])) && Convert.ToBoolean(IfNullReturnZero(drTemp["ISVERIFICATION"]))) //bug id 38530
                                {

                                    drTemp["ISVERIFICATION"] = false;

                                }
                            }
                            else
                            {
                                if (drEMRItem == null)
                                {
                                    drEMRItem = this.GetEMRCPOEPrescription(drTemp);
                                }
                                if (drEMRItem != null && drEMRItem.Table.Columns.Contains("EXTERNAL_SERVICE_CODE")) 
                                {
                                    drTemp["IS_OMNICELL_ITEM"] = drEMRItem["EXTERNAL_SERVICE_CODE"] == DBNull.Value ? 0 : 1;

                                    if (!Convert.ToBoolean(drTemp["IS_VERIFIED"]) && Convert.ToBoolean(drTemp["IS_OMNICELL_ITEM"]) && Convert.ToBoolean(IfNullReturnZero(drTemp["IS_ADDITIVE"])) && Convert.ToBoolean(IfNullReturnZero(drTemp["ISVERIFICATION"]))) //bug id 38530
                                    {

                                        drTemp["ISVERIFICATION"] = false;

                                    }
                                }
                            }
                        }
                    }
                    if (!Convert.ToBoolean(IfNullReturnZero(drTemp["IS_EDITED"])) && !isvisittypechange)
                    {
                        drTemp["SUBLOCATION"] = Convert.ToInt32(SelectedLabOrSubLocationValue);
                    }
                    if (SelectedServiceType == (int)ServiceType.Investigation && SelectedItemServiceType == (int)ServiceType.Pharmacy && SelectedPHSubLocationsValue != null && SelectedPHSubLocationsValue > 0)
                    {
                        if (Convert.ToInt32(drTemp["SUBLOCATION"]) != Convert.ToInt32(SelectedPHSubLocationsValue)) // Bug Id : 31836, Benson. not able to trace the PCTST.Any issues remove this line.
                            drTemp["SUBLOCATION"] = Convert.ToInt32(SelectedPHSubLocationsValue);
                    }
                    if (IsVerificationLoaded || EnableVerificationSettingBased)
                    {
                        drTemp["SUBLOCATION"] = IfNullReturnZero(drTemp["IS_OMNICELL_ITEM"]) == 0 ? IP_Gen_App_Sub_Location : IfNullReturnZero(IPVerificationLocation);
                    }
                    else if (IfNullReturnZero(drTemp["SUBLOCATION"]) == 0 && IP_Gen_App_Sub_Location > 0)
                    {
                        drTemp["SUBLOCATION"] = IP_Gen_App_Sub_Location;
                    }                    
                    if (IfNullReturnZero(drTemp["IS_VERIFIED"]) == 1)
                    {
                        DataRow drItem = this.GetEMRCPOEPrescription(drTemp);
                        if (drItem != null && drItem.Table.Columns.Contains("PH_SUBLOCATION_ID") && IfNullReturnZero(drItem["PH_SUBLOCATION_ID"]) > 0)
                        {
                            drTemp["SUBLOCATION"] = IfNullReturnZero(drItem["PH_SUBLOCATION_ID"]);
                            if (IsFromPharmacyPanel && EnableVerificationSettingBased && !AllLabOrSubLocations.KIIsNotNullOrEmpty())
                            {
                                FetchAllSubLocations();
                            }
                            //LabOrSubLocations changed to AllLabOrSubLocations,modified by mohd adil for live issue correction
                            //if (LabOrSubLocations.KIIsNotNullOrEmpty())
                            if (AllLabOrSubLocations.KIIsNotNullOrEmpty())
                            {
                                DataRow[] drLocation = AllLabOrSubLocations.ToTable().AsEnumerable().Where(x => IfNullReturnZero(x["INCO_MAST_ID"]) == IfNullReturnZero(drItem["PH_SUBLOCATION_ID"]))
                               .Select(x => x).ToArray();
                                if (drLocation.Any() && IfNullReturnZero(drLocation[0]["IS_MACHINE"]) == 1 && EnableVerificationSettingBased)
                                {
                                    if (FOData.Medicines.KIIsNotNullAndRowCount())
                                    {
                                        decimal service_Id = 0;
                                        if (SelectedServiceDetails != null && SelectedServiceDetails.Table.Columns.Contains("PRIMARY_ID")) //Speed Improve
                                        {
                                            service_Id = IfNullReturnZero(SelectedServiceDetails["PRIMARY_ID"]); //Speed Improve
                                        }
                                        else if (SelectedServiceDetails != null && SelectedServiceDetails.Table.Columns.Contains("INV_MAST_SERVICE_ID")) //Speed Improve
                                        {
                                            service_Id = IfNullReturnZero(SelectedServiceDetails["INV_MAST_SERVICE_ID"]); //Speed Improve
                                        }
                                        else
                                        {
                                            service_Id = IfNullReturnZero(drTemp["INV_MAST_SERVICE_ID"]);
                                        }
                                        var filterMachine = FOData.Medicines.AsEnumerable().Where(x => IfNullReturnZero(x["INV_MAST_SERVICE_ID"])
                                                     == service_Id
                                                     ).Select(x => x).ToArray();
                                        if (filterMachine.Any())
                                        {
                                            drTemp["IS_OMNICELL_ITEM"] = filterMachine[0]["EXTERNAL_SERVICE_CODE"] == DBNull.Value ? 0 : 1;
                                        }
                                        else
                                        {
                                            if (drEMRItem == null)
                                            {
                                                drEMRItem = this.GetEMRCPOEPrescription(drTemp);
                                            }
                                            if (drEMRItem != null && drEMRItem.Table.Columns.Contains("EXTERNAL_SERVICE_CODE"))
                                            {
                                                drTemp["IS_OMNICELL_ITEM"] = drEMRItem["EXTERNAL_SERVICE_CODE"] == DBNull.Value ? 0 : 1;
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    drTemp["IS_OMNICELL_ITEM"] = 0;
                                }
                            }
                        }
                    }
                    if (EnableVerificationSettingBased && checkStock(IfNullReturnZero(drTemp["INV_MAST_SERVICE_ID"]), IfNullReturnZero(drTemp["SUBLOCATION"])))
                    {
                        drTemp["IS_STOCK_EXIST"] = DBNull.Value;
                    }
                    else if (EnableVerificationSettingBased && !checkStock(IfNullReturnZero(drTemp["INV_MAST_SERVICE_ID"]), IfNullReturnZero(drTemp["SUBLOCATION"])))
                    {
                        drTemp["IS_STOCK_EXIST"] = 1;
                    }
                    if (IfNullReturnZero(drTemp["IS_OMNICELL_ITEM"]) == 1)
                    {
                        drTemp["IS_SUB_OVERRIDE"] = 0;
                    }
                    isBlockBatchSelectionChange = false;
                }
            }
            catch (Exception)
            {                
                throw;
            }
        }

        private decimal CalculateTier(decimal BaseCharge, DataRow drTemp, DataTable dtCharge)
        {
            //Implementation of Tier
            drTemp["TIER_MULTIPLIER"] = DBNull.Value;
            //DataTable dtGenApp = CommonData.GetDefaultSettings(0, "TIER_APPLICABLE");
            //DataTable dtSchemeMastID = CommonData.GetDefaultSettings(0, "INCO_MAST_SCHEME_ID");
            //To check if billing is done in Default Scheme
            //if (dtSchemeMastID != null && dtSchemeMastID.Rows.Count > 0 && dtGenApp != null && dtGenApp.Rows.Count > 0
            //    && (Convert.ToInt32(dtSchemeMastID.Rows[0]["VALUE"]) == SelectedSchemeValue)) //Convert.ToInt32(SchemeDetails["INCO_MAST_SCHEME_ID"])
            if (DefaultSettings.Values.INCO_MAST_SCHEME_ID >= 0 && DefaultSettings.Values.TIER_APPLICABLE!=string.Empty
                && (DefaultSettings.Values.INCO_MAST_SCHEME_ID == SelectedSchemeValue)) //
            {
                //To check if Tier can be implemented for the configured services
                if (Service != null && Service.Table.Columns.Contains("PARENT_INV_CATEGORY_ID")
                    //&& IsContains(Convert.ToString(dtGenApp.Rows[0]["VALUE"]), Service["PARENT_INV_CATEGORY_ID"])
                    && IsContains(DefaultSettings.Values.TIER_APPLICABLE, Service["PARENT_INV_CATEGORY_ID"])
                    && Service.Table.Columns.Contains("TIER_APPLICABLE")
                    && Service["TIER_APPLICABLE"] != DBNull.Value && Convert.ToInt16(Service["TIER_APPLICABLE"]) == 1)
                {
                    //To check if Tier is defined for the admitted Room Type
                    if (PatientInformation != null && dtCharge.Rows[0]["PRICE"] != DBNull.Value &&
                          PatientInformation.Columns.Contains("TIER_MULTIPLIER") && PatientInformation.Rows[0]["TIER_MULTIPLIER"] != DBNull.Value)
                    {
                        BaseCharge = Convert.ToDecimal(dtCharge.Rows[0]["PRICE"])
                            + (Medilogics.General.Control.Common.MathRound((Convert.ToDecimal(dtCharge.Rows[0]["PRICE"])
                            * (decimal)PatientInformation.Rows[0]["TIER_MULTIPLIER"]) / 100, CommonData.DecimalPlace));
                        drTemp["TIER_MULTIPLIER"] = PatientInformation.Rows[0]["TIER_MULTIPLIER"];
                    }
                    else if (dtCharge.Rows[0]["PRICE"] != DBNull.Value && PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Columns.Contains("MRNO")
                               && PatientInformation.Rows[0]["MRNO"] != DBNull.Value && !PatientInformation.Columns.Contains("TIER_MULTIPLIER"))
                    {
                        MainMasterSettings objSettings = new MainMasterSettings();
                        DataTable dtTier = objSettings.GetAdtRoomTier(PatientInformation);
                        //To check if billing is done in Default Scheme
                        if (dtTier.KIIsNotNullAndRowCount() && dtTier.Rows[0]["TIER"] != DBNull.Value)
                        {
                            BaseCharge = Convert.ToDecimal(dtCharge.Rows[0]["PRICE"])
                                + (Medilogics.General.Control.Common.MathRound((Convert.ToDecimal(dtCharge.Rows[0]["PRICE"])
                                * (decimal)dtTier.Rows[0]["TIER"]) / 100, CommonData.DecimalPlace));
                            drTemp["TIER_MULTIPLIER"] = dtTier.Rows[0]["TIER"];
                        }
                    }
                }
                //In some condition Parent category ID is defined as INV_PARENT_CATEGORY_ID
                else if (Service != null && Service.Table.Columns.Contains("INV_PARENT_CATEGORY_ID")
                    && IsContains(DefaultSettings.Values.TIER_APPLICABLE, Service["INV_PARENT_CATEGORY_ID"])
                    && Service.Table.Columns.Contains("TIER_APPLICABLE")
                    && Service["TIER_APPLICABLE"] != DBNull.Value && Convert.ToInt16(Service["TIER_APPLICABLE"]) == 1)
                {
                    if (PatientInformation != null && dtCharge.Rows[0]["PRICE"] != DBNull.Value &&
                      PatientInformation.Columns.Contains("TIER_MULTIPLIER") && PatientInformation.Rows[0]["TIER_MULTIPLIER"] != DBNull.Value)
                    {
                        BaseCharge = Convert.ToDecimal(dtCharge.Rows[0]["PRICE"])
                            + (Medilogics.General.Control.Common.MathRound((Convert.ToDecimal(dtCharge.Rows[0]["PRICE"])
                            * (decimal)PatientInformation.Rows[0]["TIER_MULTIPLIER"]) / 100, CommonData.DecimalPlace));
                        drTemp["TIER_MULTIPLIER"] = PatientInformation.Rows[0]["TIER_MULTIPLIER"];
                    }
                    else if (dtCharge.Rows[0]["PRICE"] != DBNull.Value && PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Columns.Contains("MRNO")
                              && PatientInformation.Rows[0]["MRNO"] != DBNull.Value && !PatientInformation.Columns.Contains("TIER_MULTIPLIER"))
                    {
                        MainMasterSettings objSettings = new MainMasterSettings();
                        DataTable dtTier = objSettings.GetAdtRoomTier(PatientInformation);
                        //To check if billing is done in Default Scheme
                        if (dtTier.KIIsNotNullAndRowCount() && dtTier.Rows[0]["TIER"] != DBNull.Value)
                        {
                            BaseCharge = Convert.ToDecimal(dtCharge.Rows[0]["PRICE"])
                                + (Medilogics.General.Control.Common.MathRound((Convert.ToDecimal(dtCharge.Rows[0]["PRICE"])
                                * (decimal)dtTier.Rows[0]["TIER"]) / 100, CommonData.DecimalPlace));
                            drTemp["TIER_MULTIPLIER"] = dtTier.Rows[0]["TIER"];
                        }
                    }
                }
            }
            //End of Tier Implementation
            return BaseCharge;
        }

        private bool IsContains(string str, object obj)
        {
            bool Res = false;
            try
            {
                if (str != null && str.Length > 0)
                {
                    string[] str1 = str.Split(new char[] { ',' });
                    Res = str1.Contains(Convert.ToString(obj));
                }
            }
            catch (Exception)
            {

                throw;
            }
            return Res;
        }


        /// <summary>
        /// Select Selected packge service charge
        /// </summary>
        /// <returns></returns>
        private decimal SelectedPackageServiceCharge()
        {
            decimal pkgCharge = 0;
            if (dsPackageMstDtls != null && dsPackageMstDtls.Tables["PKG_DTLS_PATIENT_SERVICE"].KIIsNotNullAndRowCount() && SelectedService != null)
            {
                pkgCharge = (from dr in dsPackageMstDtls.Tables["PKG_DTLS_PATIENT_SERVICE"].AsEnumerable()
                             where dr.RowState != DataRowState.Deleted && dr["SERVICE_ID"] != DBNull.Value && dr["PKG_MAST_PATIENT_ID"] != DBNull.Value
                                  && (SelectedService.Row.Table.Columns.Contains("PRIMARY_ID") && SelectedService.Row["PRIMARY_ID"] != DBNull.Value
                                  && Convert.ToInt64(dr["SERVICE_ID"]) == Convert.ToInt64(SelectedService.Row["PRIMARY_ID"])
                                  || SelectedService.Row.Table.Columns.Contains("INV_MAST_SERVICE_ID") && SelectedService.Row["INV_MAST_SERVICE_ID"] != DBNull.Value
                                  && Convert.ToInt64(dr["SERVICE_ID"]) == Convert.ToInt64(SelectedService.Row["INV_MAST_SERVICE_ID"]))
                                  && SelectedPackageItem.Row["PKG_MAST_PATIENT_ID"] != DBNull.Value
                                  && Convert.ToInt64(dr["PKG_MAST_PATIENT_ID"]) == Convert.ToInt64(SelectedPackageItem.Row["PKG_MAST_PATIENT_ID"])
                             select Convert.ToDecimal(dr["PKG_RATE"])).Sum();
            }
            return pkgCharge;
        }

        private DataRow[] GetRecursiveCategoryCharge(DataTable dtCharge, long CategoryId)
        {
            DataRow[] drCategory = null;
            DataRow[] drServices = null;
            if (CategoryId > 0)
            {
                drServices = dtCharge.Select("INV_MAST_SERVICE_ID IS NULL AND INV_CATEGORY_ID=" + CategoryId);
                if (dtCategory != null && dtCategory.Rows.Count > 0 && (drServices == null || drServices.Length == 0))
                {
                    drCategory = dtCategory.Select("INV_CATEGORY_ID=" + CategoryId);
                    if (drCategory != null && drCategory.Length > 0 && drCategory[0]["PARENT_INV_CATEGORY_ID"] != DBNull.Value)
                    {
                        CategoryId = Convert.ToInt64(drCategory[0]["PARENT_INV_CATEGORY_ID"]);
                        drServices = GetRecursiveCategoryCharge(dtCharge, CategoryId);
                        if (drServices != null && drServices.Length > 0)
                        {
                            return drServices;
                        }
                    }
                }
                else
                {
                    return drServices;
                }
            }
            else
            {
            }
            return drServices;
        }

        /// <summary>
        /// get patient current visit 
        /// </summary>
        /// <returns></returns>
        private DataTable GetPatientVisit()
        {
            MainCommon objVisit = new MainCommon();
            if (PatientInformation != null)
            {
                dtPatientVisit = objVisit.SelectPatientVisitWithMrno(PatientInformation.Rows[0]["MRNO"].ToString());
            }
            return dtPatientVisit;
        }

        /// <summary>
        /// Loads the bill common datas.
        /// </summary>
        private void CreateStaticBillCommonData()
        {
            ///Accounts the head details.
            this.AccountHeadDetails();
            //Bill priority details
            this.BillPriorityDetails();
            BillData.Tables["BILL_COMMON_DETAILS"].AcceptChanges();
        }
        /// <summary>
        /// Accounts the head details.
        /// </summary>
        private void AccountHeadDetails()
        {
            try
            {
                drCommon = BillData.Tables["BILL_COMMON_DETAILS"].Rows[0];
                dtCommon = CommonData.GetDefaultSettings(0, "PATIENT RECEIVABLES ACCOUNT HEAD");
                drCommon["PR_ACCHEAD_ID"] = dtCommon.Rows[0]["VALUE"];
                dtCommon = CommonData.GetDefaultSettings(0, "CASH ACCOUNT HEAD");
                drCommon["CASH_ACCHEAD_ID"] = dtCommon.Rows[0]["VALUE"]; ;
                dtCommon = CommonData.GetDefaultSettings(0, "ADVANCE ACCOUNT HEAD");
                drCommon["ADVANCE_ACCHEAD_ID"] = dtCommon.Rows[0]["VALUE"];
                dtCommon = CommonData.GetDefaultSettings(0, "DEFAULT HOSPITAL LAB");
                drCommon["DEFAULT_HOSPITAL_LAB"] = dtCommon.Rows[0]["VALUE"];
                dtCommon = CommonData.GetDefaultSettings(0, "ACTIVATEACCOUNTSENTRYCHECKING");
                if (dtCommon != null && dtCommon.Rows.Count > 0 && drCommon.Table.Columns.Contains("ACTIVATE_ACCOUNTS_ENTRY"))
                {
                    //Pending2020
                    drCommon["ACTIVATE_ACCOUNTS_ENTRY"] = dtCommon.Rows[0]["VALUE"];
                }
                dtCommon = CommonData.GetDefaultSettings(0, "OPCREDIT_REVENUE_STATUS");
                if (dtCommon != null && dtCommon.Rows.Count > 0 && drCommon.Table.Columns.Contains("OPCREDIT_REVENUE_STATUS"))
                {
                    //Pending2020
                    drCommon["OPCREDIT_REVENUE_STATUS"] = dtCommon.Rows[0]["VALUE"];
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Bills the priorty details.
        /// </summary>
        private void BillPriorityDetails()
        {
            try
            {
                BillData.Tables["BILLING_PRIORITY"].Rows.Clear();
                drCommon = BillData.Tables["BILLING_PRIORITY"].NewRow();
                dtCommon = CommonData.GetDefaultSettings(50, "BILLING PAYMENT PRI0RITY ADVANCE");
                drCommon["VALUE"] = dtCommon.Rows[0]["VALUE"];
                drCommon["SETTING"] = dtCommon.Rows[0]["SETTING"];
                BillData.Tables["BILLING_PRIORITY"].Rows.Add(drCommon);
                drCommon = BillData.Tables["BILLING_PRIORITY"].NewRow();
                dtCommon = CommonData.GetDefaultSettings(51, "BILLING PAYMENT PRI0RITY CASH");
                drCommon["VALUE"] = dtCommon.Rows[0]["VALUE"];
                drCommon["SETTING"] = dtCommon.Rows[0]["SETTING"];
                BillData.Tables["BILLING_PRIORITY"].Rows.Add(drCommon);
                drCommon = BillData.Tables["BILLING_PRIORITY"].NewRow();
                dtCommon = CommonData.GetDefaultSettings(52, "BILLING PAYMENT PRI0RITY CARD");
                drCommon["VALUE"] = dtCommon.Rows[0]["VALUE"];
                drCommon["SETTING"] = dtCommon.Rows[0]["SETTING"];
                BillData.Tables["BILLING_PRIORITY"].Rows.Add(drCommon);
                drCommon = BillData.Tables["BILLING_PRIORITY"].NewRow();
                dtCommon = CommonData.GetDefaultSettings(53, "BILLING PAYMENT PRI0RITY BANK");
                drCommon["VALUE"] = dtCommon.Rows[0]["VALUE"];
                drCommon["SETTING"] = dtCommon.Rows[0]["SETTING"];
                BillData.Tables["BILLING_PRIORITY"].Rows.Add(drCommon);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void SetData()
        {
            try
            {
                if (!IsPatientUpdate)
                {
                    this.SetBindData();
                }
                DataContext = this;
                //Deferred payment
                //IsDeferredPayment = ConfigurationSettings.AppSettings["DeferredPaymentCounter"] != null
                //    && Convert.ToBoolean(ConfigurationSettings.AppSettings["DeferredPaymentCounter"]) == true ? true : false;
                /// Assigned from FO PatientView based on Checkbox selection
                ////bool DeferredPayment = CommonData.CheckPrivilege("FO_DEFERRED_PAYMENT_USER");
                ////if (DeferredPayment)
                ////    IsDeferredPayment = true;
                ////else
                ////    IsDeferredPayment = false;
                //---
                PharmacyByDevice = System.Configuration.ConfigurationSettings.AppSettings["IsPharmacyBarCodeEnable"];
                PharmacyByDevice = PharmacyByDevice == null ? string.Empty : PharmacyByDevice.Trim();
                PharmacyDefaultQty = Convert.ToString(ConfigurationSettings.AppSettings["PharmacyDefaultQty"]);
                PharmacyDefaultQty = PharmacyDefaultQty == null || PharmacyDefaultQty == String.Empty ? PharmacyByDevice == "1" ? "1" : "0" : PharmacyDefaultQty.Trim();
                CreateStaticBillCommonData();
                
                //DataTable dtGenSetting = CommonData.GetDefaultSettings(0, "IS_VERIFICATION_REQUIRED");
                //if (dtGenSetting.KIIsNotNullAndRowCount() && Convert.ToInt16(dtGenSetting.Rows[0]["VALUE"]) == 1)
                //{
                //    ucServiceDeliveryServicesDescription.EnableVerificationSettingBased = true;
                //    EnableVerificationSettingBased = true;
                //}
                //else
                //{
                //    ucServiceDeliveryServicesDescription.EnableVerificationSettingBased = false;
                //    EnableVerificationSettingBased = false;
                //}
                SetInitalData_Receipts();
                EnableVerification = CommonData.CheckPrivilege("FO_PHARMACY_BILL_VERIFICATION");
                if (IsServiceSettingEnable)
                {
                    ucServiceDeliveryServicesDescription.IsServiceSettingEnable = true;
                    //IsServiceSettingEnable = true;
                }

                if (IsPhamracySettingEnable)
                {
                    ucServiceDeliveryServicesDescription.IsPhamracySettingEnable = true;
                    //IsPhamracySettingEnable = true;
                }
                uiServiceEpisodeProvider.Patient = Patient;
                uiServiceEpisodeProvider.PatientInformation = PatientInformation;
                //--- Move to common Method
                //DueAmount(); 
                string MRNO = (PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Rows[0]["MRNO"] != DBNull.Value)
                    ? Convert.ToString(PatientInformation.Rows[0]["MRNO"]) : Patient != null ? Patient.MRNO : "";
                DueAmounts = objUICommonMethods.DueAmount(MRNO);
                if (Convert.ToDecimal(DueAmounts) > 0)
                    BlinkDueAmount = true;
                else
                    BlinkDueAmount = false;
                SetPrivilege();

            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// BlinkDueAmount Property  //property to Blink DUE Amount Textbox
        /// </summary>
        private bool blinkDueAmount;
        public bool BlinkDueAmount
        {
            get { return blinkDueAmount; }
            set
            {
                blinkDueAmount = value;
                OnPropertyChanged("BlinkDueAmount");//Implement INotifyPropertyChanged
            }
        }

        /// <summary>
        /// Handles the Executed event of the AddService control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        private void Executed_AddService(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                Mouse.OverrideCursor = Cursors.Wait;
                if ((SelectedServiceType == (int)ServiceType.Investigation || SelectedServiceType == (int)ServiceType.Cafeteria
                    || SelectedServiceType == (int)ServiceType.IncomingService) && SelectedService != null || SelectedServiceType == (int)ServiceType.ADT)
                {
                    if (SelectedItemServiceType == (int)ServiceType.ADT)
                    {
                        if (BillData != null && BillData.Tables.Contains("GEN_PAT_BILLING") && BillData.Tables["GEN_PAT_BILLING"].Rows.Count > 0 &&
                            dtPatientVisit != null && dtPatientVisit.Rows.Count > 0)
                        {
                            BillData.Tables["GEN_PAT_BILLING"].Rows[0]["MRNO"] = dtPatientVisit.Rows[0]["MRNO"];
                            BillData.Tables["GEN_PAT_BILLING"].Rows[0]["VISIT_NO"] = dtPatientVisit.Rows[0]["VISIT_NO"];
                        }
                    }
                    if (SelectedItemServiceType == (int)ServiceType.Pharmacy)
                    {
                        bool isSuccess = this.AddPharmacy();
                        if (isSuccess)
                        {
                            CalculateServiceTotal();
                            if (isPharmacyInServiceBilling)
                                isPharmacyInServiceBilling = false;
                        }
                    }
                    else
                    {
                        ParentBaseCharge = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BASE_CHARGE"] != DBNull.Value ?
                            Convert.ToDecimal(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BASE_CHARGE"]) : 0;
                        SelectedParentAssociationService = SelectedService;
                        if (BillData.Tables["GEN_PAT_BILLING"].Rows[0]["SERVICE_TYPE"] == DBNull.Value)
                        {
                            BillData.Tables["GEN_PAT_BILLING"].Rows[0]["GEN_PAT_BILLING_ID"] = -1;
                            BillData.Tables["GEN_PAT_BILLING"].Rows[0]["SERVICE_TYPE"] = SelectedItemServiceType;
                        }
                        fromAddBtn = true;
                        //End code
                        this.AddService();
                        //Beena Code
                        fromAddBtn = false;
                        //this.AddService();
                        if (ISAssociatedService)
                        {
                            AssignItemAssociationServices(SelectedParentAssociationService.Row);
                            ISAssociatedService = false;
                        }
                    }
                }
                else if (SelectedServiceType == (int)ServiceType.Pharmacy && SelectedService != null)
                {
                    // this.AddPharmacy();
                    //Beena Code
                    // fromAddBtn = true;
                    //End code
                    this.AddPharmacy();
                    //Beena Code
                    //   fromAddBtn = false;
                    //End code
                }

            }
            catch (Exception)
            {
                throw;
                //ExceptionHandler.WriteErrorLog(ex);
            }
            finally
            {
                Mouse.OverrideCursor = null;
            }
        }

        /// <summary>
        /// Adds the service.
        /// </summary>
        private bool AddService()
        {
            bool isSuccess = false;
            bool isProceed = true;
            DataRow editRow = null;
            try
            {
                //if (SelectedProvider == null && SelectedEMROrder == null)
                if (SelectedProvider == null && SelectedEMROrder == null && SelectedServiceType != (int)ServiceType.Cafeteria)
                {
                    Mouse.OverrideCursor = null;
                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                        "Select provider", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    isProceed = false;
                    IsNotClearBasedOnValidation = true;
                }
                if (isTaskBilllingEbabled && SelectedServiceDetails != null) //Speed Improve
                {
                    Service = SelectedServiceDetails;
                }
                if (isProceed && SelectedEMROrder == null)
                {
                    IsValidateService = basicValidation();
                }
                if (isProceed && SelectedEMROrder != null)
                {
                   if (BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0 && BillData.Tables["INV_PAT_BILLING"].Columns.Contains("SERVICE_TYPE")
                       && SelectedServiceDetails.Table.Columns.Contains("SERVICE_TYPE") && BillData.Tables["INV_PAT_BILLING"].Rows[0]["SERVICE_TYPE"] != DBNull.Value) //Speed Improve
                    {//Jijo change bracket
                        var drservicetype = from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                            where dr["SERVICE_TYPE"] != DBNull.Value &&
                                            ((Convert.ToInt16(dr["SERVICE_TYPE"]) != (int)ServiceType.ADT &&
                                             Convert.ToInt64(SelectedServiceDetails["SERVICE_TYPE"]) == (int)ServiceType.ADT) ||
                                             (Convert.ToInt16(dr["SERVICE_TYPE"]) == (int)ServiceType.ADT &&
                                             Convert.ToInt64(SelectedServiceDetails["SERVICE_TYPE"]) != (int)ServiceType.ADT)) //Speed Improve
                                            select dr;
                        if (drservicetype!=null && drservicetype.Any())
                        {
                            Mouse.OverrideCursor = null;
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                       "Not possible to bill room type and service together.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            return false;
                        }
                    }

                }
                if (isProceed && IsValidateService)//&& IsBaseChargeExits
                {
                    isSuccess = true;
                    //Mouse.OverrideCursor = Cursors.Wait;
                    long ServiceId = Int64.MinValue;
                    DataRow drSelectedServiceTemp = null;
                    if (SelectedServiceDetails != null) //Speed Improve
                    {
                        drSelectedServiceTemp = SelectedServiceDetails;
                    }
                    else if (SelectedService != null)
                    {
                        drSelectedServiceTemp = SelectedService.Row;
                    }
                    else
                    {
                        drSelectedServiceTemp = Service;
                    }
                    if (drSelectedServiceTemp.Table.Columns.Contains("PRIMARY_ID"))
                    {
                        ServiceId = Convert.ToInt64(drSelectedServiceTemp["PRIMARY_ID"]);
                    }
                    else
                    {
                        ServiceId = Convert.ToInt64(drSelectedServiceTemp["INV_MAST_SERVICE_ID"]);
                    }

                    if (isProceed && SelectedServiceDetails.Table.Columns.Contains("SERVICE_TYPE") && Convert.ToInt64(SelectedServiceDetails["SERVICE_TYPE"]) == (int)ServiceType.ADT)
                    {
                        DataTable dt = GetPatientVisit();
                        if (dt != null && dt.Rows.Count > 0)
                        {
                            DataTable dtCriteriaTableTemp = new DataTable();
                            dtCriteriaTableTemp.Columns.Add("MRNO");
                            dtCriteriaTableTemp.Columns.Add("MODE", typeof(int));
                            dtCriteriaTableTemp.Columns.Add("VISIT_NO", typeof(Int64));
                            dtCriteriaTableTemp.Columns.Add("BILL_DATE", typeof(DateTime));
                            dtCriteriaTableTemp.Columns.Add("INV_MAST_SERVICE_ID");
                            dtCriteriaTableTemp.Rows.Add();
                            dtCriteriaTableTemp.Rows[0]["MODE"] = 6;
                            dtCriteriaTableTemp.Rows[0]["MRNO"] = PatientInformation != null && PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Rows[0]["MRNO"] != DBNull.Value ? PatientInformation.Rows[0]["MRNO"] : 0;
                            dtCriteriaTableTemp.Rows[0]["VISIT_NO"] = dt.Rows[0]["VISIT_NO"];
                            dtCriteriaTableTemp.Rows[0]["BILL_DATE"] = EncounterEndDate;
                            dtCriteriaTableTemp.Rows[0]["INV_MAST_SERVICE_ID"] = ServiceId;// BillData.Tables["INV_PAT_BILLING"].Rows[0]["INV_MAST_SERVICE_ID"];
                            MainADTShared objMainADTShared = new MainADTShared();
                            DataTable dtGenTableTemp = objMainADTShared.FetchAdtPatBill(dtCriteriaTableTemp);
                            if (dtGenTableTemp != null && dtGenTableTemp.Rows.Count > 0)
                            {
                                Mouse.OverrideCursor = null;
                                giMessageBox.Show(CommonData.MESSAGEHEADER, "Patient room rent has been billed on " + EncounterEndDate.ToShortDateString() + " for rent bill group " + dtGenTableTemp.Rows[0]["ROOM_BILL_GROUP_NAME"],
                                MessageBoxButtonType.OK, MessageBoxImages.Information);
                                isProceed = false;
                            }
                        }
                        if (isProceed)
                        {
                            MainADTShared objMainADTShared = new MainADTShared();
                            DataTable dtCriteriaTableTemp = new DataTable();
                            dtCriteriaTableTemp.Columns.Add("MODE", typeof(int));
                            dtCriteriaTableTemp.Columns.Add("INV_MAST_SERVICE_ID");
                            dtCriteriaTableTemp.Rows.Add();
                            dtCriteriaTableTemp.Rows[0]["MODE"] = 7;
                            dtCriteriaTableTemp.Rows[0]["INV_MAST_SERVICE_ID"] = ServiceId;//
                            DataTable dtRoomTypeTemp = objMainADTShared.FetchADTRoomType(dtCriteriaTableTemp);
                            if (dtRoomTypeTemp != null && dtRoomTypeTemp.Rows.Count > 0 && dtRoomTypeTemp.Rows[0]["ROOM_BILL_GROUP"] != DBNull.Value)
                            {                                
                                if (EditService == null && BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0)
                                {
                                    var valQuery = from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                                   where dr["RENT_BILL_GROUP_ID"] != DBNull.Value &&
                                                   Convert.ToInt64(dr["RENT_BILL_GROUP_ID"]) == Convert.ToInt64(dtRoomTypeTemp.Rows[0]["ROOM_BILL_GROUP"])
                                                   select dr;
                                    if (valQuery.Count() > 0)
                                    {
                                        isProceed = false;
                                        Mouse.OverrideCursor = null;
                                        giMessageBox.Show(CommonData.MESSAGEHEADER, "Same room bill group service cannot be add twice.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                    }
                                    else
                                    {
                                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["RENT_BILL_GROUP_ID"] = dtRoomTypeTemp.Rows[0]["ROOM_BILL_GROUP"];
                                    }
                                }
                                else
                                {
                                    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["RENT_BILL_GROUP_ID"] = dtRoomTypeTemp.Rows[0]["ROOM_BILL_GROUP"];
                                }
                            }
                        }
                    }
                    InsuranceApprovalIncoPatSchemeId = 0;
                    if (TaskForBilling != null && isTaskBilllingEbabled) //Speed Improve
                    {
                        /*Check Selected Service Change Completed*/
                        SetServiceDetailsforCPOEorder(true);
                        do
                        {
                        } while (!TaskForBilling.IsCompleted);
                        isTaskBilllingEbabled = false;
                        TaskForBilling.Dispose();
                        /*Check Selected Service Change Completed*/
                        if (PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Rows[0]["MRNO"] != DBNull.Value && ((EMRItemSelected != null && EMRItemSelected["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value) || BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value))
                        {
                            string strMrno = Convert.ToString(PatientInformation.Rows[0]["MRNO"]);

                            decimal invDtlsorderID = EMRItemSelected != null ? Convert.ToDecimal(EMRItemSelected["EMR_PAT_DTLS_INV_ORDER_ID"]) : Convert.ToDecimal(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_INV_ORDER_ID"]);
                            isTaskBilllingEbabled = true;
                            TaskForBilling = new System.Threading.Tasks.Task(() => this.GetInsuranceApprovalDetailsForChecking(invDtlsorderID, strMrno, false));
                            TaskForBilling.Start();
                        }
                    } //Speed Improve
                       // drTemp["EMR_PAT_DTLS_INV_ORDER_ID"] = EMRItemSelected != null ? EMRItemSelected["EMR_PAT_DTLS_INV_ORDER_ID"] : drTemp["EMR_PAT_DTLS_INV_ORDER_ID"];

                    if (isProceed && LoadServiceChargeDetails(ServiceId, BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0])
                       && ValidateInsuranceApproval(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]) && ValidateProfile(ServiceId))
                    {

                        DataRow drTemp = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0];
                        if (EditService == null)//|| IsCPOEKOTOrderExist && (!IsAddedService)
                        {
                            DataTable dtCopy = drTemp.Table.Copy();
                            if (SelectedServiceType == (int)ServiceType.Cafeteria)
                            {
                                if (!BillData.Tables["INV_PAT_BILLING"].Columns.Contains("SALES_CATEGORY_ID"))
                                {
                                    BillData.Tables["INV_PAT_BILLING"].Columns.Add("SALES_CATEGORY_ID");
                                }

                            }
                            dtCopy.AcceptChanges();
                            dtCopy.Rows[0].SetAdded();
                            if (SelectedServiceType == (int)ServiceType.Cafeteria && BillData.Tables["INV_PAT_BILLING"].Columns.Contains("SALES_CATEGORY_ID") &&
                                dtCopy.Rows.Count > 0)
                            {
                                //dtCopy.Columns.Add("SALES_CATEGORY_ID");
                                dtCopy.Rows[0]["SALES_CATEGORY_ID"] = SalesCategorySelectedValue;
                            }
                            BillData.Tables["INV_PAT_BILLING"].Merge(dtCopy);
                            if (BillData.Tables["INV_PAT_BILLING"].Rows.Count == 1
                            && BillData.Tables["INV_PAT_BILLING"].Rows[0]["APPROVAL_STATUS"] != DBNull.Value && Convert.ToInt16(BillData.Tables["INV_PAT_BILLING"].Rows[0]["APPROVAL_STATUS"]) == -1
                            && BillData.Tables["INV_PAT_BILLING"].Rows[0]["INV_MAST_SERVICE_ID"] != DBNull.Value)
                            {
                                //ExclusionToInclusionStatusChange(BillData.Tables["INV_PAT_BILLING"].Rows[0], Convert.ToInt64(BillData.Tables["INV_PAT_BILLING"].Rows[0]["INV_MAST_SERVICE_ID"]));
                            }
                        }
                        //Edit
                        else if (EditService != null)// && IsAddedService
                        {
                            DataRow[] drRow = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                   .Where(x => x["SL_NO"] != DBNull.Value && Convert.ToInt32(x["SL_NO"]) == Convert.ToInt32(drTemp["SL_NO"]))
                                   .Select(x => x).ToArray();
                            if (drRow.Length > 0)
                            {
                                _FindService = drRow[0];
                                editRow = drRow[0];
                                if (_FindService != null)
                                {
                                    _FindService.ItemArray = drTemp.ItemArray;
                                }
                            }
                        }

                        //if (EMRItemSelected != null)
                        //{
                        //    IsDoctorEnable = false;
                        //}
                        ////For minor procedure billing final charge
                        //MinorProcedueServicesChargeFinal = MinorProcedueServicesChargeFinal + MinorProcedueServicesCharge;
                        //end
                        if (EditService == null && SelectedServiceType == (int)ServiceType.Investigation)
                        {
                            IsAssociatedService(SelectedParentAssociationService);
                        }
                        //  ClearService();
                        if (IsPackage)
                        {
                            //Disable or enable Category
                            //BillGroupWiseFilteration();
                            //IsEnabledScheme = false;
                            //IsEnabledBillTypeORPkg = false;
                        }
                        else //!IsPackage even, inorder to hide amount columns in billing screen , when availing package...
                        {
                            CalculateServiceTotal();
                        }
                        TotalCopay = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(dc => dc["CO_PAY_AMOUNT"] != DBNull.Value)
                                              .Sum(s => Convert.ToDecimal(s["CO_PAY_AMOUNT"]));
                        //}//Brackect commented, for Bug Correction Bug ID-24804     
                        //Beena Code
                        if (IsValidateService == true && isProceed && BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0)
                        {
                            DataTable dt = BillData.Tables["INV_PAT_BILLING"];
                            DataRow dr1 = null;
                            if (EditService == null)//|| IsCPOEKOTOrderExist && (!IsAddedService)
                            {
                                dr1 = dt.Rows[dt.Rows.Count - 1];
                            }

                            if (EditService != null)//|| IsCPOEKOTOrderExist && (!IsAddedService)
                            {
                                dr1 = editRow;
                            }
                            if (SelectedServiceType == (int)ServiceType.Cafeteria)
                            {
                                dr1["ISSALE"] = true;
                            }
                            else
                            {
                                if ((dr1["APPROVAL_STATUS"] != DBNull.Value
                          && (Convert.ToInt16(dr1["APPROVAL_STATUS"]) == (int)InsuranceRequestStatus.Open
                          || Convert.ToInt16(dr1["APPROVAL_STATUS"]) == (int)InsuranceRequestStatus.Post
                          || Convert.ToInt16(dr1["APPROVAL_STATUS"]) == (int)InsuranceRequestStatus.Send
                          || Convert.ToInt16(dr1["APPROVAL_STATUS"]) == (int)InsuranceRequestStatus.Hold
                          || Convert.ToInt16(dr1["APPROVAL_STATUS"]) == (int)InsuranceRequestStatus.Reject
                          || Convert.ToInt16(dr1["APPROVAL_STATUS"]) == (int)InsuranceRequestStatus.Resend))
                          || (dr1["VALIDATION_STATUS"] != DBNull.Value && Convert.ToInt16(dr1["VALIDATION_STATUS"]) == -1)
                                || (IfNullReturnZero(drTemp["EXCLUDED_SERVICE"]) == 1 && IfNullReturnZero(drTemp["SERVICE_TYPE"]) != (int)ServiceType.Consultation))
                                {
                                    dr1["ISSALE"] = false;
                                }
                                else if (dr1["PROPOSED_DATE"] != DBNull.Value && Convert.ToDateTime(dr1["PROPOSED_DATE"]) > DateTime.Now)
                                {
                                    dr1["ISSALE"] = false;
                                }
                                else if (isEmrOrder && dr1["VALIDATION_STATUS"] != DBNull.Value && Convert.ToInt16(dr1["VALIDATION_STATUS"]) == (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.BaseRateNotDefined
                                            && (dr1["ISNEWCASE"] != DBNull.Value && Convert.ToInt16(dr1["ISNEWCASE"]) != 3))
                                {
                                    dr1["ISSALE"] = false; // Validtion done for EMR orders
                                }
                                else
                                {
                                    dr1["ISSALE"] = true;
                                }

                            }

                            bool valid = ValidateServiceCharge(dr1);
                            bool isbilledvalid = IsServiceBilled(dr1);
                            if ((dr1["APPROVAL_STATUS"] != DBNull.Value && Convert.ToInt16(dr1["APPROVAL_STATUS"]) == 5)
                                 || (dr1["INCEXLCSTATUS"] != DBNull.Value
                                 && (Convert.ToInt16(dr1["INCEXLCSTATUS"]) == 1
                                 || ((dr1["SERVICE_TYPE"] != DBNull.Value && Convert.ToInt16(dr1["SERVICE_TYPE"]) == (int)ServiceType.Consultation)
                                 || SelectedVisitMode == (int)VisitMode.OPCASH
                                 && Convert.ToInt16(dr1["INCEXLCSTATUS"]) == 0))))
                            {
                                if (valid == true)
                                {
                                    valid = true;
                                }
                            }
                            else
                            {
                                valid = false;
                            }

                            if (valid == true && isbilledvalid == true)
                            {
                                //SaveCheck(dr1.Table.DefaultView[0]);
                                SaveCheck(dr1);
                            }
                            //else
                            //{
                            //    BillData.Tables["INV_PAT_BILLING"].Rows[dt.Rows.Count - 1]["ISSALE"] = false;
                            //}
                        }
                    }
                    isMultipleServiceChangeBlock = 3; //Speed Improve
                    ClearService();
                    isMultipleServiceChangeBlock = 0; //Speed Improve
                }
                else
                {
                    if (!IsNotClearBasedOnValidation)
                    {
                        isMultipleServiceChangeBlock = 3; //Speed Improve
                        ClearService();
                        isMultipleServiceChangeBlock = 0; //Speed Improve
                    }
                }
                
                SerialNoCount();
                if (SelectedServiceType == (int)ServiceType.Cafeteria)
                {
                    DisableOnServiceAddedIntoGrid();
                }
                IsEditExecuted = false;

            }
            catch (Exception)
            {
                isSuccess = false;
                throw;
               // ExceptionHandler.WriteErrorLog(ex);
            }
            finally
            {
               // Mouse.OverrideCursor = null;
                isTaskBilllingEbabled = false; //Speed Improve
            }
            return isSuccess;
        }

        public void SaveCheck(DataRow dr)
        {
            dr["ISLABEL"] = Convert.ToBoolean(dr["ISSALE"]) ? true : false;
            if (BillData.Tables["PH_PAT_DTLS_ORDER"].KIIsNotNullAndRowCount())
            {
                DataRow[] drRow = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + IfNullReturnZero(dr["INV_MAST_SERVICE_ID"]));
                foreach (DataRow drdose in drRow)
                {
                    drdose["ISLABEL"] = Convert.ToBoolean(dr["ISSALE"]) ? 1 : 0;
                }
            }
            if (dr["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value)
            {
                if (BillData.Tables["EMR_PAT_PH_DTLS_DOSAGE"].KIIsNotNullAndRowCount() &&
                    BillData.Tables["EMR_PAT_PH_DTLS_DOSAGE"].Select("EMR_PAT_DTLS_PH_ORDER_ID=" + IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"])).Length > 0)
                {
                    DataRow[] drRow = BillData.Tables["EMR_PAT_PH_DTLS_DOSAGE"].Select("EMR_PAT_DTLS_PH_ORDER_ID=" + IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"]));
                    foreach (DataRow drdose in drRow)
                    {
                        drdose["IS_SELECTED"] = Convert.ToBoolean(dr["ISSALE"]) ? true : false;
                    }
                }
            }
            if (dr["INV_MAST_SERVICE_ID"] != DBNull.Value)
            {
                if (!Convert.ToBoolean(dr["ISSALE"]))
                {
                    dr["PATIENT_SHARE"] = 0;
                    dr["SPONSOR"] = 0;
                    dr["NET"] = IfNullReturnZero(dr["BASE_CHARGE"]) * IfNullReturnZero(dr["QTY"]);
                    if (SelectedServiceType == (int)ServiceType.Pharmacy)
                    {
                        dr["NET"] = IfNullReturnZero(dr["NET"]) * IfNullReturnZero(dr["BASE_QTY"]);
                    }
                    dr["NET_AMOUNT"] = dr["NET"];
                    dr["DEDUCTIBLE"] = 0;
                }
                CalculateMaxMinCopay();
                CalculateServiceTotal();
            }

            if (!isERCredit)
            {
                ToBeCollected = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                          .Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]))
                          .Select(x => IfNullReturnZero(x["PATIENT_SHARE"])).Sum();

            }
        }


        /// <summary>
        /// Calculates the copay.(patient paid
        /// </summary>
        /// <param name="drTemp">The dr temp.</param>
        /// <returns></returns>
        private decimal CalculateCopay(DataRow drTemp)
        {

            try
            {
                decimal Copayment = 0;
                BillData.Tables["INCO_DTLS_CONTRACT_ACC"].DefaultView.RowFilter = "INCO_DTLS_SCHEME_ID=" + SelectedSchemeValue + " AND ACC_HEAD_CATEGORY=1";
                DataTable dtCopy = BillData.Tables["INCO_DTLS_CONTRACT_ACC"].DefaultView.ToTable();
                if (dtCopy != null && dtCopy.Rows.Count > 0 && SelectedVisitMode != VisitMode.OPCASH
                    && BillData.Tables["BILL_COMMON_DETAILS"].Rows[0]["PR_ACCHEAD_ID"] != DBNull.Value)
                {
                    DataRow[] drRows = dtCopy.Select("PAYING_PARTY_TYPE=0 AND ACC_HEAD_ID=" + BillData.Tables["BILL_COMMON_DETAILS"].Rows[0]["PR_ACCHEAD_ID"]);
                    if (drRows.Length > 0 && drTemp["CO_PAY_AMOUNT"] != DBNull.Value
                        && Convert.ToDecimal(drTemp["CO_PAY_AMOUNT"]) > 0 && SelectedVisitMode != VisitMode.IP)
                    {
                        Copayment = (Convert.ToDecimal(drTemp["CO_PAY_AMOUNT"]) * Convert.ToDecimal(drRows[0]["PERCENTAGE"])) / 100;
                    }
                    else
                    {
                        BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["PAYING_PARTY_TYPE"] = 1;
                    }
                }
                return Copayment;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool IsProfileServiceAdded(DataRow drTemp, bool ISFromEMR)
        {
            try
            {
                bool isExist = false;
                if (drTemp != null)
                {
                    if (drTemp["ISSALE"] != DBNull.Value && Convert.ToInt16(drTemp["ISSALE"]) == 1)
                    {
                        if (Convert.ToInt16(drTemp["ISPROFILE"]) == 1)
                        {
                            dtProfile = this.FetchProfileServices(Convert.ToInt64(drTemp["INV_MAST_SERVICE_ID"]), drTemp);
                        }
                        else
                        {
                            dtProfile = new DataTable();
                            dtProfile.Columns.Add("INV_MAST_SERVICE_ID", typeof(decimal));
                            dtProfile.Rows.Add(Convert.ToInt64(drTemp["INV_MAST_SERVICE_ID"]));
                        }
                        DataTable dtSelectedService;// new DataTable();
                        dtSelectedService = new DataTable();
                        dtSelectedService = BillData.Tables["INV_BILL_PROFILE_SERVICE"];
                        var exceptBanned = from Result in dtProfile.AsEnumerable()
                                           where ((from AddedList in dtSelectedService.AsEnumerable()
                                                   where Convert.ToString(AddedList["INV_MAST_SERVICE_ID"]) != string.Empty
                                                     && (Convert.ToInt64(AddedList["INV_MAST_SERVICE_ID"]) == Convert.ToInt64(Result["INV_MAST_SERVICE_ID"])
                                                   ||
                                                   (dtProfile.Columns.Contains("INV_MAST_SUBSERVICE_ID") && Convert.ToString(Result["INV_MAST_SUBSERVICE_ID"]) != string.Empty &&
                                                   Convert.ToInt64(AddedList["INV_MAST_SERVICE_ID"]) == Convert.ToInt64(Result["INV_MAST_SUBSERVICE_ID"]))
                                                   ||
                                                   (dtProfile.Columns.Contains("INV_MAST_SUBSERVICE_ID") && Convert.ToString(AddedList["INV_MAST_SUBSERVICE_ID"]) != string.Empty &&
                                                   Convert.ToString(Result["INV_MAST_SUBSERVICE_ID"]) != string.Empty &&
                                                   Convert.ToInt64(AddedList["INV_MAST_SUBSERVICE_ID"]) == Convert.ToInt64(Result["INV_MAST_SUBSERVICE_ID"]))
                                                   ||
                                                    (Convert.ToString(AddedList["INV_MAST_SUBSERVICE_ID"]) != string.Empty &&
                                                   Convert.ToInt64(AddedList["INV_MAST_SUBSERVICE_ID"]) == Convert.ToInt64(Result["INV_MAST_SERVICE_ID"])))
                                                   select AddedList).Count() > 0
                                                   ||
                                               //Compare with INV_PAT_BILLING
                                                   ((from AddedList in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                                     where Convert.ToString(AddedList["INV_MAST_SERVICE_ID"]) != string.Empty
                                                       && (Convert.ToInt64(AddedList["INV_MAST_SERVICE_ID"]) == Convert.ToInt64(Result["INV_MAST_SERVICE_ID"])
                                                     ||
                                                     (dtProfile.Columns.Contains("INV_MAST_SUBSERVICE_ID") && Convert.ToString(Result["INV_MAST_SUBSERVICE_ID"]) != string.Empty &&
                                                     Convert.ToInt64(AddedList["INV_MAST_SERVICE_ID"]) == Convert.ToInt64(Result["INV_MAST_SUBSERVICE_ID"]))
                                                      )
                                                     select AddedList).Count() > 0)
                                                   )
                                           select Result;
                        dtBillProfile_Service = null;
                        if (exceptBanned.Count() > 0)
                        {
                            isExist = true;
                            //    dtBillProfile_Service = dtService;
                            //}
                            //else if (Convert.ToInt16(drTemp["ISPROFILE"]) == 1)
                            //{
                            DataTable dtService = this.CreateLevel(Convert.ToInt64(drTemp["INV_MAST_SERVICE_ID"]), dtProfile, ISFromEMR);
                            dtBillProfile_Service = dtService;
                            if (ISFromEMR)
                            {
                                foreach (DataRow dr in dtBillProfile_Service.Select("ID=" + Convert.ToInt64(drTemp["INV_MAST_SERVICE_ID"])))
                                {
                                    dr["EMR_PAT_DTLS_INV_ORDER_ID"] = drTemp["EMR_PAT_DTLS_INV_ORDER_ID"];
                                }
                            }
                        }
                    }
                }
                return isExist;

            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// Total service amount calculation
        /// </summary>
        private void CalculateServiceTotal()
        {
            try
            {
                object sumDiscount = 0;
                object sumMarkup = 0;
                object sumObject = 0;
                DataRow drRow = null;
                DataRow drTotal = null;
                //RefreshToBeCollected = false;
                if (IsFromIPAllocation)
                {
                    //GEN_PAT_BILLING 
                    if (BillData.Tables["GEN_PAT_BILLING"].Rows[0]["SERVICE_TYPE"] == DBNull.Value)
                    {
                        BillData.Tables["GEN_PAT_BILLING"].Rows[0]["GEN_PAT_BILLING_ID"] = -1;
                        BillData.Tables["GEN_PAT_BILLING"].Rows[0]["SERVICE_TYPE"] = SelectedItemServiceType;
                    }
                    else
                    {
                        if (BillData.Tables["GEN_PAT_BILLING"].Select("GEN_PAT_BILLING_ID IS NOT NULL AND SERVICE_TYPE=" + SelectedItemServiceType).Length > 0)
                        {

                        }
                        else
                        {
                            int count = BillData.Tables["GEN_PAT_BILLING"].Rows.Count;
                            DataRow drGenPatBilling = BillData.Tables["GEN_PAT_BILLING"].NewRow();
                            if (!IsFromIPAllocation)
                            {
                                drGenPatBilling["GEN_PAT_BILLING_ID"] = (BillData.Tables["GEN_PAT_BILLING"].Rows[count - 1]["GEN_PAT_BILLING_ID"] != DBNull.Value ?
                               Convert.ToDecimal(BillData.Tables["GEN_PAT_BILLING"].Rows[count - 1]["GEN_PAT_BILLING_ID"]) : -1) - 1;
                            }
                            else
                            {
                                drGenPatBilling["GEN_PAT_BILLING_ID"] = -1;
                                BillData.Tables["GEN_PAT_BILLING"].Rows.Clear();
                            }

                            drGenPatBilling["SERVICE_TYPE"] = SelectedItemServiceType;
                            BillData.Tables["GEN_PAT_BILLING"].Rows.Add(drGenPatBilling);
                        }
                    }
                    //END

                }
                //INV_PAT_BILLING_TOTAL
                if (BillData.Tables["INV_PAT_BILLING_TOTAL"].KIIsNotNullAndRowCount() && BillData.Tables["INV_PAT_BILLING_TOTAL"].Rows[0]["SERVICE_TYPE"] == DBNull.Value)
                {
                    BillData.Tables["INV_PAT_BILLING_TOTAL"].Rows[0]["SERVICE_TYPE"] = SelectedItemServiceType;
                }
                if (BillData.Tables["INV_PAT_BILLING_TOTAL"].KIIsNotNullAndRowCount() && BillData.Tables["INV_PAT_BILLING_TOTAL"].Select("SERVICE_TYPE=" + SelectedItemServiceType).Length > 0)
                {
                    int i = BillData.Tables["INV_PAT_BILLING_TOTAL"].Rows.IndexOf(BillData.Tables["INV_PAT_BILLING_TOTAL"].Select("SERVICE_TYPE=" + SelectedItemServiceType)[0]);
                    drRow = BillData.Tables["INV_PAT_BILLING_TOTAL"].Rows[i];
                    if (BillData.Tables["GEN_PAT_BILLING"].Select("SERVICE_TYPE=" + SelectedItemServiceType).Length > 0)
                    {
                        BillData.Tables["INV_PAT_BILLING_TOTAL"].Rows[i]["GEN_PAT_BILLING_ID"] = BillData.Tables["GEN_PAT_BILLING"].Select("SERVICE_TYPE=" + SelectedItemServiceType).ElementAt(0)["GEN_PAT_BILLING_ID"];
                    }
                    ///for final adjustment
                }
                else if (SelectedItemServiceType != -1)
                {
                    drRow = BillData.Tables["INV_PAT_BILLING_TOTAL"].NewRow();
                    drRow["SERVICE_TYPE"] = SelectedItemServiceType;
                    BillData.Tables["INV_PAT_BILLING_TOTAL"].Rows.Add(drRow);
                    int i = BillData.Tables["INV_PAT_BILLING_TOTAL"].Rows.IndexOf(BillData.Tables["INV_PAT_BILLING_TOTAL"].Select("SERVICE_TYPE=" + SelectedItemServiceType)[0]);
                    if (BillData.Tables["GEN_PAT_BILLING"].Select("SERVICE_TYPE=" + SelectedItemServiceType).Length > 0)
                    {
                        BillData.Tables["INV_PAT_BILLING_TOTAL"].Rows[i]["GEN_PAT_BILLING_ID"] = BillData.Tables["GEN_PAT_BILLING"].Select("SERVICE_TYPE=" + SelectedItemServiceType).ElementAt(0)["GEN_PAT_BILLING_ID"];
                    }
                }
                //INV_PAT_TOTAL
                if (TotalTable.KIIsNotNullAndRowCount() && TotalTable.Rows[0]["SERVICE_TYPE"] == DBNull.Value)
                {
                    TotalTable.Rows[0]["SERVICE_TYPE"] = SelectedItemServiceType;
                }
                if (TotalTable.KIIsNotNullAndRowCount() && TotalTable.Select("SERVICE_TYPE=" + SelectedItemServiceType).Length > 0)
                {
                    int i = TotalTable.Rows.IndexOf(TotalTable.Select("SERVICE_TYPE=" + SelectedItemServiceType)[0]);
                    drTotal = TotalTable.Rows[i];
                    if (TotalTable.Select("SERVICE_TYPE=" + SelectedItemServiceType).Length > 0
                        && BillData.Tables["GEN_PAT_BILLING"].Select("SERVICE_TYPE=" + SelectedItemServiceType).Length > 0)
                    {
                        TotalTable.Rows[i]["GEN_PAT_BILLING_ID"] = BillData.Tables["GEN_PAT_BILLING"].Select("SERVICE_TYPE=" + SelectedItemServiceType).ElementAt(0)["GEN_PAT_BILLING_ID"];
                        //TotalTable.Rows[i]["GEN_PAT_BILLING_ID"] = TotalTable.Select("SERVICE_TYPE=" + SelectedItemServiceType).ElementAt(0)["GEN_PAT_BILLING_ID"] != DBNull.Value
                        //    ? TotalTable.Select("SERVICE_TYPE=" + SelectedItemServiceType).ElementAt(0)["GEN_PAT_BILLING_ID"]
                        //    : BillData.Tables["GEN_PAT_BILLING"].KIIsNotNullAndRowCount() && BillData.Tables["GEN_PAT_BILLING"].Select("SERVICE_TYPE=" + SelectedItemServiceType).Length > 0
                        //    && BillData.Tables["GEN_PAT_BILLING"].Select("SERVICE_TYPE=" + SelectedItemServiceType).ElementAt(0)["GEN_PAT_BILLING_ID"] != DBNull.Value
                        //    ? BillData.Tables["GEN_PAT_BILLING"].Select("SERVICE_TYPE=" + SelectedItemServiceType).ElementAt(0)["GEN_PAT_BILLING_ID"] : DBNull.Value;
                    }
                    ///for final adjustment
                }
                else if (SelectedItemServiceType != -1)
                {
                    drTotal = TotalTable.NewRow();
                    drTotal["SERVICE_TYPE"] = SelectedItemServiceType;
                    TotalTable.Rows.Add(drTotal);
                    int i = TotalTable.Rows.IndexOf(TotalTable.Select("SERVICE_TYPE=" + SelectedItemServiceType)[0]);
                    if (TotalTable.Select("SERVICE_TYPE=" + SelectedItemServiceType).Length > 0
                        && BillData.Tables["GEN_PAT_BILLING"].Select("SERVICE_TYPE=" + SelectedItemServiceType).Length > 0)
                    {
                        TotalTable.Rows[i]["GEN_PAT_BILLING_ID"] = BillData.Tables["GEN_PAT_BILLING"].Select("SERVICE_TYPE=" + SelectedItemServiceType).ElementAt(0)["GEN_PAT_BILLING_ID"];
                        //TotalTable.Rows[i]["GEN_PAT_BILLING_ID"] = TotalTable.Select("SERVICE_TYPE=" + SelectedItemServiceType).ElementAt(0)["GEN_PAT_BILLING_ID"] != DBNull.Value
                        //    ? TotalTable.Select("SERVICE_TYPE=" + SelectedItemServiceType).ElementAt(0)["GEN_PAT_BILLING_ID"]
                        //    : BillData.Tables["GEN_PAT_BILLING"].KIIsNotNullAndRowCount() && BillData.Tables["GEN_PAT_BILLING"].Select("SERVICE_TYPE=" + SelectedItemServiceType).Length > 0
                        //    && BillData.Tables["GEN_PAT_BILLING"].Select("SERVICE_TYPE=" + SelectedItemServiceType).ElementAt(0)["GEN_PAT_BILLING_ID"] != DBNull.Value
                        //    ? BillData.Tables["GEN_PAT_BILLING"].Select("SERVICE_TYPE=" + SelectedItemServiceType).ElementAt(0)["GEN_PAT_BILLING_ID"] : DBNull.Value;
                    }
                }
                ///To identify the data enterd.for final adjustment open                                                                           
                drRow["ISRECORD_EXISTS"] = 1;
                if (1 == 2)
                {
                    sumObject = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                 where dr.RowState != DataRowState.Deleted && dr["SERVICE_TYPE"] != DBNull.Value && dr["ISSALE"] != DBNull.Value
                                 && Convert.ToInt16(dr["SERVICE_TYPE"]) == SelectedItemServiceType && dr["AMOUNT"] != DBNull.Value && Convert.ToInt16(dr["ISSALE"]) == 1
                                 select Convert.ToDecimal(dr["AMOUNT"])).Sum();
                    drTotal["AMOUNT_TOTAL"] = (sumObject == DBNull.Value ? 0 : sumObject);
                    drRow["AMOUNT"] = sumObject;
                    drRow["AMOUNT_SCHEME"] = sumObject;
                    sumObject = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                 where dr.RowState != DataRowState.Deleted && dr["SERVICE_TYPE"] != DBNull.Value && dr["ISSALE"] != DBNull.Value
                                 && Convert.ToInt16(dr["SERVICE_TYPE"]) == SelectedItemServiceType && dr["INC_SERVICE_TAX"] != DBNull.Value && Convert.ToInt16(dr["ISSALE"]) == 1
                                 select Convert.ToDecimal(dr["INC_SERVICE_TAX"])).Sum();
                    drRow["INC_SERVICE_TAX"] = sumObject;
                    sumObject = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                 where dr.RowState != DataRowState.Deleted && dr["SERVICE_TYPE"] != DBNull.Value && dr["ISSALE"] != DBNull.Value
                                 && Convert.ToInt16(dr["SERVICE_TYPE"]) == SelectedItemServiceType && dr["SERVICE_TAX"] != DBNull.Value
                                 && Convert.ToInt16(dr["ISSALE"]) == 1
                                 select Convert.ToDecimal(dr["SERVICE_TAX"])).Sum();
                    drTotal["SERVICE_TAX_TOTAL"] = (sumObject == DBNull.Value ? 0 : sumObject);
                    drRow["SERVICE_TAX"] = sumObject;
                    sumObject = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                 where dr.RowState != DataRowState.Deleted && dr["SERVICE_TYPE"] != DBNull.Value && dr["ISSALE"] != DBNull.Value
                                 && Convert.ToInt16(dr["SERVICE_TYPE"]) == SelectedItemServiceType && dr["OTHER_CHARGE"] != DBNull.Value
                                 && Convert.ToInt16(dr["ISSALE"]) == 1
                                 select Convert.ToDecimal(dr["OTHER_CHARGE"])).Sum();
                    drTotal["OTHER_CHARGE_TOTAL"] = (sumObject == DBNull.Value ? 0 : sumObject);
                    drRow["OTHER_CHARGE"] = sumObject;
                    sumObject = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                 where dr.RowState != DataRowState.Deleted && dr["SERVICE_TYPE"] != DBNull.Value && dr["ISSALE"] != DBNull.Value
                                 && Convert.ToInt16(dr["SERVICE_TYPE"]) == SelectedItemServiceType && dr["DISCOUNT_MARKUP"] != DBNull.Value
                                  && Convert.ToInt16(dr["ISSALE"]) == 1
                                 select Convert.ToDecimal(dr["DISCOUNT_MARKUP"])).Sum();
                    drTotal["DISCOUNT_MARKUP_TOTAL"] = (sumObject == DBNull.Value ? 0 : sumObject);
                    if (drRow["DISCOUNT_MARKUP"] != DBNull.Value && sumObject != DBNull.Value
                       && Convert.ToDecimal(drRow["DISCOUNT_MARKUP"]) != Convert.ToDecimal(sumObject))
                    {
                        drRow["GEN_DISCOUNT_SETUP_ID"] = DBNull.Value;
                        drRow["EMPLOYEE_ID"] = DBNull.Value;
                        drRow["REMARKS_ADJUSTMENT"] = DBNull.Value;
                        drRow["ADJUSTMENT_TYPE"] = DBNull.Value;
                    }
                    else if (drRow["DISCOUNT_MARKUP"] == DBNull.Value)
                    {
                        drRow["GEN_DISCOUNT_SETUP_ID"] = DBNull.Value;
                        drRow["EMPLOYEE_ID"] = DBNull.Value;
                        drRow["REMARKS_ADJUSTMENT"] = DBNull.Value;
                        drRow["ADJUSTMENT_TYPE"] = DBNull.Value;
                    }
                    drRow["DISCOUNT_MARKUP"] = sumObject;
                    drRow["SCHEME_DISCOUNT_MARKUP"] = sumObject;
                    sumObject = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                 where dr.RowState != DataRowState.Deleted && dr["SERVICE_TYPE"] != DBNull.Value && dr["ISSALE"] != DBNull.Value
                                 && Convert.ToInt16(dr["SERVICE_TYPE"]) == SelectedItemServiceType && dr["DISCOUNT"] != DBNull.Value
                                  && Convert.ToInt16(dr["ISSALE"]) == 1
                                 select Convert.ToDecimal(dr["DISCOUNT"])).Sum();
                    sumDiscount = (sumObject == DBNull.Value ? 0 : sumObject);
                    drRow["DISCOUNT"] = (sumObject == DBNull.Value ? 0 : sumObject);
                    sumObject = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                 where dr.RowState != DataRowState.Deleted && dr["SERVICE_TYPE"] != DBNull.Value && dr["SCHEME_DISCOUNT"] != DBNull.Value
                                  && dr["ISSALE"] != DBNull.Value && Convert.ToInt16(dr["SERVICE_TYPE"]) == SelectedItemServiceType
                                 && Convert.ToInt16(dr["ISSALE"]) == 1
                                 select Convert.ToDecimal(dr["SCHEME_DISCOUNT"])).Sum();
                    drRow["SCHEME_DISCOUNT"] = (sumObject == DBNull.Value ? 0 : sumObject);
                    sumObject = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                 where dr.RowState != DataRowState.Deleted && dr["SERVICE_TYPE"] != DBNull.Value && dr["PROVIDER_DISCOUNT_AMOUNT"] != DBNull.Value
                                  && dr["ISSALE"] != DBNull.Value && Convert.ToInt16(dr["SERVICE_TYPE"]) == SelectedItemServiceType
                                 && Convert.ToInt16(dr["ISSALE"]) == 1
                                 select Convert.ToDecimal(dr["PROVIDER_DISCOUNT_AMOUNT"])).Sum();
                    drRow["PROVIDER_DISCOUNT_AMOUNT"] = (sumObject == DBNull.Value ? 0 : sumObject);
                    drTotal["DISCOUNT_TOTAL"] = Medilogics.General.Control.Common.MathRound
                       (-1 * (Math.Abs(Convert.ToDecimal(drRow["DISCOUNT"])) + Math.Abs(Convert.ToDecimal(drRow["SCHEME_DISCOUNT"]))
                       + (-1 * Math.Abs(Convert.ToDecimal(drRow["PROVIDER_DISCOUNT_AMOUNT"])))), CommonData.DecimalPlace);
                    sumObject = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                 where dr.RowState != DataRowState.Deleted && dr["SERVICE_TYPE"] != DBNull.Value && dr["ISSALE"] != DBNull.Value
                                 && Convert.ToInt16(dr["SERVICE_TYPE"]) == SelectedItemServiceType && dr["MARKUP"] != DBNull.Value
                                && Convert.ToInt16(dr["ISSALE"]) == 1
                                 select Convert.ToDecimal(dr["MARKUP"])).Sum();
                    sumMarkup = (sumObject == DBNull.Value ? 0 : sumObject);
                    drRow["MARKUP"] = (sumObject == DBNull.Value ? 0 : sumObject);
                    sumObject = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                 where dr.RowState != DataRowState.Deleted && dr["SERVICE_TYPE"] != DBNull.Value && dr["ISSALE"] != DBNull.Value
                                 && Convert.ToInt16(dr["SERVICE_TYPE"]) == SelectedItemServiceType && dr["SCHEME_MARKUP"] != DBNull.Value && Convert.ToInt16(dr["ISSALE"]) == 1
                                 select Convert.ToDecimal(dr["SCHEME_MARKUP"])).Sum();
                    drRow["SCHEME_MARKUP"] = (sumObject == DBNull.Value ? 0 : sumObject);
                    drTotal["MARKUP_TOTAL"] = Convert.ToDecimal(drRow["MARKUP"]) + Convert.ToDecimal(drRow["SCHEME_MARKUP"]);
                    sumObject = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                 where dr.RowState != DataRowState.Deleted && dr["SERVICE_TYPE"] != DBNull.Value && dr["ISSALE"] != DBNull.Value
                                 && Convert.ToInt16(dr["SERVICE_TYPE"]) == SelectedItemServiceType && dr["NET_AMOUNT"] != DBNull.Value
                               && Convert.ToInt16(dr["ISSALE"]) == 1
                                 select Convert.ToDecimal(dr["NET_AMOUNT"])).Sum();
                    TotalDeferredBillAmount = ((sumObject == DBNull.Value || SelectedVisitMode != VisitMode.OPCASH) ? 0 : Convert.ToDecimal(sumObject));
                    drTotal["NET_AMOUNT_TOTAL"] = Convert.ToDecimal((sumObject == DBNull.Value ? 0 : sumObject));// +Convert.ToDecimal(drTotal["DISCOUNT_MARKUP_TOTAL"]);
                    drRow["NET_AMOUNT"] = drTotal["NET_AMOUNT_TOTAL"];//sumObject;
                    sumObject = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                 where dr.RowState != DataRowState.Deleted && dr["SERVICE_TYPE"] != DBNull.Value && dr["ISSALE"] != DBNull.Value
                                 && Convert.ToInt16(dr["SERVICE_TYPE"]) == SelectedItemServiceType && dr["PATIENT_SHARE"] != DBNull.Value
                                 && Convert.ToInt16(dr["ISSALE"]) == 1
                                 select Convert.ToDecimal(dr["PATIENT_SHARE"])).Sum();
                    if (SelectedVisitMode == VisitMode.OPCREDIT)
                    {
                        TotalDeferredBillAmount = (sumObject == DBNull.Value ? 0 : Convert.ToDecimal(sumObject));
                    }
                    drTotal["CO_PAY_AMOUNT_TOTAL"] = (sumObject == DBNull.Value ? 0 : sumObject);
                    drRow["CO_PAY_AMOUNT"] = sumObject;
                    sumObject = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                 where dr.RowState != DataRowState.Deleted && dr["NET_AMOUNT"] != DBNull.Value
                                 && dr["SERVICE_TYPE"] != DBNull.Value && dr["ISSALE"] != DBNull.Value
                                 && Convert.ToInt16(dr["SERVICE_TYPE"]) == SelectedItemServiceType
                                 && dr["EXCLUDED_SERVICE"] != DBNull.Value && Convert.ToInt16(dr["EXCLUDED_SERVICE"]) == 1
                                 && (dr["INCEXLCSTATUS"] == DBNull.Value || (dr["INCEXLCSTATUS"] != DBNull.Value && Convert.ToInt16(dr["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion))
                                 && Convert.ToInt16(dr["ISSALE"]) == 1
                                 select Convert.ToDecimal(dr["NET_AMOUNT"])).Sum();
                    drTotal["GEN_PATIENT_SHARE"] = (sumObject == DBNull.Value ? 0 : sumObject);

                    sumObject = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                 where dr.RowState != DataRowState.Deleted && dr["SERVICE_TYPE"] != DBNull.Value && dr["ISSALE"] != DBNull.Value
                                 && Convert.ToInt16(dr["SERVICE_TYPE"]) == SelectedItemServiceType && dr["RELATED_CHARGE_TOTAL"] != DBNull.Value
                                  && Convert.ToInt16(dr["ISSALE"]) == 1
                                 select Convert.ToDecimal(dr["RELATED_CHARGE_TOTAL"])).Sum();
                    drRow["RELATED_CHARGE_TOTAL"] = sumObject;

                    TotalAmount = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                   where dr.RowState != DataRowState.Deleted && dr["NET"] != DBNull.Value &&
                                   dr["ISSALE"] != DBNull.Value && Convert.ToBoolean(dr["ISSALE"]) == true
                                   select Convert.ToDecimal(dr["NET"])).Sum();
                    TotalNet = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                where dr.RowState != DataRowState.Deleted && dr["NET_AMOUNT"] != DBNull.Value &&
                               dr["ISSALE"] != DBNull.Value && Convert.ToBoolean(dr["ISSALE"]) == true
                                select Convert.ToDecimal(dr["NET_AMOUNT"])).Sum();
                    BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["TOBECOLLECTED"] = 0;
                }
                else
                {
                    //DataRow [] resBillTotal = from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                    //                   where dr.RowState != DataRowState.Deleted && dr["SERVICE_TYPE"] != DBNull.Value && dr["ISSALE"] != DBNull.Value
                    //                   && Convert.ToInt16(dr["SERVICE_TYPE"]) == SelectedItemServiceType && Convert.ToInt16(dr["ISSALE"]) == 1
                    //                   select dr;
                    IEnumerable<DataRow> resBillTotal = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(dr =>
                                              dr.RowState != DataRowState.Deleted && dr["SERVICE_TYPE"] != DBNull.Value && dr["ISSALE"] != DBNull.Value
                                              && Convert.ToInt16(dr["SERVICE_TYPE"]) == SelectedItemServiceType && Convert.ToInt16(dr["ISSALE"]) == 1);
                    if (resBillTotal == null)
                    {
                       // resBillTotal = BillData.Tables["INV_PAT_BILLING"].Clone();
                    }
                   // DataRow[] resBillTotal = resBillTotalw.ToList();                   

                    sumObject = resBillTotal.AsEnumerable().Where(w => w["AMOUNT"] != DBNull.Value).Sum(s => Convert.ToDecimal(s["AMOUNT"]));
                    drTotal["AMOUNT_TOTAL"] = (sumObject == DBNull.Value ? 0 : sumObject);
                    drRow["AMOUNT"] = sumObject;
                    drRow["AMOUNT_SCHEME"] = sumObject;
                    sumObject = resBillTotal.AsEnumerable().Where(w => w["INC_SERVICE_TAX"] != DBNull.Value).Sum(s => Convert.ToDecimal(s["INC_SERVICE_TAX"]));
                    drRow["INC_SERVICE_TAX"] = sumObject;
                    sumObject = resBillTotal.AsEnumerable().Where(w => w["SERVICE_TAX"] != DBNull.Value).Sum(s => Convert.ToDecimal(s["SERVICE_TAX"]));
                    drTotal["SERVICE_TAX_TOTAL"] = (sumObject == DBNull.Value ? 0 : sumObject);
                    drRow["SERVICE_TAX"] = sumObject;
                    sumObject = resBillTotal.AsEnumerable().Where(w => w["OTHER_CHARGE"] != DBNull.Value).Sum(s => Convert.ToDecimal(s["OTHER_CHARGE"]));
                    drTotal["OTHER_CHARGE_TOTAL"] = (sumObject == DBNull.Value ? 0 : sumObject);
                    drRow["OTHER_CHARGE"] = sumObject;
                    sumObject = resBillTotal.AsEnumerable().Where(w => w["DISCOUNT_MARKUP"] != DBNull.Value).Sum(s => Convert.ToDecimal(s["DISCOUNT_MARKUP"]));
                    drTotal["DISCOUNT_MARKUP_TOTAL"] = (sumObject == DBNull.Value ? 0 : sumObject);
                    if (drRow["DISCOUNT_MARKUP"] != DBNull.Value && sumObject != DBNull.Value
                       && Convert.ToDecimal(drRow["DISCOUNT_MARKUP"]) != Convert.ToDecimal(sumObject))
                    {
                        drRow["GEN_DISCOUNT_SETUP_ID"] = DBNull.Value;
                        drRow["EMPLOYEE_ID"] = DBNull.Value;
                        drRow["REMARKS_ADJUSTMENT"] = DBNull.Value;
                        drRow["ADJUSTMENT_TYPE"] = DBNull.Value;
                    }
                    else if (drRow["DISCOUNT_MARKUP"] == DBNull.Value)
                    {
                        drRow["GEN_DISCOUNT_SETUP_ID"] = DBNull.Value;
                        drRow["EMPLOYEE_ID"] = DBNull.Value;
                        drRow["REMARKS_ADJUSTMENT"] = DBNull.Value;
                        drRow["ADJUSTMENT_TYPE"] = DBNull.Value;
                    }
                    drRow["DISCOUNT_MARKUP"] = sumObject;
                    drRow["SCHEME_DISCOUNT_MARKUP"] = sumObject;
                    sumObject = resBillTotal.AsEnumerable().Where(w => w["DISCOUNT"] != DBNull.Value).Sum(s => Convert.ToDecimal(s["DISCOUNT"]));
                    sumDiscount = (sumObject == DBNull.Value ? 0 : sumObject);
                    drRow["DISCOUNT"] = (sumObject == DBNull.Value ? 0 : sumObject);
                    sumObject = resBillTotal.AsEnumerable().Where(w => w["SCHEME_DISCOUNT"] != DBNull.Value).Sum(s => Convert.ToDecimal(s["SCHEME_DISCOUNT"]));
                    drRow["SCHEME_DISCOUNT"] = (sumObject == DBNull.Value ? 0 : sumObject);
                    sumObject = resBillTotal.AsEnumerable().Where(w => w["PROVIDER_DISCOUNT_AMOUNT"] != DBNull.Value).Sum(s => Convert.ToDecimal(s["PROVIDER_DISCOUNT_AMOUNT"]));
                    drRow["PROVIDER_DISCOUNT_AMOUNT"] = (sumObject == DBNull.Value ? 0 : sumObject);
                    drTotal["DISCOUNT_TOTAL"] = Medilogics.General.Control.Common.MathRound
                       (-1 * (Math.Abs(Convert.ToDecimal(drRow["DISCOUNT"])) + Math.Abs(Convert.ToDecimal(drRow["SCHEME_DISCOUNT"]))
                       + (-1 * Math.Abs(Convert.ToDecimal(drRow["PROVIDER_DISCOUNT_AMOUNT"])))), CommonData.DecimalPlace);
                    sumObject = resBillTotal.AsEnumerable().Where(w => w["MARKUP"] != DBNull.Value).Sum(s => Convert.ToDecimal(s["MARKUP"]));
                  
                    sumMarkup = (sumObject == DBNull.Value ? 0 : sumObject);
                    drRow["MARKUP"] = (sumObject == DBNull.Value ? 0 : sumObject);
                    sumObject = resBillTotal.AsEnumerable().Where(w => w["SCHEME_MARKUP"] != DBNull.Value).Sum(s => Convert.ToDecimal(s["SCHEME_MARKUP"]));
                   
                    drRow["SCHEME_MARKUP"] = (sumObject == DBNull.Value ? 0 : sumObject);
                    drTotal["MARKUP_TOTAL"] = Convert.ToDecimal(drRow["MARKUP"]) + Convert.ToDecimal(drRow["SCHEME_MARKUP"]);
                    sumObject = resBillTotal.AsEnumerable().Where(w => w["NET_AMOUNT"] != DBNull.Value).Sum(s => Convert.ToDecimal(s["NET_AMOUNT"]));
              
                    TotalDeferredBillAmount = ((sumObject == DBNull.Value || SelectedVisitMode != VisitMode.OPCASH) ? 0 : Convert.ToDecimal(sumObject));
                    drTotal["NET_AMOUNT_TOTAL"] = Convert.ToDecimal((sumObject == DBNull.Value ? 0 : sumObject));// +Convert.ToDecimal(drTotal["DISCOUNT_MARKUP_TOTAL"]);
                    drRow["NET_AMOUNT"] = drTotal["NET_AMOUNT_TOTAL"];//sumObject;
                    sumObject = resBillTotal.AsEnumerable().Where(w => w["PATIENT_SHARE"] != DBNull.Value).Sum(s => Convert.ToDecimal(s["PATIENT_SHARE"]));
                   
                    if (SelectedVisitMode == VisitMode.OPCREDIT)
                    {
                        TotalDeferredBillAmount = (sumObject == DBNull.Value ? 0 : Convert.ToDecimal(sumObject));
                    }
                    drTotal["CO_PAY_AMOUNT_TOTAL"] = (sumObject == DBNull.Value ? 0 : sumObject);
                    drRow["CO_PAY_AMOUNT"] = sumObject;
                    sumObject = resBillTotal.AsEnumerable().Where(w => w["NET_AMOUNT"] != DBNull.Value 
                        && w["EXCLUDED_SERVICE"] != DBNull.Value && Convert.ToInt16(w["EXCLUDED_SERVICE"]) == 1
                                 && (w["INCEXLCSTATUS"] == DBNull.Value || (w["INCEXLCSTATUS"] != DBNull.Value && 
                                 Convert.ToInt16(w["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion))
                        ).Sum(s => Convert.ToDecimal(s["NET_AMOUNT"]));

                    drTotal["GEN_PATIENT_SHARE"] = (sumObject == DBNull.Value ? 0 : sumObject);
                    sumObject = resBillTotal.AsEnumerable().Where(w => w["RELATED_CHARGE_TOTAL"] != DBNull.Value).Sum(s => Convert.ToDecimal(s["RELATED_CHARGE_TOTAL"]));
                   
                    drRow["RELATED_CHARGE_TOTAL"] = sumObject;

                    TotalAmount = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                   where dr.RowState != DataRowState.Deleted && dr["NET"] != DBNull.Value &&
                                   dr["ISSALE"] != DBNull.Value && Convert.ToBoolean(dr["ISSALE"]) == true
                                   select Convert.ToDecimal(dr["NET"])).Sum();
                    TotalNet = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                where dr.RowState != DataRowState.Deleted && dr["NET_AMOUNT"] != DBNull.Value &&
                               dr["ISSALE"] != DBNull.Value && Convert.ToBoolean(dr["ISSALE"]) == true
                                select Convert.ToDecimal(dr["NET_AMOUNT"])).Sum();
                    BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["TOBECOLLECTED"] = 0;
                }
                ToBeCollected = 0;
                ToBeCollectedExists = false;
                //For Bug Correction--16684
                if ((BillData.Tables["INV_PAT_BILLING"] == null || BillData.Tables["INV_PAT_BILLING"].Rows.Count == 0 || BillData.Tables["INV_PAT_BILLING"].Select("SERVICE_TYPE IS NOT NULL AND SERVICE_TYPE=" + (int)ServiceType.Consultation).Length == 0)
                    && TotalTable.KIIsNotNullAndRowCount() && TotalTable.Select("SERVICE_TYPE IS NOT NULL AND SERVICE_TYPE=" + (int)ServiceType.Consultation).Length > 0)
                {
                    var filter = from dr in TotalTable.AsEnumerable()
                                 where dr.RowState != DataRowState.Deleted && dr["SERVICE_TYPE"] != DBNull.Value
                                 && Convert.ToInt16(dr["SERVICE_TYPE"]) != (int)ServiceType.Consultation
                                 select dr;
                    if (filter.Count() > 0)
                    {
                        TotalTable = filter.CopyToDataTable().Copy();
                    }
                }
                CalculateToBeCollected(TotalTable);
                drRow["TOBECOLLECTED"] = ToBeCollected;
                //BillData.Tables["INV_PAT_TOTAL"].Rows[0].ItemArray = TotalTable.Rows[0].ItemArray;
                if (BillData.Tables["INV_PAT_TOTAL"].KIIsNotNullAndRowCount() && BillData.Tables["INV_PAT_TOTAL"].Rows[0]["SERVICE_TYPE"] == DBNull.Value)
                {
                    BillData.Tables["INV_PAT_TOTAL"].Rows[0]["SERVICE_TYPE"] = SelectedItemServiceType;
                }
                if (BillData.Tables["INV_PAT_TOTAL"].Select("SERVICE_TYPE=" + SelectedItemServiceType).Length > 0)
                {
                    int i = BillData.Tables["INV_PAT_TOTAL"].Rows.IndexOf
                        (BillData.Tables["INV_PAT_TOTAL"].Select("SERVICE_TYPE=" + SelectedItemServiceType)[0]);
                    BillData.Tables["INV_PAT_TOTAL"].Rows[i].ItemArray = drTotal.ItemArray;
                    ///for final adjustment
                }
                else
                {
                    DataRow drTotalData = BillData.Tables["INV_PAT_TOTAL"].NewRow();
                    drTotalData.ItemArray = drTotal.ItemArray;
                    BillData.Tables["INV_PAT_TOTAL"].Rows.Add(drTotalData);
                }
                //INV_PAT_TOTAL-NET_AMOUNT_TOTAL Recalculation
                foreach (DataRow drPatTotal in BillData.Tables["INV_PAT_TOTAL"].Rows)
                {
                    drPatTotal["NET_AMOUNT_TOTAL"] = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                                      where dr.RowState != DataRowState.Deleted && dr["SERVICE_TYPE"] != DBNull.Value && dr["ISSALE"] != DBNull.Value
                                                      && drPatTotal["SERVICE_TYPE"] != DBNull.Value
                                                      && Convert.ToInt16(dr["SERVICE_TYPE"]) == Convert.ToInt16(drPatTotal["SERVICE_TYPE"]) && dr["NET_AMOUNT"] != DBNull.Value
                                                      && Convert.ToInt16(dr["ISSALE"]) == 1
                                                      select Convert.ToDecimal(dr["NET_AMOUNT"])).Sum();
                }
                //Consultation _Remove INV_PAT_TOTAL AND GEN_PAT_BILLING table unwanted data.
                //For Bug Correction
                if (BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount() && BillData.Tables["INV_PAT_BILLING"].Select("SERVICE_TYPE IS NOT NULL AND SERVICE_TYPE=" + (int)ServiceType.Consultation).Length == 0
                    && BillData.Tables["INV_PAT_TOTAL"].KIIsNotNullAndRowCount() && BillData.Tables["INV_PAT_TOTAL"].Select("SERVICE_TYPE IS NOT NULL AND SERVICE_TYPE=" + (int)ServiceType.Consultation).Length > 0)
                {
                    var filter = from dr in BillData.Tables["INV_PAT_TOTAL"].AsEnumerable()
                                 where dr.RowState != DataRowState.Deleted && dr["SERVICE_TYPE"] != DBNull.Value
                                 && Convert.ToInt16(dr["SERVICE_TYPE"]) != (int)ServiceType.Consultation
                                 select dr;
                    if (filter.Count() > 0)
                    {
                        if (BillData.Tables.Contains("INV_PAT_TOTAL"))
                        {
                            BillData.Tables.Remove("INV_PAT_TOTAL");
                        }
                        DataTable dt = filter.CopyToDataTable().Copy();
                        dt.TableName = "INV_PAT_TOTAL";
                        BillData.Tables.Add(dt.Copy());
                    }
                    //
                    filter = from dr in BillData.Tables["GEN_PAT_BILLING"].AsEnumerable()
                             where dr.RowState != DataRowState.Deleted && dr["SERVICE_TYPE"] != DBNull.Value
                             && Convert.ToInt16(dr["SERVICE_TYPE"]) != (int)ServiceType.Consultation
                             select dr;
                    if (filter.Count() > 0)
                    {
                        if (BillData.Tables.Contains("GEN_PAT_BILLING"))
                        {
                            BillData.Tables.Remove("GEN_PAT_BILLING");
                        }
                        DataTable dt = filter.CopyToDataTable().Copy();
                        dt.TableName = "GEN_PAT_BILLING";
                        BillData.Tables.Add(dt.Copy());
                    }
                }
                //Investigation _Remove INV_PAT_TOTAL AND GEN_PAT_BILLING table unwanted data.
                //For Bug Correction-17371
                if (BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount() && BillData.Tables["INV_PAT_BILLING"].Select("SERVICE_TYPE IS NOT NULL AND SERVICE_TYPE=" + (int)ServiceType.Investigation).Length == 0
                   && BillData.Tables["INV_PAT_TOTAL"].KIIsNotNullAndRowCount() && BillData.Tables["INV_PAT_TOTAL"].Select("SERVICE_TYPE IS NOT NULL AND SERVICE_TYPE=" + (int)ServiceType.Investigation).Length > 0)
                {
                    var filter = from dr in BillData.Tables["INV_PAT_TOTAL"].AsEnumerable()
                                 where dr.RowState != DataRowState.Deleted && dr["SERVICE_TYPE"] != DBNull.Value
                                 && Convert.ToInt16(dr["SERVICE_TYPE"]) != (int)ServiceType.Investigation
                                 select dr;
                    if (filter.Count() > 0)
                    {
                        if (BillData.Tables.Contains("INV_PAT_TOTAL"))
                        {
                            BillData.Tables.Remove("INV_PAT_TOTAL");
                        }
                        DataTable dt = filter.CopyToDataTable().Copy();
                        dt.TableName = "INV_PAT_TOTAL";
                        BillData.Tables.Add(dt.Copy());
                    }
                    //For Bug Correction-17254
                    filter = from dr in BillData.Tables["GEN_PAT_BILLING"].AsEnumerable()
                             where dr.RowState != DataRowState.Deleted && dr["SERVICE_TYPE"] != DBNull.Value
                             && Convert.ToInt16(dr["SERVICE_TYPE"]) != (int)ServiceType.Investigation
                             select dr;
                    if (filter.Count() > 0)
                    {
                        if (BillData.Tables.Contains("GEN_PAT_BILLING"))
                        {
                            BillData.Tables.Remove("GEN_PAT_BILLING");
                        }
                        DataTable dt = filter.CopyToDataTable().Copy();
                        dt.TableName = "GEN_PAT_BILLING";
                        BillData.Tables.Add(dt.Copy());
                    }
                }
                //Pharmacy _Remove INV_PAT_TOTAL AND GEN_PAT_BILLING table unwanted data.
                if (BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount() && BillData.Tables["INV_PAT_BILLING"].Select("SERVICE_TYPE IS NOT NULL AND SERVICE_TYPE=" + (int)ServiceType.Pharmacy).Length == 0
                    && BillData.Tables["INV_PAT_TOTAL"].KIIsNotNullAndRowCount() && BillData.Tables["INV_PAT_TOTAL"].Select("SERVICE_TYPE IS NOT NULL AND SERVICE_TYPE=" + (int)ServiceType.Pharmacy).Length > 0)
                {
                    var filter = from dr in BillData.Tables["INV_PAT_TOTAL"].AsEnumerable()
                                 where dr.RowState != DataRowState.Deleted && dr["SERVICE_TYPE"] != DBNull.Value
                                 && Convert.ToInt16(dr["SERVICE_TYPE"]) != (int)ServiceType.Pharmacy
                                 select dr;
                    if (filter.Count() > 0)
                    {
                        if (BillData.Tables.Contains("INV_PAT_TOTAL"))
                        {
                            BillData.Tables.Remove("INV_PAT_TOTAL");
                        }
                        DataTable dt = filter.CopyToDataTable().Copy();
                        dt.TableName = "INV_PAT_TOTAL";
                        BillData.Tables.Add(dt.Copy());
                    }
                    //For Bug Correction-17254
                    filter = from dr in BillData.Tables["GEN_PAT_BILLING"].AsEnumerable()
                             where dr.RowState != DataRowState.Deleted && dr["SERVICE_TYPE"] != DBNull.Value
                             && Convert.ToInt16(dr["SERVICE_TYPE"]) != (int)ServiceType.Pharmacy
                             select dr;
                    if (filter.Count() > 0)
                    {
                        if (BillData.Tables.Contains("GEN_PAT_BILLING"))
                        {
                            BillData.Tables.Remove("GEN_PAT_BILLING");
                        }
                        DataTable dt = filter.CopyToDataTable().Copy();
                        dt.TableName = "GEN_PAT_BILLING";
                        BillData.Tables.Add(dt.Copy());
                    }
                }

                //Disable or enable pharmacy location, provider, encounter,and episode
                this.DisableOnServiceAddedIntoGrid();
                //Disable or enable Category
                //BillGroupWiseFilteration();
                sumObject = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                             where dr.RowState != DataRowState.Deleted && dr["SERVICE_TYPE"] != DBNull.Value && dr["ISSALE"] != DBNull.Value
                             && Convert.ToInt16(dr["SERVICE_TYPE"]) == SelectedItemServiceType && dr["DISCOUNT_MARKUP_MANUAL"] != DBNull.Value
                              && Convert.ToInt16(dr["ISSALE"]) == 1
                             select Convert.ToDecimal(dr["DISCOUNT_MARKUP_MANUAL"])).Sum();
                if (BillData.Tables["INV_PAT_BILLING_RESET_FINAL"].KIIsNotNullAndRowCount() && BillData.Tables["INV_PAT_BILLING_RESET_FINAL"].Rows[0]["SERVICE_TYPE"] == DBNull.Value)
                {
                    BillData.Tables["INV_PAT_BILLING_RESET_FINAL"].Rows[0]["SERVICE_TYPE"] = SelectedItemServiceType;
                }
                if (BillData.Tables["INV_PAT_BILLING_RESET_FINAL"].Select("SERVICE_TYPE=" + SelectedItemServiceType).Length > 0)
                {
                    int i = BillData.Tables["INV_PAT_BILLING_RESET_FINAL"].Rows.IndexOf
                        (BillData.Tables["INV_PAT_BILLING_RESET_FINAL"].Select("SERVICE_TYPE=" + SelectedItemServiceType)[0]);
                    BillData.Tables["INV_PAT_BILLING_RESET_FINAL"].Rows[i].ItemArray = drRow.ItemArray;
                    ///for final adjustment
                }
                else
                {
                    DataRow drRowData = BillData.Tables["INV_PAT_BILLING_RESET_FINAL"].NewRow();
                    drRowData.ItemArray = drRow.ItemArray;
                    BillData.Tables["INV_PAT_BILLING_RESET_FINAL"].Rows.Add(drRowData);
                }
                //GEN_PATIENT_SHARE
                //Calculate service tax for service charge in Cafeteria
                //if (BillData != null && BillData.Tables["INV_PAT_BILLING_TOTAL"] != null && BillData.Tables["INV_PAT_BILLING_TOTAL"].Rows.Count > 0
                //    && BillData.Tables["INV_PAT_BILLING_TOTAL"].Rows[0]["SERVICE_TAX"] != DBNull.Value
                //    && BillData.Tables["INV_PAT_BILLING_TOTAL"].Rows[0]["AMOUNT"] != DBNull.Value
                //    && BillData.Tables["BILL_COMMON_DETAILS"] != null)
                //{
                //    decimal Amount = Convert.ToDecimal(BillData.Tables["INV_PAT_BILLING_TOTAL"].Rows[0]["AMOUNT"]);
                //    decimal temp = Convert.ToDecimal(BillData.Tables["INV_PAT_BILLING_TOTAL"].Rows[0]["SERVICE_TAX"]) + 100;
                //}
                if (Provider.KIIsNotNullAndRowCount())
                {
                    Provider.DefaultView.Sort = "EMPLOYEE_NAME";
                }
                //End
                SelectedItemServiceType = SelectedServiceType;
                if (!isERCredit)
                {
                    ToBeCollected = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                    .Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]))
                                    .Select(x => IfNullReturnZero(x["PATIENT_SHARE"])).Sum();
                    BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["TOBECOLLECTED"] = ToBeCollected;
                }

                //Provider Discount Calculation
                if (!IsFromIPAllocation && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount()
                    && SelectedEncounterDetails != null && ((SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE")
                    && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value
                    && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.OPCASH)
                    || SelectedVisitMode == (int)VisitMode.OPCASH))
                {
                    BillData.Tables["INV_PAT_BILLING"].Rows[0]["PAT_FIN_ENCOUNTER_ID"] = SelectedPatientFinEncounterID;
                    BillData.Tables["INV_PAT_BILLING"].Rows[0]["PROVIDER_ID"] = EMRItemSelected != null ? EMRItemSelected["PROVIDER_ID"] : SelectedProviderValue;
                    CalculateProviderDiscount(BillData.Tables["INV_PAT_BILLING"]);
                }
                if ((SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE")
                    && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value
                    && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.OPCASH)
                    || SelectedVisitMode == (int)VisitMode.OPCASH)
                {
                    CalculateTotalAdjustment();
                }
                //End
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void CalculateTotalAdjustment()
        {
            if (BillData != null && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount()
                && (BillData.Tables["INV_PAT_BILLING"].Select("DISCOUNT< 0").Length > 0
                || BillData.Tables["INV_PAT_BILLING"].Select("PROVIDER_DISCOUNT_AMOUNT< 0").Length > 0
                || BillData.Tables["INV_PAT_BILLING"].Select("SCHEME_DISCOUNT< 0").Length > 0
                || BillData.Tables["INV_PAT_BILLING"].Select("OTHER_CHARGE > 0").Length > 0
                || (BillData.Tables["INV_PAT_BILLING"].Select("DISCOUNT< 0").Length == 0
                && BillData.Tables["INV_PAT_BILLING"].Select("PROVIDER_DISCOUNT_AMOUNT< 0").Length == 0
                && BillData.Tables["INV_PAT_BILLING"].Select("SCHEME_DISCOUNT< 0").Length == 0
                && BillData.Tables["INV_PAT_BILLING"].Select("OTHER_CHARGE> 0").Length == 0
                && BillData.Tables["INV_PAT_BILLING"].Select("MARKUP> 0").Length == 0
                && BillData.Tables["INV_PAT_BILLING"].Select("SCHEME_MARKUP> 0").Length == 0)))
            {
                TotalAdjustment = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                   where dr.RowState != DataRowState.Deleted
                                   && dr["ISSALE"] != DBNull.Value
                                   && Convert.ToInt16(dr["ISSALE"]) == 1
                                   && dr["DISCOUNT"] != DBNull.Value
                                   && dr["PROVIDER_DISCOUNT_AMOUNT"] != DBNull.Value
                                   && dr["SCHEME_DISCOUNT"] != DBNull.Value
                                   && dr["OTHER_CHARGE"] != DBNull.Value
                                   select (Convert.ToDecimal(dr["DISCOUNT"]) + Convert.ToDecimal(dr["PROVIDER_DISCOUNT_AMOUNT"])
                                   + Convert.ToDecimal(dr["SCHEME_DISCOUNT"]) + Convert.ToDecimal(dr["OTHER_CHARGE"]))).Sum();
            }
            else if (BillData != null && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount()
               && (BillData.Tables["INV_PAT_BILLING"].Select("MARKUP> 0").Length > 0
               || BillData.Tables["INV_PAT_BILLING"].Select("SCHEME_MARKUP> 0").Length > 0
               || BillData.Tables["INV_PAT_BILLING"].Select("OTHER_CHARGE > 0").Length > 0))
            {
                TotalAdjustment = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                   where dr.RowState != DataRowState.Deleted
                                   && dr["ISSALE"] != DBNull.Value
                                   && Convert.ToInt16(dr["ISSALE"]) == 1
                                   && dr["MARKUP"] != DBNull.Value
                                   && dr["SCHEME_MARKUP"] != DBNull.Value
                                   && dr["OTHER_CHARGE"] != DBNull.Value
                                   select (Convert.ToDecimal(dr["MARKUP"]) + Convert.ToDecimal(dr["SCHEME_MARKUP"]) + Convert.ToDecimal(dr["OTHER_CHARGE"]))).Sum();
            }
            else
            {
                TotalAdjustment = 0;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        private bool ValidateEncounterTypeExist()
        {
            try
            {
                bool isProceed = true;
                if (IsUSSettingEnable && !IsFromOTBilling)
                {
                    DataTable Criteria = new DataTable();
                    Criteria.Columns.Add("MRNO");
                    Criteria.Rows.Add(PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Rows[0]["MRNO"] != DBNull.Value
                        ? Convert.ToString(PatientInformation.Rows[0]["MRNO"]) : "");
                    MainCommon objMainCommon = new MainCommon();
                    DataTable dtEpisode = objMainCommon.EpisodeStatusChecking(Criteria);
                    if (dtEpisode.KIIsNotNullAndRowCount())
                    {
                        DataTable PatientVisit = GetPatientVisit();
                        if (PatientVisit.KIIsNotNullAndRowCount())
                        {
                            if (SelectedVisitMode == VisitMode.OPCREDIT && PatientVisit.Rows[0]["ENCOUNTER_OP_VISIT_TYPE"] == DBNull.Value)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                    "Create an encounter to proceed", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                isProceed = false;
                            }
                            else if (SelectedVisitMode == VisitMode.IP && PatientVisit.Rows[0]["ENCOUNTER_IP_VISIT_TYPE"] == DBNull.Value)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                    "Create an encounter to proceed", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                isProceed = false;
                            }
                        }
                    }
                    else
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                            "Create an encounter to proceed", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        isProceed = false;
                    }
                }
                return isProceed;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        private bool ValidateExcludedICDs()
        {
            try
            {
                bool isProceed = true;
                StringBuilder strServiceName = new StringBuilder();
                DataTable dtCriteria = new DataTable("Criteria");
                if (SelectedVisitMode != VisitMode.OPCASH && PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Rows[0]["MRNO"] != DBNull.Value)
                {
                    dtCriteria.Columns.Add("VISIT_NO");
                    dtCriteria.Columns.Add("MODE");
                    dtCriteria.Rows.Add();
                    DataTable dtPatientVisit = GetPatientVisit();
                    if (dtPatientVisit.KIIsNotNullAndRowCount())
                    {
                        dtCriteria.Rows[0]["VISIT_NO"] = dtPatientVisit.Rows[0]["VISIT_NO"];
                        dtCriteria.Rows[0]["MODE"] = 2;
                    }
                    MainEMRShared objEMRShared = new MainEMRShared();
                    DataTable dtDiagnosis = objEMRShared.FetchDiagnosis(dtCriteria);
                    if (dtDiagnosis.KIIsNotNullAndRowCount())
                    {
                        dtCriteria = new DataTable("Criteria");
                        dtCriteria.Columns.Add("INCO_DTLS_SCHEME_ID");
                        dtCriteria.Columns.Add("MODE");
                        dtCriteria.Rows.Add();
                        dtCriteria.Rows[0]["INCO_DTLS_SCHEME_ID"] = SelectedSchemeValue;
                        dtCriteria.Rows[0]["MODE"] = 1;
                        MainMasterSettings objMasterSettings = new MainMasterSettings();
                        DataTable dtExcludedICDs = objMasterSettings.FetchExcludedICD(dtCriteria);
                        if (dtExcludedICDs.KIIsNotNullAndRowCount())
                        {
                            var dataExist = from drDiagnosis in dtDiagnosis.AsEnumerable()
                                            join drExcludedICDs in dtExcludedICDs.AsEnumerable()
                                            on Convert.ToString(drDiagnosis["ICD_CODE"]) equals Convert.ToString(drExcludedICDs["ICD_CODE"])
                                            where drDiagnosis["ICD_NAME"] != DBNull.Value && ((drExcludedICDs["ISOPCREDIT"] != DBNull.Value
                                            && Convert.ToInt16(drExcludedICDs["ISOPCREDIT"]) == 1 && SelectedVisitMode == VisitMode.OPCREDIT)
                                            || (drExcludedICDs["ISIP"] != DBNull.Value
                                            && Convert.ToInt16(drExcludedICDs["ISIP"]) == 1 && SelectedVisitMode == VisitMode.IP))
                                            && drExcludedICDs["ISBLOCK_BILLS"] != DBNull.Value
                                            && Convert.ToInt16(drExcludedICDs["ISBLOCK_BILLS"]) == 1
                                            select drDiagnosis;
                            if (dataExist.Count() > 0)
                            {
                                foreach (DataRow dr in dataExist.CopyToDataTable().Rows)
                                {
                                    if (!strServiceName.ToString().Contains(dr["ICD_NAME"].ToString()))
                                    {
                                        strServiceName.Append(dr["ICD_NAME"]);
                                        strServiceName.Append("\n");
                                    }
                                }
                                strServiceName.Remove(strServiceName.Length - 1, 1);
                                //if (!strServiceName.ToString().Contains(dr["ICD_NAME"].ToString()))
                                //{
                                //    strServiceName.Append(string.Join("\n", dataExist.Select(dr => dr["ICD_NAME"].ToString()).ToArray()));
                                //}
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                    "Following ICDs are excluded in the selected scheme. \n" + strServiceName.ToString(), MessageBoxButtonType.OK, MessageBoxImages.Information);
                                isProceed = false;
                            }
                        }
                    }
                }
                return isProceed;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        private bool ValidateExcludedICDsForSave()
        {
            try
            {
                bool isProceed = true;
                StringBuilder strServiceName = new StringBuilder();
                DataTable dtCriteria = new DataTable("Criteria");
                if (SelectedVisitMode != VisitMode.OPCASH && PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Rows[0]["MRNO"] != DBNull.Value)
                {
                    dtCriteria.Columns.Add("VISIT_NO");
                    dtCriteria.Columns.Add("MODE");
                    dtCriteria.Rows.Add();
                    DataTable dtPatientVisit = GetPatientVisit();
                    if (dtPatientVisit.KIIsNotNullAndRowCount())
                    {
                        dtCriteria.Rows[0]["VISIT_NO"] = dtPatientVisit.Rows[0]["VISIT_NO"];
                        dtCriteria.Rows[0]["MODE"] = 2;
                    }
                    MainEMRShared objEMRShared = new MainEMRShared();
                    DataTable dtDiagnosis = objEMRShared.FetchDiagnosis(dtCriteria);
                    if (dtDiagnosis.KIIsNotNullAndRowCount())
                    {
                        dtCriteria = new DataTable("Criteria");
                        dtCriteria.Columns.Add("INCO_DTLS_SCHEME_ID");
                        dtCriteria.Columns.Add("MODE");
                        dtCriteria.Rows.Add();
                        dtCriteria.Rows[0]["INCO_DTLS_SCHEME_ID"] = SelectedSchemeValue;
                        dtCriteria.Rows[0]["MODE"] = 1;
                        MainMasterSettings objMasterSettings = new MainMasterSettings();
                        DataTable dtExcludedICDs = objMasterSettings.FetchExcludedICD(dtCriteria);
                        if (dtExcludedICDs.KIIsNotNullAndRowCount())
                        {
                            var dataExist = from drDiagnosis in dtDiagnosis.AsEnumerable()
                                            join drExcludedICDs in dtExcludedICDs.AsEnumerable()
                                            on Convert.ToString(drDiagnosis["ICD_CODE"]) equals Convert.ToString(drExcludedICDs["ICD_CODE"])
                                            where drDiagnosis["ICD_NAME"] != DBNull.Value && ((drExcludedICDs["ISOPCREDIT"] != DBNull.Value
                                            && Convert.ToInt16(drExcludedICDs["ISOPCREDIT"]) == 1 && SelectedVisitMode == VisitMode.OPCREDIT)
                                            || (drExcludedICDs["ISIP"] != DBNull.Value
                                            && Convert.ToInt16(drExcludedICDs["ISIP"]) == 1 && SelectedVisitMode == VisitMode.IP))
                                            && drExcludedICDs["ISBLOCK_BILLS"] != DBNull.Value
                                            && Convert.ToInt16(drExcludedICDs["ISBLOCK_BILLS"]) == 1
                                            select drDiagnosis;
                            if (dataExist.Count() > 0)
                            {
                                foreach (DataRow dr in dataExist.CopyToDataTable().Rows)
                                {
                                    if (!strServiceName.ToString().Contains(dr["ICD_NAME"].ToString()))
                                    {
                                        strServiceName.Append(dr["ICD_NAME"]);
                                        strServiceName.Append("\n");
                                    }
                                }
                                strServiceName.Remove(strServiceName.Length - 1, 1);
                                //strServiceName.Append(string.Join("\n", dataExist.Select(dr => dr["ICD_NAME"].ToString()).ToArray()));
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                    "Following ICDs are excluded in the selected scheme. \n" + strServiceName.ToString(), MessageBoxButtonType.OK, MessageBoxImages.Information);
                                isProceed = false;
                            }
                            else
                            {
                                var dataExistIcd = from drDiagnosis in dtDiagnosis.AsEnumerable()
                                                   join drExcludedICDs in dtExcludedICDs.AsEnumerable()
                                                   on Convert.ToString(drDiagnosis["ICD_CODE"]) equals Convert.ToString(drExcludedICDs["ICD_CODE"])
                                                   where drDiagnosis["ICD_NAME"] != DBNull.Value && ((drExcludedICDs["ISOPCREDIT"] != DBNull.Value
                                                   && Convert.ToInt16(drExcludedICDs["ISOPCREDIT"]) == 1 && SelectedVisitMode == VisitMode.OPCREDIT)
                                                   || (drExcludedICDs["ISIP"] != DBNull.Value
                                                   && Convert.ToInt16(drExcludedICDs["ISIP"]) == 1 && SelectedVisitMode == VisitMode.IP))
                                                   && drExcludedICDs["ISBLOCK_BILLS"] != DBNull.Value
                                                   && Convert.ToInt16(drExcludedICDs["ISBLOCK_BILLS"]) == 0
                                                   select drDiagnosis;
                                if (dataExistIcd.Count() > 0)
                                {
                                    foreach (DataRow dr in dataExistIcd.CopyToDataTable().Rows)
                                    {
                                        if (!strServiceName.ToString().Contains(dr["ICD_NAME"].ToString()))
                                        {
                                            strServiceName.Append(dr["ICD_NAME"]);
                                            strServiceName.Append("\n");
                                        }
                                    }
                                    strServiceName.Remove(strServiceName.Length - 1, 1);
                                    //strServiceName.Append(string.Join("\n", dataExistIcd.Select(dr => dr["ICD_NAME"].ToString()).ToArray()));
                                    isProceed = (giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                        "Following ICDs are excluded in the selected scheme. \n"
                                        + strServiceName.ToString() + "\n" + "do you want to continue?", MessageBoxButtonType.YesNo, MessageBoxImages.Question)
                                        == MessageBoxDialogueResult.Yes) ? true : false;
                                }
                            }
                        }
                    }
                }
                return isProceed;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ServiceId"></param>
        /// <returns></returns>
        private DataTable FetchProfileServices(long ServiceId, DataRow drTemp)
        {
            try
            {
                DataTable dtCriteria = new DataTable();
                dtCriteria = BillData.Tables["INV_BILL_PROFILE_SERVICE"].Clone();
                DataRow dr = dtCriteria.NewRow();
                dr["MODE"] = 2;
                dr["INV_MAST_SERVICE_ID"] = ServiceId;
                dr["HOSPITAL_ID"] = InvestigationData.HospitalID;
                if (drTemp != null)
                {
                    dr["EMR_PAT_DTLS_INV_ORDER_ID"] = drTemp["EMR_PAT_DTLS_INV_ORDER_ID"];
                }
                dtCriteria.Rows.Add(dr);
                DataTable dtService = BillData.Tables["INV_BILL_PROFILE_SERVICE"].Clone();
                //Normal service profiles
                if (dr["EMR_PAT_DTLS_INV_ORDER_ID"] == DBNull.Value)
                {
                    MainServiceShared objServiceProfile = new MainServiceShared();
                    dtService.Merge(objServiceProfile.FetchServiceProfile(dtCriteria));
                }
                else //EMR service profiles
                {
                    MainEMRShared objServiceProfile = new MainEMRShared();
                    dtCriteria.Rows[0]["INV_MAST_SERVICE_ID"] = DBNull.Value;
                    DataTable Profile = objServiceProfile.GetInvBillProfileDetails(dtCriteria);
                    if (Profile.Columns.Contains("NAME") && Profile.Columns.Contains("INV_MAST_SERVICE"))
                    {
                        Profile.Columns["NAME"].ColumnName = "INV_MAST_SERVICE1";
                    }
                    if (Profile.Columns.Contains("INV_MAST_SERVICE"))
                    {
                        Profile.Columns["INV_MAST_SERVICE"].ColumnName = "NAME";
                    }
                    if (Profile.Columns.Contains("INV_MAST_SERVICE1"))
                    {
                        Profile.Columns["INV_MAST_SERVICE1"].ColumnName = "INV_MAST_SERVICE";
                    }
                    dtService.Merge(Profile);
                }
                foreach (DataRow item in dtService.Rows)
                {
                    item["ID"] = ServiceId;
                    item["EMR_PAT_DTLS_INV_ORDER_ID"] = dr["EMR_PAT_DTLS_INV_ORDER_ID"];
                }
                return dtService;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="ServiceID"></param>
        /// <param name="dtProfile"></param>
        /// <param name="ISFromEMR"></param>
        /// <returns></returns>
        private DataTable CreateLevel(long ServiceID, DataTable dtProfile, bool ISFromEMR)
        {
            try
            {
                DataTable dtReturn = dtProfile.Clone();
                if (ISFromEMR)
                {
                    if (dtProfile != null && dtProfile.Rows.Count > 0)
                    {
                        foreach (DataRow item in dtProfile.Select("INV_MAST_SERVICE_ID=" + ServiceID, "DISPLAY_ORDER ASC"))
                        {
                            item["SERVICE_LEVEL"] = Convert.ToInt16(item["SERVICE_LEVEL"]) + 1;
                            dtReturn.ImportRow(item);

                            if (item["INV_MAST_SUBSERVICE_ID"] != DBNull.Value)
                            {
                                foreach (DataRow item1 in dtProfile.Select("INV_MAST_SERVICE_ID=" + item["INV_MAST_SUBSERVICE_ID"], "DISPLAY_ORDER ASC"))
                                {
                                    item1["SERVICE_LEVEL"] = Convert.ToInt16(item["SERVICE_LEVEL"]) + 1;
                                    dtReturn.ImportRow(item1);
                                    SubLevel(Convert.ToInt16(item1["SERVICE_LEVEL"]), item1, dtReturn);
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (dtProfile != null && dtProfile.Rows.Count > 0)
                    {
                        foreach (DataRow item in dtProfile.Select("INV_MAST_SERVICE_ID=" + ServiceID, "DISPLAY_ORDER ASC"))
                        {
                            item["SERVICE_LEVEL"] = Convert.ToInt16(item["SERVICE_LEVEL"]) + 1;
                            dtReturn.ImportRow(item);

                            if (item["INV_MAST_SUBSERVICE_ID"] != DBNull.Value)
                            {
                                foreach (DataRow item1 in dtProfile.Select("INV_MAST_SERVICE_ID=" + item["INV_MAST_SUBSERVICE_ID"], "DISPLAY_ORDER ASC"))
                                {
                                    item1["SERVICE_LEVEL"] = Convert.ToInt16(item["SERVICE_LEVEL"]) + 1;
                                    dtReturn.ImportRow(item1);
                                    SubLevel(Convert.ToInt16(item1["SERVICE_LEVEL"]), item1, dtReturn);
                                }
                            }
                        }
                    }
                }
                return dtReturn;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="level"></param>
        /// <param name="dr"></param>
        /// <param name="dtReturn"></param>
        private void SubLevel(int level, DataRow dr, DataTable dtReturn)
        {
            try
            {
                foreach (DataRow item in dtProfile.Select("INV_MAST_SERVICE_ID=" + dr["INV_MAST_SUBSERVICE_ID"]))
                {
                    item["SERVICE_LEVEL"] = level + 1;
                    dtReturn.ImportRow(item);
                    SubLevel(Convert.ToInt16(item["SERVICE_LEVEL"]), item, dtReturn);
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// Calculates to be collected.(Copay or net amount  based)
        /// </summary>
        /// <param name="drTotal">The dr total.</param>
        private void CalculateToBeCollected(DataTable dtTotal)
        {
            try
            {
                decimal totalCopayment = 0;
                decimal totalPatientShare = 0;
                totalCopayment = (from dr in dtTotal.AsEnumerable()
                                  where dr.RowState != DataRowState.Deleted && dr["CO_PAY_AMOUNT_TOTAL"] != DBNull.Value
                                  select Convert.ToDecimal(dr["CO_PAY_AMOUNT_TOTAL"])).Sum();
                if (IsServicePayingPartyPatient)
                {
                    totalPatientShare = (from dr in dtTotal.AsEnumerable()
                                         where dr.RowState != DataRowState.Deleted && dr["GEN_PATIENT_SHARE"] != DBNull.Value
                                         select Convert.ToDecimal(dr["GEN_PATIENT_SHARE"])).Sum();
                }
                totalCopayment = totalCopayment + totalPatientShare;
                decimal totalNetAmount = 0;
                totalNetAmount = (from dr in dtTotal.AsEnumerable()
                                  where dr.RowState != DataRowState.Deleted && dr["NET_AMOUNT_TOTAL"] != DBNull.Value
                                  select Convert.ToDecimal(dr["NET_AMOUNT_TOTAL"])).Sum();
                //SelectedVisitModeTemp = SelectedVisitModeNew;


                //  if (totalCopayment > 0 && !IsDeferredPayment && !isERCredit)
                if (totalCopayment > 0 && !isERCredit)
                {
                    BillData.Tables["INCO_DTLS_CONTRACT_ACC"].DefaultView.RowFilter = "INCO_DTLS_SCHEME_ID=" + SelectedSchemeValue + " AND ACC_HEAD_CATEGORY=1";
                    //1- copayment ACC_HEAD_CATEGORY
                    DataTable dtCopy = BillData.Tables["INCO_DTLS_CONTRACT_ACC"].DefaultView.ToTable();
                    if ((dtCopy != null && dtCopy.Rows.Count > 0 && SelectedVisitMode != VisitMode.OPCASH) && !IsDeferredPayment
                        && BillData.Tables["BILL_COMMON_DETAILS"].Rows[0]["PR_ACCHEAD_ID"] != DBNull.Value)
                    {
                        DataRow[] drRows = dtCopy.Select("PAYING_PARTY_TYPE=0 AND ACC_HEAD_ID=" + BillData.Tables["BILL_COMMON_DETAILS"].Rows[0]["PR_ACCHEAD_ID"] + "");
                        if (drRows.Length > 0 && SelectedVisitMode == VisitMode.OPCREDIT)
                        {
                            BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["PAYING_PARTY_TYPE"] = drRows[0]["PAYING_PARTY_TYPE"] == DBNull.Value
                                ? 0 : drRows[0]["PAYING_PARTY_TYPE"];
                            decimal Copayment = (totalCopayment * Convert.ToDecimal(drRows[0]["PERCENTAGE"])) / 100;
                            BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["TOBECOLLECTED"] = Copayment;
                            ToBeCollected = Copayment;
                            ToBeCollectedExists = true;
                        }
                        else
                        {
                            BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["PAYING_PARTY_TYPE"] = 1;
                        }
                    }
                    else
                    {
                        BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["TOBECOLLECTED"] = totalCopayment;
                        ToBeCollected = totalCopayment;
                        ToBeCollectedExists = true;
                    }
                }
                //else if (totalNetAmount > 0 && SelectedVisitMode == VisitMode.OPCASH && !IsDeferredPayment)
                else if (totalNetAmount > 0 && SelectedVisitMode == VisitMode.OPCASH)
                {

                    BillData.Tables["INCO_DTLS_CONTRACT_ACC"].DefaultView.RowFilter = "INCO_DTLS_SCHEME_ID=" + SelectedSchemeValue + " AND ACC_HEAD_CATEGORY=0";
                    dtTemp = BillData.Tables["INCO_DTLS_CONTRACT_ACC"].DefaultView.ToTable();

                    if (dtTemp != null && dtTemp.Rows.Count > 0 && SelectedVisitMode == VisitMode.OPCASH)
                    {
                        BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["PAYING_PARTY_TYPE"] = 0;
                        if (!IsPackage)
                        {
                            BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["TOBECOLLECTED"]
                                = this.CalculateToBeCollectedBasedOnManual(totalNetAmount);
                            ToBeCollected = Convert.ToDecimal(BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["TOBECOLLECTED"]);
                            ToBeCollectedExists = true;
                        }
                    }
                    else
                    {
                        BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["TOBECOLLECTED"]
                                = this.CalculateToBeCollectedBasedOnManual(totalNetAmount);
                        ToBeCollected = totalNetAmount;
                        ToBeCollectedExists = true;
                    }
                }
                //else if (SelectedVisitMode == VisitMode.OPCREDIT || SelectedVisitMode == VisitMode.IP || IsDeferredPayment || isERCredit)
                if (SelectedVisitMode == VisitMode.OPCREDIT || SelectedVisitMode == VisitMode.IP || IsDeferredPayment || isERCredit)
                {
                    BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["PAYING_PARTY_TYPE"] = 1;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        private void BillGroupWiseFilteration()
        {
            try
            {
                string str = "ONE CATEGORY PER BILL IN BILLING";
                DataRow[] drBillData = CommonData.dsGlobal.Tables["GEN_APPLICATION_SETTING"].Select("SETTING = '" + str + "'");
                if (drBillData != null && drBillData.Length > 0)
                    if (Convert.ToInt16(drBillData[0]["VALUE"]) == 1 && BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0)
                    {
                        DataRow[] drParentCategory = null;
                        if (BillData.Tables["INV_PAT_BILLING"].Rows[0]["INV_PARENT_CATEGORY_ID"] != DBNull.Value)
                        {
                            drParentCategory = Category.ToTable().Select("ROOT_INV_CATEGORY_ID="
                                + Convert.ToDecimal(BillData.Tables["INV_PAT_BILLING"].Rows[0]["INV_PARENT_CATEGORY_ID"]));
                        }
                        if (drParentCategory != null && drParentCategory.Length > 0 && drParentCategory[0]["BILL_GROUP"] != DBNull.Value)
                        {
                            DataRow[] drSubCategory = Category.ToTable().Select("BILL_GROUP=" + drParentCategory[0]["BILL_GROUP"] + "AND ISROOT=" + 1);
                            if (drSubCategory != null && drSubCategory.Length > 0)
                            {
                                if (dsServiceData != null && dsServiceData.Tables.Contains("INV_MAST_SERVICE")
                                    && dsServiceData.Tables["INV_MAST_SERVICE"] != null && dsServiceData.Tables["INV_MAST_SERVICE"].Rows.Count > 0)
                                {
                                    Services = dsServiceData.Tables["INV_MAST_SERVICE"].Copy();
                                    if (!IsPatient)
                                    {
                                        if (Services.Columns.Contains("ISPACKAGE"))
                                        {
                                            Services.DefaultView.RowFilter = "ISPACKAGE IS NULL OR ISPACKAGE=0";
                                            Services = Services.DefaultView.ToTable();
                                        }
                                    }
                                }
                                if (drSubCategory.CopyToDataTable().Rows.Count == 1)
                                {
                                    CategorySelectedValue = Convert.ToDecimal(BillData.Tables["INV_PAT_BILLING"].Rows[0]["INV_PARENT_CATEGORY_ID"]);
                                    if (Services != null && Services.Rows.Count > 0)
                                    {
                                        Services.DefaultView.RowFilter = "PARENT_INV_CATEGORY_ID=-1 OR PARENT_INV_CATEGORY_ID=" + CategorySelectedValue;
                                        Services = Services.DefaultView.ToTable();
                                        if (!IsPatient)
                                        {
                                            if (Services.Columns.Contains("ISPACKAGE"))
                                            {
                                                Services.DefaultView.RowFilter = "ISPACKAGE IS NULL OR ISPACKAGE=0";
                                                Services = Services.DefaultView.ToTable();
                                            }
                                        }
                                    }
                                    IsEnableCategory = false;
                                }
                                else
                                {
                                    Category = drSubCategory.CopyToDataTable().DefaultView;
                                    if (Category != null && Category.ToTable().Rows.Count > 0)
                                    {
                                        string[] parentID = (from dr in Category.ToTable().AsEnumerable()
                                                             where dr.RowState != DataRowState.Deleted && dr["ROOT_INV_CATEGORY_ID"] != DBNull.Value
                                                             select Convert.ToString(dr["ROOT_INV_CATEGORY_ID"])).ToArray();
                                        if (parentID.Length > 0)
                                        {
                                            if (Services != null && Services.Rows.Count > 0)
                                            {
                                                Services.DefaultView.RowFilter = "PARENT_INV_CATEGORY_ID=-1 OR PARENT_INV_CATEGORY_ID IN(" + string.Join(",", parentID) + ")";
                                                Services = Services.DefaultView.ToTable();
                                                if (!IsPatient)
                                                {
                                                    if (Services.Columns.Contains("ISPACKAGE"))
                                                    {
                                                        Services.DefaultView.RowFilter = "ISPACKAGE IS NULL OR ISPACKAGE=0";
                                                        Services = Services.DefaultView.ToTable();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    IsEnableCategory = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        if (dtCategory.KIIsNotNullAndRowCount() && dsServiceData != null && dsServiceData.Tables["INV_MAST_SERVICE"].KIIsNotNullAndRowCount())
                        {
                            Category = dtCategory.Copy().DefaultView;
                            string[] parentID = (from dr in dsServiceData.Tables["INV_MAST_SERVICE"].AsEnumerable()
                                                 where dr.RowState != DataRowState.Deleted && dr["PARENT_INV_CATEGORY_ID"] != DBNull.Value
                                                 select Convert.ToString(dr["PARENT_INV_CATEGORY_ID"])).ToArray();
                            if (parentID.Length > 0)
                            {
                                //if (IsUSSettingEnable && SelectedServiceType == (int)ServiceType.Investigation)
                                //{
                                //    Category.RowFilter = "INV_CATEGORY_ID=-1 OR (ISROOT=1  AND (SERVICE_TYPE="
                                //        + (int)ServiceType.Surgery + " OR SERVICE_TYPE=" + SelectedServiceType + ")) AND ROOT_INV_CATEGORY_ID IN("
                                //        + string.Join(",", parentID) + ") ";
                                //}
                                //else
                                //{
                                Category.RowFilter = "INV_CATEGORY_ID=-1 OR (ISROOT=1 AND SERVICE_TYPE=" + SelectedServiceType + ")AND ROOT_INV_CATEGORY_ID IN("
                                    + string.Join(",", parentID) + ")";
                                //}
                                Category.Sort = "NAME ASC";
                            }

                            if (dsServiceData != null && dsServiceData.Tables.Contains("INV_MAST_SERVICE")
                                                       && dsServiceData.Tables["INV_MAST_SERVICE"] != null && dsServiceData.Tables["INV_MAST_SERVICE"].Rows.Count > 0)
                            {
                                if (SelectedServiceType == (int)ServiceType.Pharmacy)
                                {
                                    LoadMedicines();
                                }
                                else
                                {
                                    Services = dsServiceData.Tables["INV_MAST_SERVICE"].Copy();
                                }
                                if (!IsPatient)
                                {
                                    if (Services.Columns.Contains("ISPACKAGE"))
                                    {
                                        Services.DefaultView.RowFilter = "ISPACKAGE IS NULL OR ISPACKAGE=0";
                                        Services = Services.DefaultView.ToTable();
                                    }
                                }
                            }
                        }
                        CategorySelectedValue = 0;
                        CategorySelectedValue = -1;
                        IsEnableCategory = true;
                    }
                if (SelectedServiceType == (int)ServiceType.Cafeteria)
                {
                    if (BillData != null && BillData.Tables.Contains("INV_PAT_BILLING") && BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0)
                    {
                        SalesCategorySelectedValue = SalesCategorySelectedValue;
                    }
                    else
                    {
                        SalesCategorySelectedValue = SalesCategory != null && SalesCategory.ToTable().Rows.Count > 0
                            && SalesCategory.ToTable().Rows[0]["FIELD1"] != DBNull.Value
                        ? Convert.ToDecimal(SalesCategory.ToTable().Rows[0]["FIELD1"]) : -1;
                    }
                }
                //DataTable dtValues = CommonData.GetDefaultSettings(0, "MULTI PHARMACY COMPANY APPLICABLE");
                //if (dtValues.KIIsNotNullAndRowCount() && Convert.ToInt16(dtValues.Rows[0]["VALUE"]) == 1
                //&& EditService == null && SelectedServiceType == (int)ServiceType.Pharmacy && SelectedPharmacyCompanyName != string.Empty)
                //{
                //    Services.DefaultView.RowFilter = "PHARMACY_COMPANY IS NOT NULL AND PHARMACY_COMPANY='" + SelectedPharmacyCompanyName + "'";
                //    Services = Services.DefaultView.ToTable();
                //}
            }
            catch (Exception ex)
            {
                throw;
                //ExceptionHandler.WriteErrorLog(ex);
            }
        }

        /// <summary>
        /// Calculates to be collected based on manual adjustment.
        /// </summary>
        private decimal CalculateToBeCollectedBasedOnManual(decimal NetTotal)
        {
            decimal ToBeCollected = NetTotal;
            DataRow drTemp = BillData.Tables["INV_PAT_BILLING_TOTAL"].Rows[0];
            if (drTemp["DISCOUNT_MARKUP_MANUAL"] != DBNull.Value && NetTotal > 0)
            {
                if (drTemp["PERCENT_VALUE_FIXED"] != DBNull.Value && Convert.ToInt16(drTemp["PERCENT_VALUE_FIXED"]) == (int)ValueMode.Fixed_Charge)
                {
                    ToBeCollected = Convert.ToDecimal(BillData.Tables["INV_PAT_BILLING_TOTAL"].Rows[0]["DISCOUNT_MARKUP_MANUAL"]);
                    ToBeCollectedExists = true;
                }
                else
                {
                    if (drTemp["INCREASE_DECREASE"] != DBNull.Value)
                    {
                        if (Convert.ToInt16(drTemp["INCREASE_DECREASE"]) == (int)VariationMode.Decreasing)
                        {
                            ToBeCollected = ToBeCollected - Convert.ToDecimal(BillData.Tables["INV_PAT_BILLING_TOTAL"].Rows[0]["DISCOUNT_MARKUP_MANUAL"]);
                            ToBeCollectedExists = true;
                        }
                        else if (Convert.ToInt16(drTemp["INCREASE_DECREASE"]) == (int)VariationMode.Increasing)
                        {
                            ToBeCollected = ToBeCollected + Convert.ToDecimal(BillData.Tables["INV_PAT_BILLING_TOTAL"].Rows[0]["DISCOUNT_MARKUP_MANUAL"]);
                            ToBeCollectedExists = true;
                        }
                    }
                }
            }
            BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["TOBECOLLECTED"] = ToBeCollected;
            BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["TOTAL"] = ToBeCollected;
            BillData.Tables["INV_PAT_TOTAL"].Rows[0]["NET_AMOUNT_TOTAL"] = ToBeCollected;
            BillData.Tables["BILL_COMMON_DETAILS"].Rows[0]["TOBECOLLECTED"] = ToBeCollected;
            return ToBeCollected;
        }
        /// <summary>
        /// Reads the value with out null
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        private decimal ReadNullableValue(object value)
        {
            return value == DBNull.Value ? 0 : Convert.ToDecimal(value);
        }

        /// <summary>
        /// Creates the investigation audit.
        /// </summary>
        /// <returns></returns>
        private DataTable CreateAudit(int serviceType)
        {
            try
            {
                DataTable Data = null;
                if (serviceType == (int)ServiceType.Investigation || serviceType == (int)ServiceType.Cafeteria
                    || serviceType == (int)ServiceType.IncomingService)
                {
                    AuditData.GetAuditData(BillData.Tables["INV_AUDIT"], CommonData.LoggedInUser, 0);
                    Data = BillData.Tables["INV_AUDIT"];
                }
                else if (serviceType == (int)ServiceType.Pharmacy)
                {
                    AuditData.GetAuditData(BillData.Tables["PH_AUDIT"], CommonData.LoggedInUser, 0);
                    Data = BillData.Tables["PH_AUDIT"];
                }
                else if (serviceType == (int)ServiceType.ADT)
                {
                    AuditData.GetAuditData(BillData.Tables["ADT_AUDIT"], CommonData.LoggedInUser, 0);
                    Data = BillData.Tables["ADT_AUDIT"];
                }
                
                return Data;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private DataTable CreatePackageAudit()
        {
            try
            {
                DataTable Data = null;
                if (SelectedServiceType == (int)ServiceType.Investigation || SelectedServiceType == (int)ServiceType.Consultation)
                {
                    AuditData.GetAuditData(BillData.Tables["PKG_AUDIT"], CommonData.LoggedInUser, 0);
                    Data = BillData.Tables["PKG_AUDIT"];
                }
                return Data;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// Creates the bill data.
        /// </summary>
        /// <param name="FOXSD">The FOXSD.</param>
        public DataSet CreateBillData(DataSet XSD, ProfileCategory ProfileType)
        {
            try
            {
                this.ResetSaveData(XSD);
                if (IsPackage)//Reassign value in INV_PAT_BILLING_TOTAL
                {
                    if (SelectedServiceType == (int)ServiceType.Investigation || SelectedServiceType == (int)ServiceType.Cafeteria)
                    {
                        CalculateServiceTotal();
                    }
                    //Reassign the total value in RECEIPT_DATA_BIND
                    BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["TOTAL"] = BillData.Tables["INV_PAT_TOTAL"].Rows[0]["NET_AMOUNT_TOTAL"];
                }
                CalculateDiscountTotal(BillData.Tables["INV_PAT_BILLING"]);
                XSD.Merge(BillData.Copy());
                this.CreateDynamicBillData(XSD, ProfileType, false);
                if (SelectedServiceType != (int)ServiceType.Registration)
                {
                    if (Category != null)
                    {
                        Category.Table.TableName = "INV_CATEGORY_TEMP";
                        CategoryTemp.TableName = "INV_CATEGORY";
                        XSD.Tables.Add(CategoryTemp.Copy());
                    }
                    //If advance or retainer exist only then updation required
                    if (AdvanceRetainer != null && XSD.Tables.Contains("RECEIPT_DATA_BIND") && XSD.Tables["RECEIPT_DATA_BIND"] != null
                        && XSD.Tables["RECEIPT_DATA_BIND"].Rows.Count > 0
                       && (this.ReadNullableValue(XSD.Tables["RECEIPT_DATA_BIND"].Rows[0]["RETAINER_AMOUNT"]) > 0
                       || this.ReadNullableValue(XSD.Tables["RECEIPT_DATA_BIND"].Rows[0]["ADVANCE"]) > 0)
                       && this.ReadNullableValue(XSD.Tables["RECEIPT_DATA_BIND"].Rows[0]["TOTAL"]) > 0)
                    {
                        XSD.Tables.Add(AdvanceRetainer.Copy());// Add  ADVRET_PAT_BILLING_TEMP into XSD
                    }

                }
                foreach (DataRow dr in XSD.Tables["GEN_PAT_BILLING"].Rows)
                {
                    DataTable dtAudit = this.CreateAudit(Convert.ToInt16(dr["SERVICE_TYPE"]));
                    if (dtAudit != null)
                    {
                        XSD.Merge(dtAudit);
                    }
                }
                if (XSD.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
                {
                    var filterPackage = from dr in XSD.Tables["INV_PAT_BILLING"].AsEnumerable()
                                        where dr.RowState != DataRowState.Deleted &&
                                        dr["ISPACKAGE_SERVICE"] != DBNull.Value && Convert.ToInt16(dr["ISPACKAGE_SERVICE"]) == 1
                                        select dr;
                    if (filterPackage.Count() > 0)
                    {
                        PackageServiceStarting = true;
                        DataTable dtPackageAudit = this.CreatePackageAudit();
                        if (dtPackageAudit.KIIsNotNullAndRowCount())
                        {
                            XSD.Merge(dtPackageAudit);
                        }
                    }
                    //Adding order date to BILL_COMMON_DETAILS
                    if (!XSD.Tables["BILL_COMMON_DETAILS"].Columns.Contains("REVENUE_SERVICE_DATE"))
                    {
                        XSD.Tables["BILL_COMMON_DETAILS"].Columns.Add("REVENUE_SERVICE_DATE", typeof(DateTime));
                    }
                    XSD.Tables["BILL_COMMON_DETAILS"].Rows[0]["REVENUE_SERVICE_DATE"] = XSD.Tables["INV_PAT_BILLING"].Rows[0]["ENTRY_DATE"];
                }
                if (SelectedServiceType == (int)ServiceType.Investigation || SelectedServiceType == (int)ServiceType.Pharmacy || SelectedServiceType == (int)ServiceType.Cafeteria)
                {
                    object NetAmount = XSD.Tables["INV_PAT_BILLING"].Compute("Sum(NET_AMOUNT)", "");
                    decimal OtherChargeTotal = this.ReadNullableValue(XSD.Tables["INV_PAT_BILLING"].Compute("Sum(OTHER_CHARGE)", ""));
                    decimal MarkupTotal = this.ReadNullableValue(XSD.Tables["INV_PAT_BILLING"].Compute("Sum(MARKUP)", ""));
                    decimal DiscountTotal = this.ReadNullableValue(XSD.Tables["INV_PAT_BILLING"].Compute("Sum(DISCOUNT)", ""));
                    //Adjustment final item wise(if the net amount is zero by giving 100% discount)
                    decimal AdjustmentItemWise = 0;
                    decimal OtherChargeItemWise = 0;
                    AuditData.GetAuditData(BillData.Tables["EMR_AUDIT"], CommonData.LoggedInUser, 0);
                    XSD.Merge(BillData.Tables["EMR_AUDIT"]);
                    ////For minor procedure billing
                    //if (MinorProcedueServices.KIIsNotNullAndRowCount())
                    //{
                    //    XSD.Tables.Add(CreateBillDataForMinorProcService().Copy());
                    //}
                }
                if (XSD.Tables.Contains("BILLING_AUDIT") && XSD.Tables["BILLING_AUDIT"].Rows.Count > 0)
                {
                    XSD.Tables["BILLING_AUDIT"].Rows.Clear();
                }
                    AuditData.GetAuditData(BillData.Tables["BILLING_AUDIT"], CommonData.LoggedInUser, 0);
                    XSD.Merge(BillData.Tables["BILLING_AUDIT"]);
                
                if (ProfileType == ProfileCategory.Patient)
                {
                    XSD.Tables["GEN_PAT_BILLING"].Rows[0]["ISPATIENT"] = 1;
                }
                else
                {
                    XSD.Tables["GEN_PAT_BILLING"].Rows[0]["ISPATIENT"] = 0;
                }
                if (XSD.Tables.Contains("SCAN_DTLS_FILE") && XSD.Tables["SCAN_DTLS_FILE"].Rows.Count > 0)
                {
                    var DtlsFile = XSD.Tables["SCAN_DTLS_FILE"].AsEnumerable()
                           .Where(x => x["IS_BILL_WISE"] != DBNull.Value && Convert.ToInt16(x["IS_BILL_WISE"]) == 1)
                           .Select(x => x);
                    if (DtlsFile.Count() > 0)
                    {
                        XSD.Tables["GEN_PAT_BILLING"].Rows[0]["IS_SCAN_EXIST"] = 1;
                    }
                    else
                    {
                        XSD.Tables["GEN_PAT_BILLING"].Rows[0]["IS_SCAN_EXIST"] = 0;
                    }
                }
                //Added by Saranya
                //if (ProfileType == ProfileCategory.Consumer && XSD.Tables.Contains("GEN_PROFILE_CONTACT")
                //    && XSD.Tables["GEN_PROFILE_CONTACT"].Rows.Count > 0 && Convert.ToInt16(XSD.Tables["GEN_PAT_BILLING"].Rows[0]["SERVICE_TYPE"]) == (int)ServiceType.Cafeteria)
                //{
                //    XSD.Tables["GEN_PAT_BILLING"].Rows[0]["NAME"] = GetPatientOutsiderName(XSD.Tables["GEN_PROFILE_CONTACT"]);
                //}
                //End
                DataTable PatientVisit = GetPatientVisit();
                if (SelectedVisitMode == VisitMode.OPCREDIT)
                {
                    XSD.Tables["BILL_COMMON_DETAILS"].Rows[0]["ENCOUNTER_OP_VISIT_TYPE"] = PatientVisit.KIIsNotNullAndRowCount()
                        ? PatientVisit.Rows[0]["ENCOUNTER_OP_VISIT_TYPE"] : DBNull.Value;
                }
                else if (SelectedVisitMode == VisitMode.IP)
                {
                    XSD.Tables["BILL_COMMON_DETAILS"].Rows[0]["ENCOUNTER_IP_VISIT_TYPE"] = PatientVisit.KIIsNotNullAndRowCount()
                        ? PatientVisit.Rows[0]["ENCOUNTER_IP_VISIT_TYPE"] : DBNull.Value;
                }
                this.VisitCreation(XSD, ProfileType);
                if (XSD.Tables["BILLING_PRIORITY"].Rows.Count == 0 || XSD.Tables["BILLING_PRIORITY"].Rows.Count > 4)
                {
                    XSD.Tables["BILLING_PRIORITY"].Rows.Clear();
                    XSD.Tables["BILLING_PRIORITY"].Merge(BillData.Tables["BILLING_PRIORITY"].Copy());
                }
                if (IsPackage) // If doing package service billing
                {
                    if (XSD.Tables.Contains("PKG_MAST_PATIENT") && XSD.Tables.Contains("PKG_DTLS_PATIENT_SERVICE")
                        && dsPackageMstDtls != null && dsPackageMstDtls.Tables["PKG_MAST_PATIENT"].KIIsNotNullAndRowCount()
                        && dsPackageMstDtls.Tables["PKG_DTLS_PATIENT_SERVICE"].KIIsNotNullAndRowCount())
                    {
                        XSD.Tables["PKG_MAST_PATIENT"].Rows.Clear();
                        XSD.Tables["PKG_DTLS_PATIENT_SERVICE"].Rows.Clear();
                        if (SelectedPackageItem != null && SelectedPackageItem.Row["PKG_SERVICE_ID"] != DBNull.Value)
                        {
                            dsPackageMstDtls.Tables["PKG_MAST_PATIENT"].DefaultView.RowFilter = "PKG_SERVICE_ID=" + Convert.ToInt64(SelectedPackageItem.Row["PKG_SERVICE_ID"]);
                            XSD.Tables["PKG_MAST_PATIENT"].Merge(dsPackageMstDtls.Tables["PKG_MAST_PATIENT"].DefaultView.ToTable().Copy());
                            if (dsPackageMstDtls.Tables["PKG_MAST_PATIENT"].DefaultView.ToTable().KIIsNotNullAndRowCount())
                            {
                                dsPackageMstDtls.Tables["PKG_DTLS_PATIENT_SERVICE"].DefaultView.RowFilter = "PKG_MAST_PATIENT_ID="
                                    + Convert.ToInt64(dsPackageMstDtls.Tables["PKG_DTLS_PATIENT_SERVICE"].Rows[0]["PKG_MAST_PATIENT_ID"]);
                                XSD.Tables["PKG_DTLS_PATIENT_SERVICE"].Merge(dsPackageMstDtls.Tables["PKG_DTLS_PATIENT_SERVICE"].DefaultView.ToTable().Copy());
                            }
                        }
                    }
                    if (dsServiceData != null && dsServiceData.Tables.Contains("INV_MAST_SERVICE") && dsServiceData.Tables["INV_MAST_SERVICE"].KIIsNotNullAndRowCount())
                    {
                        if (dsServiceData.Tables["INV_MAST_SERVICE"].Columns.Contains("INV_MAST_SERVICE_ID")
                            && !dsServiceData.Tables["INV_MAST_SERVICE"].Columns.Contains("PRIMARY_ID"))
                        {
                            dsServiceData.Tables["INV_MAST_SERVICE"].Columns["INV_MAST_SERVICE_ID"].ColumnName = "PRIMARY_ID";
                        }
                        DataRow[] dr = dsServiceData.Tables["INV_MAST_SERVICE"].Select("PRIMARY_ID=" + Convert.ToInt64(SelectedPackageItem.Row["PKG_SERVICE_ID"]));
                        if (dr.Length > 0)
                        {
                            XSD.Tables["BILL_COMMON_DETAILS"].Rows[0]["PKG_INV_CATEGORY_ID"] = dr[0]["INV_CATEGORY_ID"];
                        }
                        else
                        {
                            FetchPacakgeCategoryID(XSD);
                        }
                    }
                    else
                    {
                        FetchPacakgeCategoryID(XSD);
                    }
                }
                //if (SelectedServiceType == (int)ServiceType.Investigation &&
                //    XSD.Tables["INV_PAT_BILLING_MINORPROC"].Rows.Count > 0)
                //{
                //    XSD.Tables["BILL_COMMON_DETAILS"].Rows[0]["ISRELATED_SERVICE"] = 1;
                //}
                if (SelectedServiceType == (int)ServiceType.Cafeteria &&
                   XSD.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount() && XSD.Tables["INV_PAT_BILLING"].Rows[0]["EMR_PAT_DTLS_KOT_ID"] != DBNull.Value)
                {
                    XSD.Tables["BILL_COMMON_DETAILS"].Rows[0]["ORDER_EXIST"] = 1;
                }
                StringBuilder ExcludeServices = new StringBuilder();
                var DataNotExists = from dr in XSD.Tables["INV_PAT_BILLING"].AsEnumerable()
                                    where dr["NET_AMOUNT"] != DBNull.Value && dr["EXTERNAL_lAB_SHARE"] != DBNull.Value
                                    && Convert.ToDecimal(dr["NET_AMOUNT"]) < Convert.ToDecimal(dr["EXTERNAL_lAB_SHARE"])
                                    select dr;
                if (DataNotExists.Count() > 0)
                {
                    ExcludeServices.Append(string.Join("\n", DataNotExists.Select(dr => dr["NAME"].ToString()).ToArray()));
                    throw new MedilogicsException("Billed amount should not be less than lab share amount for the following services \n" + ExcludeServices.ToString() + "\n");
                }
                if (ProviderDetails.KIIsNotNullAndRowCount())
                {
                    XSD.Tables.Add(ProviderDetails.Copy());
                }
                if (HospitalInformation.KIIsNotNullAndRowCount())
                {
                    XSD.Tables.Add(HospitalInformation.Copy());
                }

                if (IsDeferredPayment && SelectedVisitMode != VisitMode.IP && BillData.Tables.Contains("RECEIPT_DATA_BIND")
                    && BillData.Tables["RECEIPT_DATA_BIND"].Rows.Count > 0
                    && (BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["CASHIER_AMOUNT"] != DBNull.Value && Convert.ToDecimal(BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["CASHIER_AMOUNT"]) > 0))
                {
                    XSD.Tables["BILL_COMMON_DETAILS"].Rows[0]["ISDEFERRED_PAYMENT"] = 1;
                }
                else
                {
                    XSD.Tables["BILL_COMMON_DETAILS"].Rows[0]["ISDEFERRED_PAYMENT"] = 0;
                }

                if (IsFromPharmacy == true)
                {
                    XSD.Tables["BILL_COMMON_DETAILS"].Rows[0]["ISFROM_PHARMACY_MODULE"] = 1;
                }
                else
                {
                    XSD.Tables["BILL_COMMON_DETAILS"].Rows[0]["ISFROM_PHARMACY_MODULE"] = 0;
                }

                ////if (IsDeferredPayment && SelectedVisitMode == (int)VisitMode.OPCASH && BillData.Tables.Contains("RECEIPT_DATA_BIND")
                ////    && BillData.Tables["RECEIPT_DATA_BIND"].Rows.Count > 0
                ////   && (BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["TOTAL"] == DBNull.Value || Convert.ToInt64(BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["TOTAL"]) == 0))
                ////{
                ////    XSD.Tables["BILL_COMMON_DETAILS"].Rows[0]["ISDEFERRED_PAYMENT"] = 1;
                ////}
                ////else
                ////{
                ////    XSD.Tables["BILL_COMMON_DETAILS"].Rows[0]["ISDEFERRED_PAYMENT"] = 0;
                ////}
                XSD.Tables["BILL_COMMON_DETAILS"].Rows[0]["HOSPITAL_SITE_ID"] = CommonData.LoginHospitalSiteID;
                XSD.Tables["BILL_COMMON_DETAILS"].Rows[0]["PHARMACY_COMPANY"] = string.Empty;//SelectedPharmacyCompanyName
                XSD.Tables["BILL_COMMON_DETAILS"].Rows[0]["ADMISSION_NO"] = DBNull.Value;
                CreateConsultationBillData(XSD);
                //Fill Profile table entries
                CreateProfileData(XSD);
                //
                //Fill GEN_BILL_DISCOUNT table
                //Provider Discount Implementation
                if (XSD != null && XSD.Tables.Contains("GEN_BILL_DISCOUNT")
                    && XSD.Tables["GEN_BILL_DISCOUNT"].Rows.Count == 0 && GenBillProviderDiscount.KIIsNotNullAndRowCount())
                {
                    XSD.Tables["GEN_BILL_DISCOUNT"].Rows.Add();
                    XSD.Tables["GEN_BILL_DISCOUNT"].Rows[0].ItemArray = GenBillProviderDiscount.Rows[0].ItemArray;
                }
                //End
                CreateGenBillDiscount(XSD);
                if (!(XSD.Tables["BILL_COMMON_DETAILS"].Columns.Contains("BILL_CREATE")))
                {
                    XSD.Tables["BILL_COMMON_DETAILS"].Columns.Add("BILL_CREATE", typeof(Int32));
                    XSD.Tables["BILL_COMMON_DETAILS"].Rows[0]["BILL_CREATE"] = 1;

                }
                if (XSD.Tables["BILL_COMMON_DETAILS"] != null && XSD.Tables["BILL_COMMON_DETAILS"].Rows.Count > 0 && Convert.ToInt64(XSD.Tables["BILL_COMMON_DETAILS"].Rows[0]["PAT_FIN_ENCOUNTER_ID"]) == 0
                                    && PatientInformation != null && PatientInformation.Rows.Count > 0 && !string.IsNullOrWhiteSpace(Convert.ToString(PatientInformation.Rows[0]["PAT_FIN_ENCOUNTER_ID"])))
                {
                    XSD.Tables["BILL_COMMON_DETAILS"].Rows[0]["PAT_FIN_ENCOUNTER_ID"] = PatientInformation.Rows[0]["PAT_FIN_ENCOUNTER_ID"];
                }
                return XSD;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// clear the billing data tables after saving.
        /// </summary>
        /// <param name="FOXSD">The FOXSD.</param>
        private void ResetSaveData(DataSet FOXSD)
        {
            try
            {
                BillData.Tables["GEN_PAT_BILL_ALLOCATION"].Rows.Clear();
                BillData.Tables["GEN_TRANSACTION"].Rows.Clear();
                BillData.Tables["GEN_TRANSACTION_HISTORY"].Rows.Clear();
                BillData.Tables["ACC_MAST_TRANSACTION"].Rows.Clear();
                BillData.Tables["ACC_DTLS_CHARGE_SPLITUP"].Rows.Clear();
                BillData.Tables["ACC_DTLS_TRANSACTION"].Rows.Clear();
                BillData.Tables["INV_AUDIT"].Rows.Clear();
                if (FOXSD.Tables.Contains("GEN_PAT_BILL_ALLOCATION"))
                {
                    FOXSD.Tables["GEN_PAT_BILL_ALLOCATION"].Rows.Clear();
                }
                if (FOXSD.Tables.Contains("INV_PAT_BILLING"))
                {
                    FOXSD.Tables["INV_PAT_BILLING"].Rows.Clear();
                }
                if (FOXSD.Tables.Contains("GEN_TRANSACTION"))
                {
                    FOXSD.Tables["GEN_TRANSACTION"].Rows.Clear();
                }
                if (FOXSD.Tables.Contains("GEN_TRANSACTION_HISTORY"))
                {
                    FOXSD.Tables["GEN_TRANSACTION_HISTORY"].Rows.Clear();
                }
                if (FOXSD.Tables.Contains("ACC_MAST_TRANSACTION"))
                {
                    FOXSD.Tables["ACC_MAST_TRANSACTION"].Rows.Clear();
                }
                if (FOXSD.Tables.Contains("ACC_DTLS_CHARGE_SPLITUP"))
                {
                    FOXSD.Tables["ACC_DTLS_CHARGE_SPLITUP"].Rows.Clear();
                }
                if (FOXSD.Tables.Contains("ACC_DTLS_TRANSACTION"))
                {
                    FOXSD.Tables["ACC_DTLS_TRANSACTION"].Rows.Clear();
                }
                if (FOXSD.Tables.Contains("PAT_PATIENT_EPISODE"))
                {
                    FOXSD.Tables["PAT_PATIENT_EPISODE"].Rows.Clear();
                }
                if (FOXSD.Tables.Contains("PAT_PATIENT_EPISODE_HISTORY"))
                {
                    FOXSD.Tables["PAT_PATIENT_EPISODE_HISTORY"].Rows.Clear();
                }
                if (FOXSD.Tables.Contains("PAT_PATIENT_VISIT"))
                {
                    FOXSD.Tables["PAT_PATIENT_VISIT"].Rows.Clear();
                }
                if (FOXSD.Tables.Contains("PAT_PATIENT_VISIT_SCHEME"))
                {
                    FOXSD.Tables["PAT_PATIENT_VISIT_SCHEME"].Rows.Clear();
                }
                if (FOXSD.Tables.Contains("INV_AUDIT"))
                {
                    FOXSD.Tables["INV_AUDIT"].Rows.Clear();
                }
                if (FOXSD.Tables.Contains("INV_BILL_PROFILE_SERVICE"))
                {
                    FOXSD.Tables["INV_BILL_PROFILE_SERVICE"].Rows.Clear();
                }
                if (FOXSD.Tables.Contains("INV_BILL_PROFILE_SERVICE"))
                {
                    FOXSD.Tables["INV_BILL_PROFILE_SERVICE"].Rows.Clear();
                }
                if (FOXSD.Tables.Contains("REG_CON_SERVICE_DETAILS"))
                {
                    FOXSD.Tables.Remove("REG_CON_SERVICE_DETAILS");
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// Gets the next primary key value.
        /// </summary>
        /// <param name="dtTable">The dt table.</param>
        /// <param name="FieldName">Name of the field.</param>
        /// <returns></returns>
        private long GetNextPrimaryKeyValue(DataTable dtTable, string FieldName)
        {
            long nextKeyValue = -1;
            try
            {
                if (dtTable != null && dtTable.Rows.Count > 0)
                {
                    Int64[] primaryKeys = (from dr in dtTable.AsEnumerable()
                                           where dr.RowState != DataRowState.Deleted && dr[FieldName] != DBNull.Value
                                           select Math.Abs(Convert.ToInt64(dr[FieldName]))).ToArray();
                    nextKeyValue = primaryKeys.Length > 0 ? (primaryKeys.Max() + 1) * -1 : -1;
                }
            }
            catch (Exception ex)
            {
                throw;
                //ExceptionHandler.WriteErrorLog(ex);
            }
            return nextKeyValue;
        }
        /// <summary>
        /// Creates the dynamic bill common data.
        /// </summary>
        private void CreateDynamicBillData(DataSet XSD, ProfileCategory ProfileType, bool IsReleatedService)
        {
            try
            {
                DataRow drDetails = XSD.Tables["BILL_COMMON_DETAILS"].Rows[0];
                //this.RefreshDefaultScheme(drDetails);
                drDetails["INCO_DTLS_SCHEME_ID"] = SelectedSchemeValue;
                drDetails["IS_VISIT_BILLING"] = 1;//To identify visit ceration from billing or not used in common server visit creation
                drDetails["INCO_MAST_SCHEME_ID"] = SelectedMastSchemeValue;
                drDetails["ISERCREDIT"] = isERCredit ? 1 : 0;
                drDetails["HOSPITAL_ID"] = CommonData.LoginHospitalSiteID;
                //to check episode is exist or need to create
                Infologics.Medilogics.CommonSharedUI.BillingView.UcPatientEpisodeDetails objUcPatientEpisodeDetails = new Infologics.Medilogics.CommonSharedUI.BillingView.UcPatientEpisodeDetails();
                objUcPatientEpisodeDetails.MRNO = PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Columns.Contains("MRNO")
                && PatientInformation.Rows[0]["MRNO"] != DBNull.Value ? Convert.ToString(PatientInformation.Rows[0]["MRNO"]) : "";
                DataTable dtPatientEpisode = new DataTable();
                dtPatientEpisode = objUcPatientEpisodeDetails.PatientEpisode;
                // New encounter opening if billing services on next day  
                if (!string.IsNullOrEmpty(SelectedEncounterNo)
                    && DtNonConsultEncSetting != null && DtNonConsultEncSetting.Rows.Count > 0 && Convert.ToInt16(DtNonConsultEncSetting.Rows[0]["VALUE"]) == 1
                    && SelectedEncounterDetails != null
                    && SelectedEncounterDetails.Row.Table.Columns.Contains("START_DATE")
                    && SelectedEncounterDetails.Row.Table.Columns.Contains("PAT_FIN_EPISODE_ID")
                    && SelectedEncounterDetails.Row["START_DATE"] != DBNull.Value
                    && SelectedEncounterDetails.Row["PAT_FIN_EPISODE_ID"] != DBNull.Value
                    && Convert.ToDateTime(SelectedEncounterDetails.Row["START_DATE"]) < DateTime.Today)
                {
                    drDetails["PAT_FIN_EPISODE_ID"] = SelectedEncounterDetails.Row["PAT_FIN_EPISODE_ID"];
                    drDetails["EPISODEBASEDBILLING"] = 5;
                }
                // Create both encounter and episode
                else if (!string.IsNullOrEmpty(SelectedProviderIDValue) && string.IsNullOrEmpty(SelectedOpenEpisodeID) && string.IsNullOrEmpty(SelectedEncounterNo))
                {
                    drDetails["EPISODEBASEDBILLING"] = 1;
                }
                // Create episode and update encounter 
                else if (!string.IsNullOrEmpty(SelectedProviderIDValue) && string.IsNullOrEmpty(SelectedOpenEpisodeID))
                {
                    drDetails["EPISODEBASEDBILLING"] = 2;
                }
                //Create only encounter 
                else if (!string.IsNullOrEmpty(SelectedOpenEpisodeID) && string.IsNullOrEmpty(SelectedEncounterNo))
                {
                    drDetails["EPISODEBASEDBILLING"] = 4;
                }
                // no need to create episode and encounter
                else
                {
                    drDetails["EPISODEBASEDBILLING"] = 3;
                }

                if (drDetails["SERVICE_TYPE"] == DBNull.Value)
                {
                    drDetails["SERVICE_TYPE"] = SelectedServiceType;
                }
                // SchemeDetails != null && SchemeDetails.Row["INCO_MAST_SCHEME_ID"] != DBNull.Value ? SchemeDetails.Row["INCO_MAST_SCHEME_ID"] : 0;
                drDetails["TOBECOLLECTED"] = XSD.Tables["RECEIPT_DATA_BIND"].Rows[0]["TOBECOLLECTED"];
                drDetails["ADVANCE_AMOUNT"] = AdvanceAmount;
                drDetails["VISITMODE"] = (int)SelectedVisitMode;
                //drDetails["VISITMODE"] = (SelectedEncounterDetails != null && SelectedEncounterDetails["ENCOUNTER_MODE"] != DBNull.Value) ? SelectedEncounterDetails["EPISODE_STATUS"] : (int)SelectedVisitMode;
                drDetails["PROFILECATEGORY"] = (int)ProfileType;
                XSD.Tables["CON_PAT_BILLING"].Rows[0]["ISNEWCASE"] = -1;// Block BLPatientVisit Unwanted data entry
                if (SelectedLabOrSubLocationItem != null && SelectedLabOrSubLocationItem != null &&
                    drDetails.KIGetDataRowValue<int>("ACTUAL_SERVICE_TYPE") == (int)ServiceType.IncomingService)
                {
                    XSD.Tables["GEN_PAT_BILLING"].Rows[0]["INCOMINGLAB_ID"] = SelectedLabOrSubLocationValue;
                    drDetails["SUBLOCATION_ACC"] = SelectedLabOrSubLocationItem["ACC_HEAD_ID"];
                    drDetails["SUBLOCATION_NAME"] = SelectedLabOrSubLocationItem["NAME"];
                }
                if (SelectedLabOrSubLocationItem != null && SelectedLabOrSubLocationItem != null
                    && SelectedServiceType == (int)ServiceType.Pharmacy)
                {
                    drDetails["SALES_ACC_HEAD_ID"] = SelectedLabOrSubLocationItem["SALES_ACC_HEAD_ID"];
                    drDetails["VAT_ACC_HEAD_ID"] = SelectedLabOrSubLocationItem["VAT_ACC_HEAD_ID"];
                }
                drDetails["SUBLOCATION"] = ISAssociatedService ? AssociatedSelectedLabOrSubLocationValue : SelectedLabOrSubLocationValue;
                if (EnableVerificationSettingBased && SelectedVisitModeNew == (int)VisitMode.IP && IsFromPharmacyPanel)
                {
                    drDetails["SUBLOCATION"] = BillData.Tables["INV_PAT_BILLING"].Rows[0]["SUBLOCATION"];
                }
                drDetails["REMARKS"] = BillingRemarks;
                drDetails["DECIMAL_PLACE"] = CommonData.DecimalPlace;//Pending2020
                drDetails["LOGIN_ID"] = CommonData.LoggedInUser;
                drDetails["LOGIN_NAME"] = CommonData.LoggedInUserName;
                drDetails["IS_DONOR"] = IsDonor;
                bool isIP = dtPatientVisit.KIIsNotNullAndRowCount() && dtPatientVisit.Rows[0]["VISIT_TYPE"] != DBNull.Value
                    && Convert.ToInt16(dtPatientVisit.Rows[0]["VISIT_TYPE"]) == (int)VisitMode.IP ? true : false;
                // For Closed Encounter Biling, 02/Sep/2014,
                ////if (!isIP && PatientInformation != null && PatientInformation.Columns.Contains("MRNO")
                ////    && PatientInformation.Rows.Count > 0)
                ////{
                ////    // Commented by benson,
                ////    ////DataTable Criteria = new DataTable("CRITERIA");
                ////    ////Criteria.Columns.Add("MRNO");
                ////    ////Criteria.Columns.Add("MODE");
                ////    ////Criteria.Rows.Add(PatientInformation.Rows[0]["MRNO"], 14);
                ////    ////MainCommon objCommon = new MainCommon();
                ////    ////DataTable dtEncounter = objCommon.SelectFinancialEncounter(Criteria);
                ////    ////if (dtEncounter.KIIsNotNullAndRowCount())
                ////    ////{
                ////    ////    drDetails["PAT_FIN_ENCOUNTER_ID"] = dtEncounter.Rows[0]["PAT_FIN_ENCOUNTER_ID"];
                ////    ////}
                ////    drDetails["PAT_FIN_ENCOUNTER_ID"] = SelectedPatientFinEncounterID;
                ////}
                ////else if (isIP && PatientInformation != null && PatientInformation.Columns.Contains("MRNO")
                ////    && PatientInformation.Rows.Count > 0)
                ////{
                ////    DataTable Criteria = new DataTable("CRITERIA");
                ////    Criteria.Columns.Add("MRNO");
                ////    Criteria.Columns.Add("MODE");
                ////    Criteria.Rows.Add(PatientInformation.Rows[0]["MRNO"], 11);
                ////    MainCommon objCommon = new MainCommon();
                ////    DataTable dtEncounter = objCommon.SelectFinancialEncounter(Criteria);
                ////    if (dtEncounter.KIIsNotNullAndRowCount())
                ////    {
                ////        drDetails["PAT_FIN_ENCOUNTER_ID"] = dtEncounter.Rows[0]["PAT_FIN_ENCOUNTER_ID"];
                ////    }
                ////}
                drDetails["PAT_FIN_ENCOUNTER_ID"] = SelectedPatientFinEncounterID;
                // END - For Closed Encounter Biling, 02/Sep/2014,
                drDetails["INCO_PATIENT_SCHEME_ID"] = SelectedIncoPatientSchemeID;
                drDetails["PAT_FIN_EPISODE_ID"] = SelectedPatientFinEpisodeID;
                CreateRadioloryReportData(XSD, drDetails);
                if (ProfileType == ProfileCategory.Patient)
                {
                    if (SelectedServiceType == (int)ServiceType.Investigation
                        || SelectedServiceType == (int)ServiceType.Pharmacy || SelectedServiceType == (int)ServiceType.Cafeteria
                        || SelectedServiceType == (int)ServiceType.IncomingService)
                    {
                        if (SelectedProvider != null)
                        {
                            //drDetails["PROVIDER_ID"] = SelectedProvider.Row["H_EMP_ID"];             //providerID;
                            if (!IsCafeteriaPatientSearch)
                            {
                                drDetails["PROVIDER_ID"] = SelectedProvider.Row["H_EMP_ID"];             //providerID;
                                drDetails["GEN_MAST_DEPARTMENT_ID"] = SelectedProvider.Row["H_EMP_DEPNAME"];
                                drDetails["DEPARTMENT_NAME"] = SelectedProvider.Row["DEPARTMENT_NAME"];
                            }
                            else if (IsCafeteriaPatientSearch)
                            {
                                drDetails["PROVIDER_ID"] = SelectedEMROrder != null &&
                                    SelectedEMROrder.Table.Rows.Count > 0 && SelectedEMROrder.Table.Columns.Contains("PROVIDER_ID") ? SelectedEMROrder["PROVIDER_ID"] : SelectedProvider.Row["H_EMP_ID"];
                                drDetails["GEN_MAST_DEPARTMENT_ID"] = DefaultSettings.Values.CAFETERIA_DEPARTMENT_ID != string.Empty ?
                                                                      Convert.ToInt32(DefaultSettings.Values.CAFETERIA_DEPARTMENT_ID) : drDetails["GEN_MAST_DEPARTMENT_ID"];
                            }

                           drDetails["PROVIDER_NAME"] = SelectedProvider.Row["EMPLOYEE_NAME"];
                           drDetails["CON_TYPE_NAME"] = DBNull.Value;
                           drDetails["MRNO"] = PatientInformation != null && PatientInformation.Rows[0]["MRNO"] != DBNull.Value
                                ? PatientInformation.Rows[0]["MRNO"] : Patient != null ? Patient.MRNO : string.Empty;
                            drDetails["FREE_CONSULTATION"] = 0;
                        }
                    }
                    XSD.Tables["LIMIT_CRITERIA"].Rows[0]["VISIT_TYPE"] = (int)SelectedVisitMode;
                    XSD.Tables["LIMIT_CRITERIA"].Rows[0]["MRNO"] = PatientInformation != null
                        && PatientInformation.Rows[0]["MRNO"] != DBNull.Value ? PatientInformation.Rows[0]["MRNO"] : Patient != null ? Patient.MRNO : string.Empty;
                    XSD.Tables["LIMIT_CRITERIA"].Rows[0]["SERVICE_TYPE"] = SelectedServiceType;
                    XSD.Tables["LIMIT_CRITERIA"].Rows[0]["INCO_DTLS_SCHEME_ID"] = SelectedSchemeValue;// SelectedSchemeValue;
                    XSD.Tables["LIMIT_CRITERIA"].Rows[0]["INCO_MAST_SCHEME_ID"] = 1;
                    if (PatientInformation != null && PatientInformation.Rows[0]["AGE"] != DBNull.Value)
                    {
                        XSD.Tables["LIMIT_CRITERIA"].Rows[0]["AGE"] = PatientInformation.Rows[0]["AGE"];
                    }
                    else if (Patient != null)
                    {
                        Common objCommon = new Common();
                        DataTable dtAge = objCommon.GetAge(Patient.DOB, DateTime.Now);
                        if (dtAge.KIIsNotNullAndRowCount())
                        {
                            XSD.Tables["LIMIT_CRITERIA"].Rows[0]["AGE"] = dtAge.Rows[0]["AgeInDays"];
                        }
                    }
                    if (PatientInformation != null && PatientInformation.Rows[0]["GENDER"] != DBNull.Value)
                    {
                        XSD.Tables["LIMIT_CRITERIA"].Rows[0]["GENDER"] = PatientInformation.Rows[0]["GENDER"];
                    }
                    else if (Patient != null)
                    {
                        if (Patient.Gender.ToString().ToUpper() == "FEMALE")
                        {
                            XSD.Tables["LIMIT_CRITERIA"].Rows[0]["GENDER"] = (int)Infologics.Medilogics.Enumerators.General.Gender.Female;
                        }
                        else if (Patient.Gender.ToString().ToUpper() == "MALE")
                        {
                            XSD.Tables["LIMIT_CRITERIA"].Rows[0]["GENDER"] = (int)Infologics.Medilogics.Enumerators.General.Gender.Male;
                        }
                    }
                    XSD.Tables["LIMIT_CRITERIA"].Rows[0]["BILL_DATE"] = DateTime.Now;
                }
                else if (ProfileType == ProfileCategory.OutsidePatient || ProfileType == ProfileCategory.Consumer)
                {
                    if (SelectedProvider != null)
                    {
                        drDetails["PROVIDER_ID"] = SelectedProvider.Row["H_EMP_ID"];
                        drDetails["PROVIDER_NAME"] = SelectedProvider.Row["EMPLOYEE_NAME"];
                    }
                }
                //To fetch the advance each time to check if advance updated from other EXE 
                //FetchAdvanceTotalAmt();
                drDetails["ACC_SHIFT_OPEN_ID"] = AccShiftOpenID;
                drDetails["CHARITY_DISCOUNT_ACCHEAD"] = DBNull.Value;
                drDetails["IS_US"] = IsUSSettingEnable ? 1 : 0;
                if (IsClosedEncounterSelected || IsIPEncounterSelected)
                {
                    drDetails["IS_CLOSED_ENCOUNTER"] = 1;                   
                }
                else
                {
                    drDetails["IS_CLOSED_ENCOUNTER"] = 0;
                }
                drDetails["SERVICE_DATE"] = EncounterEndDate;
                drDetails["BILL_DATETIME_NOW"] = DateTime.Now;
                ////if (IsClosedEncounterSelected && !IsIPClosedEncounterSelected)
                ////{
                ////    drDetails["IS_CLOSED_ENCOUNTER"] = 1; // For OP Closed Encounters -- 1
                ////    drDetails["SERVICE_DATE"] = EncounterEndDate;
                ////}
                ////else if (IsClosedEncounterSelected && IsIPClosedEncounterSelected)
                ////{
                ////    drDetails["IS_CLOSED_ENCOUNTER"] = 2; // For IP Closed Encounters -- 2
                ////    drDetails["SERVICE_DATE"] = EncounterEndDate;
                ////}
                ////else
                ////{
                ////    drDetails["IS_CLOSED_ENCOUNTER"] = 0;
                ////}
                if (!IsNonConsultEncounter && XSD.Tables["GEN_PAT_BILL_ICD"] != null && XSD.Tables["GEN_PAT_BILL_ICD"].Rows.Count > 0)
                {
                    XSD.Tables["GEN_PAT_BILL_ICD"].Clear();
                }
                if (!XSD.Tables["BILL_COMMON_DETAILS"].Columns.Contains("IPCLOSEDENCOUNTERBILLING"))
                {
                    XSD.Tables["BILL_COMMON_DETAILS"].Columns.Add("IPCLOSEDENCOUNTERBILLING", typeof(bool));
                }
                if (IsIpClosedEncounterBill)
                {
                    drDetails["IPCLOSEDENCOUNTERBILLING"] = true;
                    drDetails["VISIT_NO"] = SelectedEncounterDetails["VISIT_NO"];// assigning Visit No to bill common details
                }
                else if (!IsIpClosedEncounterBill)
                {
                    drDetails["IPCLOSEDENCOUNTERBILLING"] = false;


                    if (SelectedServiceType == (int)ServiceType.Cafeteria)
                    {
                        drDetails["VISIT_NO"] = SelectedEMROrder != null &&
                                    SelectedEMROrder.Table.Rows.Count > 0 && SelectedEMROrder.Table.Columns.Contains("VISIT_NO") ? SelectedEMROrder["VISIT_NO"] : DBNull.Value;
                    }
                    else
                    {
                        drDetails["VISIT_NO"] = DBNull.Value; // clearing  Visit No in case of non IPCLOSEDENCOUNTERBILLING
                    }   

                    //drDetails["VISIT_NO"] = DBNull.Value; // clearing  Visit No in case of non IPCLOSEDENCOUNTERBILLING
                }
                //--- BUG ID: 32745 , Direct Billing no need to keep row in CON_PAT_BILLING
                if (drDetails.Table.Columns.Contains("EPISODEBASEDBILLING") && Convert.ToInt16(drDetails["EPISODEBASEDBILLING"]) == 1 
                    && XSD.Tables.Contains("CON_PAT_BILLING") && XSD.Tables["CON_PAT_BILLING"].Rows.Count > 0)
                {
                    XSD.Tables["CON_PAT_BILLING"].Rows.Clear();
                }
                //--- BUG ID: 32745 END  
                ////if (IsEncounterBilled && SelectedEncounterDetails!=null && SelectedEncounterDetails.Row.Table.Columns.Contains("END_DATE") && SelectedEncounterDetails["END_DATE"] != DBNull.Value)
                ////    drDetails["ENCOUNTER_END_DATE"] = SelectedEncounterDetails["END_DATE"];
                if (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("END_DATE") && SelectedEncounterDetails["END_DATE"] != DBNull.Value)
                    drDetails["ENCOUNTER_END_DATE"] = SelectedEncounterDetails["END_DATE"];
                if (IsFromCoderReview && drDetails.Table.Columns.Contains("IS_CODER_REVIEW"))                
                    drDetails["IS_CODER_REVIEW"] = true;
                else
                    drDetails["IS_CODER_REVIEW"] = false;
                


            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        private void FetchAdvanceTotalAmt()
        {
            try
            {
                //drSettings = CommonData.dsGlobal.Tables["GEN_APPLICATION_SETTING"].Select("TRIM(SETTING)='ISVISITWISE_ADVANCE_COLLECTION'");
                if (PatientInformation != null)
                {
                    MainBilling objMainBilling = new MainBilling();
                    DataTable dtAdvance = new DataTable();


                    DataTable dtCriteria = new DataTable();
                    dtCriteria.Columns.Add("PAID_BY");
                    dtCriteria.Columns.Add("PAT_FIN_ENCOUNTER_ID");
                    dtCriteria.Columns.Add("MODE");
                    DataRow dr = dtCriteria.NewRow();
                    dr["PAID_BY"] = Convert.ToString(PatientInformation.Rows[0]["MRNO"]);
                    ////dr["PAT_FIN_ENCOUNTER_ID"] = SelectedPatientFinEncounterIDActive;
                    DataRow[] drRows = null;
                    DataTable dtApplicationSettings = CommonData.dsGlobal.Tables["GEN_APPLICATION_SETTING"].Clone();
                    dtApplicationSettings.TableName = "GEN_APPLICATION_SETTINGS";
                    drRows = CommonData.dsGlobal.Tables["GEN_APPLICATION_SETTING"].Select("TRIM(SETTING)='IS_MR_LEVEL_ADVANCE'");
                    if (drRows != null && drRows.Length > 0 && Convert.ToInt64(drRows[0]["VALUE"]) == 1)
                    {
                        dr["MODE"] = 6;
                        dr["PAT_FIN_ENCOUNTER_ID"] = null; // for MR_LEVEL_ADVANCE EncounterId must be null
                    }
                    else  // Encounter wise / Visit wise Advance Collection
                    {
                        dr["MODE"] = 1;
                        dr["PAT_FIN_ENCOUNTER_ID"] = SelectedPatientFinEncounterIDActive; // for MR_LEVEL_ADVANCE EncounterId must not be null
                    }
                    dtCriteria.Rows.Add(dr);
                    dtAdvance = objMainBilling.FetchAdvance(dtCriteria);//Mode=1 to check PAID_BY_ID=PAID_AGAINST_ID
                    if (dtAdvance != null && dtAdvance.Rows.Count > 0)
                    {
                        AdvanceAmount = 0;
                        foreach (DataRow drRow in dtAdvance.Rows)
                        {
                            AdvanceAmount = AdvanceAmount + Convert.ToDecimal(drRow["AMOUNT"]);
                        }
                    }
                    else
                    {
                        AdvanceAmount = 0;
                    }
                    if (BillData.Tables["RECEIPT_DATA_BIND"] != null && BillData.Tables["RECEIPT_DATA_BIND"].Rows.Count > 0)
                    {
                        BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["ADVANCE_AMOUNT"] = AdvanceAmount;
                        BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["ADVANCE_AFTER_WITHDRAWAL"] = AdvanceAmount;
                    }
                    if (BillData.Tables["ADVRET_PAT_BILLING_TEMP"] != null)
                    {
                        BillData.Tables["ADVRET_PAT_BILLING_TEMP"].Clear();
                    }
                    //dtCriteria.Rows[0]["MODE"] = 18;
                    dtCriteria.Rows[0]["MODE"] = 19;
                    AdvanceRetainer = objMainBilling.FetchAdvRetPatBilling(dtCriteria);
                    AdvanceRetainer.TableName = "ADVRET_PAT_BILLING_TEMP";
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="XSD"></param>
        private void FetchPacakgeCategoryID(DataSet XSD)
        {
            DataTable dtCriteria = new DataTable("CRITERIA");
            dtCriteria.Columns.Add("INV_MAST_SERVICE_ID");
            dtCriteria.Columns.Add("MODE");
            dtCriteria.Rows.Add();
            dtCriteria.Rows[0]["INV_MAST_SERVICE_ID"] = SelectedPackageItem.Row["PKG_SERVICE_ID"];
            dtCriteria.Rows[0]["MODE"] = 1;
            MainServiceShared objServiceShared = new MainServiceShared();
            DataSet dsService = objServiceShared.FetchInvestigations(dtCriteria);
            if (dsService != null && dsService.Tables.Contains("INV_MAST_SERVICE") && dsService.Tables["INV_MAST_SERVICE"].KIIsNotNullAndRowCount())
            {
                XSD.Tables["BILL_COMMON_DETAILS"].Rows[0]["PKG_INV_CATEGORY_ID"] = dsService.Tables["INV_MAST_SERVICE"].Rows[0]["INV_CATEGORY_ID"];
            }
        }
        /// <summary>
        /// Visits the creation.
        /// </summary>
        /// <param name="XSD">The XSD.</param>
        /// <param name="ProfileType">Type of the profile.</param>
        private void VisitCreation(DataSet XSD, ProfileCategory ProfileType)
        {
            try
            {
                //episode status changing based on consultation type-emergency
                EpisodeStatus episodeStatus = EpisodeStatus.OP;
                //If..else is added by saranya for Birth Registration
                DataTable dtCriteria = new DataTable("SEARCH_CRITERIA");
                dtCriteria.Columns.Add("MRNO", typeof(string));
                dtCriteria.Rows.Add(PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Rows[0]["MRNO"] != DBNull.Value
                    ? PatientInformation.Rows[0]["MRNO"].ToString() : "");
                MainFOShared objMainFOShared = new MainFOShared();
                DataTable dtBirthData = objMainFOShared.FetchBirthRegistrationdetails(dtCriteria);
                if (XSD.Tables.Contains("PAT_BIRTH_REGISTER")
                   && XSD.Tables["PAT_BIRTH_REGISTER"].Rows.Count > 0
                   && XSD.Tables["PAT_BIRTH_REGISTER"].Rows[0]["NO_OF_BABY"] != DBNull.Value && (dtBirthData == null || dtBirthData.Rows.Count == 0 ||
                   (dtBirthData.Rows.Count > 0 && ((dtBirthData.Rows[0]["ADMISSION_DATE"] == DBNull.Value && dtBirthData.Rows[0]["DISCHARGE_DATE"] == DBNull.Value)
                   || (dtBirthData.Rows[0]["ADMISSION_DATE"] != DBNull.Value && dtBirthData.Rows[0]["DISCHARGE_DATE"] == DBNull.Value)))))
                {
                    episodeStatus = EpisodeStatus.IP;
                    SelectedVisitMode = VisitMode.IP;
                }
                // End
                else
                {
                    episodeStatus = EpisodeStatus.OP;
                    if (SelectedVisitMode == VisitMode.IP)
                    {
                        episodeStatus = EpisodeStatus.IP;
                    }

                    ////XSD.Tables["CON_PAT_BILLING"].Rows[0]["ISEMERGENCY"] = 0;
                    ////if (SelectedServiceType == (int)ServiceType.Consultation)
                    ////{
                    ////    DataTable dtData = CommonData.GetDefaultSettings(0, "EMERGENCY CONSULT TYPE");
                    ////    if (dtData != null && dtData.Rows.Count > 0 && dtData.Rows[0]["VALUE"] != DBNull.Value &&
                    ////       ServiceName != string.Empty && ServiceName.ToUpper().Trim().Equals(dtData.Rows[0]["VALUE"].ToString().ToUpper().Trim()))
                    ////    {
                    ////        episodeStatus = EpisodeStatus.Emergency;
                    ////        XSD.Tables["CON_PAT_BILLING"].Rows[0]["ISEMERGENCY"] = 1;
                    ////    }
                    ////}
                }
                VisitDataSetting objVisit = new VisitDataSetting();
                objVisit.Visit(XSD, SelectedServiceType, SelectedVisitMode, episodeStatus, ProfileType, Convert.ToInt64(SelectedSchemeValue));
                if (XSD.Tables.Contains("PAT_PATIENT_EPISODE") && XSD.Tables["PAT_PATIENT_EPISODE"].Rows.Count > 0)
                {
                    XSD.Tables["PAT_PATIENT_EPISODE"].Rows[0]["ADMISSION_NO"] = DBNull.Value;
                    XSD.Tables["PAT_PATIENT_EPISODE"].Rows[0]["ISVALID"] = Validity.Valid;
                    if (IsPatientIP())
                    {
                        XSD.Tables["PAT_PATIENT_EPISODE"].Rows[0]["EPISODE_STATUS"] = EpisodeStatus.IP;
                    }
                }
                if (XSD.Tables.Contains("PAT_PATIENT_VISIT") && XSD.Tables["PAT_PATIENT_VISIT"].Rows.Count > 0)
                {
                    if (IsPatientIP())
                    {
                        XSD.Tables["PAT_PATIENT_VISIT"].Rows[0]["VISIT_TYPE"] = VisitMode.IP;
                    }
                }
                if (XSD.Tables.Contains("PAT_PATIENT_EPISODE_HISTORY") && XSD.Tables["PAT_PATIENT_EPISODE_HISTORY"].Rows.Count > 0)
                {
                    XSD.Tables["PAT_PATIENT_EPISODE_HISTORY"].Rows[0]["ADMISSION_NO"] = DBNull.Value;
                    XSD.Tables["PAT_PATIENT_EPISODE_HISTORY"].Rows[0]["ISVALID"] = Validity.Valid;
                }

            }
            catch (Exception)
            {

                throw;
            }


        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="XSD"></param>
        /// <param name="drDetails"></param>
        private void CreateRadioloryReportData(DataSet XSD, DataRow drDetails)
        {
            if (SelectedServiceType == (int)ServiceType.Investigation &&
                BillData.Tables["BILL_COMMON_DETAILS"].Columns.Contains("PACS_INTEGRATION") &&
                Convert.ToString(BillData.Tables["BILL_COMMON_DETAILS"].Rows[0]["PACS_INTEGRATION"]).Equals("1"))
            {
                //For pacs
                DataTable dt = CommonData.GetLookupData("BASE CATEGORY");
                if (dt != null && dt.Rows.Count > 0)
                {
                    DataRow[] rows = dt.Select("FIELD2='" + Convert.ToInt16(BaseCategory.Radiology) + "'");
                    if (rows.Length > 0 &&
                       (BillData.Tables["INV_PAT_BILLING"].Select("INV_PARENT_CATEGORY_ID=" + Convert.ToInt64(rows[0]["LOOKUP_VALUE"])).Length > 0 ||
                       (BillData.Tables["INV_BILL_PROFILE_SERVICE"].Columns.Contains("PARENT_INV_CATEGORY_ID") &&
                       BillData.Tables["INV_BILL_PROFILE_SERVICE"].Select("PARENT_INV_CATEGORY_ID=" + Convert.ToInt64(rows[0]["LOOKUP_VALUE"])).Length > 0)))
                    {
                        ///adding lokkup data
                        dtTemp = CommonData.GetLookupData("INVESTIGATION MODALITY");
                        if (dtTemp != null && dtTemp.Rows.Count > 0)
                        {
                            dtTemp.TableName = "INVESTIGATION_MODALITY";
                            XSD.Tables.Add(dtTemp);
                        }
                        drDetails["RADIOLOGY_CATEGORY_ID"] = Convert.ToInt64(rows[0]["LOOKUP_VALUE"]);
                        DataRow[] drRows = null;
                        DataTable dtApplicationSettings = CommonData.dsGlobal.Tables["GEN_APPLICATION_SETTING"].Clone();
                        dtApplicationSettings.TableName = "GEN_APPLICATION_SETTINGS";
                        drRows = CommonData.dsGlobal.Tables["GEN_APPLICATION_SETTING"].Select("TRIM(SETTING)='HL7 SENDING FACILITY'");
                        if (drRows != null && drRows.Length > 0)
                        {
                            dtApplicationSettings.ImportRow(drRows[0]);
                        }
                        drRows = CommonData.dsGlobal.Tables["GEN_APPLICATION_SETTING"].Select("TRIM(SETTING)='HL7 SENDING APPLICATION'");
                        if (drRows != null && drRows.Length > 0)
                        {
                            dtApplicationSettings.ImportRow(drRows[0]);
                        }
                        drRows = CommonData.dsGlobal.Tables["GEN_APPLICATION_SETTING"].Select("TRIM(SETTING)='MU HL7 SENDING COUNTRY'");
                        if (drRows != null && drRows.Length > 0)
                        {
                            dtApplicationSettings.ImportRow(drRows[0]);
                        }
                        drRows = CommonData.dsGlobal.Tables["GEN_APPLICATION_SETTING"].Select("TRIM(SETTING)='PACS HL7 MESSAGES FILE LOCATION'");
                        if (drRows != null && drRows.Length > 0)
                        {
                            dtApplicationSettings.ImportRow(drRows[0]);
                        }
                        drRows = CommonData.dsGlobal.Tables["GEN_APPLICATION_SETTING"].Select("TRIM(SETTING)='PACS CHANNEL ID'");
                        if (drRows != null && drRows.Length > 0)
                        {
                            dtApplicationSettings.ImportRow(drRows[0]);
                        }
                        drRows = CommonData.dsGlobal.Tables["GEN_APPLICATION_SETTING"].Select("TRIM(SETTING)='HL7 REMOTING SERVER'");
                        if (drRows != null && drRows.Length > 0)
                        {
                            dtApplicationSettings.ImportRow(drRows[0]);
                        }
                        drRows = CommonData.dsGlobal.Tables["GEN_APPLICATION_SETTING"].Select("TRIM(SETTING)='PACS OUTSIDER SUFFIX'");
                        if (drRows != null && drRows.Length > 0)
                        {
                            dtApplicationSettings.ImportRow(drRows[0]);
                        }
                        drRows = CommonData.dsGlobal.Tables["GEN_APPLICATION_SETTING"].Select("TRIM(SETTING)='PACS MESSAGES PORT SENDING'");
                        if (drRows != null && drRows.Length > 0)
                        {
                            dtApplicationSettings.ImportRow(drRows[0]);
                        }
                        drRows = CommonData.dsGlobal.Tables["GEN_APPLICATION_SETTING"].Select("TRIM(SETTING)='PACS HL7 MESSAGE FILE SAVING'");
                        if (drRows != null && drRows.Length > 0)
                        {
                            dtApplicationSettings.ImportRow(drRows[0]);
                        }
                        XSD.Tables.Add(dtApplicationSettings);
                    }
                    else
                    {
                        drDetails["RADIOLOGY_CATEGORY_ID"] = DBNull.Value;
                    }
                }
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="drDetails"></param>
        private void MultipleSiteIDImplementation(DataRow drDetails)
        {
            try
            {
                if (drDetails != null)
                {
                    DataRow[] drSetting = null;
                    if (SelectedServiceType == (int)ServiceType.Investigation)
                    {
                        drSetting = CommonData.GetLookupData("MULTIPLE SITE SERVICES").Select("FIELD1="
                            + (int)ServiceType.Consultation + "AND FIELD2=" + drDetails["GEN_MAST_DEPARTMENT_ID"]);
                    }
                    else if (SelectedServiceType == (int)ServiceType.Pharmacy)
                    {
                        drSetting = CommonData.GetLookupData("MULTIPLE SITE SERVICES").Select("FIELD1="
                            + (int)ServiceType.Pharmacy + "AND FIELD2=" + SelectedLabOrSubLocationValue);
                    }
                    if (drSetting != null && drSetting.Length > 0)
                    {
                        drDetails["SITE_ID"] = drSetting[0]["LOOKUP_VALUE"];
                    }
                    else
                    {
                        drSetting = CommonData.GetLookupData("HOSPITAL SITE ID").Select("FIELD2=1");//Default Site ID
                        if (drSetting.Length > 0)
                        {
                            drDetails["SITE_ID"] = drSetting[0]["LOOKUP_VALUE"];
                        }
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        private bool IsPatientIP()
        {
            dtTemp = GetPatientVisit();
            //dtVisit = dtTemp;
            return (dtTemp != null && dtTemp.Rows.Count > 0 && Convert.ToInt16(dtTemp.Rows[0]["VISIT_TYPE"]) == (int)VisitMode.IP) ? true : false;
        }
        private bool IsPatientIP(DataTable dtTemp)
        {
            if (dtTemp == null)
            {
                dtTemp = GetPatientVisit();
            }
            return (dtTemp != null && dtTemp.Rows.Count > 0 && Convert.ToInt16(dtTemp.Rows[0]["VISIT_TYPE"]) == (int)VisitMode.IP) ? true : false;
        }
        /// <summary>
        /// PatientEpisode Property
        /// </summary>
        private DataTable dtpatientEpisode;
        public DataTable dtPatientEpisodefromPopup   // datatable storing episode pop up
        {
            get { return dtpatientEpisode; }
            set
            {
                dtpatientEpisode = value;
                OnPropertyChanged("dtPatientEpisodefromPopup");//Implement INotifyPropertyChanged
            }
        }

        private bool ValidateProfile(long ServiceId)
        {
            bool isSuccess = true;
            if (EditService == null && BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["ISPROFILE"] != DBNull.Value
                && Convert.ToInt16(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["ISPROFILE"]) == 1
                && BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_INV_ORDER_ID"] == DBNull.Value
                && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount()
                && BillData.Tables["INV_PAT_BILLING"].Select("INV_MAST_SERVICE_ID=" + ServiceId).Length > 0)
            {
                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                    "Profile service already added. ", MessageBoxButtonType.OK, MessageBoxImages.Information);
                isMultipleServiceChangeBlock = 3; //Speed Improve
                ClearService();
                isMultipleServiceChangeBlock = 0; //Speed Improve
                isSuccess = false;
            }
            return isSuccess;
        }

        /// <summary>
        /// Validates the bill.
        /// </summary>
        /// <returns></returns>
        private bool ValidateBill()
        {
            try
            {
                bool isProceed = true;
                StringBuilder strLabValid = new StringBuilder();
                StringBuilder strLabOPCredit = new StringBuilder();
                StringBuilder strLabIPCredit = new StringBuilder();
                StringBuilder strLabAccHead = new StringBuilder();
                decimal CashAmt = Medilogics.General.Control.Common.MathRound(Convert.ToString(BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["CASH"]) == ""
                    ? 0 : Convert.ToDecimal(BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["CASH"]), CommonData.DecimalPlace);
                decimal TotalAmt = Medilogics.General.Control.Common.MathRound(Convert.ToString(BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["TOTAL"]) == ""
                    ? 0 : Convert.ToDecimal(BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["TOTAL"]), CommonData.DecimalPlace);
                decimal AdvanceWithdrawAmt = Medilogics.General.Control.Common.MathRound(Convert.ToString(BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["ADVANCE"]) == ""
                    ? 0 : Convert.ToDecimal(BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["ADVANCE"]), CommonData.DecimalPlace);
                decimal AdvanceAmt = Medilogics.General.Control.Common.MathRound(Convert.ToString(BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["ADVANCE_AMOUNT"]) == ""
                    ? 0 : Convert.ToDecimal(BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["ADVANCE_AMOUNT"]), CommonData.DecimalPlace);
                decimal ReturnAmt = Medilogics.General.Control.Common.MathRound(Convert.ToString(BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["RETURN_AMOUNT"]) == ""
                    ? 0 : Convert.ToDecimal(BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["RETURN_AMOUNT"]), CommonData.DecimalPlace);
                decimal ToCollect = Medilogics.General.Control.Common.MathRound(Convert.ToString(BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["TOBECOLLECTED"]) == ""
                    ? 0 : Convert.ToDecimal(BillData.Tables["RECEIPT_DATA_BIND"].Rows[0]["TOBECOLLECTED"]), CommonData.DecimalPlace);
                MainBillingShared objMainBillingShared = new MainBillingShared();
                DataTable dtShiftStatus = objMainBillingShared.FetchShiftOpenStatus(CommonData.LoggedInUser);
                if (isProceed && dtShiftStatus != null && dtShiftStatus != null && dtShiftStatus.Rows.Count > 0)
                {
                    DataRow[] drShiftStatus = dtShiftStatus.Select("STATUS IN (1)");
                    if (drShiftStatus.Count() == 0)
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                            "Please open shift to continue", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        isProceed = false;
                    }
                    else if (drShiftStatus.Count() > 0)
                    {
                        AccShiftOpenID = drShiftStatus[0]["ACC_SHIFT_OPEN_ID"] != DBNull.Value ? Convert.ToInt64(drShiftStatus[0]["ACC_SHIFT_OPEN_ID"]) : 0;
                    }
                }
                if (isProceed && (SelectedProviderValue == null || SelectedProviderIDValue == string.Empty))
                {
                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                               "Please select the provider", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    isProceed = false;
                }
                // Checking Encounter is reviewed
                //if (isProceed && SelectedEncounterDetails != null)
                //{
                if (isProceed && SelectedEncounterDetails != null && IsFromResubmission == false)
                {
                    DataTable DtCriteria = new DataTable();
                    DtCriteria.Columns.Add("PAT_FIN_ENCOUNTER_ID");
                    UICommonMethods objUICommonMethods = new UICommonMethods();
                    DtCriteria.Rows.Add(SelectedEncounterDetails["PAT_FIN_ENCOUNTER_ID"]);
                    if (SelectedServiceType == (int)ServiceType.Investigation && !objUICommonMethods.CheckCoderReviewed(DtCriteria))
                        isProceed = false;
                }
                // Checking Encounter is reviewed,End
                if (isProceed && IsFromEMRBilling && BillData != null && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
                {
                    var QueryEncounter = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => IfNullReturnZero(x["SERVICE_TYPE"]) == 1).Select(x => x);
                    if (QueryEncounter.Any())
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                               "Encounter billing not allowed to bill here", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        isProceed = false;
                    }
                }
                //Added by Saranya for Birth Registration
                ////if (isProceed && IsPatientIP() && !IsIPClosedEncounterSelected)
                DataTable dtTempVisitData = GetPatientVisit();
                if (isProceed && IsPatientIP(dtTempVisitData)) //Speed Improve
                {
                    DataTable dtCriteria = new DataTable();
                    dtCriteria.Columns.Add("MRNO");
                    dtCriteria.Columns.Add("VISIT_NO");
                    dtCriteria.Columns.Add("ISINPATIENT");
                    dtCriteria.Rows.Add();
                    dtCriteria.Rows[0]["MRNO"] = PatientInformation.Rows[0]["MRNO"];
                    dtCriteria.Rows[0]["VISIT_NO"] = dtTempVisitData.Rows[0]["VISIT_NO"];
                    dtCriteria.Rows[0]["ISINPATIENT"] = 1;
                    int mode = 6;
                    MainADTShared objMainADTShared = new MainADTShared();
                    DataTable dtBedDetails = objMainADTShared.FetchBedDetails(dtCriteria, mode);
                    if (dtBedDetails.Rows.Count == 0)
                    {
                        giMessageBox.Show(CommonData.MESSAGEHEADER, "Patient has not been allotted bed.Admit patient to continue billing",
                            MessageBoxButtonType.OK, MessageBoxImages.Information);
                        isProceed = false;
                    }
                    if (isProceed)
                    {
                        if (BillData.Tables.Contains("INV_PAT_BILLING") && BillData.Tables["INV_PAT_BILLING"] != null
                            && BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0
                            && BillData.Tables["INV_PAT_BILLING"].Columns.Contains("SERVICE_TYPE")
                            && BillData.Tables["INV_PAT_BILLING"].Rows[0]["SERVICE_TYPE"] != DBNull.Value
                            && Convert.ToInt64(BillData.Tables["INV_PAT_BILLING"].Rows[0]["SERVICE_TYPE"]) == (int)ServiceType.ADT)
                        {
                            DataTable dtCriteriaTableTemp = new DataTable();
                            dtCriteriaTableTemp.Columns.Add("MRNO");
                            dtCriteriaTableTemp.Columns.Add("MODE", typeof(int));
                            dtCriteriaTableTemp.Columns.Add("VISIT_NO", typeof(Int64));
                            dtCriteriaTableTemp.Columns.Add("BILL_DATE", typeof(DateTime));
                            dtCriteriaTableTemp.Columns.Add("INV_MAST_SERVICE_ID");
                            dtCriteriaTableTemp.Rows.Add();
                            dtCriteriaTableTemp.Rows[0]["MODE"] = 6;
                            dtCriteriaTableTemp.Rows[0]["MRNO"] = PatientInformation != null && PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Rows[0]["MRNO"] != DBNull.Value ? PatientInformation.Rows[0]["MRNO"] : 0;
                            dtCriteriaTableTemp.Rows[0]["VISIT_NO"] = dtTempVisitData.Rows[0]["VISIT_NO"];
                            dtCriteriaTableTemp.Rows[0]["BILL_DATE"] = EncounterEndDate;
                            dtCriteriaTableTemp.Rows[0]["INV_MAST_SERVICE_ID"] = BillData.Tables["INV_PAT_BILLING"].Rows[0]["INV_MAST_SERVICE_ID"];
                            DataTable dtGenTableTemp = objMainADTShared.FetchAdtPatBill(dtCriteriaTableTemp);
                            if (dtGenTableTemp != null && dtGenTableTemp.Rows.Count > 0)
                            {
                                giMessageBox.Show(CommonData.MESSAGEHEADER, "Patient room rent has been billed on " + EncounterEndDate.ToShortDateString() + " for rent bill group " + dtGenTableTemp.Rows[0]["ROOM_BILL_GROUP_NAME"],
                                MessageBoxButtonType.OK, MessageBoxImages.Information);
                                isProceed = false;
                            }
                        }
                    }
                }
                //End
                //Validate if an active episode exist and if episode not selected
                if (isProceed && dtPatientEpisodefromPopup != null && dtPatientEpisodefromPopup.Rows.Count > 0)
                {
                    var query = from dr in dtPatientEpisodefromPopup.AsEnumerable()
                                where dr["START_DATE"] != DBNull.Value && dr["END_DATE"] != DBNull.Value
                                && Convert.ToDateTime(Convert.ToDateTime(dr["START_DATE"]).ToString("dd-MMM-yyyy HH:mm")) <= Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm"))
                                && Convert.ToDateTime(Convert.ToDateTime(dr["END_DATE"]).ToString("dd-MMM-yyyy HH:mm")) >= Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm"))
                                select dr;
                    if (query.Count() > 0 && BillData.Tables.Contains("CON_PAT_BILLING") && BillData.Tables["CON_PAT_BILLING"].KIIsNotNullAndRowCount() &&
                        BillData.Tables["CON_PAT_BILLING"].Rows[0]["ISNEWCASE"] != DBNull.Value && Convert.ToInt16(BillData.Tables["CON_PAT_BILLING"].Rows[0]["ISNEWCASE"]) == 3)//IF FREE NO NEED TO CHECK ACTIVE EPISODE IS SELECTED
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                          "Select an active episode to continue.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        isProceed = false;
                    }
                }
                if (isProceed && SelectedServiceType == -1)
                {
                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                        "Service missing in Encounter/Services section.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    isProceed = false;
                }
                //if (isProceed && !IsSchemeValid())
                if (isProceed && IsPatient && !IsSchemeValid())
                {
                    isProceed = false;
                }
                ///Visit checking
                //if (isProceed && IsPatient && PatientInformation != null && PatientInformation.Rows.Count > 0)//&& !ValidateExcludedICDsForSave()
                //{
                //    isProceed = false;
                //}
                if (isProceed && (SelectedServiceType == (int)ServiceType.Investigation
                    || SelectedServiceType == (int)ServiceType.IncomingService
                    || SelectedServiceType == (int)ServiceType.Pharmacy || SelectedServiceType == (int)ServiceType.Cafeteria))
                {
                    //Valdation move to add click
                    //if (isProceed && SelectedProvider == null && SelectedServiceType != (int)ServiceType.Cafeteria) //!IsBillHolding SelectProvider==null)//
                    //{
                    //    //IsPatient commented  AS said by shamsu sir on 04-jul-2013 for patient and outsider based on setting of IS_PROVIDER_MANDATORY
                    //    if ((SelectedServiceType == (int)ServiceType.Investigation || SelectedServiceType == (int)ServiceType.Pharmacy
                    //        || SelectedServiceType == (int)ServiceType.IncomingService))
                    //    //if (SelectedServiceType == (int)ServiceType.Investigation)
                    //    {
                    //        if (BillData.Tables["INV_PAT_BILLING"].Select("IS_PROVIDER_MANDATORY=1").Length > 0)
                    //        {
                    //            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                    //                "Provider missing in Encounter/Services section.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    //            isProceed = false;
                    //        }
                    //    }
                    //    //AS said by shamsu sir on 04-jul-2013 for patient and outsider based on setting of IS_PROVIDER_MANDATORY
                    //    //commenting
                    //    else if (!IsPatient && SelectedProvider == null && SelectedServiceType != (int)ServiceType.Cafeteria)
                    //    {
                    //        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                    //       "Provider missing in Encounter/Services section.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    //        isProceed = false;
                    //    }
                    //    /// TASK A1
                    //}
                    if (isProceed && (SelectedServiceType == (int)ServiceType.Investigation ||
                        SelectedServiceType == (int)ServiceType.Pharmacy || SelectedServiceType == (int)ServiceType.Cafeteria
                        || SelectedServiceType == (int)ServiceType.IncomingService))
                    {
                        if ((BillData.Tables["INV_PAT_BILLING"] == null || BillData.Tables["INV_PAT_BILLING"].Rows.Count == 0))
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                "Service/medicine missing in Encounter/Services section.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            isProceed = false;
                        }
                    }
                }
                if (EnableVerificationSettingBased && SelectedVisitModeNew == (int)VisitMode.IP && isProceed && IsFromPharmacyPanel)
                {
                    if (BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => IfNullReturnZero(x["VERIFICATION_BTN_VISIBILITY"]) == 1).Count() > 0)
                    {
                        var filter = from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                     where dr.RowState != DataRowState.Deleted && dr["ISVERIFICATION"] != DBNull.Value && dr["IS_VERIFIED"] != DBNull.Value
                                 && dr["ISSALE"] != DBNull.Value && Convert.ToInt16(dr["ISVERIFICATION"]) == 1 && Convert.ToInt16(dr["IS_VERIFIED"]) == 0
                                 && Convert.ToInt16(dr["ISSALE"]) == 0
                                     select dr;
                        if (filter.Count() > 0)
                        {
                            var filterSale = from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                             where dr.RowState != DataRowState.Deleted && IfNullReturnZero(dr["ISSALE"]) == 1
                                             //    (IfNullReturnZero(dr["VERIFICATION_BTN_VISIBILITY"]) == 0
                                             //&& Convert.ToInt16(dr["ISSALE"]) == 1) || (IfNullReturnZero(dr["VERIFICATION_BTN_VISIBILITY"]) == 1
                                             //&& Convert.ToInt16(dr["IS_VERIFIED"]) == 0)
                                             select dr;
                            if (filterSale.Count() > 0)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                "You can do either pharmacy sale or pharmacy verification.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                isProceed = false;
                            }
                            else
                            {
                                if (IfNullReturnZero(IPVerificationLocation) == 0)
                                {
                                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                               "Patient Admitted Room Type is not mapped with any sublocation.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                    isProceed = false;
                                }
                            }
                            var Query = from row in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                        where IfNullReturnZero(Convert.ToInt64(row["QTY"]))==0 && IfNullReturnZero(Convert.ToInt16(row["ISVERIFICATION"]))==1
                                        select row;
                            if (Query.Any())
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "Quantity should be greater than 0", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                isProceed = false;
                            }
                            var filterOmni = from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                             where dr.RowState != DataRowState.Deleted && dr["ISVERIFICATION"] != DBNull.Value && dr["IS_VERIFIED"] != DBNull.Value
                                         && dr["ISSALE"] != DBNull.Value && Convert.ToInt16(dr["ISVERIFICATION"]) == 1 && Convert.ToInt16(dr["IS_VERIFIED"]) == 0
                                         && Convert.ToInt16(dr["ISSALE"]) == 0 && IfNullReturnZero(dr["IS_OMNICELL_ITEM"]) == 1
                                             select dr;
                            if (filterOmni.Any())
                            {
                                foreach (DataRow dromni in filterOmni)
                                {
                                    DataRow[] drRow = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + dromni["INV_MAST_SERVICE_ID"] + "AND SL_NO=" + dromni["SL_NO"]);
                                    if (drRow.Any() && IfNullReturnZero(drRow[0]["IS_HL7_ORDER"]) == 0)
                                    {
                                        if (!AllLabOrSubLocations.KIIsNotNullOrEmpty())
                                        {
                                            FetchAllSubLocations();
                                        }
                                        //LabOrSubLocations changed to AllLabOrSubLocations,modified by mohd adil for live issue correction
                                        //            DataRow[] drLocation = LabOrSubLocations.ToTable().AsEnumerable().Where(x => IfNullReturnZero(x["INCO_MAST_ID"]) == IfNullReturnZero(dromni["SUBLOCATION"]))
                                        //.Select(x => x).ToArray();
                                        DataRow[] drLocation = AllLabOrSubLocations.ToTable().AsEnumerable().Where(x => IfNullReturnZero(x["INCO_MAST_ID"]) == IfNullReturnZero(dromni["SUBLOCATION"]))
                                                               .Select(x => x).ToArray();
                                        if (drLocation.Any() && IfNullReturnZero(drLocation[0]["IS_MACHINE"]) == 0)
                                        {
                                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "The sublocation" + drLocation[0]["NAME"] + "is not mapped with Machine", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                            isProceed = false;
                                        }
                                        else
                                        {
                                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "Omni cell Item should be HL7 order", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                            isProceed = false;
                                        }
                                    }
                                }
                            }
                            foreach (DataRow dr in filter)
                            {
                                DataTable dtTemp = Fetch_PhdtlsOrder(Convert.ToInt64(dr["EMR_PAT_DTLS_INV_ORDER_ID"]));
                                if (dtTemp != null && dtTemp.Rows.Count > 0 && Convert.ToBoolean(dtTemp.Rows[0]["AUTHORIZATION_STATUS"]))
                                {
                                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                               "Medicine(s) already verified by Pharmacist.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                    isProceed = false;
                                    break;
                                }
                            }
                        }
                        else
                        {
                            var filterVerified = from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                                 where dr.RowState != DataRowState.Deleted && (IfNullReturnZero(dr["VERIFICATION_BTN_VISIBILITY"]) == 1 &&
                                                 IfNullReturnZero(dr["ISVERIFICATION"]) == 1 && IfNullReturnZero(dr["IS_VERIFIED"]) == 1 && IfNullReturnZero(dr["ISSALE"]) == 1)
                                                 || (IfNullReturnZero(dr["VERIFICATION_BTN_VISIBILITY"]) == 0 && IfNullReturnZero(dr["ISSALE"]) == 1)
                                                 select dr;
                            if (filterVerified.Count() == 0)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                "Select atleast one item to proceed", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                isProceed = false;
                            }
                            else
                            {
                                var filterLocation = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                                      where dr.RowState != DataRowState.Deleted && dr["SUBLOCATION"] != DBNull.Value
                                                   && dr["ISSALE"] != DBNull.Value && Convert.ToBoolean(dr["ISSALE"])
                                                      select Convert.ToInt16(dr["SUBLOCATION"])).Distinct();
                                if (filterLocation.Any() && filterLocation.Count() > 1)
                                {
                                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                  "Multiple Sublocation billing can't proceed.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                    isProceed = false;
                                }
                                //to check concurrency whether any user changed the verification status at same time
                                var filterVer = from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                                     where dr.RowState != DataRowState.Deleted && (IfNullReturnZero(dr["VERIFICATION_BTN_VISIBILITY"]) == 1 &&
                                                     IfNullReturnZero(dr["ISVERIFICATION"]) == 1 && IfNullReturnZero(dr["IS_VERIFIED"]) == 1 && IfNullReturnZero(dr["ISSALE"]) == 1)
                                                     select dr;
                                if (filterVer.Any())
                                {
                                    foreach (DataRow drQuery in filterVer)
                                    {
                                        DataTable dtTemp = Fetch_PhdtlsOrder(Convert.ToInt64(drQuery["EMR_PAT_DTLS_INV_ORDER_ID"]));
                                        if (dtTemp == null || dtTemp.Rows.Count == 0 || !Convert.ToBoolean(dtTemp.Rows[0]["AUTHORIZATION_STATUS"]))
                                        {
                                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                                               "Please Verify the medicine(s).", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                            isProceed = false;
                                            break;

                                        }
                                    }
                                }
                                //end
                                foreach (DataRow dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"])).Select(x => x))
                                {
                                    if (isProceed && Convert.ToDecimal(dr["QTY"]) == 0)
                                    {
                                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                   "Quantity should be greater than 0", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                        isProceed = false;
                                    }
                                }
                            }
                           
                        }                       
                    }
                    else
                    {
                        var filter = from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                     where dr.RowState != DataRowState.Deleted && dr["ISSALE"] != DBNull.Value
                                     && Convert.ToInt16(dr["ISSALE"]) == 1
                                     select dr;
                        if (filter.Count() == 0)
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                            "Select atleast one item to proceed", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            isProceed = false;
                        }
                        foreach (DataRow dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"])).Select(x => x))
                        {
                            if (isProceed && Convert.ToDecimal(dr["QTY"]) == 0)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                           "Quantity should be greater than 0", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                isProceed = false;
                            }
                        }
                    }
                    if (isProceed)
                    {
                        var filterPatDtls = from dr in BillData.Tables["PH_PAT_DTLS_ORDER"].AsEnumerable()
                                            where dr.RowState != DataRowState.Deleted && dr["IS_HL7_ORDER"] != DBNull.Value
                                                //&& IfNullReturnZero(dr["VERIFICATION_BTN_VISIBILITY"]) == 1 && IfNullReturnZero(dr["IS_VERIFIED"]) == 1
                                     && Convert.ToInt16(dr["IS_HL7_ORDER"]) == 2
                                            select dr;
                        if (filterPatDtls.Any())
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                               "Omnicell Id not set for this location", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            isProceed = false;
                        }
                        else
                        {
                            var filterSublocation = from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                                    where dr.RowState != DataRowState.Deleted
                                                    && IfNullReturnZero(dr["ISVERIFICATION"]) == 1
                                             && IfNullReturnZero(dr["SUBLOCATION"]) == 0
                                                    select dr;
                            if (filterSublocation.Any())
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                   "Invalid Sublocation.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                isProceed = false;
                            }
                        }
                    }
                }
                if (!EnableVerificationSettingBased && isProceed && (SelectedServiceType == (int)ServiceType.Investigation || SelectedServiceType == (int)ServiceType.Pharmacy) && BillData != null
                    && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
                {
                    var filter = from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                 where dr.RowState != DataRowState.Deleted && dr["ISSALE"] != DBNull.Value
                                 && Convert.ToInt16(dr["ISSALE"]) == 1
                                 select dr;
                    if (filter.Count() == 0)
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                        "Select atleast one item to proceed", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        isProceed = false;
                    }
                    foreach (DataRow dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"])).Select(x => x))
                    {
                        if (isProceed && Convert.ToDecimal(dr["QTY"]) == 0)
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                       "Quantity should be greater than 0", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            isProceed = false;
                        }
                    }
                }
                if (SelectedServiceType == (int)ServiceType.Pharmacy)
                {
                    StringBuilder strBatch = new StringBuilder();
                    StringBuilder strUnitName = new StringBuilder();
                    StringBuilder strQtyMisMatch = new StringBuilder();
                    if (isProceed && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
                    {
                        foreach (DataRow drTemp in BillData.Tables["INV_PAT_BILLING"].Rows)
                        {
                            if (drTemp["ISSALE"] != DBNull.Value && Convert.ToInt16(drTemp["ISSALE"]) == 1 &&
                               string.IsNullOrEmpty(drTemp["BATCHNO"].ToString()))
                            {
                                if (!strBatch.ToString().Contains(drTemp["NAME"].ToString()))
                                {
                                    strBatch.Append(drTemp["NAME"]);
                                    strBatch.Append(",");
                                }
                            }
                            if (drTemp["ISSALE"] != DBNull.Value && Convert.ToInt16(drTemp["ISSALE"]) == 1 &&
                                                              (string.IsNullOrEmpty(drTemp["PH_UNIT_SALES_CONVERSION_ID"].ToString()) || string.IsNullOrEmpty(drTemp["SALES_UNIT_NAME"].ToString())))
                            {
                                if (!strUnitName.ToString().Contains(drTemp["NAME"].ToString()))
                                {
                                    strUnitName.Append(drTemp["NAME"]);
                                    strUnitName.Append(",");
                                }
                            }
                            if (drTemp["ISSALE"] != DBNull.Value && Convert.ToInt16(drTemp["ISSALE"]) == 1 &&
                                                             ((IfNullReturnZero(drTemp["QTY"]) * IfNullReturnZero(drTemp["BASE_QTY"])) != IfNullReturnZero(drTemp["SALES_ACTUAL_QTY"])))
                            {
                                if (!strQtyMisMatch.ToString().Contains(drTemp["NAME"].ToString()))
                                {
                                    strQtyMisMatch.Append(drTemp["NAME"]);
                                    strQtyMisMatch.Append(",");
                                }
                            }
                        }
                        if (strBatch.ToString() != string.Empty)
                        {
                            strBatch.Remove(strBatch.Length - 1, 1);
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                            "Batch missing please re-select the following items.\n" + strBatch.ToString(), MessageBoxButtonType.OK, MessageBoxImages.Information);
                            strBatch.Length = 0;
                            return false;
                        }
                        if (strUnitName.ToString() != string.Empty)
                        {
                            strUnitName.Remove(strUnitName.Length - 1, 1);
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                            "Unit of Qty. is missing please re-select the following items.\n" + strUnitName.ToString(), MessageBoxButtonType.OK, MessageBoxImages.Information);
                            strUnitName.Length = 0;
                            return false;
                        }
                        if (strQtyMisMatch.ToString() != string.Empty)
                        {
                            strQtyMisMatch.Remove(strQtyMisMatch.Length - 1, 1);
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                            "Qty mismatch please re-select the following items.\n" + strQtyMisMatch.ToString(), MessageBoxButtonType.OK, MessageBoxImages.Information);
                            strQtyMisMatch.Length = 0;
                            return false;
                        }
                        if (isProceed) // this validation is for checking whether all additives are selected or not
                        {
                            if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail") && EMROrderRelation.Tables["Detail"].KIIsNotNullAndRowCount() && EMROrderRelation.Tables["Detail"].Columns.Contains("REF_DTLS_PH_ORDER_ID"))
                            {
                                var query = EMROrderRelation.Tables["Detail"].AsEnumerable().Where(x => Convert.ToInt16(IfNullReturnZero(x["IS_ADDITIVE"])) == 1 && x["REF_DTLS_PH_ORDER_ID"] == DBNull.Value).Select(x => x);

                                if (query.Any())
                                {
                                    foreach (DataRow dr in query)
                                    {

                                        decimal selsalecount = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => IfNullReturnZero(x["IS_ADDITIVE"]) == 1 && (IfNullReturnZero(x["EMR_PAT_DTLS_INV_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"]) || IfNullReturnZero(x["REF_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"])) && Convert.ToBoolean(IfNullReturnZero(x["ISSALE"]))).Count();
                                        decimal Totcount = EMROrderRelation.Tables["Detail"].AsEnumerable().Where(x => Convert.ToInt16(IfNullReturnZero(x["IS_ADDITIVE"])) == 1 && (IfNullReturnZero(x["EMR_PAT_DTLS_INV_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"]) || IfNullReturnZero(x["REF_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"]))).Count();
                                        decimal selVerificationcount = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => IfNullReturnZero(x["IS_ADDITIVE"]) == 1 && (IfNullReturnZero(x["EMR_PAT_DTLS_INV_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"]) || IfNullReturnZero(x["REF_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"])) && Convert.ToBoolean(IfNullReturnZero(x["ISVERIFICATION"])) && Convert.ToInt16(IfNullReturnZero(x["IS_VERIFIED"]))==0).Count();
                                        //for checking, complete additive group is selected or not for sale
                                        if (selsalecount > 0 && (selsalecount < Totcount))
                                        {
                                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                                 "Please select all additives to continue", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                            isProceed = false;
                                            break;
                                        }
                                        //for checking, complete additive group is selected or not for verification
                                        if (selVerificationcount > 0 && (selVerificationcount < Totcount))
                                        {
                                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                                 "Please select all additives to continue", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                            isProceed = false;
                                            break;

                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                StringBuilder strBilling = new StringBuilder();
                if (isProceed && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
                {
                    foreach (DataRow drTemp in BillData.Tables["INV_PAT_BILLING"].Rows)
                    {
                        if (drTemp["ISSALE"] != DBNull.Value && Convert.ToInt16(drTemp["ISSALE"]) == 1
                            && drTemp["NET_AMOUNT"] != DBNull.Value && Convert.ToDecimal(drTemp["NET_AMOUNT"]) > 0
                            && drTemp["PATIENT_SHARE"] != DBNull.Value && Convert.ToDecimal(drTemp["PATIENT_SHARE"]) == 0
                            && drTemp["SPONSOR"] != DBNull.Value && Convert.ToDecimal(drTemp["SPONSOR"]) == 0)
                        {
                            if (!strBilling.ToString().Contains(drTemp["NAME"].ToString()))
                            {
                                strBilling.Append(drTemp["NAME"]);
                                strBilling.Append(",");
                            }
                        }
                    }
                    if (strBilling.ToString() != string.Empty)
                    {
                        strBilling.Remove(strBilling.Length - 1, 1);
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                        "Please re-select the following items.\n" + strBilling.ToString(), MessageBoxButtonType.OK, MessageBoxImages.Information);
                        strBilling.Length = 0;
                        return false;
                    }
                }

                if (isProceed && AdvanceWithdrawAmt > TotalAmt)
                {
                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                        "Advance withdrawal amount should not exceed bill amount", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    isProceed = false;
                }
                if (isProceed && AdvanceWithdrawAmt > AdvanceAmt)
                {
                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                        "Advance withdrawal amount should not exceed advance amount", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    isProceed = false;
                }
                if (isProceed && EditService != null)
                {
                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                        "Complete the edit operation", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    isProceed = false;
                }
                //if (isProceed && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
                //{
                //    var filter = from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                //                 where dr.RowState != DataRowState.Deleted && dr["ISSALE"] != DBNull.Value && Convert.ToInt16(dr["ISSALE"]) == 1
                //                 && dr["NET_AMOUNT"] != DBNull.Value && Convert.ToDecimal(dr["NET_AMOUNT"]) < 0
                //                 select dr;
                //    if (filter.Count() > 0)
                //    {
                //        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                //        "Invalid amount", MessageBoxButtonType.OK, MessageBoxImages.Information);
                //        isProceed = false;
                //    }
                //}
                if (isProceed && SelectedServiceType == (int)ServiceType.Investigation)
                {
                    if (dsPackageMstDtls == null || dsPackageMstDtls.Tables["PKG_MAST_PATIENT"] == null || dsPackageMstDtls.Tables["PKG_MAST_PATIENT"].Rows.Count == 0)
                    {
                        MainBilling objMainBilling = new MainBilling();
                        DataTable Criteria = new DataTable("PackageCriteria");
                        Criteria.Columns.Add("MRNO");
                        Criteria.Columns.Add("MODE");
                        Criteria.Columns.Add("PKG_MAST_PATIENT_IDS");
                        DataRow drCriteria = Criteria.NewRow();
                        if (PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Columns.Contains("ROOM") && PatientInformation.Rows[0]["ROOM"] == DBNull.Value)
                        {
                            drCriteria["MRNO"] = PatientInformation.Rows[0]["MRNO"];
                            drCriteria["MODE"] = 1;
                            Criteria.Rows.Add(drCriteria);
                            dsPackageMstDtls = objMainBilling.FetchPackageMastDtls(Criteria);
                        }
                    }
                    if (dsPackageMstDtls != null && dsPackageMstDtls.Tables["PKG_MAST_PATIENT"].KIIsNotNullAndRowCount())
                    {
                        var packageExist = from drMast in dsPackageMstDtls.Tables["PKG_MAST_PATIENT"].AsEnumerable()
                                           where drMast["PKG_SERVICE_ID"] != DBNull.Value && drMast["PKG_STATUS"] != DBNull.Value
                                           && (Convert.ToInt16(drMast["PKG_STATUS"]) == (int)PackageStatus.Billed
                                           || Convert.ToInt16(drMast["PKG_STATUS"]) == (int)PackageStatus.Open)
                                           join drDtls in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                           on Convert.ToString(drMast["PKG_SERVICE_ID"]) equals Convert.ToString(drDtls["INV_MAST_SERVICE_ID"])
                                           select drMast;
                        if (packageExist.Count() > 0)
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                packageExist.CopyToDataTable().Rows[0]["PKG_SERVICE_NAME"] + " is currently active for this patient",
                                MessageBoxButtonType.OK, MessageBoxImages.Information);
                            isProceed = false;
                        }
                    }
                }
                if (isProceed && IsPackage)
                {
                    if ((SelectedServiceType == (int)ServiceType.Consultation || SelectedServiceType == (int)ServiceType.Investigation
                        || SelectedServiceType == (int)ServiceType.Cafeteria)
                    && dsPackageMstDtls != null && dsPackageMstDtls.Tables["PKG_MAST_PATIENT"].KIIsNotNullAndRowCount())
                    {
                        DataRow[] drPackageExist = dsPackageMstDtls.Tables["PKG_MAST_PATIENT"].Select("PKG_SERVICE_ID="
                            + Convert.ToInt64(SelectedPackageItem.Row["PKG_SERVICE_ID"]));
                        if (drPackageExist.Length > 0)
                        {
                            if (drPackageExist[0]["PKG_STATUS"] != DBNull.Value
                            && Convert.ToInt16(drPackageExist[0]["PKG_STATUS"]) == (int)PackageStatus.Quit)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                    "Selected package has been quit.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                isProceed = false;
                            }
                            string str = "PACKAGE_GRACE_PERIOD_IN_DAYS";
                            DataRow[] drData = CommonData.dsGlobal.Tables["GEN_APPLICATION_SETTING"].Select("SETTING = '" + str + "'");
                            int intGracePeriod = 0;
                            if (drData.Length > 0 && (drData[0]["VALUE"]) != DBNull.Value)
                            {
                                intGracePeriod = Convert.ToInt32(drData[0]["VALUE"]);
                            }
                            if (isProceed && drPackageExist[0]["END_DATE"] != DBNull.Value
                                && Convert.ToDateTime(Convert.ToDateTime(Convert.ToDateTime(drPackageExist[0]["END_DATE"]).AddDays(intGracePeriod).ToString("dd-MMM-yyyy HH:mm"))) < Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")))
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "Selected package expired on "
                                    + Convert.ToDateTime(drPackageExist[0]["END_DATE"]).AddDays(intGracePeriod).ToString("dd-MMM-yyyy HH:mm"),
                                    MessageBoxButtonType.OK, MessageBoxImages.Information);
                                isProceed = false;
                            }
                        }
                    }
                }
                if (isProceed && dsServiceData != null && dsServiceData.Tables["INV_MAST_SERVICE"].KIIsNotNullAndRowCount())
                {
                    if (isProceed && SelectedVisitMode == VisitMode.OPCASH && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
                    {
                        StringBuilder sbStrPackage = new StringBuilder();
                        foreach (DataRow dr in BillData.Tables["INV_PAT_BILLING"].Rows)
                        {
                            if (dr["ISPACKAGE_SERVICE"] != DBNull.Value && Convert.ToInt16(dr["ISPACKAGE_SERVICE"]) == 1)
                            {
                                var filter = from drTemp in dsServiceData.Tables["INV_MAST_SERVICE"].AsEnumerable()
                                             where drTemp.RowState != DataRowState.Deleted && drTemp["PRIMARY_ID"] != DBNull.Value && dr["INV_MAST_SERVICE_ID"] != DBNull.Value
                                             && Convert.ToInt64(drTemp["PRIMARY_ID"]) == Convert.ToInt64(dr["INV_MAST_SERVICE_ID"]) && drTemp["ISOP_PACKAGE"] != DBNull.Value
                                             && Convert.ToInt16(drTemp["ISOP_PACKAGE"]) == 1
                                             select dr;
                                if (filter.Count() == 0)
                                {
                                    sbStrPackage.Append(dr["NAME"]);
                                    sbStrPackage.Append(",");
                                }
                            }
                        }
                        if (SelectedVisitMode == VisitMode.OPCASH && sbStrPackage.Length > 0)
                        {
                            sbStrPackage.Remove(sbStrPackage.Length - 1, 1);
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                "OP cash facility dose not exist for " + sbStrPackage.ToString() + " Package", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            isProceed = false;
                        }
                    }
                    if (isProceed && SelectedVisitMode == VisitMode.OPCREDIT && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
                    {
                        StringBuilder sbStrPackage = new StringBuilder();
                        foreach (DataRow dr in BillData.Tables["INV_PAT_BILLING"].Rows)
                        {
                            if (dr["ISPACKAGE_SERVICE"] != DBNull.Value && Convert.ToInt16(dr["ISPACKAGE_SERVICE"]) == 1)
                            {
                                var filter = from drTemp in dsServiceData.Tables["INV_MAST_SERVICE"].AsEnumerable()
                                             where drTemp.RowState != DataRowState.Deleted && drTemp["PRIMARY_ID"] != DBNull.Value && dr["INV_MAST_SERVICE_ID"] != DBNull.Value
                                             && Convert.ToInt64(drTemp["PRIMARY_ID"]) == Convert.ToInt64(dr["INV_MAST_SERVICE_ID"]) && drTemp["ISOPCREDIT_PACKAGE"] != DBNull.Value
                                             && Convert.ToInt16(drTemp["ISOPCREDIT_PACKAGE"]) == 1
                                             select dr;
                                if (filter.Count() == 0)
                                {
                                    sbStrPackage.Append(dr["NAME"]);
                                    sbStrPackage.Append(",");
                                }
                            }
                        }
                        if (SelectedVisitMode == VisitMode.OPCREDIT && sbStrPackage.Length > 0)
                        {
                            sbStrPackage.Remove(sbStrPackage.Length - 1, 1);
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                "OP credit facility dose not exist for " + sbStrPackage.ToString() + " Package", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            isProceed = false;
                        }
                    }
                    if (isProceed && SelectedVisitMode == VisitMode.IP && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
                    {
                        StringBuilder sbStrPackage = new StringBuilder();
                        foreach (DataRow dr in BillData.Tables["INV_PAT_BILLING"].Rows)
                        {
                            if (dr["ISPACKAGE_SERVICE"] != DBNull.Value && Convert.ToInt16(dr["ISPACKAGE_SERVICE"]) == 1)
                            {
                                var filter = from drTemp in dsServiceData.Tables["INV_MAST_SERVICE"].AsEnumerable()
                                             where drTemp.RowState != DataRowState.Deleted && drTemp["PRIMARY_ID"] != DBNull.Value && dr["INV_MAST_SERVICE_ID"] != DBNull.Value
                                             && Convert.ToInt64(drTemp["PRIMARY_ID"]) == Convert.ToInt64(dr["INV_MAST_SERVICE_ID"]) && drTemp["ISIP_PACKAGE"] != DBNull.Value
                                             && Convert.ToInt16(drTemp["ISIP_PACKAGE"]) == 1
                                             select dr;
                                if (filter.Count() == 0)
                                {
                                    sbStrPackage.Append(dr["NAME"]);
                                    sbStrPackage.Append(",");
                                }
                            }
                        }
                        if (SelectedVisitMode == VisitMode.IP && sbStrPackage.Length > 0)
                        {
                            sbStrPackage.Remove(sbStrPackage.Length - 1, 1);
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                "IP facility dose not exist for " + sbStrPackage.ToString() + " Package", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            isProceed = false;
                        }
                    }
                }
                if (isProceed && IsPatientIP(dtTempVisitData)) //Speed Improve
                {
                    StringBuilder sbStrPackage = new StringBuilder();
                    if ((SelectedVisitMode == VisitMode.OPCASH || SelectedVisitMode == VisitMode.OPCREDIT) && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
                    {
                        foreach (DataRow dr in BillData.Tables["INV_PAT_BILLING"].Rows)
                        {

                            if (dr["ISPACKAGE_SERVICE"] != DBNull.Value && Convert.ToInt16(dr["ISPACKAGE_SERVICE"]) == 1)
                            {
                                sbStrPackage.Append(dr["NAME"]);
                                sbStrPackage.Append(",");
                            }
                        }
                        if (SelectedVisitMode == VisitMode.OPCASH && sbStrPackage.Length > 0)
                        {
                            sbStrPackage.Remove(sbStrPackage.Length - 1, 1);
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                "OP cash facility dose not exist for " + sbStrPackage.ToString() + " Package", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            isProceed = false;
                        }
                        else if (SelectedVisitMode == VisitMode.OPCREDIT && sbStrPackage.Length > 0)
                        {
                            sbStrPackage.Remove(sbStrPackage.Length - 1, 1);
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                "OP credit facility dose not exist for " + sbStrPackage.ToString() + " Package", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            isProceed = false;
                        }
                    }
                }
                if (isProceed && (SelectedOpenEpisodeID == string.Empty || SelectedOpenEpisodeID == null)
               && (SelectedEncounterNo != string.Empty && SelectedEncounterNo != null)
               && BillData != null && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount()
               && !IsCPOEOrderExist
               && SelectedVisitMode == VisitMode.OPCREDIT
               && BillData.Tables["INV_PAT_BILLING"].Select("SERVICE_TYPE=" + (int)ServiceType.Consultation).Length == 0
               && filterPatientEpisode.KIIsNotNullAndRowCount()
               && SelectedEncounterDetails != null && SelectedEncounterDetails["ISNONCONSULTENCOUNTER"] != DBNull.Value
               && Convert.ToInt16(SelectedEncounterDetails["ISNONCONSULTENCOUNTER"]) == 1)
                {
                    var query = from dr in filterPatientEpisode.AsEnumerable()
                                where dr["EPISODE_STATUS"] != DBNull.Value && Convert.ToInt16(dr["EPISODE_STATUS"]) == 1
                                && dr["ENCOUNTER_STATUS"] != DBNull.Value && Convert.ToInt16(dr["ENCOUNTER_STATUS"]) == 1
                                && (!dr.Table.Columns.Contains("EPISODE_MODE") || (dr["EPISODE_MODE"] != DBNull.Value && Convert.ToInt16(dr["EPISODE_MODE"]) == 1))
                                && dr["PROVIDER_ID"].ToString() == SelectedProviderIDValue
                                && dr["ISVALID"] != DBNull.Value && Convert.ToInt16(dr["ISVALID"]) == 1
                                select dr;
                    // && dr["ISNONCONSULTENCOUNTER"] != DBNull.Value && Convert.ToInt16(dr["ISNONCONSULTENCOUNTER"]) == 0
                    // checking ENCOUNTER_STATUS and ISNONCONSULTENCOUNTER for fixing bug (if an emergency encounter is open, unable to do direct billing)  - Benson,11/08/2014
                    if (query.Count() > 0)
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                              "Emergency Billing can be done with EMR order only.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        isProceed = false;
                    }

                }
                //Encounter exist validation Checking
                //DataTable dtSetting = CommonData.GetDefaultSettings(0, "FO_EPISODE_OPEN_PHARMACY_ORDER"); // This Settings is for Opening Episode during Pharmacy Billing.
                //if (dtSetting != null && dtSetting.Rows.Count > 0 && Convert.ToInt16(dtSetting.Rows[0]["VALUE"]) == 1
                if (DefaultSettings.Values.FO_EPISODE_OPEN_PHARMACY_ORDER
                    && ((SelectedServiceType == (int)ServiceType.Pharmacy && BillData != null && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullOrEmpty()
                    && BillData.Tables["INV_PAT_BILLING"].Select("SERVICE_TYPE=" + (int)ServiceType.Pharmacy + "AND EMR_PAT_DTLS_INV_ORDER_ID IS NOT NULL").Length == 0
                    && (EMROrder == null || EMROrder.Rows.Count == 0)) || SelectedServiceType != (int)ServiceType.Pharmacy))
                {
                    isProceed = EncounterExist(isProceed);
                }
                //if (dtSetting != null && dtSetting.Rows.Count > 0 && Convert.ToInt16(dtSetting.Rows[0]["VALUE"]) == 0) // If above settings is false - no need to open episode on pharmacy billing
                if (!DefaultSettings.Values.FO_EPISODE_OPEN_PHARMACY_ORDER)
                {
                    isProceed = EncounterExist(isProceed);
                }
                if (isProceed && (DtVisitMode == null || DtVisitMode.Rows.Count == 0))
                {
                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                               "Select visit type.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    isProceed = false;
                }
                // Commenting for  Is_EM_SettingsEnabled, 09-07-2015 ,Benson , 30421
                //if (isProceed && BillData != null && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount()
                //    && BillData.Tables["INV_PAT_BILLING"].Select("SERVICE_TYPE=" + (int)ServiceType.Consultation + "AND ISSALE=0").Length > 0)
                //{
                //    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                //              "Please select encounter to proceed.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                //    isProceed = false;
                //}

                if (isProceed && IsAllChecked && BillData != null && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount()
                    && BillData.Tables["INV_PAT_BILLING"].Select("EMR_PAT_DTLS_INV_ORDER_ID IS NOT NULL AND EMR_PAT_DTLS_INV_ORDER_ID>0").Length > 0
                    && SelectedVisitMode != (int)VisitMode.OPCASH)
                {
                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                             "Expired orders can only bill in cash mode", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    isProceed = false;
                }

                //if (isProceed && !IsAllChecked)
                //{
                //    DataTable dtCriteria = new DataTable();
                //    dtCriteria.Columns.Add("PAT_FIN_ENCOUNTER_ID");
                //    dtCriteria.Rows.Add(SelectedPatientFinEncounterID);
                //    MainBillingShared objShared = new MainBillingShared();
                //    DataTable dtVisitEncounter = objShared.GetPatientVisitEncounter(dtCriteria);
                //    if (dtVisitEncounter.KIIsNotNullAndRowCount() && dtVisitEncounter.Rows[0]["INCO_MAST_SCHEME_ID"] != DBNull.Value
                //        && Convert.ToInt64(dtVisitEncounter.Rows[0]["INCO_MAST_SCHEME_ID"]) != SelectedMastSchemeValue)
                //    {
                //        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                //            "Patient scheme changed. Refresh patient to continue", MessageBoxButtonType.OK, MessageBoxImages.Information);
                //        isProceed = false;
                //    }
                //}

                if (isProceed && SelectedPatientFinEncounterID > 0 && SelectedPatientFinEpisodeID > 0)
                {
                    DataTable Criteria = new DataTable("CRITERIA");
                    Criteria.Columns.Add("PAT_FIN_ENCOUNTER_ID");
                    Criteria.Columns.Add("MODE");
                    Criteria.Rows.Add(SelectedPatientFinEncounterID, 3);
                    MainCommon objCommon = new MainCommon();
                    DataTable dtEncounter = objCommon.SelectFinancialEncounter(Criteria);
                    if (dtEncounter.KIIsNotNullAndRowCount() && dtEncounter.Rows[0]["PAT_FIN_EPISODE_ID"] == DBNull.Value)
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                               "Selected patient episode is invalid. Clear to continue", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        isProceed = false;
                    }
                }

                //if (isProceed && SelectedPatientFinEncounterID > 0)
                //{
                //    DataTable Criteria = new DataTable("CRITERIA");
                //    Criteria.Columns.Add("PAT_FIN_ENCOUNTER_ID");
                //    Criteria.Columns.Add("MODE");
                //    Criteria.Rows.Add(SelectedPatientFinEncounterID, 2);
                //    MainCommon objCommon = new MainCommon();
                //    DataTable dtEncounter = objCommon.SelectFinancialEncounter(Criteria);
                //    if (dtEncounter.KIIsNotNullAndRowCount() && dtEncounter.Rows[0]["ENCOUNTER_STATUS"] != DBNull.Value && Convert.ToInt16(dtEncounter.Rows[0]["ENCOUNTER_STATUS"]) == 0)
                //    {
                //        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                //               "Selected encounter/episode is closed.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                //        isProceed = false;
                //    }
                //}
                if (isProceed && EncounterEndDate > DateTime.Now)
                {
                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                           "Selected date should be less than current Date", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    isProceed = false;
                }
                if (isProceed && !IsIPEncounterSelected)
                {
                    if ((EncounterEndDate.Date < EncounterStartDate.Date) || (EncounterEndDate.Date > EncounterEndDateTemp.Date))
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                               "Selected date should be in between Encounter start date and end date.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        isProceed = false;
                    }
                    //if (isProceed)
                    //{
                    //    if (EncounterEndDate.TimeOfDay > EncounterEndDateTemp.TimeOfDay)
                    //    {
                    //        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                    //            "Selected time should be less than Encounter end time.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    //        isProceed = false;
                    //    }
                    //    else if (EncounterEndDate.TimeOfDay < EncounterStartDate.TimeOfDay)
                    //    {
                    //        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                    //              "Selected time should be greater than Encounter start time.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    //        isProceed = false;
                    //    }
                    //}

                }
                if (SelectedServiceType != (int)ServiceType.Cafeteria && isProceed && IsIPEncounterSelected
                    && PatientInformation != null && SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("VISIT_NO")
                    && PatientInformation.Rows[0]["MRNO"] != DBNull.Value && SelectedEncounterDetails["VISIT_NO"] != DBNull.Value)
                {
                    MainADTShared objMainADTShared = new CommonShared.ADTMain.MainADTShared();
                    DataTable DtAdminDtls = objMainADTShared.FetchAdmissionDischarge(0, 0, PatientInformation.Rows[0]["MRNO"].ToString(), SelectedEncounterDetails["VISIT_NO"].ToString(), 0, 20);
                    if (DtAdminDtls != null && DtAdminDtls.Rows.Count > 0 && DtAdminDtls.Rows[0]["DISC_DATE"] != DBNull.Value &&
                        ((EncounterEndDate.Date < Convert.ToDateTime(DtAdminDtls.Rows[0]["ADMN_DATE"]).Date) || (EncounterEndDate.Date > Convert.ToDateTime(DtAdminDtls.Rows[0]["DISC_DATE"]).Date)))
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                              "Selected date should be in between Encounter start date and discharge date (" + Convert.ToDateTime(DtAdminDtls.Rows[0]["DISC_DATE"]).ToString("dd-MMM-yyyy HH:mm") + ")", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        isProceed = false;
                    }
                    if (isProceed && DtAdminDtls != null && DtAdminDtls.Rows.Count > 0 && DtAdminDtls.Rows[0]["DISC_DATE"] != DBNull.Value
                        && ((EncounterEndDate.Date < Convert.ToDateTime(DtAdminDtls.Rows[0]["ADMN_DATE"]).Date) || (EncounterEndDate.Date > Convert.ToDateTime(DtAdminDtls.Rows[0]["DISC_DATE"]).Date))
                        && ((EncounterEndDate.TimeOfDay < Convert.ToDateTime(DtAdminDtls.Rows[0]["ADMN_DATE"]).TimeOfDay) || (EncounterEndDate.TimeOfDay > Convert.ToDateTime(DtAdminDtls.Rows[0]["DISC_DATE"]).TimeOfDay)))
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                               "Selected time should be in between Encounter start time and discharge time (" + Convert.ToDateTime(DtAdminDtls.Rows[0]["DISC_DATE"]).TimeOfDay + ")", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        isProceed = false;
                    }
                    else if (isProceed && DtAdminDtls != null && DtAdminDtls.Rows.Count > 0 && DtAdminDtls.Rows[0]["DISC_DATE"] == DBNull.Value
                        && ((EncounterEndDate.Date < Convert.ToDateTime(SelectedEncounterDetails["START_DATE"]).Date) || (EncounterEndDate.Date > Convert.ToDateTime(DateTime.Now))))
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                               "Selected date should be in between Encounter start date and current date", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        isProceed = false;
                    }
                    else if (isProceed && DtAdminDtls != null && DtAdminDtls.Rows.Count > 0 && DtAdminDtls.Rows[0]["DISC_DATE"] == DBNull.Value
                       && ((EncounterEndDate.Date < Convert.ToDateTime(SelectedEncounterDetails["START_DATE"]).Date) || (EncounterEndDate.Date > Convert.ToDateTime(DateTime.Now)))
                       && ((EncounterEndDate.TimeOfDay < Convert.ToDateTime(SelectedEncounterDetails["START_DATE"]).TimeOfDay) || (EncounterEndDate.TimeOfDay > Convert.ToDateTime(DateTime.Now).TimeOfDay)))
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                               "Selected time should be in between Encounter start time (" + Convert.ToDateTime(SelectedEncounterDetails["START_DATE"]).TimeOfDay + ") and current time", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        isProceed = false;
                    }

                }
                ////if (isProceed && IsClosedEncounterSelected)
                ////{
                ////    if ((EncounterEndDate.Date < EncounterStartDate.Date) || (EncounterEndDate.Date > EncounterEndDateTemp.Date))
                ////    {
                ////        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                ////               "Selected date should be in between Encounter start date and end date.",MessageBoxButtonType.OK, MessageBoxImages.Information);
                ////        isProceed = false;
                ////    }
                ////    if (isProceed)
                ////    {
                ////        if (EncounterEndDate.TimeOfDay > EncounterEndDateTemp.TimeOfDay)
                ////        {
                ////            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                ////                "Selected time should be less than Encounter end time.", MessageBoxButtonType.OK,MessageBoxImages.Information);
                ////            isProceed = false;
                ////        }
                ////        else if (EncounterEndDate.TimeOfDay < EncounterStartDate.TimeOfDay)
                ////        {
                ////            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                ////                  "Selected time should be greater than Encounter start time.", MessageBoxButtonType.OK,MessageBoxImages.Information);
                ////            isProceed = false;
                ////        }
                ////    }

                ////}        

                if (IsCostCenterApplicable && isProceed)
                {
                    var query = from p in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                where p.RowState != DataRowState.Deleted && Convert.ToBoolean(p["ISSALE"]) == true &&
                                !p["COST_CENTER_ID"].KIIsNotNullOrEmpty() || (p["COST_CENTER_ID"].KIIsNotNullOrEmpty() && Convert.ToInt64(p["COST_CENTER_ID"])==0)
                                select p;
                    if (query!=null && query.Any())
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "Please select Exec. center", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        isProceed = false;
                    }
                }

                if (isProceed && IsNonConsultEncounter && SelectedVisitModeNew == (int)VisitMode.OPCREDIT)
                {
                    if (DtICDDetails == null || (DtICDDetails != null && DtICDDetails.Rows.Count == 0))
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                               "Please enter atleast one primary ICD", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        isProceed = false;
                    }

                }
                if (isProceed && IsNonConsultEncounter && SelectedVisitModeNew == (int)VisitMode.OPCREDIT)
                {
                    if (DtICDDetails == null && DtICDDetails.Rows.Count == 0)
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                               "Please enter atleast one primary ICD", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        isProceed = false;
                    }
                    if (isProceed && DtICDDetails != null && DtICDDetails.Rows.Count > 0)
                    {
                        var query = from p in DtICDDetails.AsEnumerable()
                                    where p.RowState != DataRowState.Deleted &&
                                    p["ICD_TYPE"] != DBNull.Value && Convert.ToInt16(p["ICD_TYPE"]) == 1
                                    select p;
                        if (query.Count() == 0)
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "Please enter atleast one primary ICD", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            isProceed = false;
                        }
                    }
                }
                //DataTable dtSettingS = CommonData.GetDefaultSettings(0, "IS_PBM_REQUEST_ONLY");
                //if (isProceed && ERxVisibility == Visibility.Visible && IsFromPharmacyPanel
                //    && dtSettingS != null && dtSettingS.Rows.Count > 0 && Convert.ToInt16(dtSettingS.Rows[0]["VALUE"]) == 0)
                if (SelectedServiceType != (int)ServiceType.Cafeteria && ERxVisibility==Visibility.Visible)
                {
                    //giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                    //            "Please provide RX # Details", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    //isProceed = false;
                    if (!InternalExternalDetails.KIIsNotNullAndRowCount())
                    {
                        BillData.Tables["BILL_COMMON_DETAILS"].Rows[0]["PRESCRIPTION_TYPE"] = 0;
                        DataTable dtTempDetails = new DataTable();
                        CommonXSD.XSD.Billing objdsBillXSD = new CommonXSD.XSD.Billing();
                        dtTempDetails = objdsBillXSD.INTERNAL_EXTERNAL_DETAILS.Clone();
                        dtTempDetails.Rows.Add();
                        //if (dtTempDetails.Columns.Contains("APPROVAL_DATE"))
                        //    dtTempDetails.Rows[0]["APPROVAL_DATE"] = System.DateTime.Now;
                        if (!dtTempDetails.Columns.Contains("PRESCRIPTION_TYPE_TEMP"))
                        {
                            dtTempDetails.Columns.Add("PRESCRIPTION_TYPE_TEMP", typeof(int));
                        }
                        InternalExternalDetails = dtTempDetails;
                    }
                    if (!InternalExternalDetails.Columns.Contains("IS_INSERT"))
                    {
                        InternalExternalDetails.Columns.Add("IS_INSERT", typeof(bool));
                    }
                    if (PhRXDtlsInfo.KIIsNotNullAndRowCount())
                    {
                        var PHRXData = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]) == true
                           && IfNullReturnZero(x["PH_RX_INFO_ID"]) > 0).Select(x => x["PH_RX_INFO_ID"]);
                        if (PHRXData.Any())
                        {
                            if (InternalExternalDetails.KIIsNotNullAndRowCount())
                            {
                                InternalExternalDetails.Rows.Clear();
                            }
                            foreach (Int64 PH_RX_ID in PHRXData)
                            {
                                DataRow drRow = InternalExternalDetails.NewRow();
                                drRow["PH_RX_INFO_ID"] = PH_RX_ID;
                                drRow["PRESCRIPTION_MODE"] = 0;
                                drRow["PAT_FIN_ENCOUNTER_ID"] = SelectedPatientFinEncounterID;
                                drRow["IS_INSERT"] = false;
                                drRow["MRNO"] = Convert.ToString(PatientInformation.Rows[0]["MRNO"]);
                                InternalExternalDetails.Rows.Add(drRow);
                            }
                        }
                    }
                    else
                    {
                        InternalExternalDetails.Rows[0]["PRESCRIPTION_MODE"] = 0;
                        InternalExternalDetails.Rows[0]["PRESCRIPTION_TYPE"] = 0;
                        if (InternalExternalDetails.Columns.Contains("PRESCRIPTION_TYPE_TEMP"))
                        {
                            InternalExternalDetails.Rows[0]["PRESCRIPTION_TYPE_TEMP"] = 0;
                        }
                        InternalExternalDetails.Rows[0]["ERX"] = ERXNo;
                        InternalExternalDetails.Rows[0]["MRNO"] = Convert.ToString(PatientInformation.Rows[0]["MRNO"]);
                        InternalExternalDetails.Rows[0]["PAT_FIN_ENCOUNTER_ID"] = SelectedPatientFinEncounterID;
                        if (InternalExternalDetails.Columns.Contains("APPROVAL_DATE"))
                            InternalExternalDetails.Rows[0]["APPROVAL_DATE"] = System.DateTime.Now;
                        InternalExternalDetails.Rows[0]["PROVIDER_ID"] = SelectedProviderIDValue;
                        InternalExternalDetails.Rows[0]["REQUEST_STATUS"] = (int)Infologics.Medilogics.Enumerators.Pharmacy.PBMStatus.Pending;
                        InternalExternalDetails.Rows[0]["CLAIM_FORM_NUMBER"] = ClaimFormNo;
                        InternalExternalDetails.Rows[0]["HOSPITAL_SITE_ID"] = CommonData.LoginHospitalSiteID;
                        InternalExternalDetails.Rows[0]["IS_INSERT"] = true;
                    }
                    if (BillData.Tables.Contains("INTERNAL_EXTERNAL_DETAILS"))
                    {
                        if (BillData.Tables["INTERNAL_EXTERNAL_DETAILS"].KIIsNotNullAndRowCount())
                        {
                            BillData.Tables["INTERNAL_EXTERNAL_DETAILS"].Rows.Clear();
                        }
                        BillData.Tables["INTERNAL_EXTERNAL_DETAILS"].Merge(InternalExternalDetails.Copy());
                    }
                    else
                    {
                        InternalExternalDetails.TableName = "INTERNAL_EXTERNAL_DETAILS";
                        BillData.Tables.Add(InternalExternalDetails.Copy());
                    }
                }
                if (isProceed && BillData.Tables["INV_PAT_BILLING"].Columns.Contains("SERVICE_TYPE") &&
                    BillData.Tables["INV_PAT_BILLING"].Rows[0]["SERVICE_TYPE"] != DBNull.Value && 
                    Convert.ToInt64(BillData.Tables["INV_PAT_BILLING"].Rows[0]["SERVICE_TYPE"]) == (int)ServiceType.ADT)
                {

                    if (dtPatientVisit != null && dtPatientVisit.Rows.Count > 0)
                    {
                        if (Convert.ToInt16(dtPatientVisit.Rows[0]["VISIT_TYPE"]) != (int)VisitMode.IP)
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "Room rent billing possible only for IP", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            isProceed = false;
                        }
                    }
                    else
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "Room rent billing possible only for current IP visit", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        isProceed = false;
                    }

                }
                return isProceed;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool EncounterExist(bool isProceed)
        {
            Int64 parentCategory = Convert.ToInt64(CommonData.GetLookupData("BASE CATEGORY").Select("FIELD2 ='" + Convert.ToInt16(BaseCategory.Encounter) + "'")[0]["LOOKUP_VALUE"]);
            //Non consultation Checking
            if (isProceed
               && string.IsNullOrEmpty(SelectedOpenEpisodeID) && !string.IsNullOrEmpty(SelectedEncounterNo)
               && SelectedVisitMode == VisitMode.OPCREDIT
               && BillData.Tables["INV_PAT_BILLING"].Select("SERVICE_TYPE=" + (int)ServiceType.Consultation).Length == 0
               && SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ISNONCONSULTENCOUNTER")
               && SelectedEncounterDetails["ISNONCONSULTENCOUNTER"] != DBNull.Value && Convert.ToInt16(SelectedEncounterDetails["ISNONCONSULTENCOUNTER"]) == 1)
            {
                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                           "Please do encounter billing to proceed.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                isProceed = false;
            }

            //Register and do billing without PAV, Only cash allowed
            if (isProceed
               && string.IsNullOrEmpty(SelectedOpenEpisodeID) && string.IsNullOrEmpty(SelectedEncounterNo)
               && SelectedVisitMode == VisitMode.OPCREDIT && SelectedServiceType != (int)ServiceType.Cafeteria
               && BillData.Tables["INV_PAT_BILLING"].Select("SERVICE_TYPE=" + (int)ServiceType.Consultation).Length == 0)
            {
                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                           "Please do encounter billing to proceed.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                isProceed = false;
            }
            //Take PAV-Cash Billing not allowed, only credit
            else if (isProceed
            && string.IsNullOrEmpty(SelectedOpenEpisodeID) && !string.IsNullOrEmpty(SelectedEncounterNo)
            && SelectedVisitMode == VisitMode.OPCASH
            && BillData != null && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount()
            && BillData.Tables["INV_PAT_BILLING"].Select("SERVICE_TYPE=" + (int)ServiceType.Consultation).Length == 0
            && SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ISNONCONSULTENCOUNTER")
            && SelectedEncounterDetails["ISNONCONSULTENCOUNTER"] != DBNull.Value && Convert.ToInt16(SelectedEncounterDetails["ISNONCONSULTENCOUNTER"]) == 1)
            {
                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                           "Please do encounter billing to proceed.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                isProceed = false;
            }
            //Take PAV-order exist cash and credit not allowed without consultation   
            else if (isProceed
            && string.IsNullOrEmpty(SelectedOpenEpisodeID) && !string.IsNullOrEmpty(SelectedEncounterNo)
            && IsCPOEOrderExist
            && BillData != null && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount()
            && BillData.Tables["INV_PAT_BILLING"].Select("SERVICE_TYPE=" + (int)ServiceType.Consultation).Length == 0
            && SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ISNONCONSULTENCOUNTER")
            && SelectedEncounterDetails["ISNONCONSULTENCOUNTER"] != DBNull.Value && Convert.ToInt16(SelectedEncounterDetails["ISNONCONSULTENCOUNTER"]) == 1 && EMROrderRelation != null && EMROrderRelation.Tables.Count > 0)// Bug ID
            {
                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                           "Please do encounter billing to proceed.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                isProceed = false;
            }

            else if (isProceed
             && string.IsNullOrEmpty(SelectedOpenEpisodeID) && string.IsNullOrEmpty(SelectedEncounterNo)
             && IsCPOEOrderExist
             && BillData != null && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount()
             && BillData.Tables["INV_PAT_BILLING"].Select("SERVICE_TYPE=" + (int)ServiceType.Consultation).Length == 0
             && SelectedEpisodeDetails != null && SelectedEpisodeDetails.Row.Table.Columns.Contains("ENCOUNTER_STATUS")
             && (SelectedEpisodeDetails.Row["ENCOUNTER_STATUS"] == DBNull.Value || Convert.ToInt16(SelectedEpisodeDetails.Row["ENCOUNTER_STATUS"]) == 0)
            && SelectedEncounterDetails["ISNONCONSULTENCOUNTER"] != DBNull.Value && Convert.ToInt16(SelectedEncounterDetails["ISNONCONSULTENCOUNTER"]) == 1 && EMROrderRelation != null && EMROrderRelation.Tables.Count > 0)// Bug ID                )
            {
                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                           "Please do encounter billing to proceed.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                isProceed = false;
            }
            else if (isProceed && SelectedServiceType == (int)ServiceType.Investigation
                //&& string.IsNullOrEmpty(SelectedOpenEpisodeID) && !string.IsNullOrEmpty(SelectedEncounterNo) // Excluded Service billing Showing unwanted msg-- 25147     
            && (IsCPOEOrderExist || IsFromCoderReview)
           && BillData != null && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount()
           && BillData.Tables["INV_PAT_BILLING"].Select("SERVICE_TYPE=" + (int)ServiceType.Consultation).Length == 0
           && EMROrderItems.KIIsNotNullAndRowCount() && EMROrderItems.Select("PARENT_INV_CATEGORY_ID=" + parentCategory).Length > 0
           && SelectedEncounterDetails != null && (SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE")
           && Convert.ToInt16(SelectedEncounterDetails["ENCOUNTER_MODE"]) != 2) && (SelectedEncounterDetails.Row.Table.Columns.Contains("ISNONCONSULTENCOUNTER")
           && Convert.ToInt16(SelectedEncounterDetails["ISNONCONSULTENCOUNTER"]) == 1) && ((EMROrderRelation != null && EMROrderRelation.Tables.Count > 0) || (IsFromCoderReview && EMROrderItems.Select("PARENT_INV_CATEGORY_ID=" + parentCategory + " AND PAT_FIN_ENCOUNTER_ID = " + SelectedEncounterDetails["PAT_FIN_ENCOUNTER_ID"]).Length > 0))) // Bug ID  : 23794 , checking ENCOUNTER_MODE column // Bug :ID : 23809 , checking ISNONCONSULTENCOUNTER column
            {
                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                           "Please do encounter billing to proceed.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                isProceed = false;
            }

            return isProceed;
        }
        /// <summary>
        /// Sets the inital data_ receipts.
        /// </summary>
        private void SetInitalData_Receipts()
        {
            try
            {
                CardBank = new DataSet();
                CardBank.Tables.Add(CommonData.GetLookupData("Card Provider").Copy());
                CardBank.Tables[0].TableName = "CARD_PROVIDER";
                CardBank.Tables.Add(CommonData.dsGlobal.Tables["GEN_MAST_BANK"].Copy());
                CardBank.Tables.Add(CommonData.dsGlobal.Tables["GEN_DTLS_BANK"].Copy());
                CardBank.Tables.Add(CommonData.dsGlobal.Tables["GEN_CARD"].Copy());
                BillData.Merge(CardBank);
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// To refresh default scheme with current defautls scheme,if the default scheme modified.
        /// </summary>
        //private void RefreshDefaultScheme(DataRow drDetails)
        //{
        //    long DefaultScheme = CommonData.DefaultScheme;
        //    CommonData.RefreshDefaultScheme();
        //    if (DefaultScheme == SelectedSchemeValue && DefaultScheme != CommonData.DefaultScheme)
        //    {
        //        drDetails["INCO_DTLS_SCHEME_ID"] = CommonData.DefaultScheme;
        //    }
        //    else
        //    {
        //        drDetails["INCO_DTLS_SCHEME_ID"] = SelectedSchemeValue;
        //    }
        //}

        /// <summary>
        /// Loads the scheme account details.
        /// </summary>
        /// <param name="dtScheme">The dt scheme.</param>
        private void LoadSchemeAccountDetails(decimal incoDtlsSchemeID)
        {
            //Scheme Account details
            try
            {
                DataTable dtLimit = new DataTable();
                dtLimit.TableName = "INCO_MAST_SCHEME";
                dtLimit.Columns.Add("INCO_MAST_SCHEME_ID", typeof(string));
                string ID = incoDtlsSchemeID.ToString();
                DataRow drLimit = dtLimit.NewRow();
                drLimit["INCO_MAST_SCHEME_ID"] = ID;
                dtLimit.Rows.Add(drLimit);
                MainMasterSettings objSchemeAcc = new MainMasterSettings();
                DataTable dtAcc = objSchemeAcc.FetchContractAccount(dtLimit);
                if (BillData != null && BillData.Tables.Contains("INCO_DTLS_CONTRACT_ACC") && BillData.Tables["INCO_DTLS_CONTRACT_ACC"].Rows.Count > 0)
                {
                    BillData.Tables["INCO_DTLS_CONTRACT_ACC"].Clear();
                }
                if (dtAcc.Rows.Count > 0)
                {
                    BillData.Tables["INCO_DTLS_CONTRACT_ACC"].Merge(dtAcc);
                    var filterCopaySetting = from dr in BillData.Tables["INCO_DTLS_CONTRACT_ACC"].AsEnumerable()
                                             where dr.RowState != DataRowState.Deleted && dr["ACC_HEAD_CATEGORY"] != DBNull.Value && dr["PAYING_PARTY_TYPE"] != DBNull.Value
                                             && Convert.ToInt16(dr["ACC_HEAD_CATEGORY"]) == (Int16)AccountHeadCategory.Copayment
                                             && Convert.ToInt16(dr["PAYING_PARTY_TYPE"]) == 0
                                             select dr;
                    if (filterCopaySetting.Count() > 0)
                    {
                        IsCopaySettingExist = true;
                    }
                    var filterServicePayingParty = from dr in BillData.Tables["INCO_DTLS_CONTRACT_ACC"].AsEnumerable()
                                                   where dr.RowState != DataRowState.Deleted && dr["ACC_HEAD_CATEGORY"] != DBNull.Value && dr["PAYING_PARTY_TYPE"] != DBNull.Value
                                                   && Convert.ToInt16(dr["ACC_HEAD_CATEGORY"]) == (Int16)AccountHeadCategory.ServiceAccountHead
                                                   && Convert.ToInt16(dr["PAYING_PARTY_TYPE"]) == 0
                                                   select dr;
                    if (filterServicePayingParty.Count() > 0)
                    {
                        IsServicePayingPartyPatient = true;

                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Executed_QtySelectionChange(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                DataRowView drvInvPatBilling = (DataRowView)e.Parameter;
                decimal qty = 0;
                if (drvInvPatBilling != null && !removeDublication && drvInvPatBilling["ISEDIT_COUNT"] != DBNull.Value && Convert.ToBoolean(drvInvPatBilling["ISEDIT_COUNT"]) && isQTYUnitChange)
                {
                    if (drvInvPatBilling["INCEXLCSTATUS"] != DBNull.Value &&
                        Convert.ToInt16(drvInvPatBilling["INCEXLCSTATUS"]) == (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion)
                    {
                        drvInvPatBilling["CO_PAY_AMOUNT"] = IfNullReturnZero(drvInvPatBilling["QTY"]) * IfNullReturnZero(drvInvPatBilling["BASE_CHARGE"]);
                    }
                    if (Convert.ToInt32(drvInvPatBilling["SERVICE_TYPE"]) == (int)ServiceType.Pharmacy)
                    {
                        qty = IfNullReturnZero(drvInvPatBilling["BASE_QTY"]) * IfNullReturnZero(drvInvPatBilling["QTY"]);
                        drvInvPatBilling["SALES_ACTUAL_QTY"] = qty;
                        drvInvPatBilling["AMOUNT"] = IfNullReturnZero(drvInvPatBilling["BASE_CHARGE"]) * qty;
                    }
                    else
                    {
                        qty = Convert.ToDecimal(drvInvPatBilling["QTY"]);
                    }
                    if (Convert.ToBoolean(drvInvPatBilling.Row["ISSALE"]))
                    {
                        if (SelectedItemServiceType != (int)ServiceType.Consultation)
                        {
                            CalculateTotalBilledAmount(drvInvPatBilling);
                        }
                        // bug id 25271 commented CalculateMaxMinCopay() 
                        //CalculateMaxMinCopay();
                        if (Convert.ToInt32(drvInvPatBilling["SERVICE_TYPE"]) == (int)ServiceType.Pharmacy && IfNullReturnZero(drvInvPatBilling["CONSUMPTION_STATUS"]) == 0)
                        {
                            //stock checking
                            MainBilling objBIlling = new MainBilling();
                            DataTable dtCriteriatable = new DataTable();
                            dtCriteriatable.Columns.Add("PH_SUBLOCATION_ID", typeof(int));
                            dtCriteriatable.Columns.Add("MEDICINE_CODE", typeof(long));
                            dtCriteriatable.Columns.Add("BATCHNO", typeof(string));
                            dtCriteriatable.Columns.Add("INV_MAST_SERVICE_ID", typeof(long));
                            dtCriteriatable.Rows.Add(drvInvPatBilling["SUBLOCATION"], drvInvPatBilling["MEDICINE_CODE"], drvInvPatBilling["BATCHNO"], drvInvPatBilling["INV_MAST_SERVICE_ID"]);
                            DataTable dttable = objBIlling.GetMedicinesStockDetails(dtCriteriatable);
                            decimal sales_actual_qty = 0; IfNullReturnZero(drvInvPatBilling["SALES_ACTUAL_QTY"]);
                            decimal query = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                .Where(x => x["INV_MAST_SERVICE_ID"] != DBNull.Value && x["BATCHNO"] != DBNull.Value &&
                              Convert.ToInt64(x["INV_MAST_SERVICE_ID"]) == Convert.ToInt64(drvInvPatBilling["INV_MAST_SERVICE_ID"]) &&
                              Convert.ToString(x["BATCHNO"]) == Convert.ToString(drvInvPatBilling["BATCHNO"]) && Convert.ToBoolean(x["ISSALE"]))
                              .Select(x => Convert.ToDecimal(x["SALES_ACTUAL_QTY"])).Sum();
                            sales_actual_qty += query;
                            if (dttable.KIIsNotNullAndRowCount())
                            {
                                if (sales_actual_qty > IfNullReturnZero(dttable.Rows[0]["QTY"]))
                                {
                                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                    "No Stock Available for Item " + drvInvPatBilling["NAME"] + " With Batch No " + drvInvPatBilling["BATCHNO"], MessageBoxButtonType.OK, MessageBoxImages.Information);
                                    drvInvPatBilling["ISSALE"] = false;
                                    drvInvPatBilling["ISLABEL"] = false;
                                }
                            }
                            else if (drvInvPatBilling["BATCHNO"] != DBNull.Value)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                "No Stock Available for Item " + drvInvPatBilling["NAME"] + " With Batch No " + drvInvPatBilling["BATCHNO"], MessageBoxButtonType.OK, MessageBoxImages.Information);
                                drvInvPatBilling["ISSALE"] = false;
                                drvInvPatBilling["ISLABEL"] = false;
                            }
                        }
                    }
                    else
                    {
                        drvInvPatBilling.Row["PATIENT_SHARE"] = 0;
                        drvInvPatBilling.Row["SPONSOR"] = 0;
                        drvInvPatBilling.Row["NET"] = IfNullReturnZero(drvInvPatBilling.Row["BASE_CHARGE"]) * IfNullReturnZero(drvInvPatBilling.Row["QTY"]);
                        if (SelectedServiceType == (int)ServiceType.Pharmacy || Convert.ToInt32(drvInvPatBilling["SERVICE_TYPE"]) == (int)ServiceType.Pharmacy)
                        {
                            drvInvPatBilling.Row["NET"] = IfNullReturnZero(drvInvPatBilling.Row["NET"]) * IfNullReturnZero(drvInvPatBilling.Row["BASE_QTY"]);
                        }
                        drvInvPatBilling["CO_PAY_AMOUNT"] = 0;
                        drvInvPatBilling.Row["NET_AMOUNT"] = drvInvPatBilling.Row["NET"];
                    }
                    if (BillData.Tables["GEN_BILL_DISCOUNT"].KIIsNotNullAndRowCount())
                    {
                        foreach (DataRow dr in BillData.Tables["INV_PAT_BILLING"].Rows)
                        {
                            //for resetting the amount while changing qty after adjustment given
                            if (SelectedVisitModeNew == (int)VisitMode.OPCASH && Convert.ToBoolean(drvInvPatBilling.Row["ISSALE"]))
                            {
                                // if - else added by deepak for Bug Correction- Bug ID-25271,25273
                                if (drvInvPatBilling.Row["PROVIDER_DISCOUNT_AMOUNT"] != DBNull.Value
                                    && Convert.ToDecimal(drvInvPatBilling.Row["PROVIDER_DISCOUNT_AMOUNT"]) < 0)
                                {
                                    dr["NET_AMOUNT"] = IfNullReturnZero(dr["BASE_CHARGE"]) * IfNullReturnZero(dr["QTY"]) + IfNullReturnZero(dr["OTHER_CHARGE"])
                                        + IfNullReturnZero(dr["PROVIDER_DISCOUNT_AMOUNT"]);
                                    dr["PATIENT_SHARE"] = dr["NET_AMOUNT"];
                                }
                                else
                                {
                                    dr["NET_AMOUNT"] = IfNullReturnZero(dr["BASE_CHARGE"]) * IfNullReturnZero(dr["QTY"]) + IfNullReturnZero(dr["OTHER_CHARGE"]);
                                    //  dr["NET_AMOUNT"] = dr["NET"];
                                    dr["PATIENT_SHARE"] = dr["NET_AMOUNT"];
                                }
                            }
                            dr["DISCOUNT"] = 0;
                            dr["MARKUP"] = 0;
                            dr["ADJUSTMENT"] = 0;
                        }
                        //commented by deepak , added GenBillDiscountRecalculation(dr) and CalculateTotalAdjustment() for Bug Correction- Bug ID-25271,25273
                        BillData.Tables["GEN_BILL_DISCOUNT"].Rows.Clear();
                        //TotalAdjustment = 0;
                        CalculateTotalAdjustment();
                    }

                    if (BillData.Tables["PH_PAT_DTLS_ORDER"].KIIsNotNullAndRowCount() && drvInvPatBilling["INV_MAST_SERVICE_ID"] != DBNull.Value &&
                        BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + drvInvPatBilling["INV_MAST_SERVICE_ID"]).Count() > 0)
                    {
                        DataRow[] drTemp = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + drvInvPatBilling["INV_MAST_SERVICE_ID"]);
                        if (drTemp.Length > 0)
                        {
                            drTemp[0]["QUANTITY"] = drvInvPatBilling["QTY"];
                        }
                        DosageCalculation(drvInvPatBilling.Row);
                    }
                    if (Convert.ToInt32(drvInvPatBilling["SERVICE_TYPE"]) == (int)ServiceType.Pharmacy)
                    {
                        BillData.Tables["BILL_COMMON_DETAILS"].Rows[0]["TOBECOLLECTED"] = ToBeCollected;
                    }
                    if (IfNullReturnZero(drvInvPatBilling["VERIFICATION_BTN_VISIBILITY"]) == 1 && IfNullReturnZero(drvInvPatBilling["IS_VERIFIED"]) == 0)
                    {
                        Executed_IsVerificationChecked(sender, e);
                    }
                    if (IsFromPharmacyPanel && EnableVerificationSettingBased)
                    {
                        if (IfNullReturnZero(drvInvPatBilling["IS_VERIFIED"]) == 1 && IfNullReturnZero(drvInvPatBilling["ISSALE"]) == 1 && IfNullReturnZero(drvInvPatBilling["VERIFICATION_BTN_VISIBILITY"]) == 1
                            && IfNullReturnZero(drvInvPatBilling["GRANULAR_UNIT"]) < IfNullReturnZero(drvInvPatBilling["SALES_ACTUAL_QTY"]))
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "Sale Quantity should not be greater than verified Quantity", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            drvInvPatBilling["ISSALE"] = false;
                            drvInvPatBilling["ISLABEL"] = false;
                        }
                    }
                }
                if (!isERCredit)
                {
                    ToBeCollected = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                          .Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]))
                          .Select(x => IfNullReturnZero(x["PATIENT_SHARE"])).Sum();
                }
                TotalAmount = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                               where dr.RowState != DataRowState.Deleted && dr["NET"] != DBNull.Value &&
                               dr["ISSALE"] != DBNull.Value && Convert.ToBoolean(dr["ISSALE"]) == true
                               select Convert.ToDecimal(dr["NET"])).Sum();
                TotalNet = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                            where dr.RowState != DataRowState.Deleted && dr["NET_AMOUNT"] != DBNull.Value &&
                           dr["ISSALE"] != DBNull.Value && Convert.ToBoolean(dr["ISSALE"]) == true
                            select Convert.ToDecimal(dr["NET_AMOUNT"])).Sum();

                //// bug id 25271 Added CalculateMaxMinCopay() 
                CalculateMaxMinCopay();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void CalculateTotalBilledAmount(DataRowView drvInvPatBilling)
        {
            if (IfNullReturnZero(drvInvPatBilling.Row["IS_DISPENSE"]) == 0 && IfNullReturnZero(drvInvPatBilling.Row["SERVICE_TYPE"]) != (int)ServiceType.Consultation)
            {
                decimal NetAmount = 0;
                if (drvInvPatBilling.Row["BASE_CHARGE"] != DBNull.Value) //drvInvPatBilling["DISCOUNT_MARKUP_PER_ITEM"] --Scheme discount/Markup per item
                {
                    drvInvPatBilling["DISCOUNT_MARKUP"] = drvInvPatBilling["DISCOUNT_MARKUP_PER_ITEM"] != DBNull.Value ?
                          (Convert.ToDecimal(drvInvPatBilling.Row["DISCOUNT_MARKUP_PER_ITEM"])
                          * Convert.ToDecimal(drvInvPatBilling.Row["BASE_QTY"]) * Convert.ToDecimal(drvInvPatBilling.Row["QTY"])) : 0;
                    drvInvPatBilling["SCHEME_DISCOUNT"] = (drvInvPatBilling["DISCOUNT_MARKUP_PER_ITEM"] != DBNull.Value &&
                          Convert.ToDecimal(drvInvPatBilling.Row["DISCOUNT_MARKUP_PER_ITEM"]) < 0) ? (Convert.ToDecimal(drvInvPatBilling.Row["DISCOUNT_MARKUP_PER_ITEM"])
                          * Convert.ToDecimal(drvInvPatBilling.Row["BASE_QTY"]) * Convert.ToDecimal(drvInvPatBilling.Row["QTY"])) : 0;
                    drvInvPatBilling["SCHEME_MARKUP"] = (drvInvPatBilling["DISCOUNT_MARKUP_PER_ITEM"] != DBNull.Value &&
                         Convert.ToDecimal(drvInvPatBilling.Row["DISCOUNT_MARKUP_PER_ITEM"]) > 0) ? (Convert.ToDecimal(drvInvPatBilling.Row["DISCOUNT_MARKUP_PER_ITEM"])
                         * Convert.ToDecimal(drvInvPatBilling.Row["BASE_QTY"]) * Convert.ToDecimal(drvInvPatBilling.Row["QTY"])) : 0;
                    drvInvPatBilling.Row["AMOUNT"] = Convert.ToDecimal(drvInvPatBilling.Row["BASE_CHARGE"])
                        * Convert.ToDecimal(drvInvPatBilling.Row["BASE_QTY"]) * Convert.ToDecimal(drvInvPatBilling.Row["QTY"]);
                    NetAmount = drvInvPatBilling["DISCOUNT_MARKUP"] == DBNull.Value ? 0 : (Convert.ToDecimal(drvInvPatBilling["DISCOUNT_MARKUP"])
                        + Convert.ToDecimal(drvInvPatBilling.Row["AMOUNT"]) +
                       (drvInvPatBilling["SERVICE_TAX"] == DBNull.Value ? 0 : Convert.ToDecimal(drvInvPatBilling["SERVICE_TAX"]))
                       - (drvInvPatBilling["INC_SERVICE_TAX"] == DBNull.Value ? 0 : Convert.ToDecimal(drvInvPatBilling["INC_SERVICE_TAX"])));
                }
                drvInvPatBilling.Row["NET_AMOUNT"] = NetAmount + Convert.ToDecimal(drvInvPatBilling["OTHER_CHARGE"]);
                ////if (SelectedServiceType == (int)ServiceType.Pharmacy)
                ////{
                ////    drvInvPatBilling.Row["NET"] = IfNullReturnZero(drvInvPatBilling.Row["BASE_CHARGE"]) * IfNullReturnZero(drvInvPatBilling.Row["SALES_ACTUAL_QTY"]);
                ////}
                ////else
                ////{
                ////    drvInvPatBilling.Row["NET"] = IfNullReturnZero(drvInvPatBilling.Row["BASE_CHARGE"]) * IfNullReturnZero(drvInvPatBilling.Row["QTY"]);
                ////}
                if (Convert.ToInt32(drvInvPatBilling["SERVICE_TYPE"]) == (int)ServiceType.Pharmacy)
                {
                    drvInvPatBilling.Row["NET"] = IfNullReturnZero(drvInvPatBilling.Row["BASE_CHARGE"]) * IfNullReturnZero(drvInvPatBilling.Row["SALES_ACTUAL_QTY"]);
                }
                else
                {
                    drvInvPatBilling.Row["NET"] = IfNullReturnZero(drvInvPatBilling.Row["BASE_CHARGE"]) * IfNullReturnZero(drvInvPatBilling.Row["QTY"]);
                }
                drvInvPatBilling.Row["SERVICE_UTILISATION"] = drvInvPatBilling.Row["QTY"];
                drvInvPatBilling.Row["TOTAL"] = drvInvPatBilling.Row["NET_AMOUNT"];
                drvInvPatBilling.Row["GROSS_AMOUNT"] = drvInvPatBilling.Row["NET_AMOUNT"];
                if (IsPhamracySettingEnable || IsServiceSettingEnable)
                {
                    drvInvPatBilling.Row["ADJUSTMENT"] = drvInvPatBilling.Row["ADJUSTMENT"];
                    drvInvPatBilling.Row["NET_AMOUNT"] = (IfNullReturnZero(drvInvPatBilling.Row["NET_AMOUNT"]) - IfNullReturnZero(drvInvPatBilling.Row["ADJUSTMENT"]))
                        + Convert.ToDecimal(drvInvPatBilling["OTHER_CHARGE"]);
                    if (SelectedVisitMode == VisitMode.OPCASH)
                    {
                        drvInvPatBilling.Row["PATIENT_SHARE"] = drvInvPatBilling.Row["NET_AMOUNT"];
                        drvInvPatBilling.Row["SPONSOR"] = 0;
                    }
                    else if (IfNullReturnZero(drvInvPatBilling.Row["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion)
                    {
                        drvInvPatBilling.Row["PATIENT_SHARE"] = drvInvPatBilling.Row["CO_PAY_AMOUNT"];
                        drvInvPatBilling.Row["SPONSOR"] = IfNullReturnZero(drvInvPatBilling.Row["NET_AMOUNT"]) - IfNullReturnZero(drvInvPatBilling.Row["PATIENT_SHARE"]);
                        if (IfNullReturnZero(drvInvPatBilling.Row["SPONSOR"]) < 0)
                        {
                            drvInvPatBilling.Row["SPONSOR"] = 0;
                        }
                    }
                    else if (IfNullReturnZero(drvInvPatBilling.Row["INCEXLCSTATUS"]) == (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion)
                    {
                        drvInvPatBilling.Row["PATIENT_SHARE"] = drvInvPatBilling.Row["NET_AMOUNT"];
                        drvInvPatBilling.Row["SPONSOR"] = 0;
                    }
                }
                drvInvPatBilling.Row["SALES_ACTUAL_QTY"] = Convert.ToDecimal(drvInvPatBilling.Row["QTY"]) * Convert.ToDecimal(drvInvPatBilling.Row["BASE_QTY"]);
                if (SelectedVisitMode == VisitMode.OPCASH && !isERCredit)
                {
                    ToBeCollected = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                        .Where(x => x["ISSALE"] != DBNull.Value && x["PATIENT_SHARE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]))
                        .Select(x => IfNullReturnZero(x["PATIENT_SHARE"])).Sum();
                }
                else if (SelectedVisitMode == VisitMode.OPCREDIT && !isERCredit)//CO_PAY_AMOUNT
                {
                    ToBeCollected = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                      .Where(x => x["ISSALE"] != DBNull.Value && x["PATIENT_SHARE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]))
                      .Select(x => IfNullReturnZero(x["PATIENT_SHARE"])).Sum();
                }
                if (BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
                {
                    TotalAmount = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                   where dr.RowState != DataRowState.Deleted && dr["NET"] != DBNull.Value &&
                                   dr["ISSALE"] != DBNull.Value && Convert.ToBoolean(dr["ISSALE"]) == true
                                   select Convert.ToDecimal(dr["NET"])).Sum();
                    TotalNet = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                where dr.RowState != DataRowState.Deleted && dr["NET_AMOUNT"] != DBNull.Value &&
                               dr["ISSALE"] != DBNull.Value && Convert.ToBoolean(dr["ISSALE"]) == true
                                select Convert.ToDecimal(dr["NET_AMOUNT"])).Sum();
                }
            }
        }

        private void Executed_ServiceDelete(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                if (deleteValidation())
                {

                    dbOperation = DBOperation.Delete;
                    DataRowView drvInvPatBilling = (DataRowView)e.Parameter;
                    isMultipleServiceChangeBlock = 3; //Speed Improve
                    ClearService();
                    isMultipleServiceChangeBlock = 0; //Speed Improve
                    DataTable dtConsuption = new DataTable();
                    if (IfNullReturnZero(drvInvPatBilling["IS_CONSUMPTION"]) == 2 && BillData.Tables["INV_PAT_BILLING"].Select("EMR_PAT_DTLS_INV_ORDER_ID="
                                                + IfNullReturnZero(drvInvPatBilling["EMR_PAT_DTLS_INV_ORDER_ID"])).Count() > 0)
                    {
                        dtConsuption = drvInvPatBilling.Row.Table.Copy();
                    }
                    decimal emrPatDtlsId = IfNullReturnZero(drvInvPatBilling.Row["EMR_PAT_DTLS_INV_ORDER_ID"]);
                    DeleteServiceDetails(drvInvPatBilling.Row);
                    if (dtConsuption.KIIsNotNullAndRowCount())
                    {
                        DataRow[] drConsumption = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => IfNullReturnZero(x["IS_CONSUMPTION"]) != 2 &&
                                    IfNullReturnZero(x["EMR_PAT_DTLS_INV_ORDER_ID"]) == emrPatDtlsId).Select(x => x).ToArray();
                        foreach (DataRow dr in drConsumption)
                        {
                            DataRow[] drTempConsumption = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + dr["INV_MAST_SERVICE_ID"]);
                            if (drTempConsumption.Length > 0)
                            {
                                BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Remove(drTempConsumption[0]);
                            }
                            BillData.Tables["INV_PAT_BILLING"].Rows.Remove(dr);
                        }
                    }
                    SerialNoCount();
                }
                //SerialNoCount();
                if (SelectedServiceType == (int)ServiceType.Cafeteria)
                {
                    DisableOnServiceAddedIntoGrid();
                }
            }
            catch (Exception)
            {
                throw;
            }
        }



        private void DeleteServiceDetails(DataRow drInvPatBilling)
        {
            try
            {
                if (drInvPatBilling != null)
                {

                    DataTable dtTempt = new DataTable();
                    dtTempt = BillData.Tables["INV_PAT_BILLING"].Clone();
                    dtTempt.Rows.Add();
                    dtTempt.Rows[0].ItemArray = drInvPatBilling.ItemArray;
                    if (SelectedServiceType == (int)ServiceType.Pharmacy && IfNullReturnZero(drInvPatBilling["EMR_PAT_DTLS_INV_ORDER_ID"]) > 0)
                    {
                        var queryAd = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_DTLS_INV_ORDER_ID"]) == IfNullReturnZero(drInvPatBilling["EMR_PAT_DTLS_INV_ORDER_ID"]) ||
                                                                    IfNullReturnZero(x["REF_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(drInvPatBilling["EMR_PAT_DTLS_INV_ORDER_ID"])).Select(x => x);
                        if (queryAd.Any())
                        {
                            dtTempt.Rows.Clear();
                            dtTempt = queryAd.CopyToDataTable();
                        }
                    }
                    if (dtTempt.KIIsNotNullAndRowCount())
                    {
                        foreach (DataRow drQuery in dtTempt.Rows)
                        {
                            drInvPatBilling = drQuery;

                            if ((drInvPatBilling["INV_MAST_SERVICE_ID"] != DBNull.Value))
                            {

                                long ServiceID = Convert.ToInt64(drInvPatBilling["INV_MAST_SERVICE_ID"]);
                                long parentCatID = drInvPatBilling["INV_PARENT_CATEGORY_ID"] != DBNull.Value ?
                                    Convert.ToInt64(drInvPatBilling["INV_PARENT_CATEGORY_ID"]) : 0;
                                long invCatID = drInvPatBilling["INV_CATEGORY_ID"] != DBNull.Value ?
                                    Convert.ToInt64(drInvPatBilling["INV_CATEGORY_ID"]) : 0;
                                long DtlsOrderID = drInvPatBilling["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value ?
                                                Convert.ToInt64(drInvPatBilling["EMR_PAT_DTLS_INV_ORDER_ID"]) : 0;
                                long Sl_no = drInvPatBilling["SL_NO"] != DBNull.Value ?
                                              Convert.ToInt64(drInvPatBilling["SL_NO"]) : 0;
                                SelectedItemServiceType = drInvPatBilling["INV_CATEGORY_ID"] != DBNull.Value ?
                                    Convert.ToInt16(drInvPatBilling["SERVICE_TYPE"]) : 0;

                                //Already Commented , enabled for bug correction bug id-24819     
                                GenBillDiscountRecalculation(drInvPatBilling);
                                //TASK A1
                                if (SelectedServiceType == (int)ServiceType.Investigation || SelectedServiceType == (int)ServiceType.Cafeteria
                                     || SelectedServiceType == (int)ServiceType.IncomingService)
                                {
                                    if (FindServiceAdded(ServiceID, string.Empty, Sl_no, DtlsOrderID))
                                    {
                                        if (_FindService["RELATED_TRANSACTION_ID_TEMP"] != DBNull.Value &&
                                            Convert.ToInt16(_FindService["RELATED_TRANSACTION_ID_TEMP"]) < 0)
                                        {
                                            DeleteRelatedServices(Convert.ToInt16(_FindService["RELATED_TRANSACTION_ID_TEMP"]));
                                        }
                                        BillData.Tables["INV_PAT_BILLING"].Rows.Remove(_FindService);
                                        isMultipleServiceChangeBlock = 3; //Speed Improve
                                        ClearService();
                                        isMultipleServiceChangeBlock = 0; //Speed Improve
                                    }
                                }
                                /// TASK A1
                                else if (SelectedServiceType == (int)ServiceType.Pharmacy)
                                {
                                    DataRow drItem = drInvPatBilling;
                                    string batch = Convert.ToString(drItem["BATCHNO"]);
                                    if (FindServiceAdded(ServiceID, batch, Convert.ToInt16(drItem["SL_NO"])))
                                    {
                                        //Reset Issued Qty(order from nursing)
                                        if (OrderItems != null && _FindService != null)//IsPharmacyOrderSelected && 
                                        {
                                            drArrayTemp = OrderItems.Select("INV_MAST_SERVICE_ID='" + _FindService["INV_MAST_SERVICE_ID"].ToString() + "'");
                                            if (drArrayTemp != null && drArrayTemp.Length > 0)
                                            {
                                                if (this.ReadNullableValue(drArrayTemp[0]["QUANTITY"]) > 0)
                                                {
                                                    drArrayTemp[0]["QUANTITY"] = this.ReadNullableValue(drArrayTemp[0]["QUANTITY"]) - ReadNullableValue(_FindService["QTY"]);
                                                }
                                                else
                                                {
                                                    drArrayTemp[0]["QUANTITY"] = 0;
                                                }
                                            }
                                        }
                                        BillData.Tables["INV_PAT_BILLING"].Rows.Remove(_FindService);
                                    }
                                    if (BillData.Tables["INV_PAT_BILLING"].Rows.Count == 0)
                                    {
                                    }
                                }

                                //Insurance approval checking
                                foreach (DataRow drInvPat in BillData.Tables["INV_PAT_BILLING"].Rows)
                                {
                                    ValidateInsuranceApproval(drInvPat);
                                    if (IfNullReturnZero(drInvPat["EMR_PAT_DTLS_INV_ORDER_ID"]) > 0 && ERxVisibility == Visibility.Visible)
                                    {
                                        if (PhRXDtlsInfoNotApproved.KIIsNotNullAndRowCount() &&
                                            PhRXDtlsInfoNotApproved.AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(drInvPat["EMR_PAT_DTLS_INV_ORDER_ID"])).Any())
                                        {
                                            DataRow[] filteredQuer = PhRXDtlsInfoNotApproved.AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(drInvPat["EMR_PAT_DTLS_INV_ORDER_ID"])).ToArray();
                                            if ((filteredQuer.Any() && (IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) != 1 && IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) != 2 && IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) != 7 && IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) != 3)) || !filteredQuer.Any())
                                            {
                                                drInvPat["IS_APPROVED"] = 0;//not approved will disable the save checkbox
                                                drInvPat["IS_APPROVED_ENABLE"] = 0;//to disable edit, qty and qty unit.
                                            }
                                            if (filteredQuer.Any() && IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) == 3)
                                            {
                                                //drInvPat["INCEXLCSTATUS"] = 0;
                                                //if included item is denied Through PBM then make it excluded....PBM Live issue correction
                                                if (drInvPat["INCEXLCSTATUS"] != DBNull.Value && Convert.ToInt32(drInvPat["INCEXLCSTATUS"]) == 1)
                                                {
                                                    drInvPat["INCEXLCSTATUS"] = 0;
                                                    drInvPat["IS_EDITED"] = 1;
                                                    drInvPat["EDITED_STATUS"] = (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.InclusiontoExclusion;
                                                    LoadServiceChargeDetails(Convert.ToInt64(drInvPat["INV_MAST_SERVICE_ID"]), drInvPat);
                                                    //drInvPat["IS_EDITED"] = 0;
                                                    //drInvPat["EDITED_STATUS"] = DBNull.Value;
                                                }
                                            }
                                            if (filteredQuer.Any() && (IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) == 1 || IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) == 2 || IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) == 7))
                                            {
                                                drInvPat["APPROVAL_STATUS"] = 5;
                                                //if excluded item is approved Through PBM then make it included....PBM Live issue correction
                                                if (drInvPat["INCEXLCSTATUS"] != DBNull.Value && Convert.ToInt32(drInvPat["INCEXLCSTATUS"]) == 0)
                                                {
                                                    drInvPat["INCEXLCSTATUS"] = 1;
                                                    drInvPat["IS_EDITED"] = 1;
                                                    drInvPat["EDITED_STATUS"] = (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.ExclusiontoInclusion;
                                                    LoadServiceChargeDetails(Convert.ToInt64(drInvPat["INV_MAST_SERVICE_ID"]), drInvPat);
                                                    //BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_EDITED"] = 0;
                                                    //BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EDITED_STATUS"] = DBNull.Value;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            drInvPat["IS_APPROVED"] = 0;//not approved will disable the save checkbox
                                            drInvPat["IS_APPROVED_ENABLE"] = 0;//to disable edit, qty and qty unit.
                                        }
                                        if ((drInvPat["INCEXLCSTATUS"] != DBNull.Value && Convert.ToInt32(drInvPat["INCEXLCSTATUS"]) == 0) || IfNullReturnZero(drInvPat["MATERIAL_TYPE"]) == 1 || IfNullReturnZero(drInvPat["MATERIAL_TYPE"]) == 2
                                             || IfNullReturnZero(drInvPat["MATERIAL_TYPE"]) == 3)//for consumable no need to check approval, bug id 39185
                                        {
                                            drInvPat["IS_APPROVED"] = 1;//not approved will disable the save checkbox
                                            drInvPat["IS_APPROVED_ENABLE"] = 1;//to disable edit, qty and qty unit.
                                        }
                                    }
                                    else if (isNonConsultationOrder && ERxVisibility == Visibility.Visible)
                                    {
                                        drInvPat["IS_APPROVED_ENABLE"] = 0;
                                        if (PhRXDtlsInfoNotApproved.KIIsNotNullAndRowCount())
                                        {
                                            if (PhRXDtlsInfoNotApproved.AsEnumerable().Where(x => IfNullReturnZero(x["PH_UNIT_SALES_CONVERSION_ID"]) ==
                                                IfNullReturnZero(drInvPat["PH_UNIT_SALES_CONVERSION_ID"])).Count() > 0)
                                            {
                                                DataRow[] filteredQuer = PhRXDtlsInfoNotApproved.AsEnumerable().Where(x => IfNullReturnZero(x["PH_UNIT_SALES_CONVERSION_ID"]) == IfNullReturnZero(drInvPat["PH_UNIT_SALES_CONVERSION_ID"])).ToArray();
                                                if ((filteredQuer.Any() && (IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) != 1 && IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) != 2 && IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) != 7 && IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) != 3)) || !filteredQuer.Any())
                                                {
                                                    drInvPat["IS_APPROVED"] = 0;//not approved will disable the save checkbox
                                                    drInvPat["IS_APPROVED_ENABLE"] = 0;//to disable edit, qty and qty unit.
                                                }
                                                if (filteredQuer.Any() && IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) == 3)
                                                {
                                                    drInvPat["IS_APPROVED"] = 1;//not approved will disable the save checkbox
                                                    drInvPat["IS_APPROVED_ENABLE"] = 1;
                                                    //drInvPat["INCEXLCSTATUS"] = 0;
                                                    //if included item is denied Through PBM then make it excluded....PBM Live issue correction
                                                    if (drInvPat["INCEXLCSTATUS"] != DBNull.Value && Convert.ToInt32(drInvPat["INCEXLCSTATUS"]) == 1)
                                                    {
                                                        drInvPat["INCEXLCSTATUS"] = 0;
                                                        drInvPat["IS_EDITED"] = 1;
                                                        drInvPat["EDITED_STATUS"] = (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.InclusiontoExclusion;
                                                        LoadServiceChargeDetails(Convert.ToInt64(drInvPat["INV_MAST_SERVICE_ID"]), drInvPat);
                                                        //drInvPat["IS_EDITED"] = 0;
                                                        //drInvPat["EDITED_STATUS"] = DBNull.Value;
                                                    }
                                                }
                                                if (filteredQuer.Any() && (IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) == 1 || IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) == 2 || IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) == 7))
                                                {
                                                    drInvPat["APPROVAL_STATUS"] = 5;
                                                    //if excluded item is approved Through PBM then make it included....PBM Live issue correction
                                                    if (drInvPat["INCEXLCSTATUS"] != DBNull.Value && Convert.ToInt32(drInvPat["INCEXLCSTATUS"]) == 0)
                                                    {
                                                        drInvPat["INCEXLCSTATUS"] = 1;
                                                        drInvPat["IS_EDITED"] = 1;
                                                        drInvPat["EDITED_STATUS"] = (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.ExclusiontoInclusion;
                                                        LoadServiceChargeDetails(Convert.ToInt64(drInvPat["INV_MAST_SERVICE_ID"]), drInvPat);
                                                        //BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_EDITED"] = 0;
                                                        //BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EDITED_STATUS"] = DBNull.Value;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                //End

                                DataTable dtTemp = BillData.Tables["INV_PAT_BILLING"].Clone().Copy();
                                dtTemp.Rows.Add();
                                dtTemp.Rows[0]["INV_MAST_SERVICE_ID"] = ServiceID;
                                dtTemp.Rows[0]["INV_PARENT_CATEGORY_ID"] = parentCatID;
                                dtTemp.Rows[0]["INV_CATEGORY_ID"] = invCatID;
                                if (IsPackage)
                                {
                                    //Disable or enable Category
                                    BillGroupWiseFilteration();
                                }
                                else
                                {
                                    CalculateServiceTotal();
                                }
                                _FindService = null;
                                if (BillData.Tables["INV_PAT_BILLING"].Rows.Count == 0 &&
                                    BillData.Tables["INV_PAT_BILLING_TOTAL"].Rows[0]["DISCOUNT_MARKUP_MANUAL"] != DBNull.Value)
                                {
                                    BillData.Tables["INV_PAT_BILLING_TOTAL"].Rows[0]["DISCOUNT_MARKUP_MANUAL"] = 0;
                                }
                                //if (BillData.Tables["GEN_BILL_DISCOUNT"].Rows.Count > 0)
                                //{
                                //    BillData.Tables["GEN_BILL_DISCOUNT"].Rows.Clear();
                                //    TotalAdjustment = 0;
                                //}
                                if (BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Count > 0)
                                {
                                    if (BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + ServiceID).Length > 0)
                                    {
                                        DataRow drPatOrder = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + ServiceID).First();
                                        if (drPatOrder != null)
                                        {
                                            BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Remove(drPatOrder);
                                        }
                                    }
                                }
                            }
                            else if (drInvPatBilling["GENERIC_ID"] != DBNull.Value)
                            {
                                DataRow dr = BillData.Tables["INV_PAT_BILLING"].Select("GENERIC_ID=" + drInvPatBilling["GENERIC_ID"]).First();
                                BillData.Tables["INV_PAT_BILLING"].Rows.Remove(dr);
                            }
                        }
                    }
                }
                if (BillData.Tables["GEN_BILL_DISCOUNT"].KIIsNotNullAndRowCount())
                {
                    foreach (DataRow dr in BillData.Tables["INV_PAT_BILLING"].Rows)
                    {//for resetting the amount while changing qty after adjustment given OTHER_CHARGE
                        if (SelectedVisitModeNew == (int)VisitMode.OPCASH)
                        {
                            dr["NET_AMOUNT"] = (IfNullReturnZero(dr["BASE_CHARGE"]) * IfNullReturnZero(dr["QTY"])) + IfNullReturnZero(dr["OTHER_CHARGE"]);
                            dr["NET"] = IfNullReturnZero(dr["BASE_CHARGE"]) * IfNullReturnZero(dr["QTY"]);
                            dr["PATIENT_SHARE"] = dr["NET_AMOUNT"];
                        }
                        dr["DISCOUNT"] = 0;
                        dr["MARKUP"] = 0;
                        dr["ADJUSTMENT"] = 0;
                    }
                    //bug id 24819
                    CalculateMaxMinCopay();
                    //end bug
                    if ((SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE")
                      && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value
                      && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.OPCASH)
                      || SelectedVisitMode == (int)VisitMode.OPCASH)
                    {
                        CalculateTotalAdjustment();
                    }
                    else
                    {
                        TotalAdjustment = 0;
                    }
                }
                if (!isERCredit)
                {
                    ToBeCollected = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                       .Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]))
                       .Select(x => IfNullReturnZero(x["PATIENT_SHARE"])).Sum();
                }
                if (SelectedVisitModeNew != (int)VisitMode.OPCASH)
                {
                    CalculateMaxMinCopay();
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void GenBillDiscountRecalculation(DataRow drInvPatBilling)
        {
            if (BillData.Tables["GEN_BILL_DISCOUNT"].Rows.Count > 0)
            {
                if (drInvPatBilling["DISCOUNT"] != DBNull.Value && Convert.ToDecimal(drInvPatBilling["DISCOUNT"]) < 0
                    && BillData.Tables["GEN_BILL_DISCOUNT"].Rows[0]["DISCOUNT"] != DBNull.Value
                    && Convert.ToDecimal(BillData.Tables["GEN_BILL_DISCOUNT"].Rows[0]["DISCOUNT"]) < 0)
                {
                    BillData.Tables["GEN_BILL_DISCOUNT"].Rows[0]["DISCOUNT"] = Convert.ToDecimal(BillData.Tables["GEN_BILL_DISCOUNT"].Rows[0]["DISCOUNT"])
                        - Convert.ToDecimal(drInvPatBilling["DISCOUNT"]);
                    if ((BillData.Tables["GEN_BILL_DISCOUNT"].Rows[0]["DISCOUNT"] == DBNull.Value ||
                        Convert.ToDecimal(BillData.Tables["GEN_BILL_DISCOUNT"].Rows[0]["DISCOUNT"]) == 0)
                        && (BillData.Tables["GEN_BILL_DISCOUNT"].Rows[0]["MARKUP"] == DBNull.Value ||
                        Convert.ToDecimal(BillData.Tables["GEN_BILL_DISCOUNT"].Rows[0]["MARKUP"]) == 0))
                    {
                        BillData.Tables["GEN_BILL_DISCOUNT"].Rows.Clear();
                    }
                }
                if (BillData.Tables["GEN_BILL_DISCOUNT"].KIIsNotNullAndRowCount()
                    && drInvPatBilling["MARKUP"] != DBNull.Value && Convert.ToDecimal(drInvPatBilling["MARKUP"]) < 0
                    && BillData.Tables["GEN_BILL_DISCOUNT"].Rows[0]["MARKUP"] != DBNull.Value
                    && Convert.ToDecimal(BillData.Tables["GEN_BILL_DISCOUNT"].Rows[0]["MARKUP"]) < 0)
                {
                    BillData.Tables["GEN_BILL_DISCOUNT"].Rows[0]["MARKUP"] = Convert.ToDecimal(BillData.Tables["GEN_BILL_DISCOUNT"].Rows[0]["MARKUP"])
                        - Convert.ToDecimal(drInvPatBilling["MARKUP"]);
                    if ((BillData.Tables["GEN_BILL_DISCOUNT"].Rows[0]["DISCOUNT"] == DBNull.Value ||
                        Convert.ToDecimal(BillData.Tables["GEN_BILL_DISCOUNT"].Rows[0]["DISCOUNT"]) == 0)
                        && (BillData.Tables["GEN_BILL_DISCOUNT"].Rows[0]["MARKUP"] == DBNull.Value ||
                        Convert.ToDecimal(BillData.Tables["GEN_BILL_DISCOUNT"].Rows[0]["MARKUP"]) == 0))
                    {
                        BillData.Tables["GEN_BILL_DISCOUNT"].Rows.Clear();
                    }
                }
                TotalAdjustment = 0;
            }
            //end
        }

        private void Executed_EMROrderLoad(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                DataRowView drvEMROrder = (DataRowView)e.Parameter;
                if (drvEMROrder != null)//&& Validate(drvEMROrder.Row)
                {
                    //Adding Remark for Nurse Indent
                    if (EMROrderRelation != null && EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0)
                    //&& IsPharmacyOrderSelected==true
                    {
                        if (!EMROrderRelation.Tables["Detail"].Columns.Contains("INDENT_ISSUE_REMARK"))
                        {
                            EMROrderRelation.Tables["Detail"].Columns.Add("INDENT_ISSUE_REMARK", typeof(string));
                        }
                    }
                    //END
                    if (EMROrderRelation != null && EMROrderRelation.Tables["Detail"].DefaultView != null)
                    {
                        EMROrderRelation.Tables["Detail"].DefaultView.RowFilter = "EMR_PAT_MAST_INV_ORDER_ID=" + drvEMROrder.Row["EMR_PAT_MAST_INV_ORDER_ID"];
                    }
                    else if (drvEMROrder["MAINITEM"] != DBNull.Value && Convert.ToInt16(drvEMROrder["MAINITEM"]) == 1
                        && EMROrderRelation != null && EMROrderRelation.Tables["Detail"].DefaultView != null) //1-RootItem
                    {
                        EMROrderRelation.Tables["Detail"].DefaultView.RowFilter = "EMR_PAT_MAST_INV_ORDER_ID='" + drvEMROrder.Row["EMR_PAT_MAST_INV_ORDER_ID"] + "'";
                        //PARENT_INV_CATEGORY_ID
                    }
                    else if (drvEMROrder["MAINITEM"] != DBNull.Value && Convert.ToInt16(drvEMROrder["MAINITEM"]) == 0
                        && EMROrderRelation != null && EMROrderRelation.Tables["Detail"].DefaultView != null) //1-RootItem
                    {
                        EMROrderRelation.Tables["Detail"].DefaultView.RowFilter = "EMR_PAT_MAST_INV_ORDER_ID='" + drvEMROrder.Row["EMR_PAT_MAST_INV_ORDER_ID"] + "'" +
                                                                                    " AND PARENT_INV_CATEGORY_ID='" + drvEMROrder.Row["PARENT_INV_CATEGORY_ID"] + "'";
                    }
                    int index = 0;
                    DataTable dtDetail = EMROrderRelation != null && EMROrderRelation.Tables["Detail"].DefaultView != null
                        ? EMROrderRelation.Tables["Detail"].DefaultView.ToTable() : null;
                    if (dtDetail.Columns.Contains("SINO"))
                    {
                        foreach (DataRow item in dtDetail.Rows)
                        {
                            item["SINO"] = ++index;
                        }
                    }
                    else if (dtDetail.Columns.Contains("SL_NO"))
                    {
                        foreach (DataRow item in dtDetail.Rows)
                        {
                            item["SL_NO"] = ++index;
                        }
                    }
                    if (drvEMROrder.Row.Table.Columns.Contains("PROVIDER_ID"))
                    {
                        SelectedEMROrder = drvEMROrder.Row;//["PROVIDER_ID"].ToString();
                    }
                    else if (dtDetail != null && dtDetail.Rows.Count > 0 && EMROrderRelation != null && EMROrderRelation.Tables["Order"] != null)
                    {
                        DataRow[] drFound = EMROrderRelation.Tables["Order"].Select("EMR_PAT_MAST_INV_ORDER_ID='" + dtDetail.Rows[0]["EMR_PAT_MAST_INV_ORDER_ID"] + "'");
                        if (drFound.Length > 0)
                        {
                            SelectedEMROrder = drFound[0];
                        }
                    }
                    OrderItems = null;
                    OrderItems = dtDetail;
                    //IsEMROrderSelected = true; //blocking clear the selected CPOE orders from grid while selecting another order 
                    if (dtDetail != null && dtDetail.Rows.Count > 0)
                    {
                    }
                }

            }
            catch (Exception)
            {
                throw;
            }
        }


        private void SetInitalData_EMRCPOE()
        {
            try
            {
                //Fetch EMR order
                //&& CommonData.SelectedModule!=Module.FoodAndBeverage
                if ((SelectedPatientFinEpisodeID > 0 || SelectedPatientFinEncounterID > 0) && SelectedProvider != null)
                {
                    if (isTaskClearBilllingEbabled || (!isTaskClearBilllingEbabled && PatientInformation != null && PatientInformation.Rows.Count > 0 && IsPatient && !IsDonor)) //Speed Improve
                    {
                        IsCPOEOrderExist = false;
                        EMROrderItems = null;
                        EMROrderRelation = null;
                        OrderItems = null;
                        bool IsLoad = true;
                        //loading cpoe based on CPOE_DETAILS_FOR_IP_IN_BILLING in ip 
                        if (SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE") && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.IP)
                        {
                            //string Value = CommonData.GetDefaultSettings("CPOE_DETAILS_FOR_IP_IN_BILLING");
                            //if (!string.IsNullOrEmpty(Value) && Value.Equals("0"))
                            if (!DefaultSettings.Values.CPOE_DETAILS_FOR_IP_IN_BILLING)
                            {
                                IsLoad = false;
                            }
                        }
                        if (IsLoad && SelectedServiceType == (int)ServiceType.Investigation && IsFromCoderReview) // fetching Emr Orders for Service Billing from Code Review, Validation purpose only
                        {
                            EMROrder = this.LoadEMROrder(PatientInformation.Rows[0]);
                            EMROrder.TableName = "Order";
                            //Fetch EMR order details
                            if (EMROrder.Rows.Count > 0)
                            {
                                //IsCPOEOrderExist = true;
                                EMROrderItems = new DataTable();
                                string[] emrMastIds = (from drId in EMROrder.AsEnumerable() select Convert.ToString(drId["EMR_PAT_MAST_INV_ORDER_ID"])).Distinct().ToArray(); //Speed Improve
                                if (emrMastIds.Length == 1)
                                {
                                    EMROrderItems = this.LoadEMROrderItems(Convert.ToInt64(emrMastIds[0])); //Speed Improve
                                }
                                else
                                {
                                    string emrMastId = String.Join(",", emrMastIds);
                                    EMROrderItems = this.LoadEMROrderItems(emrMastId); //Speed Improve
                                }
                                ////////////DataTable dtOrder = EMROrder.DefaultView.ToTable(true, "EMR_PAT_MAST_INV_ORDER_ID");
                                ////////////DataTable dtGetData = null;
                                //////////////DataRow[] drRows = null;
                                ////////////foreach (DataRow item in dtOrder.Rows)
                                ////////////{
                                ////////////    dtGetData = this.LoadEMROrderItems(Convert.ToInt64(item["EMR_PAT_MAST_INV_ORDER_ID"]));
                                ////////////    if (dtGetData != null && dtGetData.Rows.Count > 0)
                                ////////////    {
                                ////////////        EMROrderItems.Merge(dtGetData);
                                ////////////    }
                                ////////////}
                                //--Loading pharmacy in service billing
                                //EMROrderItems.TableName = "Detail";
                                //EMROrderItems.Columns.Add("SINO", typeof(int));
                                //EMROrderRelation = this.CreateEMRServiceOrderRelation();
                                //if (EMROrderRelation != null && EMROrder.KIIsNotNullAndRowCount())
                                //{
                                //    IsCPOEOrderExist = true;
                                //    //Load first order details    
                                //    EMROrderRelation.Tables["Detail"].DefaultView.RowFilter = "EMR_PAT_MAST_INV_ORDER_ID=" + EMROrder.Rows[0]["EMR_PAT_MAST_INV_ORDER_ID"];
                                //    OrderItems = EMROrderRelation.Tables["Detail"].DefaultView.ToTable();
                                //}
                            }
                        }
                        else if (IsLoad && SelectedServiceType == (int)ServiceType.Investigation && !IsFromCoderReview)
                        {
                            if (isTaskClearBilllingEbabled && SelectedEncounterDetails != null)
                            {
                                EMROrder = this.LoadEMROrder(SelectedEncounterDetails.Row);
                            }
                            else
                            {
                                EMROrder = this.LoadEMROrder(PatientInformation.Rows[0]);
                            }
                            EMROrder.TableName = "Order";
                            //Fetch EMR order details
                            if (EMROrder.Rows.Count > 0)
                            {
                                //IsCPOEOrderExist = true;
                                EMROrderItems = new DataTable();
                                string[] emrMastIds = (from drId in EMROrder.AsEnumerable() select Convert.ToString(drId["EMR_PAT_MAST_INV_ORDER_ID"])).Distinct().ToArray();
                                if (emrMastIds.Length == 1)
                                {
                                    EMROrderItems = this.LoadEMROrderItems(Convert.ToInt64(emrMastIds[0]));
                                }
                                else
                                {
                                    //string emrMastId = String.Join(",", emrMastIds);
                                    EMROrderItems = this.LoadEMROrderItems(String.Join(",", emrMastIds));
                                }
                                ////////DataTable dtOrder = EMROrder.DefaultView.ToTable(true, "EMR_PAT_MAST_INV_ORDER_ID");
                                ////////DataTable dtGetData = null;
                                ////////DataRow[] drRows = null;
                                ////////foreach (DataRow item in dtOrder.Rows)
                                ////////{
                                ////////    dtGetData = this.LoadEMROrderItems(Convert.ToInt64(item["EMR_PAT_MAST_INV_ORDER_ID"]));
                                ////////    if (dtGetData != null && dtGetData.Rows.Count > 0)
                                ////////    {
                                ////////        EMROrderItems.Merge(dtGetData);
                                ////////    }
                                ////////}
                                //--Loading pharmacy in service billing
                                //EMROrderItems.TableName = "Detail";
                                //EMROrderItems.Columns.Add("SINO", typeof(int));
                                //EMROrderRelation = this.CreateEMRServiceOrderRelation();
                                //if (EMROrderRelation != null && EMROrder.KIIsNotNullAndRowCount())
                                //{
                                //    IsCPOEOrderExist = true;
                                //    //Load first order details    
                                //    EMROrderRelation.Tables["Detail"].DefaultView.RowFilter = "EMR_PAT_MAST_INV_ORDER_ID=" + EMROrder.Rows[0]["EMR_PAT_MAST_INV_ORDER_ID"];
                                //    OrderItems = EMROrderRelation.Tables["Detail"].DefaultView.ToTable();
                                //}
                            }
                            //--Loading pharmacy in service billing
                            isEmrPharmacyLoad = true;
                            DataTable dtTempEMROrder = null;
                                //this.LoadEMROrder(PatientInformation.Rows[0]);
                            if (isTaskClearBilllingEbabled && SelectedEncounterDetails != null)
                            {
                                dtTempEMROrder = this.LoadEMROrder(SelectedEncounterDetails.Row);
                            }
                            else
                            {
                                dtTempEMROrder = this.LoadEMROrder(PatientInformation.Rows[0]);
                            }
                            dtTempEMROrder.TableName = "Order";
                            if (dtTempEMROrder.Rows.Count > 0)
                            {
                                if (IsNonConsultEncounter)
                                {
                                    EMROrder.Clear();
                                }
                                else
                                //{
                                //    ////////var resDtlsOrder = dtTempEMROrder.AsEnumerable().Where(w => IfNullReturnZero(w["PAT_FIN_ENCOUNTER_ID"]) == SelectedPatientFinEncounterID);
                                //    ////////if (resDtlsOrder.Any())
                                //    ////////{
                                //    ////////    dtTempEMROrder = resDtlsOrder.CopyToDataTable();
                                //    ////////    dtTempEMROrder.TableName = "Order";
                                //    ////////}
                                //}
                                //if (dtTempEMROrder.Rows.Count > 0)
                                {
                                    bool isPhDtlsOrderExist = false;
                                    //IsCPOEOrderExist = true;
                                    if (!EMROrderItems.KIIsNotNullAndRowCount())
                                    {
                                        EMROrderItems = new DataTable();
                                    }
                                    //DataTable dtOrder = dtTempEMROrder.DefaultView.ToTable(true, "EMR_PAT_MAST_INV_ORDER_ID");
                                    DataTable dtGetData = null;
                                    //foreach (DataRow item in dtOrder.Rows)
                                    //{
                                    string[] emrMastIds = (from drId in dtTempEMROrder.AsEnumerable() select Convert.ToString(drId["EMR_PAT_MAST_INV_ORDER_ID"])).Distinct().ToArray();
                                    if (emrMastIds.Length > 0)
                                    {
                                        DataTable dtCriteria = new DataTable();
                                        dtCriteria.Columns.Add("EMR_PAT_MAST_INV_ORDER_IDS");
                                        dtCriteria.Rows.Add(String.Join(",", emrMastIds));
                                        objEmrShared = new MainEMRShared();
                                        dtGetData = objEmrShared.FetchInvOrderDtls(dtCriteria, 29);
                                        if (dtGetData != null && dtGetData.Rows.Count > 0)
                                        {
                                            EMROrderItems.Merge(dtGetData);
                                            isPhDtlsOrderExist = true;
                                        }
                                    }
                                    if ((!IsNonConsultEncounter && isPhDtlsOrderExist) || IsNonConsultEncounter)
                                    {
                                        EMROrder.Merge(dtTempEMROrder.Copy());
                                    }
                                }
                            }
                            isEmrPharmacyLoad = false;
                            //--Loading pharmacy in service billing
                            if (EMROrderItems.KIIsNotNullAndRowCount())
                            {
                                EMROrderItems.TableName = "Detail";
                                EMROrderItems.Columns.Add("SINO", typeof(int));
                                EMROrderRelation = this.CreateEMRServiceOrderRelation();
                                if (EMROrderRelation != null && EMROrder.KIIsNotNullAndRowCount())
                                {
                                    IsCPOEOrderExist = true;
                                    //Load first order details    
                                    EMROrderRelation.Tables["Detail"].DefaultView.RowFilter = "EMR_PAT_MAST_INV_ORDER_ID=" + EMROrder.Rows[0]["EMR_PAT_MAST_INV_ORDER_ID"];
                                    OrderItems = EMROrderRelation.Tables["Detail"].DefaultView.ToTable();
                                }
                            }
                        }
                        else if (IsLoad && SelectedServiceType == (int)ServiceType.Pharmacy)
                        {
                            LoadPhRxDtlsInfo();
                            if (IsFromPharmacyPanel)
                            {
                                isPharmacyPanelCirteria = true;
                                EMROrder = this.LoadEMROrder(PatientInformation.Rows[0]);
                                EMROrder.TableName = "Order";
                                isPharmacyPanelCirteria = false;
                            }
                            DsEMROrderData = this.LoadEMRPharmacyOrder(PatientInformation.Rows[0]);

                            if (DsEMROrderData != null && DsEMROrderData.Tables.Contains("EMR_PAT_DTLS_PH_ORDER") && DsEMROrderData.Tables["EMR_PAT_DTLS_PH_ORDER"].KIIsNotNullAndRowCount() && DsEMROrderData.Tables["EMR_PAT_DTLS_PH_ORDER"].Columns.Contains("REF_DTLS_PH_ORDER_ID"))
                            {
                                string[] str = DsEMROrderData.Tables["EMR_PAT_DTLS_PH_ORDER"].AsEnumerable().Where(x => IfNullReturnZero(x["REF_DTLS_PH_ORDER_ID"]) > 0).Select(x => Convert.ToString(x["REF_DTLS_PH_ORDER_ID"])).Distinct().ToArray();
                                if (str.Any())
                                {
                                    DsEMROrderData.Tables["EMR_PAT_DTLS_PH_ORDER"].AsEnumerable().Where(x => str.Contains(Convert.ToString(x["REF_DTLS_PH_ORDER_ID"])) || str.Contains(Convert.ToString(x["EMR_PAT_DTLS_PH_ORDER_ID"]))).ForEach(x => x["IS_ADDITIVE"] = 1);
                                }
                            }
                            //Loading Internal and External Medicines 
                            if (DsEMROrderData != null && DsEMROrderData.Tables.Contains("EMR_PAT_DTLS_PH_ORDER") &&
                                    DsEMROrderData.Tables["EMR_PAT_DTLS_PH_ORDER"].KIIsNotNullAndRowCount())
                            {
                                DataTable dtEmrDtls = DsEMROrderData.Tables["EMR_PAT_DTLS_PH_ORDER"].Copy();
                                DsEMROrderData.Tables["EMR_PAT_DTLS_PH_ORDER"].Rows.Clear();
                                var FilterQuery = dtEmrDtls.AsEnumerable().Where(x => Convert.ToInt16(IfNullReturnZero(x["IS_INTERNAL_PHARMACY"])) == Convert.ToInt16(!IsFromPharmacyPanel)).Select(x => x);
                                if (FilterQuery.Any())
                                {
                                    DsEMROrderData.Tables["EMR_PAT_DTLS_PH_ORDER"].Merge(FilterQuery.CopyToDataTable().Copy());
                                }
                            }

                            //this part is for filtering the order based on check box selection (pending,verified,verfied omni)--added by mohd adil
                            if (DefaultSettings.Values.IS_VERIFICATION_REQUIRED && IsFromPharmacyPanel
                                && Convert.ToInt16(SelectedVisitModeNew) == (int)VisitMode.IP)
                            {
                                EnableVerificationSettingBased = true;
                            }
                            if (IsFromPharmacyPanel && EnableVerificationSettingBased && SelectedVisitModeNew == (int)VisitMode.IP && DsEMROrderData != null && DsEMROrderData.Tables.Contains("EMR_PAT_DTLS_PH_ORDER") && DsEMROrderData.Tables["EMR_PAT_DTLS_PH_ORDER"].KIIsNotNullAndRowCount() && DsEMROrderData.Tables["EMR_PAT_DTLS_PH_ORDER"].Columns.Contains("VERIFICATION_STATUS"))
                            {
                                if (IsPendingOrderChecked)//for loading all Unverified items
                                {
                                    DataTable dtEmrDtls = DsEMROrderData.Tables["EMR_PAT_DTLS_PH_ORDER"].Copy();
                                    DsEMROrderData.Tables["EMR_PAT_DTLS_PH_ORDER"].Rows.Clear();
                                    var FilterQuery = dtEmrDtls.AsEnumerable().Where(x => Convert.ToInt16(IfNullReturnZero(x["VERIFICATION_STATUS"])) == 0).Select(x => x);
                                    if (FilterQuery.Any())
                                    {
                                        DsEMROrderData.Tables["EMR_PAT_DTLS_PH_ORDER"].Merge(FilterQuery.CopyToDataTable().Copy());
                                    }
                                }
                                else if (IsVerifiedChecked) //for loading only verified non omnicell item
                                {
                                    DataTable dtEmrDtls = DsEMROrderData.Tables["EMR_PAT_DTLS_PH_ORDER"].Copy();
                                    DsEMROrderData.Tables["EMR_PAT_DTLS_PH_ORDER"].Rows.Clear();
                                    var FilterQuery = dtEmrDtls.AsEnumerable().Where(x => Convert.ToInt16(IfNullReturnZero(x["VERIFICATION_STATUS"])) == 1).Select(x => x);
                                    if (FilterQuery.Any())
                                    {
                                        DsEMROrderData.Tables["EMR_PAT_DTLS_PH_ORDER"].Merge(FilterQuery.CopyToDataTable().Copy());
                                    }
                                }
                                else if (IsVerifiedOmniChecked)//for loading only verified omnicell item
                                {
                                    DataTable dtEmrDtls = DsEMROrderData.Tables["EMR_PAT_DTLS_PH_ORDER"].Copy();
                                    DsEMROrderData.Tables["EMR_PAT_DTLS_PH_ORDER"].Rows.Clear();
                                    var FilterQuery = dtEmrDtls.AsEnumerable().Where(x => Convert.ToInt16(IfNullReturnZero(x["VERIFICATION_STATUS"])) == 2).Select(x => x);
                                    if (FilterQuery.Any())
                                    {
                                        DsEMROrderData.Tables["EMR_PAT_DTLS_PH_ORDER"].Merge(FilterQuery.CopyToDataTable().Copy());
                                    }
                                }
                            }
                            //Loading Internal and External Medicines 
                            DurationNullConvertion(DsEMROrderData);
                            if (DsEMROrderData.Tables.Contains("EMR_PAT_MAST_PH_ORDER") && DsEMROrderData.Tables["EMR_PAT_MAST_PH_ORDER"].KIIsNotNullAndRowCount())
                            {
                                foreach (DataRow dr in DsEMROrderData.Tables["EMR_PAT_MAST_PH_ORDER"].Rows)
                                {
                                    if (dr["EPISODE_NO"] != DBNull.Value)
                                    {
                                        dr["EPISODE_ENCOUNTER_NO"] = Convert.ToString(dr["EPISODE_NO"] + "/" + dr["ENCOUNTER_NO"]);
                                        dr["TOOLTIP_EPI_ENC_NO"] = "Episode/Encounter";
                                    }
                                    else if (dr["ENCOUNTER_NO"] != DBNull.Value)
                                    {
                                        dr["EPISODE_ENCOUNTER_NO"] = Convert.ToString(dr["ENCOUNTER_NO"]);
                                        dr["TOOLTIP_EPI_ENC_NO"] = "Encounter";
                                    }
                                }
                            }
                            DataSet dsEmrData = DsEMROrderData;
                            if (!IsAllChecked)
                            {
                                if (SelectedOpenEpisodeID != string.Empty)
                                {
                                    var Query = dsEmrData.Tables["EMR_PAT_MAST_PH_ORDER"].AsEnumerable()
                                        .Where(x => x["EPISODE_NO"] != DBNull.Value && Convert.ToInt64(x["EPISODE_NO"]) == Convert.ToInt64(SelectedOpenEpisodeID))
                                            .Select(x => x);
                                    if (Query.Count() > 0)
                                    {
                                        DataTable dtTemp = Query.CopyToDataTable();
                                        dsEmrData.Tables["EMR_PAT_MAST_PH_ORDER"].Rows.Clear();
                                        dsEmrData.Tables["EMR_PAT_MAST_PH_ORDER"].Merge(dtTemp.Copy());
                                    }
                                }
                            }
                            EMROrderRelation = this.CreateEMRPharmacyOrderRelation(dsEmrData);
                        }
                        else if (IsLoad && SelectedServiceType == (int)ServiceType.Cafeteria && SelectedVisitMode == VisitMode.IP || SelectedVisitMode == VisitMode.OPCASH)
                        {
                            //SelectedCurrentOrderIndex = -1;
                            DataSet dsData = new DataSet();
                            DataSet dsDataTemp = LoadEMRKOTOrder();
                            if (dsDataTemp != null && dsDataTemp.Tables["EMR_PAT_MAST_KOT"].KIIsNotNullAndRowCount())
                            {
                                dsDataTemp.Tables["EMR_PAT_MAST_KOT"].DefaultView.RowFilter = "STATUS=0";
                                dsData.Tables.Add(dsDataTemp.Tables["EMR_PAT_MAST_KOT"].DefaultView.ToTable());
                            }
                            //Commented by Saranya On 26/Apr/2012 as said by sherin.. Dispaly all servic , no need to check any status
                            if (dsDataTemp != null && dsDataTemp.Tables["EMR_PAT_DTLS_KOT"].KIIsNotNullAndRowCount()
                                && dsData != null && dsData.Tables["EMR_PAT_MAST_KOT"].KIIsNotNullAndRowCount())
                            {
                                string[] IDs = (from dr in dsData.Tables["EMR_PAT_MAST_KOT"].AsEnumerable()
                                                where dr["EMR_PAT_MAST_KOT_ID"] != DBNull.Value
                                                select dr["EMR_PAT_MAST_KOT_ID"].ToString()).Distinct().ToArray();
                                if (IDs.Length > 0)
                                {
                                    dsDataTemp.Tables["EMR_PAT_DTLS_KOT"].DefaultView.RowFilter = "EMR_PAT_MAST_KOT_ID IN(" + string.Join(",", IDs) + ")";
                                    dsData.Tables.Add(dsDataTemp.Tables["EMR_PAT_DTLS_KOT"].DefaultView.ToTable());
                                }
                            }
                            if (dsDataTemp != null && dsDataTemp.Tables["EMR_PAT_KOT_PACKAGE"].KIIsNotNullAndRowCount()
                                && dsData != null && dsData.Tables["EMR_PAT_DTLS_KOT"].KIIsNotNullAndRowCount())
                            {
                                string[] IDs = (from dr in dsData.Tables["EMR_PAT_DTLS_KOT"].AsEnumerable()
                                                where dr["EMR_PAT_DTLS_KOT_ID"] != DBNull.Value
                                                select dr["EMR_PAT_DTLS_KOT_ID"].ToString()).Distinct().ToArray();
                                if (IDs.Length > 0)
                                {
                                    dsDataTemp.Tables["EMR_PAT_KOT_PACKAGE"].DefaultView.RowFilter = "EMR_PAT_DTLS_KOT_ID IN(" + string.Join(",", IDs) + ")";
                                    dsData.Tables.Add(dsDataTemp.Tables["EMR_PAT_KOT_PACKAGE"].DefaultView.ToTable());
                                }
                            }
                            EMROrderRelation = this.CreateEMRKOTOrderRelation(dsData);
                            if (dsData != null && dsData.Tables.Contains("EMR_PAT_KOT_PACKAGE") && dsData.Tables["EMR_PAT_KOT_PACKAGE"].KIIsNotNullAndRowCount())
                            {
                                KOTPackageServiceTemp = dsData.Tables["EMR_PAT_KOT_PACKAGE"].Copy();
                            }
                            if (dsData != null && dsData.Tables["ORDERRELATION"].KIIsNotNullAndRowCount())
                            {
                                KOTOrder = dsData.Tables["ORDERRELATION"].DefaultView[0];
                                //Executed_EMROrderSelection(null, null);
                                KOTOrder = null;
                            }
                        }
                        IsLoadEMRCPOE = false;
                    }
                }
                else
                {
                    if (EMROrder != null)
                    {
                        EMROrder.Rows.Clear();
                    }
                    IsCPOEOrderExist = false;
                    EMROrderItems = null;
                    EMROrderRelation = null;
                    OrderItems = null;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void LoadPhRxDtlsInfo()
        {
            try
            {
                Main.MainBilling objMainBilling = new MainBilling();
                DataTable dtCriteria = new DataTable();
                dtCriteria.Columns.Add("MODE", typeof(int));
                dtCriteria.Columns.Add("PAT_FIN_ENCOUNTER_ID", typeof(long));
                //DataTable dtSetting = CommonData.GetDefaultSettings(0, "IS_PBM_REQUEST_ONLY");
                //if (dtSetting != null && dtSetting.Rows.Count > 0 && Convert.ToInt16(dtSetting.Rows[0]["VALUE"]) == 1
                if(DefaultSettings.Values.IS_PBM_REQUEST_ONLY
                    && ERxVisibility == Visibility.Visible && IsFromPharmacyPanel
                 && SelectedPatientFinEncounterID != null && SelectedPatientFinEncounterID > 0)
                {
                    dtCriteria.Rows.Add(1, SelectedPatientFinEncounterID);
                    PhRXDtlsInfo = objMainBilling.FetchPharmacyRXDtls(dtCriteria);
                    dtCriteria.Rows[0]["MODE"] = 3;
                    PhRXDtlsInfoNotApproved = objMainBilling.FetchPharmacyRXDtls(dtCriteria);
                }
                else
                {
                    if (ERxVisibility == Visibility.Visible && IsFromPharmacyPanel && ERXNo != null && ERXNo != string.Empty
                 && SelectedPatientFinEncounterID != null && SelectedPatientFinEncounterID > 0)
                    {
                        dtCriteria.Columns.Add("ERX_NO", typeof(long));
                        dtCriteria.Rows.Add(0, SelectedPatientFinEncounterID, Convert.ToInt64(ERXNo));
                        PhRXDtlsInfo = objMainBilling.FetchPharmacyRXDtls(dtCriteria);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Loads the orders.
        /// </summary>
        /// <returns></returns>
        private DataTable LoadEMROrder(DataRow drPatientData)
        {
            try
            {
                DataTable dtValue = CPOECriteria(drPatientData);
                if (isEmrPharmacyLoad && !IsNonConsultEncounter)
                {
                    dtValue.Rows[0]["MODE"] = 10;
                }
                if (SelectedPatientFinEncounterID > 0 && !IsNonConsultEncounter) //Speed Improve
                {
                    dtValue.Columns.Add("PAT_FIN_ENCOUNTER_ID", typeof(decimal));
                    dtValue.Rows[0]["PAT_FIN_ENCOUNTER_ID"] = SelectedPatientFinEncounterID;
                }
                DataTable dtTemp = new DataTable();
                dtTemp = objEmrShared.GetEMROrders(dtValue);
                //if (!IsNonConsultEncounter && dtTemp != null && dtTemp.Rows.Count > 0 && SelectedPatientFinEncounterID > 0)
                //{
                //    dtTemp.DefaultView.RowFilter = "PAT_FIN_ENCOUNTER_ID = " + SelectedPatientFinEncounterID;
                //    dtTemp = dtTemp.DefaultView.ToTable().Copy();
                //}
                return dtTemp;    //objEmrShared.GetEMROrders(dtValue);

            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Loads the order items.
        /// </summary>
        private DataTable LoadEMROrderItems(long OrderID)
        {
            //Fetch EMR details
            try
            {
                objEmrShared = new MainEMRShared();
                return objEmrShared.GetEMROrdersDetailsWithOrderID(OrderID, Validity.Valid, 0);//0-unbilled
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Loads the order items.
        /// </summary>
        private DataTable LoadEMROrderItems(string OrderIDs)
        {
            //Fetch EMR details
            try
            {
                objEmrShared = new MainEMRShared();
                return objEmrShared.GetEMROrdersDetailsWithOrderID(OrderIDs, Validity.Valid, 0);//0-unbilled
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// CPOEs the criteria.
        /// </summary>
        /// <param name="drPatientData">The dr patient data.</param>
        /// <returns></returns>
        private DataTable CPOECriteria(DataRow drPatientData)
        {
            objEmrShared = new MainEMRShared();
            DataTable dtCriteria = new DataTable();
            dtCriteria.Columns.Add("MRNO");
            dtCriteria.Columns.Add("FROM_DATE", typeof(DateTime));
            dtCriteria.Columns.Add("TO_DATE", typeof(DateTime));
            dtCriteria.Columns.Add("HOSPITAL_ID");
            dtCriteria.Columns.Add("MODE");
            dtCriteria.Columns.Add("ISBILLED");
            dtCriteria.Rows.Add();
            DataRow dr = dtCriteria.Rows[0];
            dr["MRNO"] = drPatientData["MRNO"];
            //DataTable dtValues = CommonData.GetDefaultSettings(0, "CPOE VALID DAYS");
            //if (dtValues != null && dtValues.Rows.Count > 0)
            if (DefaultSettings.Values.CPOE_VALID_DAYS>=0)
            {
                //-- DAE Modification, If Non Consultant Encounter, Load pending orders also.
                if (SelectedServiceType == (int)ServiceType.Investigation && Is_EM_SettingsEnabled)
                {
                    if (IsNonConsultEncounter && !IsClosedEncounterSelected)
                        //dr["TO_DATE"] = DateTime.Today.AddDays(-1 * Convert.ToInt32(dtValues.Rows[0]["VALUE"]));                       
                        dr["TO_DATE"] = DateTime.Now;
                    else
                        //dr["FROM_DATE"] = DateTime.Today.AddDays(-1 * Convert.ToInt32(dtValues.Rows[0]["VALUE"]));
                        dr["FROM_DATE"] = DateTime.Today.AddDays(-1 * DefaultSettings.Values.CPOE_VALID_DAYS);
                }
                else
                {
                   // dr["FROM_DATE"] = DateTime.Today.AddDays(-1 * Convert.ToInt32(dtValues.Rows[0]["VALUE"]));
                    dr["FROM_DATE"] = DateTime.Today.AddDays(-1 * DefaultSettings.Values.CPOE_VALID_DAYS);
                }
                //-- DAE Modification, END
            }
            if (SelectedServiceType == (int)ServiceType.Investigation)
            {
                dr["ISBILLED"] = 0; //0-unbilled 1-billed
                dr["MODE"] = 3; //Investigation EMR orders
            }
            else if (SelectedServiceType == (int)ServiceType.Pharmacy)
            {
                if (isPharmacyPanelCirteria)
                {
                    dr["ISBILLED"] = 0; //0-unbilled 1-billed
                    dr["MODE"] = 3; //Pharmacy EMR orders
                }
                else
                {
                    dr["ISBILLED"] = -1; //0-unbilled 1-billed
                    dr["MODE"] = 2; //Pharmacy EMR orders
                }
            }
            return dtCriteria;
        }

        private DataSet CreateEMRServiceOrderRelation()
        {
            try
            {
                string[] emrMastID = null;
                DataSet dsData = new DataSet();
                EMROrder.Columns.Remove("EMR_PAT_MAST_INV_ORDER_ID");
                if (EMROrder.Rows.Count > 0 && EMROrderItems != null && EMROrderItems.Rows.Count > 0 && (SelectedProviderValue != string.Empty || IsAllChecked))//(SelectedPatientFinEncounterID > 0 || IsAllChecked) && SelectedProviderValue != string.Empty)
                {
                    IsCPOEOrderExist = true;
                    if (!IsNonConsultEncounter)
                    {
                        if (IsAllChecked)
                        {
                            if (SelectedProviderValue != string.Empty)
                            {
                                if (ERPatientFinEncounterID > 0)
                                {
                                    // Bug ID-19276,18855,19157
                                    // EMROrder.DefaultView.RowFilter = "(EPISODE_END_DATE IS NULL OR EPISODE_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm"))+"')" + " AND PAT_FIN_ENCOUNTER_ID<>'" + ERPatientFinEncounterID + "' AND PROVIDER_ID='" + SelectedProviderValue + "'";
                                    //--- AA0907
                                    //EMROrder.DefaultView.RowFilter = "(EPISODE_END_DATE IS NOT NULL AND EPISODE_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "')" + " AND PAT_FIN_ENCOUNTER_ID<>'" + ERPatientFinEncounterID + "' AND PROVIDER_ID='" + SelectedProviderValue + "'";
                                    EMROrder.DefaultView.RowFilter = "(ENCOUNTER_END_DATE IS NOT NULL AND ENCOUNTER_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "')" + " AND PAT_FIN_ENCOUNTER_ID<>'" + ERPatientFinEncounterID + "' AND PROVIDER_ID='" + SelectedProviderValue + "'";
                                    //--- AA0907
                                }
                                else if (SelectedPatientFinEncounterID > 0)
                                {
                                    //Bug ID-19276,18855,19157
                                    //EMROrder.DefaultView.RowFilter = "(EPISODE_END_DATE IS  NULL OR EPISODE_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "')" + " AND PAT_FIN_ENCOUNTER_ID<>'" + SelectedPatientFinEncounterID + "' AND PROVIDER_ID='" + SelectedProviderValue + "'";
                                    //--- AA0907
                                    //EMROrder.DefaultView.RowFilter = "(EPISODE_END_DATE IS NOT NULL AND EPISODE_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "')" + " AND PAT_FIN_ENCOUNTER_ID<>'" + SelectedPatientFinEncounterID + "' AND PROVIDER_ID='" + SelectedProviderValue + "'";
                                    EMROrder.DefaultView.RowFilter = "(ENCOUNTER_END_DATE IS NOT NULL AND ENCOUNTER_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "')" + " AND PAT_FIN_ENCOUNTER_ID<>'" + SelectedPatientFinEncounterID + "' AND PROVIDER_ID='" + SelectedProviderValue + "'";
                                    //--- AA0907
                                }
                                else
                                {
                                    //Bug ID-18456     
                                    ////if ((SelectedOpenEpisodeID != "" || SelectedOpenEpisodeID != null || SelectedOpenEpisodeID != string.Empty) && SelectedOpenEpisodeID != "0" && SelectedEpisodeDetails != null)
                                    ////{
                                    ////    EMROrder.DefaultView.RowFilter = "EPISODE_END_DATE IS NOT NULL AND EPISODE_END_DATE >= '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "' AND PROVIDER_ID='" + SelectedProviderValue + "'";
                                    ////}
                                    ////else
                                    ////{
                                    //Bug ID-19276,18855,19157
                                    //EMROrder.DefaultView.RowFilter = "(EPISODE_END_DATE IS NULL OR EPISODE_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "')" + " AND PROVIDER_ID='" + SelectedProviderValue + "'";
                                    //--- AA0907
                                    //EMROrder.DefaultView.RowFilter = "(EPISODE_END_DATE IS NOT NULL AND EPISODE_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "')" + " AND PROVIDER_ID='" + SelectedProviderValue + "'";
                                    EMROrder.DefaultView.RowFilter = "(ENCOUNTER_END_DATE IS NOT NULL AND ENCOUNTER_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "')" + " AND PROVIDER_ID='" + SelectedProviderValue + "'";
                                    //--- AA0907
                                    ////}
                                }
                            }
                            else
                            {
                                if (ERPatientFinEncounterID > 0)
                                {
                                    //--- AA0907
                                    //EMROrder.DefaultView.RowFilter = "(EPISODE_END_DATE IS NULL OR EPISODE_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "')"+ " AND PAT_FIN_ENCOUNTER_ID<>'" + ERPatientFinEncounterID + "'";
                                    EMROrder.DefaultView.RowFilter = "(ENCOUNTER_END_DATE IS NULL OR ENCOUNTER_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "')" + " AND PAT_FIN_ENCOUNTER_ID<>'" + ERPatientFinEncounterID + "'";
                                    //--- AA0907
                                }
                                else if (SelectedPatientFinEncounterID > 0)
                                {
                                    //--- AA0907
                                    //EMROrder.DefaultView.RowFilter = "(EPISODE_END_DATE IS NULL OR EPISODE_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "')" + " AND PAT_FIN_ENCOUNTER_ID<>'" + SelectedPatientFinEncounterID + "'";
                                    EMROrder.DefaultView.RowFilter = "(ENCOUNTER_END_DATE IS NULL OR ENCOUNTER_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "')" + " AND PAT_FIN_ENCOUNTER_ID<>'" + SelectedPatientFinEncounterID + "'";
                                    //--- AA0907
                                }
                                else
                                {
                                    if ((SelectedOpenEpisodeID != "" || SelectedOpenEpisodeID != null || SelectedOpenEpisodeID != string.Empty) && SelectedOpenEpisodeID != "0")
                                    {
                                        //--- AA0907
                                        //EMROrder.DefaultView.RowFilter = "EPISODE_END_DATE IS NOT NULL AND EPISODE_END_DATE >= '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "'";
                                        EMROrder.DefaultView.RowFilter = "ENCOUNTER_END_DATE IS NOT NULL AND ENCOUNTER_END_DATE >= '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "'";
                                        //--- AA0907
                                    }
                                    ////else
                                    ////{
                                    ////    EMROrder.DefaultView.RowFilter = " EPISODE_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "' OR EPISODE_END_DATE IS NULL ")";
                                    ////}
                                }
                            }
                            DataTable dtOrderFilter = EMROrder.DefaultView.ToTable();
                            if (dtOrderFilter.KIIsNotNullAndRowCount())
                            {
                                emrMastID = (from dr in dtOrderFilter.AsEnumerable()
                                             select dr["EMR_PAT_MAST_ORDER_ID"].ToString()).ToArray();
                            }
                            EMROrder = EMROrder.DefaultView.ToTable(true, "MAINITEM", "PROVIDER_ID", "EMPNAME", "EPISODE_STATUS", "EPISODE_NO", "PAT_FIN_ENCOUNTER_ID", "EPISODE_ENCOUNTER_NO", "TOOLTIP_EPI_ENC_NO", "ISEMERGENCY");
                            if (IsNonConsultEncounter && SelectedEncounterDetails != null && Convert.ToInt16(SelectedEncounterDetails["ISNONCONSULTENCOUNTER"]) == 0
                                  && EMROrder != null && EMROrder.Rows.Count > 0 && EMROrder.Rows[0]["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value)
                            {
                                MainBillingShared objMainBillingShared = new MainBillingShared();
                                DataTable dtcriteria = new DataTable();
                                dtcriteria.Columns.Add("PAT_FIN_ENCOUNTER_ID");
                                dtcriteria.Columns.Add("MODE");
                                dtcriteria.Rows.Add(EMROrder.Rows[0]["PAT_FIN_ENCOUNTER_ID"], 5);
                                DtICDDetails = objMainBillingShared.FetchAllDiagnosis(dtcriteria);
                            }
                            //"VISIT_DATE",
                        }
                        ////  AA0907 else if (ERPatientFinEncounterID > 0 || SelectedPatientFinEncounterID > 0 || SelectedPatientFinEpisodeID > 0 || ClosedPatientFinEpisodeID > 0) --
                        else if (SelectedPatientFinEncounterID > 0 && (isEncounterPopUpSelected || SelectedVisitModeNew == (int)VisitMode.IP || (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE") && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.IP)))
                        {
                            ////--- AA0907
                            ////if (SelectedPatientFinEpisodeID > 0)
                            ////{
                            ////    EMROrder.DefaultView.RowFilter = "PAT_FIN_EPISODE_ID='" + SelectedPatientFinEpisodeID + "'";
                            ////}
                            ////else if (ERPatientFinEncounterID > 0)
                            ////{
                            ////    EMROrder.DefaultView.RowFilter = "PAT_FIN_ENCOUNTER_ID='" + SelectedPatientFinEncounterID + "'";//+ "AND PROVIDER_ID='" + SelectedProviderValue + "'" --- For ER and IP , orders to be displayed on episodea and encounter, not for provider
                            ////}
                            //// else if (SelectedPatientFinEncounterID > 0)
                            ////END  AA0907
                            if (SelectedPatientFinEncounterID > 0)
                            {
                                EMROrder.DefaultView.RowFilter = "PAT_FIN_ENCOUNTER_ID='" + SelectedPatientFinEncounterID + "'";//+ "AND PROVIDER_ID='" + SelectedProviderValue + "'" --- For ER and IP , orders to be displayed on episodea and encounter, not for provider
                            }
                            if (EMROrder.DefaultView.KIIsNotNullOrEmpty() && EMROrder.DefaultView.ToTable().KIIsNotNullAndRowCount())
                            {
                                emrMastID = (from dr in EMROrder.DefaultView.ToTable().AsEnumerable()
                                             select dr["EMR_PAT_MAST_ORDER_ID"].ToString()).ToArray();
                            }
                            if (SelectedPatientFinEpisodeID > 0)
                            {
                                EMROrder = EMROrder.DefaultView.ToTable(true, "MAINITEM", "PROVIDER_ID", "EMPNAME", "EPISODE_STATUS", "EPISODE_NO", "PAT_FIN_EPISODE_ID", "EPISODE_ENCOUNTER_NO", "TOOLTIP_EPI_ENC_NO", "ISEMERGENCY");
                            }
                            else
                            {
                                EMROrder = EMROrder.DefaultView.ToTable(true, "MAINITEM", "PROVIDER_ID", "EMPNAME", "EPISODE_STATUS", "EPISODE_NO", "PAT_FIN_ENCOUNTER_ID", "EPISODE_ENCOUNTER_NO", "TOOLTIP_EPI_ENC_NO", "ISEMERGENCY");
                            }
                            //"VISIT_DATE", 
                            //EMROrder = EMROrder.DefaultView.ToTable().Copy();
                        }
                        else
                        {
                            EMROrder.Rows.Clear();
                            if (dsData.Tables["Order"] != null && dsData.Tables["Order"].Rows.Count > 0)
                            {
                                dsData.Tables["Order"].Rows.Clear();
                            }
                        }
                    }
                    else
                    {
                        EMROrder.DefaultView.RowFilter = "PROVIDER_ID='" + SelectedProviderValue + "'";
                        EMROrder = EMROrder.DefaultView.ToTable().Copy();
                    }
                    if (EMROrder.KIIsNotNullAndRowCount())
                    {
                        EMROrderItems.Columns["EMR_PAT_MAST_INV_ORDER_ID"].ColumnName = "EMR_PAT_MAST_INV_ORDER_ID_ORIGINAL";
                        DataColumn column1 = new DataColumn("EMR_PAT_MAST_INV_ORDER_ID", typeof(decimal));
                        column1.AutoIncrement = true;
                        column1.AutoIncrementSeed = 1;
                        column1.AutoIncrementStep = 1;
                        // Add the column to a new DataTable.
                        DataTable table = EMROrder.Clone();
                        table.Columns.Add(column1);
                        table.Merge(EMROrder);
                        EMROrder = table;
                        table = null;
                        DataColumn column2 = new DataColumn("EMR_PAT_MAST_INV_ORDER_ID", typeof(decimal));
                        column2.AutoIncrement = true;
                        column2.AutoIncrementSeed = 1;
                        column2.AutoIncrementStep = 1;
                        table = EMROrderItems.Clone();
                        table.Columns.Add(column2);
                        table.Merge(EMROrderItems);
                        EMROrderItems = table;
                        if (EMROrder.KIIsNotNullAndRowCount() && EMROrderItems.KIIsNotNullAndRowCount())
                        {
                            if (emrMastID != null && emrMastID.Length > 0)
                            {
                                EMROrderItems.DefaultView.RowFilter = "EMR_PAT_MAST_INV_ORDER_ID_ORIGINAL IN(" + string.Join(",", emrMastID) + ")";
                                if (EMROrderItems.DefaultView.KIIsNotNullOrEmpty() && EMROrderItems.DefaultView.ToTable().KIIsNotNullAndRowCount())
                                {
                                    EMROrderItems = EMROrderItems.DefaultView.ToTable().Copy();
                                }
                            }
                        }
                        if (IsNonConsultEncounter && EMROrderItems != null && EMROrderItems.Rows.Count > 0)
                        {
                            Int64 EncounterParentCategory = Convert.ToInt64(CommonData.GetLookupData("BASE CATEGORY").Select("FIELD2 ='" + Convert.ToInt16(BaseCategory.Encounter) + "'")[0]["LOOKUP_VALUE"]);
                            EMROrderItems.DefaultView.RowFilter = "PARENT_INV_CATEGORY_ID<>'" + EncounterParentCategory + "'";
                            EMROrderItems = EMROrderItems.DefaultView.ToTable().Copy();
                            if (SelectedEncounterDetails != null && Convert.ToInt16(SelectedEncounterDetails["ISNONCONSULTENCOUNTER"]) == 0
                                 && EMROrder != null && EMROrder.Rows.Count > 0 && EMROrder.Rows[0]["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value)
                            {
                                string[] EncounterIds = (from dr in EMROrder.DefaultView.ToTable(true, "PAT_FIN_ENCOUNTER_ID").Copy().AsEnumerable()
                                                         select dr["PAT_FIN_ENCOUNTER_ID"].ToString()).ToArray();
                                if (EncounterIds.Length > 0 && SelectedEncounterDetails["END_DATE"] == DBNull.Value)
                                {
                                    // DataRow[] Dr =EMROrder.Select("PAT_FIN_ENCOUNTER_ID IN (" + string.Join(",", EncounterIds) + ")");
                                    Array.Sort(EncounterIds);
                                    for (int i = 0; i < EncounterIds.Length; i++)
                                    {
                                        MainBillingShared objMainBillingShared = new MainBillingShared();
                                        DataTable dtcriteria = new DataTable();
                                        dtcriteria.Columns.Add("PAT_FIN_ENCOUNTER_ID");
                                        dtcriteria.Columns.Add("MODE");
                                        dtcriteria.Rows.Add(EncounterIds[i], 5);
                                        if (DtICDDetails != null && DtICDDetails.Rows.Count == 0)
                                        {
                                            DtICDDetails = objMainBillingShared.FetchAllDiagnosis(dtcriteria);
                                            ////foreach (DataRow dr in DtICDDetails.Rows)
                                            ////    dr.SetAdded();
                                        }
                                        else
                                        {
                                            DataTable Dt = objMainBillingShared.FetchAllDiagnosis(dtcriteria);
                                            ////foreach (DataRow dr in Dt.Rows)
                                            ////    dr.SetAdded();
                                            Dt.AsEnumerable().Where(r => Convert.ToInt16(r["IS_PRIMARY"]) == 1).ForEach(r => r["ICD_TYPE_NAME"] = "Secondary");
                                            Dt.AsEnumerable().Where(r => Convert.ToInt16(r["IS_PRIMARY"]) == 1).ForEach(r => r["ICD_TYPE"] = 2);
                                            Dt.AsEnumerable().Where(r => Convert.ToInt16(r["IS_PRIMARY"]) == 1).ForEach(r => r["IS_PRIMARY"] = 2);
                                            foreach (DataRow dr in Dt.AsEnumerable())
                                            {
                                                var query = from drow in DtICDDetails.AsEnumerable()
                                                            where drow["ICD_CODE"] == dr["ICD_CODE"]
                                                            select drow;
                                                if (!query.Any())
                                                {
                                                    DtICDDetails.ImportRow(dr);
                                                }
                                            }
                                        }
                                    }
                                }

                                if (SelectedEncounterDetails != null && Convert.ToInt16(SelectedEncounterDetails["ISNONCONSULTENCOUNTER"]) == 0
                                && EMROrder != null && EMROrder.Rows.Count > 0)
                                {
                                    EMROrder.DefaultView.RowFilter = "EPISODE_STATUS=0";
                                    EMROrder = EMROrder.DefaultView.ToTable().Copy();
                                }

                                //Bug ID: 32220                              
                                if (EMROrder.Rows.Count > 0)
                                {
                                    int count = EMROrder.Rows.Count;
                                    for (int i = 0; i < count - 1; i++)
                                        EMROrder.Rows.RemoveAt(0);
                                }
                                //Bug ID: 32220 --END
                            }
                        }
                        //if (IsAllChecked)
                        //{
                        //}
                        //else if (SelectedPatientFinEncounterID>0)
                        //{
                        //    EMROrderItems.DefaultView.RowFilter = "PAT_FIN_ENCOUNTER_ID='" + SelectedPatientFinEncounterID + "'" + "AND PROVIDER_ID='" + SelectedProviderValue + "'"; ;
                        //    EMROrderItems=EMROrderItems.DefaultView.ToTable().Copy();
                        //}

                        if (IsNonConsultEncounter && EMROrderItems != null && EMROrderItems.Rows.Count > 0)
                        {
                            Int64 EncounterParentCategory = Convert.ToInt64(CommonData.GetLookupData("BASE CATEGORY").Select("FIELD2 ='" + Convert.ToInt16(BaseCategory.Encounter) + "'")[0]["LOOKUP_VALUE"]);
                            // Modified By Aamir 30-11-2016 Filter EPISODE_STATUS=0
                            EMROrderItems.DefaultView.RowFilter = "PARENT_INV_CATEGORY_ID<>'" + EncounterParentCategory + "' AND EPISODE_STATUS=0";
                            EMROrderItems = EMROrderItems.DefaultView.ToTable().Copy();

                        }
                        foreach (DataRow drEMROrder in EMROrder.Rows)
                        {
                            var resEmrOrderItem = EMROrderItems.AsEnumerable().Where(w => Convert.ToString(w["PROVIDER_ID"]) == Convert.ToString(drEMROrder["PROVIDER_ID"]) && //Speed Improve
                                Convert.ToString(w["EPISODE_STATUS"]) == Convert.ToString(drEMROrder["EPISODE_STATUS"]));
                            //string Filter = "PROVIDER_ID=" + item["PROVIDER_ID"] + " AND EPISODE_STATUS=" + item["EPISODE_STATUS"];//AND PROPOSED_DATE='" + item["VISIT_DATE"] + "'
                            //if (EMROrderItems.Select(Filter).Length > 0)
                            //{
                            //    foreach (DataRow itemDetails in EMROrderItems.Select(Filter))
                            //    {
                            //        itemDetails["EMR_PAT_MAST_INV_ORDER_ID"] = item["EMR_PAT_MAST_INV_ORDER_ID"];
                            //    }
                            if (resEmrOrderItem.Any())
                            {
                                resEmrOrderItem.ToList().ForEach(f => f["EMR_PAT_MAST_INV_ORDER_ID"] = drEMROrder["EMR_PAT_MAST_INV_ORDER_ID"]);
                            }
                            else
                            {
                                drEMROrder["EMR_PAT_MAST_INV_ORDER_ID"] = 0; //invalid
                            }
                        }
                        EMROrder.DefaultView.RowFilter = "EMR_PAT_MAST_INV_ORDER_ID<>0";
                        EMROrder = EMROrder.DefaultView.ToTable();
                        //DataSet dsData = new DataSet();
                        dsData.Tables.Add(EMROrder.Copy());
                        dsData.Tables.Add(EMROrderItems.Copy());
                        ////Grouping service based on order,parent category
                        var result = from row in EMROrderItems.Copy().AsEnumerable()
                                     group row by new
                                     {
                                         PARENT_INV_CATEGORY_ID = row.Field<decimal>("PARENT_INV_CATEGORY_ID"),
                                         EMR_PAT_MAST_INV_ORDER_ID = row.Field<decimal>("EMR_PAT_MAST_INV_ORDER_ID"),
                                         INV_PARENT_CATEGORY_NAME = row.Field<string>("INV_PARENT_CATEGORY_NAME"),
                                         MAINITEM = row.Field<decimal>("MAINITEM"),
                                         VISIT_DATE = Convert.ToDateTime(row["ENTRY_DATE"]),//ENTRY_DATE Change to PROPOSED_DATE, bcz ENTERY_DATE are different ,again change PROPOSED_DATE ->ENTERY_DATE
                                         ISSELECT = false,
                                         PROVIDER_ID = row.Field<string>("PROVIDER_ID"),
                                         EMR_PAT_MAST_INV_ORDER_ID_ORIGINAL = row.Field<decimal>("EMR_PAT_MAST_INV_ORDER_ID_ORIGINAL"),
                                         PAT_FIN_ENCOUNTER_ID = row.Field<decimal>("PAT_FIN_ENCOUNTER_ID"),
                                         ISEMERGENCY = row.Field<decimal>("ISEMERGENCY"),
                                     } into grp
                                     select new
                                     {
                                         PARENT_INV_CATEGORY_ID = grp.Key.PARENT_INV_CATEGORY_ID,
                                         EMR_PAT_MAST_INV_ORDER_ID = grp.Key.EMR_PAT_MAST_INV_ORDER_ID,
                                         INV_PARENT_CATEGORY_NAME = grp.Key.INV_PARENT_CATEGORY_NAME,
                                         MAINITEM = grp.Key.MAINITEM,
                                         VISIT_DATE = grp.Key.VISIT_DATE,
                                         Count = grp.Count(),
                                         ISSELECT = grp.Key.ISSELECT,
                                         PROVIDER_ID = grp.Key.PROVIDER_ID,
                                         EMR_PAT_MAST_INV_ORDER_ID_ORIGINAL = grp.Key.EMR_PAT_MAST_INV_ORDER_ID_ORIGINAL,
                                         PAT_FIN_ENCOUNTER_ID = grp.Key.PAT_FIN_ENCOUNTER_ID,
                                         ISEMERGENCY = grp.Key.ISEMERGENCY,
                                     };

                        Common objCommon = new Common();
                        DataTable DetailRelation = objCommon.LINQToDataTable(result);
                        DetailRelation.TableName = "OrderRelation";
                        if (DetailRelation != null && DetailRelation.Rows.Count > 0 && dsData.Tables["Order"].Rows.Count > 0)
                        {
                            string[] BillData = (from dr in dsData.Tables["Order"].AsEnumerable()
                                                 select dr["EMR_PAT_MAST_INV_ORDER_ID"].ToString()).ToArray();
                            if (BillData.Length > 0)
                            {
                                DetailRelation.DefaultView.RowFilter = "EMR_PAT_MAST_INV_ORDER_ID IN(" + string.Join(",", BillData) + ")";
                            }
                            dsData.Tables.Add(DetailRelation.DefaultView.ToTable().Copy());
                            dsData.Relations.Add(
                                "Order2OrderRelation",
                                dsData.Tables["Order"].Columns["EMR_PAT_MAST_INV_ORDER_ID"],
                                dsData.Tables["OrderRelation"].Columns["EMR_PAT_MAST_INV_ORDER_ID"]);
                        }
                        else
                        {
                            IsCPOEOrderExist = false;
                            return null;
                        }
                        if (!dsData.Tables["Order"].Columns.Contains("ISSELECT"))
                        {
                            dsData.Tables["Order"].Columns.Add("ISSELECT", typeof(bool));
                        }
                        foreach (DataRow dr in dsData.Tables["Order"].Rows)
                        {
                            dr["ISSELECT"] = "false";
                        }

                        // Uncheck pending order check box then clear all ordered data form grid
                        //if (dsData.Tables["OrderRelation"].KIIsNotNullAndRowCount())
                        //{
                        //    foreach (DataRow item in dsData.Tables["OrderRelation"].Rows)
                        //    {
                        //        _FindService = null;
                        //        if (this.FindServiceAdded(Convert.ToInt64(item["INV_MAST_SERVICE_ID"]), string.Empty))
                        //        {
                        //            if (_FindService != null && _FindService["ISORDERWISEBILL"] != DBNull.Value &&
                        //               Convert.ToInt16(_FindService["ISORDERWISEBILL"]) == 1 &&
                        //               _FindService["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value)
                        //            {
                        //                DataRow[] drTemp = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + _FindService["INV_MAST_SERVICE_ID"]);
                        //                if (drTemp.Length > 0)
                        //                {
                        //                    BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Remove(drTemp[0]);
                        //                }
                        //                this.DeleteProfileService(Convert.ToInt64(_FindService["INV_MAST_SERVICE_ID"]));
                        //                BillData.Tables["INV_PAT_BILLING"].Rows.Remove(_FindService);
                        //                SelectedItemServiceType = SelectedServiceType;
                        //                this.CalculateServiceTotal();
                        //            }
                        //        }
                        //    }
                        //}
                    }
                    return dsData;
                }
                else
                {
                    IsCPOEOrderExist = false;
                    return null;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// Handles the Executed event of the EMR ordered Selected Item.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        private void Executed_EMROrderSelection(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                DataRowView drvService = null;
                string providerID = string.Empty;
                bool isEmergencyOrder = false;
                isNormalTopUp = false;
                //If expired orders are selected then load deafult scheme
                ExpiredOrderSchemeSelectionChange();
                isNormalTopUp = true;
                if (SelectedServiceType != (int)ServiceType.Cafeteria)
                {
                    drvService = (e.Parameter as DataRowView);
                }
                else if (SelectedServiceType == (int)ServiceType.Cafeteria)
                {
                    if (e == null && KOTOrder != null)
                    {
                        drvService = KOTOrder;
                    }
                    else if (e != null && (e.Parameter as DataRowView) != null)
                    {
                        drvService = (e.Parameter as DataRowView);
                    }
                }
                isEmergencyOrder = (drvService != null && drvService.Row.Table.Columns.Contains("ISEMERGENCY") && drvService.Row["ISEMERGENCY"] != DBNull.Value && Convert.ToInt16(drvService.Row["ISEMERGENCY"]) == 1) ? true : false;
                if (drvService != null && drvService.Row["PROVIDER_ID"] != DBNull.Value)
                {
                    providerID = Convert.ToString(drvService.Row["PROVIDER_ID"]);
                }

                Mouse.OverrideCursor = Cursors.Wait;
                if (SelectedServiceType == (int)ServiceType.Pharmacy)
                {
                    if ((SelectedLabOrSubLocationValue != null && SelectedLabOrSubLocationValue != -1) || EnableVerificationSettingBased)
                    {
                        if (drvService != null && Convert.ToBoolean(drvService["ISSELECT"]) && SelectedProvider != null &&
                           Convert.ToString(SelectedProvider["H_EMP_ID"]) != Convert.ToString(drvService.Row["PROVIDER_ID"])
                           && BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0)
                        {

                            Mouse.OverrideCursor = null;
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                             " Selected provider is different from adding service provider.\n" +
                               "Please change the provider",
                             MessageBoxButtonType.OK, MessageBoxImages.Information);
                            drvService["ISSELECT"] = false;
                            return;
                        }
                        else if ((SelectedProvider == null
                            || (SelectedProvider != null && drvService != null && Convert.ToDecimal(SelectedProvider["H_EMP_ID"]) == Convert.ToDecimal(drvService.Row["PROVIDER_ID"]))
                            || (drvService.Row.Table.Columns.Contains("PAT_FIN_ENCOUNTER_ID") && drvService.Row["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value && Convert.ToInt64(drvService.Row["PAT_FIN_ENCOUNTER_ID"]) == SelectedPatientFinEncounterID)
                            || (drvService.Row["ISEMERGENCY"] != DBNull.Value && Convert.ToInt16(drvService.Row["ISEMERGENCY"]) == 1))
                            || (SelectedVisitModeNew == (int)VisitMode.IP || (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE") && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.IP)))//&& Convert.ToBoolean(drvService["ISSELECT"])
                        {
                            EditService = null;
                            IsEditExecuted = false;
                            if (SelectedService != null)
                                SelectedService = null;
                            isfromCPOEorder = true;
                            if (SelectedServiceType == (int)ServiceType.Pharmacy)
                            {
                                SelectedEMROrderedData(drvService, true);
                            }
                            else
                            {
                                SelectedEMROrderedData(drvService, false);
                            }
                            isfromCPOEorder = false;
                            if (drvService != null && drvService.Row["ISSELECT"] != DBNull.Value && Convert.ToBoolean(drvService.Row["ISSELECT"])
                                            && ((SelectedVisitMode != VisitMode.IP && string.IsNullOrEmpty(SelectedOpenEpisodeID)
                                            && SelectedEpisodeDetails != null && SelectedEpisodeDetails.Row.Table.Columns.Contains("ENCOUNTER_STATUS")
                                            && SelectedEpisodeDetails.Row["ENCOUNTER_STATUS"] != DBNull.Value && Convert.ToInt16(SelectedEpisodeDetails.Row["ENCOUNTER_STATUS"]) == 1)
                                           || (SelectedVisitMode != VisitMode.IP && isEmergencyOrder)
                                           || SelectedVisitModeNew == (int)VisitMode.IP
                                           || (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE") && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.IP)))//&& ClosedPatientFinEpisodeID==SelectedPatientFinEpisodeID--Changes done -On-going episode
                            {
                                OnLoadEncounterEpisodeNo(providerID, isEmergencyOrder, true);
                            }
                        }
                    }
                    else
                    {
                        Mouse.OverrideCursor = null;
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                   " Please select the location.",
                                   MessageBoxButtonType.OK, MessageBoxImages.Information);
                        drvService["ISSELECT"] = false;
                    }
                }
                else if (SelectedServiceType != (int)ServiceType.Cafeteria)
                {
                    if (drvService != null && Convert.ToBoolean(drvService["ISSELECT"]) && SelectedProvider != null &&
                         Convert.ToString(SelectedProvider["H_EMP_ID"]) != Convert.ToString(drvService.Row["PROVIDER_ID"])
                        && BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0)
                    {
                        Mouse.OverrideCursor = null;
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                         " Selected provider is different from adding service provider.\n" +
                           "Please change the provider",
                         MessageBoxButtonType.OK, MessageBoxImages.Information);
                        drvService["ISSELECT"] = false;
                        return;
                    }
                    else if ((SelectedProvider == null
                       || (SelectedProvider != null && drvService != null && Convert.ToDecimal(SelectedProvider["H_EMP_ID"]) == Convert.ToDecimal(drvService.Row["PROVIDER_ID"]))
                       || (drvService.Row.Table.Columns.Contains("PAT_FIN_ENCOUNTER_ID") && drvService.Row["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value && Convert.ToInt64(drvService.Row["PAT_FIN_ENCOUNTER_ID"]) == SelectedPatientFinEncounterID)
                       || (drvService.Row["ISEMERGENCY"] != DBNull.Value && Convert.ToInt16(drvService.Row["ISEMERGENCY"]) == 1))
                       || (SelectedVisitModeNew == (int)VisitMode.IP || (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE") && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.IP)))//&& Convert.ToBoolean(drvService["ISSELECT"])
                    {
                        EditService = null;
                        IsEditExecuted = false;
                        if (SelectedService != null)
                            SelectedService = null;
                        isfromCPOEorder = true;
                        SelectedEMROrderedData(drvService, false);
                        isfromCPOEorder = false;
                        if (drvService != null && drvService.Row["ISSELECT"] != DBNull.Value && Convert.ToBoolean(drvService.Row["ISSELECT"])
                                             && ((SelectedVisitMode != VisitMode.IP && string.IsNullOrEmpty(SelectedOpenEpisodeID)
                                             && SelectedEpisodeDetails != null && SelectedEpisodeDetails.Row.Table.Columns.Contains("ENCOUNTER_STATUS")
                                             && SelectedEpisodeDetails.Row["ENCOUNTER_STATUS"] != DBNull.Value && Convert.ToInt16(SelectedEpisodeDetails.Row["ENCOUNTER_STATUS"]) == 1)
                                            || (SelectedVisitMode != VisitMode.IP && isEmergencyOrder)
                                            || SelectedVisitModeNew == (int)VisitMode.IP
                                            || (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE") && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.IP)))//&& ClosedPatientFinEpisodeID==SelectedPatientFinEpisodeID--Changes done -On-going episode
                        {
                            OnLoadEncounterEpisodeNo(providerID, isEmergencyOrder, true);
                        }
                    }
                }
                else if (SelectedServiceType == (int)ServiceType.Cafeteria && drvService != null)
                {
                    EditService = null;
                    IsEditExecuted = false;
                    if (SelectedService != null)
                        SelectedService = null;
                    SelectedEMROrderedData(drvService, false);
                }
            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                Mouse.OverrideCursor = null;
            }

        }

        private void ExpiredOrderSchemeSelectionChange()
        {
            try
            {
                //If expired orders are selected then load deafult scheme 
                if (IsAllChecked)
                {
                    DataRow[] drSchemeTemp = Scheme.Select("INCO_MAST_SCHEME_ID=" + CommonData.DefaultScheme);
                    if (drSchemeTemp != null && drSchemeTemp.Length > 0)
                    {
                        SelectedSchemeValue = GetIncoDtlsSchemeID(Scheme, drSchemeTemp[0]["INCO_MAST_SCHEME_ID"] != DBNull.Value ? Convert.ToInt64(drSchemeTemp[0]["INCO_MAST_SCHEME_ID"]) : 0);
                        SelectedMastSchemeValue = drSchemeTemp[0]["INCO_MAST_SCHEME_ID"] != DBNull.Value ? Convert.ToInt64(drSchemeTemp[0]["INCO_MAST_SCHEME_ID"]) : 0;
                        SelectedContract = (Scheme.Columns.Contains("CONTRACT_NAME") && drSchemeTemp[0]["CONTRACT_NAME"] != DBNull.Value) ? Convert.ToString(drSchemeTemp[0]["CONTRACT_NAME"]) : "";
                        SchemeMemNo = (Scheme.Columns.Contains("MEMBERSHIP_NO") && drSchemeTemp[0]["MEMBERSHIP_NO"] != DBNull.Value) ? Convert.ToString(drSchemeTemp[0]["MEMBERSHIP_NO"]) : "";
                        SchemeExpDate = drSchemeTemp[0]["VALID_TO"] != DBNull.Value ? Convert.ToDateTime(drSchemeTemp[0]["VALID_TO"]).ToString("dd-MMM-yyyy") : "";
                        if (BillData == null || BillData.Tables["INV_PAT_BILLING"] == null || BillData.Tables["INV_PAT_BILLING"].Rows.Count == 0)
                        {
                            GetPatientVisit();
                            if (isEncounterPopUpSelected)
                            {
                                DtVisitMode = objUICommonMethods.SetVisitModeNew(SelectedEncounterDetails, drSchemeTemp[0]);
                            }
                            else
                            {
                                DtVisitMode = objUICommonMethods.SetVisitMode(dtPatientVisit, drSchemeTemp[0]);
                            }
                            if (DtVisitMode.KIIsNotNullAndRowCount())
                            {
                                SelectedVisitMode = VisitMode.OPCASH;// default scheme - OP cash visit mode-  expired order bill
                                if (DtVisitMode.Select("KEY=" + (int)SelectedVisitMode).Length > 0)
                                {
                                    SelectedVisitModeNew = (int)SelectedVisitMode;
                                }
                                else
                                {
                                    SelectedVisitModeNew = DtVisitMode.Rows[0]["KEY"] != DBNull.Value ? Convert.ToInt16(DtVisitMode.Rows[0]["KEY"]) : -1;
                                }
                                isERCredit = IsEmergencyEncounter && DtVisitMode.KIIsNotNullAndRowCount() && DtVisitMode.Rows[0]["ISERCREDIT_ELIGIBLE"] != DBNull.Value
                                                          && Convert.ToInt16(DtVisitMode.Rows[0]["ISERCREDIT_ELIGIBLE"]) == 1 ? true : false;
                            }
                            VisitModeType = (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE") &&
                                            SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value
                                            && (Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.OPCASH
                                            || Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.OPCREDIT)) ? "OP"
                                            : (dtPatientVisit == null || dtPatientVisit.Rows.Count == 0
                                            || (Convert.ToInt16(dtPatientVisit.Rows[0]["VISIT_TYPE"]) == (int)VisitMode.OPCASH
                                            || Convert.ToInt16(dtPatientVisit.Rows[0]["VISIT_TYPE"]) == (int)VisitMode.OPCREDIT)) ? "OP" : "IP";
                        }
                    }
                }
                else
                {
                    OnSchemeSelectionChanged(SelectedPatientFinEncounterID);
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        DataRow drDisContinueStatus = null;
        private void SelectedEMROrderedData(DataRowView drvServiceSelected, bool isRoot)
        {
            DataTable dtService = new DataTable();
            _FindService = null;
            try
            {
                if (drvServiceSelected != null || KOTOrder != null)//!IsEMROrderSelected && || KOTOrder != null
                {
                    DataRowView drvService = null;
                    DataView dvService = null;
                    if (SelectedServiceType == (int)ServiceType.Pharmacy && IsFromPharmacyPanel)
                    {
                        LoadPhRxDtlsInfo();
                    }
                    if (drvServiceSelected != null)
                    {
                        drvService = drvServiceSelected;
                        if (SelectedServiceType == (int)ServiceType.Investigation && IfNullReturnZero(drvService.Row["PARENT_INV_CATEGORY_ID"]) == 5)
                        {
                            isPharmacyInServiceBilling = true;
                        }
                        if (isRoot && SelectedServiceType == (int)ServiceType.Investigation && EMROrderItems.KIIsNotNullAndRowCount())
                        {
                            EMROrderItems.DefaultView.RowFilter = "PARENT_INV_CATEGORY_ID=" + drvService.Row["PARENT_INV_CATEGORY_ID"]
                                + "AND EMR_PAT_MAST_INV_ORDER_ID=" + drvService.Row["EMR_PAT_MAST_INV_ORDER_ID"]
                                + " and ENTRY_DATE= '" + Convert.ToDateTime(drvService.Row["VISIT_DATE"]).ToString("dd-MMM-yyyy HH:mm") + "'";
                            dvService = EMROrderItems.DefaultView;
                        }
                        else if (!isRoot && SelectedServiceType == (int)ServiceType.Investigation && EMROrderItems.KIIsNotNullAndRowCount())
                        {
                            EMROrderItems.DefaultView.RowFilter = "PARENT_INV_CATEGORY_ID=" + drvService.Row["PARENT_INV_CATEGORY_ID"]
                                + "AND EMR_PAT_MAST_INV_ORDER_ID_ORIGINAL=" + drvService.Row["EMR_PAT_MAST_INV_ORDER_ID_ORIGINAL"]
                                + " and ENTRY_DATE= '" + Convert.ToDateTime(drvService.Row["VISIT_DATE"]).ToString("dd-MMM-yyyy HH:mm") + "'";
                            dvService = EMROrderItems.DefaultView;

                        }

                        else if (isRoot && SelectedServiceType == (int)ServiceType.Pharmacy && EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail")
                            && EMROrderRelation.Tables["Detail"].KIIsNotNullAndRowCount())
                        {
                            EMROrderRelation.Tables["Detail"].DefaultView.RowFilter = "PARENT_INV_CATEGORY_ID=" + drvService.Row["PARENT_INV_CATEGORY_ID"]
                                + "AND EMR_PAT_MAST_INV_ORDER_ID='" + drvService.Row["EMR_PAT_MAST_INV_ORDER_ID"] + "'"
                                  + " AND ENTRY_DATE= '" + Convert.ToDateTime(drvService.Row["VISIT_DATE"]).ToString("dd-MMM-yyyy HH:mm") + "'";
                            dvService = EMROrderRelation.Tables["Detail"].DefaultView;
                            OrderItems = EMROrderRelation.Tables["Detail"].DefaultView.ToTable().Copy();
                            //drvService.Row["VISIT_DATE"].ToString().str
                        }
                        else if (isRoot && SelectedServiceType == (int)ServiceType.Pharmacy && EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail")
                           && EMROrderRelation.Tables["Detail"].KIIsNotNullAndRowCount())
                        {
                            EMROrderRelation.Tables["Detail"].DefaultView.RowFilter = "PARENT_INV_CATEGORY_ID=" + drvService.Row["PARENT_INV_CATEGORY_ID"]
                                + "AND EMR_PAT_DTLS_INV_ORDER_ID='" + drvService.Row["EMR_PAT_DTLS_INV_ORDER_ID"] + "'"
                                + " AND ENTRY_DATE= '" + Convert.ToDateTime(drvService.Row["VISIT_DATE"]).ToString("dd-MMM-yyyy HH:mm") + "'";
                            dvService = EMROrderRelation.Tables["Detail"].DefaultView;
                            OrderItems = EMROrderRelation.Tables["Detail"].DefaultView.ToTable().Copy();
                        }
                        //dvService = (e.Parameter as DataView);
                        #region In Consumable medice sublocation not mandatory
                        //if ((drvServiceSelected != null && Convert.ToBoolean(drvServiceSelected.Row["ISSELECT"]) == true) &&
                        //    dvService.KIIsNotNullOrEmpty() && dvService.Table.Columns.Contains("IS_CONSUMPTION_EXIST") && IfNullReturnZero(dvService[0]["IS_CONSUMPTION_EXIST"]) == 1)
                        //{
                        //    DataRow[] locationId = dvService.ToTable().AsEnumerable().Where(x => IfNullReturnZero(x["IS_CONSUMPTION_EXIST"]) == 1).Select(x => x).ToArray();
                        //    if ((locationId.Any() &&
                        //        locationId.AsEnumerable().Count(w => IfNullReturnZero(w["PH_SUBLOCATION_ID"]) != SelectedPHSubLocationsValue) > 0) ||
                        //        (locationId.Any() && SelectedPHSubLocationsValue == null))
                        //    {
                        //        if (locationId.AsEnumerable().Count(w => IfNullReturnZero(w["PH_SUBLOCATION_ID"]) == SelectedPHSubLocationsValue) > 0)
                        //        {
                        //            if (!ConsumptionMessage)
                        //            {
                        //                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                        //               "Some consumption item(s) exist in " +
                        //               locationId.AsEnumerable().Where(w => IfNullReturnZero(w["PH_SUBLOCATION_ID"]) != SelectedPHSubLocationsValue).First()["PH_SUBLOCATION"]
                        //               + ". Please select Sublocation to proceed.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        //                ConsumptionMessage = true;
                        //            }
                        //        }
                        //        else
                        //        {
                        //            if (!ConsumptionMessage)
                        //            {
                        //                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                        //                "Some consumption item(s) exist in " + locationId[0]["PH_SUBLOCATION"] + ". Please select Sublocation to proceed.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        //                ConsumptionMessage = true;
                        //            }
                        //            return;
                        //        }
                        //    }
                        //}
                        #endregion
                    }
                    else if (KOTOrder != null)
                    {
                        drvService = KOTOrder;
                    }
                    //if (dvService != null && dvService[0]["PROVIDER_ID"] != DBNull.Value && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
                    //{
                    //    DataRow[] drRows = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                    //        .Where(x => x["EMR_PROVIDER_ID"] != DBNull.Value)
                    //        .Select(x => x).ToArray();
                    //    if (drRows.Count() > 0)
                    //    {
                    //        if (Convert.ToDecimal(dvService[0]["PROVIDER_ID"]) != Convert.ToDecimal(drRows[0]["EMR_PROVIDER_ID"]))
                    //        {
                    //            if (giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                    //      " Service(s) added against " + SelectedProvider["EMPLOYEE_NAME"] + ".\n" +
                    //        "Do you want to clear the service(s)?",
                    //      MessageBoxButtonType.OKCancel, MessageBoxImages.Question) == MessageBoxDialogueResult.OK)
                    //            {
                    //                BillData.Tables["INV_PAT_BILLING"].Rows.Clear();
                    //                IsDispenseChecked = false;
                    //                SelectedService = null;
                    //            }
                    //            else
                    //            {
                    //                return;
                    //            }
                    //        }                           
                    //    }
                    //}                   
                    //single service  
                    if ((SelectedServiceType == (int)ServiceType.Investigation || SelectedServiceType == (int)ServiceType.Pharmacy)
                        && drvService != null && drvService.Row.Table.Columns.Contains("ISBILLED") && Convert.ToInt16(drvService.Row["ISBILLED"]) == 1)
                    {
                        return;
                    }
                    if ((drvServiceSelected != null && Convert.ToBoolean(drvServiceSelected.Row["ISSELECT"]) == true) || KOTOrder != null)
                    // e.OriginalSource is TreeViewItem -kot
                    {
                        ServiceName = string.Empty;
                        //emr order provider setting , if null
                        if (SelectedEMROrder == null)
                        {
                            DataRow[] drFound = null;
                            object OrderID = 0;
                            if (drvService != null)
                            {
                                OrderID = drvService["EMR_PAT_MAST_INV_ORDER_ID"];
                            }
                            else if (dvService != null && dvService.Table.Rows.Count > 0)
                            {
                                OrderID = dvService.Table.Rows[0]["EMR_PAT_MAST_INV_ORDER_ID"];
                            }

                            drFound = EMROrderRelation.Tables["Order"].Select("EMR_PAT_MAST_INV_ORDER_ID='" + OrderID + "'");
                            if (drFound.Length > 0)
                            {
                                SelectedEMROrder = drFound[0];
                            }
                        }
                        if ((SelectedServiceType == (int)ServiceType.Investigation || SelectedServiceType == (int)ServiceType.Pharmacy)
                            && drvServiceSelected != null || SelectedServiceType == (int)ServiceType.Cafeteria) //All Services
                        {
                            if ((SelectedServiceType == (int)ServiceType.Investigation || SelectedServiceType == (int)ServiceType.Pharmacy) && dvService != null)
                            {
                                dtService = dvService.ToTable();
                                
                            }
                            else if (SelectedServiceType == (int)ServiceType.Cafeteria)
                            {
                                OrderItems.Clear();
                                EMROrderRelation.Tables["Detail"].DefaultView.RowFilter = "EMR_PAT_MAST_INV_ORDER_ID=" + drvService.Row["EMR_PAT_MAST_INV_ORDER_ID"];
                                dtService = EMROrderRelation.Tables["Detail"].DefaultView.ToTable().Copy();
                                if (dtService.Columns.Contains("STATUS") && !dtService.Columns.Contains("ISBILLED"))
                                {
                                    dtService.Columns["STATUS"].ColumnName = "ISBILLED";
                                }
                                //Fltering list data
                                string Data = string.Join(",",
                                        (from drBase in EMROrderRelation.Tables["ORDERRELATION"].AsEnumerable()
                                         where drBase["ISSELECT"] != DBNull.Value &&
                                         Convert.ToInt16(drBase["ISSELECT"]) == 1
                                         select drBase["EMR_PAT_MAST_INV_ORDER_ID"].ToString()).ToArray());

                                if (Data.Length > 0)
                                {
                                    EMROrderRelation.Tables["Detail"].DefaultView.RowFilter =
                                      "EMR_PAT_MAST_INV_ORDER_ID IN (" + Data + ")";
                                    OrderItems = EMROrderRelation.Tables["Detail"].DefaultView.ToTable().Copy();
                                    int index = 0;
                                    foreach (DataRow item in OrderItems.Rows)
                                    {
                                        item["SINO"] = ++index;
                                    }
                                }
                            }
                          
                            bool isMedicalAndNonMedical = false;
                            if (IsCPOEKOTOrderExist && SelectedServiceType == (int)ServiceType.Cafeteria && BillData != null
                                && BillData.Tables.Contains("INV_PAT_BILLING") && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
                            {
                                var filterKOTExist = from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                                     where dr.RowState != DataRowState.Deleted && (dr["ORDER_EXIST"] == DBNull.Value
                                                     || Convert.ToInt16(dr["ORDER_EXIST"]) == 0)
                                                     select dr;
                                if (filterKOTExist.Count() > 0)
                                {
                                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "KOT orders cannot be added with services", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                    dtService.Rows.Clear();
                                }
                            }
                            isMultpleTimeCalculateMaxMinCopayNeeded = true;
                            foreach (DataRowView item in dtService.DefaultView)
                            {
                                bool isAdded = false;
                                isEmrOrder = true;
                                drDisContinueStatus = item.Row;
                                if (item.Row["INV_MAST_SERVICE_ID"] != DBNull.Value)
                                {
                                    //if (SelectedServiceType == (int)ServiceType.Pharmacy)
                                    //{
                                    //    //isAdded = this.FindServiceAdded(Convert.ToInt64(item.Row["INV_MAST_SERVICE_ID"]), string.Empty, Convert.ToInt16(item.Row["SL_NO"]));
                                    //    //isAdded = false;
                                    //    isAdded = this.FindServiceWithDtlsOrderID(Convert.ToInt64(item.Row["EMR_PAT_DTLS_INV_ORDER_ID"]));
                                    //}
                                    //else
                                    //{
                                    //    isAdded = this.FindServiceWithDtlsOrderID(Convert.ToInt64(item.Row["EMR_PAT_DTLS_INV_ORDER_ID"]));
                                    //}
                                    
                                    if (SelectedServiceType == (int)ServiceType.Investigation)
                                    {
                                        isAdded = this.FindServiceWithDtlsOrderID(Convert.ToInt64(item.Row["EMR_PAT_DTLS_INV_ORDER_ID"]), Convert.ToInt64(item.Row["INV_MAST_SERVICE_ID"]));
                                    }
                                    else if (SelectedServiceType == (int)ServiceType.Pharmacy)
                                    {
                                        isAdded = FindPharmacyWithDtlsOrderID(Convert.ToInt64(item.Row["EMR_PAT_DTLS_INV_ORDER_ID"]), Convert.ToInt64(item.Row["EMR_PAT_PH_DRUG_ADMIN_ID"]));
                                       
                                        if (!isAdded && EnableVerificationSettingBased && SelectedVisitModeNew == (int)VisitMode.IP)
                                        {
                                            MainBilling objMainBilling = new MainBilling();
                                            DataTable dtFetch = new DataTable();
                                            dtFetch.Columns.Add("MRNO", typeof(string));
                                            dtFetch.Columns.Add("MODE", typeof(int));
                                            dtFetch.Columns.Add("EMR_PAT_DTLS_PH_ORDER_ID", typeof(long));
                                            dtFetch.Rows.Add(PatientInformation.Rows[0]["MRNO"], 2, Convert.ToInt64(item.Row["EMR_PAT_DTLS_INV_ORDER_ID"]));
                                            DataTable dtTempVal = objMainBilling.FetchPhDtlsOrder(dtFetch);
                                            if (dtTempVal.KIIsNotNullAndRowCount())
                                            {
                                                
                                                VerificationEmrOrderData = dtTempVal.Copy();
                                                VerificationFetch();
                                                VerificationEmrOrderData = null;
                                                continue;
                                            }
                                        }
                                    }
                                    else if (SelectedServiceType == (int)ServiceType.Cafeteria)
                                    {
                                        isAdded = this.FindServiceWithDtlsOrderID(Convert.ToInt64(item.Row["EMR_PAT_DTLS_INV_ORDER_ID"]), Convert.ToInt64(item.Row["INV_MAST_SERVICE_ID"]));
                                    }
                                }
                                if (IsCPOEOrderExist && !isAdded)// Bug ID-18164
                                {
                                    if (SelectedService != null)
                                    {
                                        SelectedService = null;
                                    }
                                    //IsSelectAllCpoeOrders = true;
                                    if (item.Row["INV_MAST_SERVICE_ID"] != DBNull.Value)
                                    {
                                        fromEMR = true;// Added by Saranya Bug ID- 21361
                                        DataRow drFound = FindService(Convert.ToInt64(item["INV_MAST_SERVICE_ID"]));
                                        if (SelectedServiceType == (int)ServiceType.Pharmacy && IsFromPharmacyPanel && PhRXDtlsInfo.KIIsNotNullAndRowCount() && item.Row["BRAND_ID"] != DBNull.Value)
                                        {
                                            DataRow drBrandMed = null;
                                            var query = PhRXDtlsInfo.AsEnumerable().Where(x => x["REQUESTED_ITEM_ID"] != DBNull.Value && x["ORDERED_ITEM_ID"] != DBNull.Value &&
                                                 Convert.ToDecimal(x["ORDERED_ITEM_ID"]) != Convert.ToDecimal(x["REQUESTED_ITEM_ID"]) &&
                                                Convert.ToDecimal(x["EMR_PAT_DTLS_PH_ORDER_ID"]) == Convert.ToDecimal(item.Row["EMR_PAT_DTLS_INV_ORDER_ID"]) &&
                                                Convert.ToDecimal(x["ORDERED_ITEM_ID"]) == Convert.ToDecimal(item.Row["BRAND_ID"])
                                                  ).Select(x => x);
                                            if (query.Any())
                                            {
                                                drBrandMed = query.First();
                                                if (drBrandMed != null)
                                                {
                                                    drFound = FindService(Convert.ToInt64(drBrandMed["REQUESTED_ITEM_ID"]));

                                                }
                                            }

                                        }
                                        if (drFound != null)
                                        {
                                            IsBarCodeSearchbyManual = false;
                                            dsServiceData.Tables["INV_MAST_SERVICE"].DefaultView.RowFilter = string.Empty;
                                            if (Services != null)
                                            {
                                                Services.DefaultView.RowFilter = string.Empty;
                                            }
                                            if (isfromCPOEorder)
                                            { //Speed Improve
                                                SelectedServiceDetails = drFound;
                                                /*Start Task for Selected Serivice Changes*/
                                                isTaskBilllingEbabled = true;
                                                TaskForBilling = new System.Threading.Tasks.Task(() => this.SetServiceDetailsforCPOEorder(false));
                                                TaskForBilling.Start();
                                                /*Start Task for Selected Serivice Changes*/
                                                if (PatientInformation.KIIsNotNullAndRowCount())
                                                {
                                                    TaskPatDetails.GetTaskPatDetails.Age = Convert.ToString(PatientInformation.Rows[0]["AGE"]);
                                                    TaskPatDetails.GetTaskPatDetails.Gender = Convert.ToString(PatientInformation.Rows[0]["GENDER"]);
                                                }
                                            } //Speed Improve
                                            else
                                            {
                                                if (isPharmacyInServiceBilling)
                                                {
                                                    SelectedService = Services.DefaultView[Services.Rows.IndexOf(drFound)];
                                                }
                                                else
                                                {
                                                    SelectedService = dsServiceData.Tables["INV_MAST_SERVICE"].DefaultView[dsServiceData.Tables["INV_MAST_SERVICE"].Rows.IndexOf(drFound)];
                                                    // SelectedService = drFound.Table.DefaultView[0];
                                                }
                                                IsBarCodeSearchbyManual = true;
                                            }

                                        }
                                        else if (drFound == null && isPharmacyInServiceBilling && ServiceMedicine.KIIsNotNullAndRowCount())
                                        {
                                            DataTable dtTemp = new DataTable();
                                            DataRow[] drTempRow = null;
                                            dtTemp = ServiceMedicine.Copy();
                                            dtTemp.Columns.Add("SERVICE_CATEGORY");
                                            dtTemp.Columns["INV_MAST_SERVICE_ID"].ColumnName = "PRIMARY_ID";
                                            drTempRow = dtTemp.Select("PRIMARY_ID=" + Convert.ToInt64(item["INV_MAST_SERVICE_ID"]));
                                            drTempRow[0]["PH_SUBLOCATION_ID"] = SelectedPHSubLocationsValue;
                                            if (drTempRow != null && drTempRow.Length > 0)
                                            {
                                                drFound = drTempRow[0];
                                                //drFound["NAME"] = item["NAME"];
                                                //drFound["PRIMARY_ID"] = item["INV_MAST_SERVICE_ID"];
                                                SelectedService = dtTemp.DefaultView[dtTemp.Rows.IndexOf(drFound)];
                                            }
                                        }

                                        if (EditService == null && SelectedServiceDetails != null && //Speed Improve
                                            SelectedServiceType == (int)ServiceType.Investigation &&
                                            BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0 && SelectedServiceDetails["SERVICE_CATEGORY"] != DBNull.Value &&
                                            BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Count(dr => dr["SERVICE_CATEGORY"] != DBNull.Value &&
                                            Convert.ToInt16(dr["SERVICE_CATEGORY"]) == Convert.ToInt16(SelectedServiceDetails["SERVICE_CATEGORY"])) == 0 && !IsDispenseChecked)
                                        {
                                            ////////////isMedicalAndNonMedical = true;
                                            ////////////break;
                                        }
                                        if (SelectedServiceDetails != null && (SelectedServiceType == (int)ServiceType.Investigation || SelectedServiceType == (int)ServiceType.Pharmacy
                                            || SelectedServiceType == (int)ServiceType.Cafeteria) && Services != null)
                                        {
                                            EMRItemSelected = item.Row;
                                            if (SelectedVisitMode == VisitMode.IP && SelectedServiceType == (int)ServiceType.Investigation && IsPatientIP())
                                            {
                                                DataRow[] drfilterIPService = BillData.Tables["INV_PAT_BILLING"].Select("ISPACKAGE_SERVICE IS NOT NULL AND ISPACKAGE_SERVICE=1");
                                                if (drfilterIPService.Length > 0)
                                                {
                                                    Mouse.OverrideCursor = null;
                                                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                                    "Package already added", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                                    Mouse.OverrideCursor = Cursors.Wait; ;
                                                    ClearService();
                                                    break;
                                                }
                                            }
                                            if (SelectedServiceType == (int)ServiceType.Cafeteria)
                                            {
                                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["QTY"] = item.Row["QTY"];
                                            }
                                            if (SelectedServiceDetails != null &&
                                                SelectedServiceDetails["SERVICE_TYPE"] != DBNull.Value && (Convert.ToInt16(SelectedServiceDetails["SERVICE_TYPE"]) == (int)ServiceType.Investigation
                                                || Convert.ToInt16(SelectedServiceDetails["SERVICE_TYPE"]) == (int)ServiceType.Cafeteria))
                                            {
                                                //   this.AddService();
                                                //fromEMR = true;// Commented By saranya
                                                this.AddService();
                                                fromEMR = false;

                                            }
                                            else if (SelectedServiceType == (int)ServiceType.Pharmacy || SelectedItemServiceType == (int)ServiceType.Pharmacy)
                                            {
                                                /*isEmrOrder = true;
                                                this.AddPharmacy();
                                                isStockExist = false;*/

                                                isEmrOrder = true;
                                                //Beena Code
                                                //fromEMR = true;// Commented By saranya
                                                //End Code
                                                if (item.Row.Table.Columns.Contains("IS_CONSUMPTION_EXIST") && IfNullReturnZero(item.Row["IS_CONSUMPTION_EXIST"]) == 0)
                                                {
                                                    this.AddPharmacy();
                                                }
                                                else if (!item.Row.Table.Columns.Contains("IS_CONSUMPTION_EXIST"))
                                                {
                                                    this.AddPharmacy();
                                                }
                                                //Beena Code
                                                fromEMR = false;
                                                // this.AddPharmacy();
                                                isStockExist = false;
                                            }
                                            else if (SelectedServiceDetails["SERVICE_TYPE"] != DBNull.Value && Convert.ToInt16(SelectedServiceDetails["SERVICE_TYPE"]) == (int)ServiceType.Consultation)
                                            {
                                                // this.AddService();
                                                //fromEMR = true;// Commented By saranya
                                                this.AddService();
                                                fromEMR = false;

                                            }
                                            //IsSelectAllCpoeOrders = false;
                                        }
                                        else if (SelectedServiceType == (int)ServiceType.Pharmacy && item.Row["INV_MAST_SERVICE_ID"] != DBNull.Value && item.Row["GENERIC_ID"] != DBNull.Value
                                            && dsServiceData != null && dsServiceData.Tables["INV_MAST_SERVICE"].KIIsNotNullAndRowCount())
                                        {
                                            EMRItemSelected = item.Row;
                                            DataTable dttemp = dsServiceData.Tables["INV_MAST_SERVICE"].Clone();
                                            dttemp.Rows.Add();
                                            //DataRow[] drRow = dtService.Select("INV_MAST_SERVICE_ID=" + Convert.ToInt64(item.Row["INV_MAST_SERVICE_ID"]));
                                            dttemp.Rows[0]["GENERIC_ID"] = item["GENERIC_ID"];
                                            dttemp.Rows[0]["NAME"] = item["NAME"];
                                            if (dttemp.Columns.Contains("INV_MAST_SERVICE_ID"))
                                            {
                                                dttemp.Rows[0]["INV_MAST_SERVICE_ID"] = item["INV_MAST_SERVICE_ID"];
                                            }
                                            if (dttemp.Columns.Contains("PRIMARY_ID"))
                                            {
                                                dttemp.Rows[0]["PRIMARY_ID"] = item["INV_MAST_SERVICE_ID"];
                                            }
                                            if (BillData.Tables["INV_PAT_BILLING_TEMP"].KIIsNotNullAndRowCount() && dtService.Columns.Contains("EMR_PAT_DTLS_INV_ORDER_ID"))
                                            {
                                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_INV_ORDER_ID"] = item["EMR_PAT_DTLS_INV_ORDER_ID"];
                                            }
                                            if (FOData.Medicines.KIIsNotNullAndRowCount() && IfNullReturnZero(item["INV_MAST_SERVICE_ID"]) > 0)
                                            {
                                                var filterMachine = FOData.Medicines.AsEnumerable().Where(x => IfNullReturnZero(x["INV_MAST_SERVICE_ID"])
                                                             == IfNullReturnZero(item["INV_MAST_SERVICE_ID"])
                                                             ).Select(x => x).ToArray();
                                                if (filterMachine.Any())
                                                {
                                                    dttemp.Rows[0]["MATERIAL_TYPE"] = filterMachine[0]["MATERIAL_TYPE"];
                                                }
                                            }
                                           
                                            isEmrOrder = true;
                                            IsBarCodeSearchbyManual = false;
                                            if (isfromCPOEorder) //Speed Improve
                                            {
                                                if (TaskForBilling != null && isTaskBilllingEbabled)
                                                {
                                                    /*Check Selected Service Change Completed*/
                                                    SetServiceDetailsforCPOEorder(true);
                                                    isTaskBilllingEbabled = false;
                                                    do
                                                    {
                                                    } while (!TaskForBilling.IsCompleted);
                                                    TaskForBilling.Dispose();
                                                    /*Check Selected Serivce Change Completed*/
                                                }
                                                SelectedServiceDetails = dttemp.Rows[0];
                                                /*Start Task for Selected Serivice Changes*/
                                                isTaskBilllingEbabled = true;
                                                TaskForBilling = new System.Threading.Tasks.Task(() => this.SetServiceDetailsforCPOEorder(false));
                                                TaskForBilling.Start();
                                                /*Start Task for Selected Serivice Changes*/
                                                if (PatientInformation.KIIsNotNullAndRowCount())
                                                {
                                                    TaskPatDetails.GetTaskPatDetails.Age = Convert.ToString(PatientInformation.Rows[0]["AGE"]);
                                                    TaskPatDetails.GetTaskPatDetails.Gender = Convert.ToString(PatientInformation.Rows[0]["GENDER"]);
                                                }
                                                //SetServiceDetailsforCPOEorder();
                                            } //Speed Improve
                                            else
                                            {
                                                DataRow dr = dttemp.Rows[0];
                                                SelectedService = dttemp.DefaultView[dttemp.Rows.IndexOf(dr)];
                                                IsBarCodeSearchbyManual = true;
                                            }

                                            Service = dttemp.Rows[0];
                                            IsGeneric = true;
                                            isStockExist = true;
                                            this.AddPharmacy();
                                            isStockExist = false;
                                        }
                                        else if (EnableVerificationSettingBased && SelectedServiceType == (int)ServiceType.Pharmacy && item.Row["INV_MAST_SERVICE_ID"] != DBNull.Value && item.Row["GENERIC_ID"] != DBNull.Value
                                            && FOData.Medicines.KIIsNotNullAndRowCount())
                                        {
                                            EMRItemSelected = item.Row;
                                            DataTable dttemp = FOData.Medicines.Clone();
                                            if (!dttemp.Columns.Contains("Name"))
                                            {
                                                dtMedicines.Columns.Add("Name");
                                            }
                                            if (dttemp.Columns.Contains("INV_MAST_SERVICE_ID") && !dttemp.Columns.Contains("PRIMARY_ID"))
                                            {
                                                dttemp.Columns["INV_MAST_SERVICE_ID"].ColumnName = "PRIMARY_ID";
                                            }
                                            dttemp.Rows.Add();
                                            //DataRow[] drRow = dtService.Select("INV_MAST_SERVICE_ID=" + Convert.ToInt64(item.Row["INV_MAST_SERVICE_ID"]));
                                            dttemp.Rows[0]["GENERIC_ID"] = item["GENERIC_ID"];
                                            dttemp.Rows[0]["NAME"] = item["NAME"];
                                            if (FOData.Medicines.KIIsNotNullAndRowCount() && IfNullReturnZero(item["INV_MAST_SERVICE_ID"]) > 0)
                                            {
                                                var filterMachine = FOData.Medicines.AsEnumerable().Where(x => IfNullReturnZero(x["INV_MAST_SERVICE_ID"])
                                                             == IfNullReturnZero(item["INV_MAST_SERVICE_ID"])
                                                             ).Select(x => x).ToArray();
                                                if (filterMachine.Any())
                                                {
                                                    dttemp.Rows[0]["MATERIAL_TYPE"] = filterMachine[0]["MATERIAL_TYPE"];
                                                }
                                            }
                                            if (dttemp.Columns.Contains("INV_MAST_SERVICE_ID"))
                                            {
                                                dttemp.Rows[0]["INV_MAST_SERVICE_ID"] = item["INV_MAST_SERVICE_ID"];
                                            }
                                            if (dttemp.Columns.Contains("PRIMARY_ID"))
                                            {
                                                dttemp.Rows[0]["PRIMARY_ID"] = item["INV_MAST_SERVICE_ID"];
                                            }
                                            if (BillData.Tables["INV_PAT_BILLING_TEMP"].KIIsNotNullAndRowCount() && dtService.Columns.Contains("EMR_PAT_DTLS_INV_ORDER_ID"))
                                            {
                                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_INV_ORDER_ID"] = item["EMR_PAT_DTLS_INV_ORDER_ID"];
                                            }
                                            DataRow dr = dttemp.Rows[0];
                                            isEmrOrder = true;
                                            IsBarCodeSearchbyManual = false;
                                            SelectedService = dttemp.DefaultView[dttemp.Rows.IndexOf(dr)];
                                            IsBarCodeSearchbyManual = true;
                                            Service = dr;
                                            IsGeneric = true;
                                            //isStockExist = true;
                                            this.AddPharmacy();
                                            //isStockExist = false;
                                        }
                                        if (item.Row.Table.Columns.Contains("IS_CONSUMPTION_EXIST") && IfNullReturnZero(item.Row["IS_CONSUMPTION_EXIST"]) > 0)
                                        {
                                            FetchConsumptionData(Convert.ToInt64(item["EMR_PAT_DTLS_INV_ORDER_ID"]));
                                        }
                                    }
                                    else if (SelectedServiceType == (int)ServiceType.Pharmacy && item.Row["GENERIC_ID"] != DBNull.Value
                                        && dsServiceData != null && dsServiceData.Tables["INV_MAST_SERVICE"].KIIsNotNullAndRowCount())
                                    {
                                        if (SelectedServiceType == (int)ServiceType.Pharmacy)
                                        {
                                            DataTable dtTemp = Fetch_PhdtlsOrder(Convert.ToInt64(dtService.Rows[0]["EMR_PAT_DTLS_INV_ORDER_ID"]));
                                            if (dtTemp != null && dtTemp.Rows.Count > 0 && item.Row["BRAND_ID"] != DBNull.Value && dsServiceData != null)
                                            {
                                                EMRItemSelected = item.Row;
                                                if (dsServiceData.Tables["INV_MAST_SERVICE"].Select("PRIMARY_ID=" + Convert.ToInt64(dtTemp.Rows[0]["BRAND_ID"])).Count() > 0)
                                                {
                                                    isEmrOrder = true;
                                                    DataRow dr = dsServiceData.Tables["INV_MAST_SERVICE"].Select("PRIMARY_ID=" + Convert.ToInt64(item.Row["BRAND_ID"])).First();
                                                    IsBarCodeSearchbyManual = false;
                                                    SelectedService = dsServiceData.Tables["INV_MAST_SERVICE"].DefaultView[dsServiceData.Tables["INV_MAST_SERVICE"].Rows.IndexOf(dr)];
                                                    IsBarCodeSearchbyManual = true;
                                                    Service = dr;
                                                    this.AddPharmacy();
                                                }
                                            }
                                            else
                                            {
                                                EMRItemSelected = item.Row;
                                                DataTable dttemp = dsServiceData.Tables["INV_MAST_SERVICE"].Clone();
                                                dttemp.Rows.Add();
                                                dttemp.Rows[0]["GENERIC_ID"] = item.Row["GENERIC_ID"];
                                                dttemp.Rows[0]["NAME"] = item.Row["NAME"];
                                                if (!dttemp.Columns.Contains("EMR_PAT_DTLS_INV_ORDER_ID"))
                                                {
                                                    dttemp.Columns.Add("EMR_PAT_DTLS_INV_ORDER_ID");
                                                    dttemp.Rows[0]["EMR_PAT_DTLS_INV_ORDER_ID"] = item.Row["EMR_PAT_DTLS_INV_ORDER_ID"];
                                                }
                                                DataRow dr = dttemp.Rows[0];
                                                isEmrOrder = true;
                                                IsBarCodeSearchbyManual = false;
                                                if (PhRXDtlsInfo.KIIsNotNullAndRowCount())
                                                {
                                                    DataRow drGeneric = null;
                                                    var query = PhRXDtlsInfo.AsEnumerable().Where(x => x["REQUESTED_ITEM_ID"] != DBNull.Value && IfNullReturnZero(x["ORDERED_GENERIC_ID"]) == IfNullReturnZero(item.Row["GENERIC_ID"])
                                                           && IfNullReturnZero(x["ISGENERIC_ORDER"]) == 1).Select(x => x);
                                                    if (query.Any())
                                                    {
                                                        drGeneric = query.First();
                                                    }
                                                    if (drGeneric != null)
                                                    {
                                                        DataRow drFound = FindService(Convert.ToInt64(drGeneric["REQUESTED_ITEM_ID"]));
                                                        if (drFound != null)
                                                        {
                                                            IsBarCodeSearchbyManual = false;
                                                            dsServiceData.Tables["INV_MAST_SERVICE"].DefaultView.RowFilter = string.Empty;
                                                            SelectedService = dsServiceData.Tables["INV_MAST_SERVICE"].DefaultView[dsServiceData.Tables["INV_MAST_SERVICE"].Rows.IndexOf(drFound)];
                                                            IsBarCodeSearchbyManual = true;
                                                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["GENERIC_ID"] = item.Row["GENERIC_ID"];
                                                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_INV_ORDER_ID"] = item.Row["EMR_PAT_DTLS_INV_ORDER_ID"];
                                                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_MEDICATION_ID"] = item.Row["EMR_PAT_DTLS_INV_ORDER_ID"];
                                                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_PH_DRUG_ADMIN_ID"] = item.Row["EMR_PAT_PH_DRUG_ADMIN_ID"];
                                                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["CONSUMPTION_STATUS"] = item.Row["CONSUMPTION_STATUS"];
                                                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_SHOW_PH_PRESCRIPTION"] = 1;
                                                            dr = drFound;
                                                        }
                                                        else
                                                        {
                                                            selectedService = dttemp.DefaultView[dttemp.Rows.IndexOf(dr)];
                                                        }
                                                    }
                                                    else
                                                    {
                                                        selectedService = dttemp.DefaultView[dttemp.Rows.IndexOf(dr)];
                                                    }
                                                }
                                                else
                                                {
                                                    selectedService = dttemp.DefaultView[dttemp.Rows.IndexOf(dr)];
                                                }
                                                IsBarCodeSearchbyManual = true;
                                                Service = dr;
                                                IsGeneric = true;
                                                isAdded = FindPharmacyWithDtlsOrderID(Convert.ToInt64(item.Row["EMR_PAT_DTLS_INV_ORDER_ID"]), Convert.ToInt64(item.Row["EMR_PAT_PH_DRUG_ADMIN_ID"]));
                                                
                                                if (!isAdded && EnableVerificationSettingBased && SelectedVisitModeNew == (int)VisitMode.IP)
                                                {
                                                    MainBilling objMainBilling = new MainBilling();
                                                    DataTable dtFetch = new DataTable();
                                                    dtFetch.Columns.Add("MRNO", typeof(string));
                                                    dtFetch.Columns.Add("MODE", typeof(int));
                                                    dtFetch.Columns.Add("EMR_PAT_DTLS_PH_ORDER_ID", typeof(long));
                                                    dtFetch.Rows.Add(PatientInformation.Rows[0]["MRNO"], 2, Convert.ToInt64(item.Row["EMR_PAT_DTLS_INV_ORDER_ID"]));
                                                    DataTable dtTempVal = objMainBilling.FetchPhDtlsOrder(dtFetch);
                                                    if (dtTempVal.KIIsNotNullAndRowCount())
                                                    {
                                                        VerificationEmrOrderData = dtTempVal.Copy();
                                                        VerificationFetch();
                                                        VerificationEmrOrderData = null;
                                                        continue;
                                                    }
                                                }
                                                if (!isAdded)
                                                {
                                                    this.AddPharmacy();
                                                }
                                            }
                                        }
                                    }


                                }
                                isEmrOrder = false;
                            }
                            if (!IsPackage)
                            {

                                //string Excludes = string.Empty;
                                //if (ExcludeServices != null && ExcludeServices.Length > 0)
                                //{
                                //    Excludes = "Following services are excluded in the selected scheme. \n" + ExcludeServices.ToString() + "\n";
                                //}
                                //if (PreApprovalServices != null && PreApprovalServices.Length > 0)
                                //{
                                //    Excludes = (string.IsNullOrEmpty(Excludes) ? string.Empty : (Excludes + "\n")) +
                                //        "Following services are pre-approval status in the selected scheme. \n" + PreApprovalServices.ToString() + "\n";
                                //}
                                //if (AllCpoeBaseChargeNotDefinedServices != null && AllCpoeBaseChargeNotDefinedServices.Length > 0)
                                //{
                                //    Excludes = (string.IsNullOrEmpty(Excludes) ? string.Empty : (Excludes + "\n")) +
                                //        "Base charge not defined. \n" +
                                //        AllCpoeBaseChargeNotDefinedServices.ToString();
                                //}
                                //if (ExcludeIPFacility != null && ExcludeIPFacility.Length > 0)
                                //{
                                //    Excludes = (string.IsNullOrEmpty(Excludes) ? string.Empty : (Excludes + "\n")) +
                                //      "IP facility does not exist for the following package \n" +
                                //      ExcludeIPFacility.ToString();
                                //}
                                //if (ExcludeOPCreditFacility != null && ExcludeOPCreditFacility.Length > 0)
                                //{
                                //    Excludes = (string.IsNullOrEmpty(Excludes) ? string.Empty : (Excludes + "\n")) +
                                //     "OP credit facility does not exist for the following package \n" +
                                //     ExcludeOPCreditFacility.ToString();
                                //}
                                //if (ExcludeOPCashFacility != null && ExcludeOPCashFacility.Length > 0)
                                //{
                                //    Excludes = (string.IsNullOrEmpty(Excludes) ? string.Empty : (Excludes + "\n")) +
                                //     "OP cash facility does not exist for the following package \n" +
                                //     ExcludeOPCashFacility.ToString();
                                //}
                                //if (isMedicalAndNonMedical)
                                //{
                                //    Excludes = string.IsNullOrEmpty(Excludes) ? "\n Medical and non medical items cannot be added in an invoice."
                                //        : ((Excludes + "\n") + " Medical and non medical items cannot be added in an invoice.");
                                //}
                                //if (!string.IsNullOrEmpty(Excludes))
                                //{
                                //    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                //       (SelectedVisitMode == VisitMode.OPCASH && !IsProceedBillInCash) ? CashPrivilegeMsg :
                                //       (SelectedVisitMode == VisitMode.OPCREDIT && !IsProceedBillInCredit)
                                //? CreditPrivilegeMsg : Excludes, MessageBoxButtonType.OK, MessageBoxImages.Information);
                                //}
                                //if (IsAddIPPackageService)
                                //{
                                //    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                //    "IP package can only be added", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                //}
                                //if (IsAddOtherService)
                                //{
                                //    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                //    "IP package cannot be added", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                //}

                            }
                            //AllCpoeBaseChargeNotDefinedServices = null;
                            //if (sbGroup.ToString() != string.Empty)
                            //{
                            //    sbGroup.Remove(sbGroup.Length - 1, 1);
                            //    BillGroup = "Bill group not defined for specified category " + sbGroup.ToString();
                            //    sbGroup.Length = 0;
                            //}
                            //if (sbGroupCategory.ToString() != string.Empty && sbBillGroup.ToString() != string.Empty)
                            //{
                            //    sbBillGroup.Remove(sbBillGroup.Length - 1, 1);
                            //    sbGroupCategory.Remove(sbGroupCategory.Length - 1, 1);
                            //    BillGroup = (string.IsNullOrEmpty(BillGroup) ? string.Empty : (BillGroup + "\n")) +
                            //                "All services should be within the bill group (" + sbBillGroup.ToString() + ").\n '" +
                            //                 sbGroupCategory.ToString() + "' are of different bill group.";
                            //    sbGroupCategory.Length = 0;
                            //    sbBillGroup.Length = 0;
                            //}
                            //if (!string.IsNullOrEmpty(BillGroup))
                            //{
                            //giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                            //   (SelectedVisitMode == VisitMode.OPCASH && !IsProceedBillInCash) ? CashPrivilegeMsg :
                            //   (SelectedVisitMode == VisitMode.OPCREDIT && !IsProceedBillInCredit) 
                            //? CreditPrivilegeMsg : BillGroup, MessageBoxButtonType.OK, MessageBoxImages.Information);

                            //}
                            if (IsPackage)
                            {
                                //if (ExcludePackageServices != null && ExcludePackageServices.Length > 0)
                                //{
                                //    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                //     (SelectedVisitMode == VisitMode.OPCASH && !IsProceedBillInCash) ? CashPrivilegeMsg :
                                //     (SelectedVisitMode == VisitMode.OPCREDIT && !IsProceedBillInCredit) ? CreditPrivilegeMsg :
                                //     ("Following services are not included in the selected package. \n" + ExcludePackageServices.ToString()), 
                                //MessageBoxButtonType.OK, MessageBoxImages.Information);
                                //}
                                //else if (isMedicalAndNonMedical)
                                //{
                                //    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                //     (SelectedVisitMode == VisitMode.OPCASH && !IsProceedBillInCash) ? CashPrivilegeMsg :
                                //     (SelectedVisitMode == VisitMode.OPCREDIT && !IsProceedBillInCredit) ? CreditPrivilegeMsg :
                                //     " Medical and non medical items cannot be added in an invoice.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                //}
                            }

                        }
                        else
                        {
                            //if (SchemeDetails == null)
                            //{
                            //    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                            //        "Scheme missing in Encounter/Services section.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            //    return;
                            //}
                            if (SelectedServiceType == (int)ServiceType.Investigation && drvService.Row.Table.Columns.Contains("INV_MAST_SERVICE_ID") &&
                                drvService.Row["INV_MAST_SERVICE_ID"] != DBNull.Value)
                                if (!this.FindServiceAdded(Convert.ToInt64(drvService.Row["INV_MAST_SERVICE_ID"]), string.Empty))
                                {
                                    if (Services != null)
                                    {
                                        SelectedService = null;
                                        DataRow drFound = FindService(Convert.ToInt64(drvService.Row["INV_MAST_SERVICE_ID"]));
                                        if (drFound != null)
                                        {
                                            SelectedService = dsServiceData.Tables["INV_MAST_SERVICE"].DefaultView[dsServiceData.Tables["INV_MAST_SERVICE"].Rows.IndexOf(drFound)];
                                        }
                                        else
                                        {
                                            if (IsPackage)
                                            {
                                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                                "Selected service not included in the selected package.",
                                                MessageBoxButtonType.OK, MessageBoxImages.Information);
                                            }
                                            else if (!IsPackage)
                                            {
                                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                                "Selected Service excluded in the selected scheme/base charge not defined.",
                                                MessageBoxButtonType.OK, MessageBoxImages.Information);
                                            }

                                        }
                                    }
                                    if (SelectedService != null && !IsServiceExclude)
                                    {
                                        EMRItemSelected = drvService.Row;
                                        AddService();
                                    }
                                }
                                else
                                {
                                    if (drvServiceSelected != null && Convert.ToBoolean(drvServiceSelected.Row["ISSELECT"]) == false)
                                    {
                                        if (_FindService != null && _FindService["ISORDERWISEBILL"] != DBNull.Value &&
                                        Convert.ToInt16(_FindService["ISORDERWISEBILL"]) == 1 &&
                                        _FindService["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value)
                                        {
                                            DataRow[] drTemp = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + _FindService["INV_MAST_SERVICE_ID"]);
                                            if (drTemp.Length > 0)
                                            {
                                                BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Remove(drTemp[0]);
                                            }
                                            BillData.Tables["INV_PAT_BILLING"].Rows.Remove(_FindService);
                                            SelectedItemServiceType = SelectedServiceType;
                                            this.CalculateServiceTotal();
                                        }
                                    }
                                    else
                                    {

                                    }
                                }
                            else if (SelectedServiceType == (int)ServiceType.Pharmacy)
                            {
                            }
                            else if (drvServiceSelected != null && Convert.ToBoolean(drvServiceSelected.Row["ISSELECT"]) == false)
                            {
                                DataRow[] drTemp = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + _FindService["INV_MAST_SERVICE_ID"]);
                                if (drTemp.Length > 0)
                                {
                                    BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Remove(drTemp[0]);
                                }
                                BillData.Tables["INV_PAT_BILLING"].Rows.Remove(_FindService);
                                SelectedItemServiceType = SelectedServiceType;
                                CalculateServiceTotal();
                                Notes = string.Empty;
                            }
                        }
                    }
                    else
                    {
                        if (drvServiceSelected != null && SelectedServiceType == (int)ServiceType.Investigation) //All Services
                        {
                            foreach (DataRowView item in dvService)
                            {
                                _FindService = null;
                                long DtlsOrderID = item.Row.Table.Columns.Contains("EMR_PAT_DTLS_INV_ORDER_ID") && item["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value ?
                                      Convert.ToInt64(item["EMR_PAT_DTLS_INV_ORDER_ID"]) : 0;
                                if (this.FindServiceAdded(Convert.ToInt64(item.Row["INV_MAST_SERVICE_ID"]), string.Empty, 0, DtlsOrderID))
                                {
                                    if (item.Row.Table.Columns.Contains("IS_CONSUMPTION_EXIST")
                                            && item.Row.Table.Columns.Contains("EMR_PAT_DTLS_INV_ORDER_ID")
                                            && Convert.ToInt16(Convert.ToInt64(item.Row["IS_CONSUMPTION_EXIST"])) == 1 && IfNullReturnZero(_FindService["CONSUMPTION_STATUS"]) == 2 &&
                                            BillData.Tables["INV_PAT_BILLING"].Select("EMR_PAT_DTLS_INV_ORDER_ID=" + DtlsOrderID).Count() > 1)
                                    {
                                        DataRow[] drConsumption = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => IfNullReturnZero(x["CONSUMPTION_STATUS"]) == 2 &&
                                            IfNullReturnZero(x["EMR_PAT_DTLS_INV_ORDER_ID"]) == DtlsOrderID).Select(x => x).ToArray();
                                        foreach (DataRow dr in drConsumption)
                                        {
                                            DataRow[] drTempConsumption = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + dr["INV_MAST_SERVICE_ID"]);
                                            if (drTempConsumption.Length > 0)
                                            {
                                                BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Remove(drTempConsumption[0]);
                                            }
                                            BillData.Tables["INV_PAT_BILLING"].Rows.Remove(dr);
                                        }
                                    }
                                    else
                                    {
                                        //---- Bug Id : 31766
                                        if (item.Row.Table.Columns.Contains("IS_CONSUMPTION_EXIST")
                                            && item.Row.Table.Columns.Contains("IS_CONSUMPTION")
                                            && item.Row.Table.Columns.Contains("EMR_PAT_DTLS_INV_ORDER_ID")
                                            && Convert.ToInt16(Convert.ToInt64(item.Row["IS_CONSUMPTION_EXIST"])) == 1)
                                        {
                                            DataRow[] drConsumption = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => IfNullReturnZero(x["IS_CONSUMPTION"]) != 2 &&
                                            IfNullReturnZero(x["EMR_PAT_DTLS_INV_ORDER_ID"]) == Convert.ToInt64(item.Row["EMR_PAT_DTLS_INV_ORDER_ID"])).Select(x => x).ToArray();
                                            foreach (DataRow dr in drConsumption)
                                            {
                                                DataRow[] drTempConsumption = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + dr["INV_MAST_SERVICE_ID"]);
                                                if (drTempConsumption.Length > 0)
                                                {
                                                    BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Remove(drTempConsumption[0]);
                                                }
                                                BillData.Tables["INV_PAT_BILLING"].Rows.Remove(dr);
                                            }
                                        }
                                        //---End Bug Id : 31766
                                        DataTable dtConsuption = new DataTable();
                                        if (_FindService != null && _FindService["ISORDERWISEBILL"] != DBNull.Value &&
                                           Convert.ToInt16(_FindService["ISORDERWISEBILL"]) == 1 &&
                                           _FindService["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value)
                                        {
                                            if (IfNullReturnZero(_FindService["IS_CONSUMPTION"]) == 2 && BillData.Tables["INV_PAT_BILLING"].Select("EMR_PAT_DTLS_INV_ORDER_ID="
                                                    + IfNullReturnZero(_FindService["EMR_PAT_DTLS_INV_ORDER_ID"])).Count() > 0)
                                            {
                                                var query = from dr in _FindService.Table.Copy().AsEnumerable()
                                                            where Convert.ToInt32(dr["SERVICE_TYPE"]) != (Int32)ServiceType.Consultation
                                                            && IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"]) == IfNullReturnZero(_FindService["EMR_PAT_DTLS_INV_ORDER_ID"])
                                                            select dr;
                                                if (query.Any())
                                                    dtConsuption = query.CopyToDataTable();
                                            }
                                            DataRow[] drTemp = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + _FindService["INV_MAST_SERVICE_ID"]);
                                            if (drTemp.Length > 0)
                                            {
                                                BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Remove(drTemp[0]);
                                            }
                                            BillData.Tables["INV_PAT_BILLING"].Rows.Remove(_FindService);
                                            if (dtConsuption.KIIsNotNullAndRowCount())
                                            {
                                                ////DataRow[] drConsumption = BillData.Tables["INV_PAT_BILLING"].Select("EMR_PAT_DTLS_INV_ORDER_ID="
                                                ////    + IfNullReturnZero(dtConsuption.Rows[0]["EMR_PAT_DTLS_INV_ORDER_ID"])).ToArray();
                                                DataRow[] drConsumption = BillData.Tables["INV_PAT_BILLING"].Select("EMR_PAT_DTLS_INV_ORDER_ID=" + IfNullReturnZero(dtConsuption.Rows[0]["EMR_PAT_DTLS_INV_ORDER_ID"]) + " AND SERVICE_TYPE <>" + (int)ServiceType.Consultation).ToArray();
                                                foreach (DataRow dr in drConsumption)
                                                {
                                                    DataRow[] drTempConsumption = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + dr["INV_MAST_SERVICE_ID"]);
                                                    if (drTempConsumption.Length > 0)
                                                    {
                                                        BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Remove(drTempConsumption[0]);
                                                    }
                                                    BillData.Tables["INV_PAT_BILLING"].Rows.Remove(dr);
                                                }
                                            }
                                        }
                                        SelectedItemServiceType = SelectedServiceType;
                                        this.CalculateServiceTotal();
                                    }
                                }
                            }
                            Notes = string.Empty;
                            //IsCPOEOrder = false;
                        }
                        else if (SelectedServiceType == (int)ServiceType.Cafeteria) //All Services
                        {
                            if (EMROrderRelation.Tables["Detail"].KIIsNotNullAndRowCount())
                            {
                                OrderItems.Clear();

                                EMROrderRelation.Tables["Detail"].DefaultView.RowFilter =
                                    "EMR_PAT_MAST_INV_ORDER_ID=" + drvService.Row["EMR_PAT_MAST_INV_ORDER_ID"];

                                dtService = EMROrderRelation.Tables["Detail"].DefaultView.ToTable().Copy();
                                //Fltering list data
                                string Data = string.Join(",",
                                        (from drBase in EMROrderRelation.Tables["ORDERRELATION"].AsEnumerable()
                                         where drBase["ISSELECT"] != DBNull.Value &&
                                         Convert.ToInt16(drBase["ISSELECT"]) == 1
                                         select drBase["EMR_PAT_MAST_INV_ORDER_ID"].ToString()).ToArray());

                                if (Data.Length > 0)
                                {
                                    EMROrderRelation.Tables["Detail"].DefaultView.RowFilter =
                                      "EMR_PAT_MAST_INV_ORDER_ID IN (" + Data + ")";
                                    OrderItems = EMROrderRelation.Tables["Detail"].DefaultView.ToTable().Copy();
                                }
                                //List item filtering based on selection
                                if (dtService.Columns.Contains("STATUS") && !dtService.Columns.Contains("ISBILLED"))
                                {
                                    dtService.Columns["STATUS"].ColumnName = "ISBILLED";
                                }
                                foreach (DataRow item in dtService.Rows)
                                {
                                    DataRow[] dr = BillData.Tables["INV_PAT_BILLING"].Select("EMR_PAT_DTLS_KOT_ID=" + item["EMR_PAT_DTLS_INV_ORDER_ID"]);
                                    if (dr.Length > 0 && dr[0]["EMR_PAT_DTLS_KOT_ID"] != DBNull.Value)
                                    {
                                        BillData.Tables["INV_PAT_BILLING"].Rows.Remove(dr[0]);
                                        SelectedItemServiceType = SelectedServiceType;
                                        this.CalculateServiceTotal();
                                    }
                                }
                            }
                            Notes = string.Empty;
                            //IsCPOEOrder = false;
                        }
                        else
                        {
                            if (drvService != null)
                            {
                                if (SelectedServiceType == (int)ServiceType.Investigation)
                                {
                                    long ServiceID = Convert.ToInt64(drvServiceSelected.Row["INV_MAST_SERVICE_ID"]);
                                    if (this.FindServiceAdded(ServiceID, string.Empty))
                                    {
                                        if (_FindService != null && _FindService["ISORDERWISEBILL"] != DBNull.Value &&
                                           Convert.ToInt16(_FindService["ISORDERWISEBILL"]) == 1 &&
                                           _FindService["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value)
                                        {
                                            if (Convert.ToInt64(_FindService["EMR_PROVIDER_VISIT_ID"]) ==
                                                Convert.ToInt64(drvService["EMR_PROVIDER_VISIT_ID"]))
                                            {
                                                DataRow[] drTemp = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + _FindService["INV_MAST_SERVICE_ID"]);
                                                if (drTemp.Length > 0)
                                                {
                                                    BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Remove(drTemp[0]);
                                                }
                                                BillData.Tables["INV_PAT_BILLING"].Rows.Remove(_FindService);
                                                SelectedItemServiceType = SelectedServiceType;
                                                this.CalculateServiceTotal();
                                            }

                                        }
                                    }
                                    else
                                    {
                                        if (SelectedService != null)
                                        {
                                            SelectedService = null;
                                        }
                                    }
                                }
                                if (drvServiceSelected != null && SelectedServiceType == (int)ServiceType.Pharmacy) //All Services
                                {
                                    foreach (DataRowView item in dvService)
                                    {
                                        _FindService = null;
                                        if (item.Row["INV_MAST_SERVICE_ID"] != DBNull.Value)
                                        {
                                            if (this.FindServiceAdded(Convert.ToInt64(item.Row["INV_MAST_SERVICE_ID"]), string.Empty, 0, Convert.ToInt64(IfNullReturnZero(item.Row["EMR_PAT_DTLS_INV_ORDER_ID"]))))
                                            {
                                                if (_FindService != null && _FindService["ISORDERWISEBILL"] != DBNull.Value &&
                                                   Convert.ToInt16(_FindService["ISORDERWISEBILL"]) == 1 &&
                                                   _FindService["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value)
                                                {
                                                    DataRow[] drTemp = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + _FindService["INV_MAST_SERVICE_ID"]);
                                                    if (drTemp.Length > 0)
                                                    {
                                                        BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Remove(drTemp[0]);
                                                    }
                                                    BillData.Tables["INV_PAT_BILLING"].Rows.Remove(_FindService);
                                                    SelectedItemServiceType = SelectedServiceType;
                                                    this.CalculateServiceTotal();
                                                }
                                                else if (_FindService != null && _FindService["ISORDERWISEBILL"] != DBNull.Value &&
                                                   Convert.ToInt16(_FindService["ISORDERWISEBILL"]) == 0)
                                                {
                                                    DataRow[] drTemp = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + _FindService["INV_MAST_SERVICE_ID"]);
                                                    if (drTemp.Length > 0)
                                                    {
                                                        BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Remove(drTemp[0]);
                                                    }
                                                    BillData.Tables["INV_PAT_BILLING"].Rows.Remove(_FindService);
                                                    SelectedItemServiceType = SelectedServiceType;
                                                    this.CalculateServiceTotal();
                                                }
                                            }
                                        }
                                        else if (item.Row["GENERIC_ID"] != DBNull.Value)
                                        {
                                            if (BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0)
                                            {
                                                if (BillData.Tables["INV_PAT_BILLING"].Select("GENERIC_ID=" + (Convert.ToInt64(item.Row["GENERIC_ID"]))).Count() > 0)
                                                {
                                                    DataRow dr = BillData.Tables["INV_PAT_BILLING"].Select("GENERIC_ID=" + (Convert.ToInt64(item.Row["GENERIC_ID"]))).First();
                                                    if (BillData != null && BillData.Tables.Contains("PH_PAT_DTLS_ORDER") && BillData.Tables["PH_PAT_DTLS_ORDER"].KIIsNotNullAndRowCount())
                                                    {
                                                        DataRow[] drTemp = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("GENERIC_ID=" + IfNullReturnZero(item.Row["GENERIC_ID"]) + " AND SL_NO=" + dr["SL_NO"]);
                                                        if (drTemp.Length > 0)
                                                        {
                                                            BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Remove(drTemp[0]);
                                                        }
                                                    }
                                                    BillData.Tables["INV_PAT_BILLING"].Rows.Remove(dr);
                                                }
                                                DisableOnServiceAddedIntoGrid();
                                            }
                                        }
                                    }
                                    Notes = string.Empty;
                                    if (IsEditExecuted && ServicesTemp != null) //Bug Id 33378  Start
                                    {
                                        Services = ServicesTemp.Copy();
                                    } //Bug Id 33378  End
                                }
                            }
                        }
                    }

                }
                //DisableOnServiceAddedIntoGrid();
                isMultpleTimeCalculateMaxMinCopayNeeded = false;
                isPharmacyInServiceBilling = false;
                CalculateMaxMinCopay();
                SerialNoCount();
            }
            catch (Exception)
            {
                throw;
                //ExceptionHandler.WriteErrorLog(EX);
            }
            finally
            {
                isTaskBilllingEbabled = false;
                isMultpleTimeCalculateMaxMinCopayNeeded = false;
                //IsEMROrderSelected = true;
               // Mouse.OverrideCursor = null;
            }
        }

        private bool FindServiceAdded(long ServiceID, string Batch, long sl_no = 0, long DtlsOrderID = 0)
        {
            //if ((IsBarCodeSearch || !IsBarCodeSearchbyManual) && IsFromPharmacyPanel)
            //{
            //    return true;
            //}
            bool IsAdded = false;
            DataRow[] drItems = null;
            if ((SelectedServiceType == (int)ServiceType.Cafeteria || SelectedServiceType == (int)ServiceType.Investigation
                || SelectedServiceType == (int)ServiceType.IncomingService)
                && BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0)
            {
                if (sl_no == 0 && DtlsOrderID == 0)
                    drItems = BillData.Tables["INV_PAT_BILLING"].Select("INV_MAST_SERVICE_ID=" + ServiceID);
                else if (DtlsOrderID != 0)
                    drItems = BillData.Tables["INV_PAT_BILLING"].Select("EMR_PAT_DTLS_INV_ORDER_ID=" + DtlsOrderID);
                else if (sl_no != 0)
                    drItems = BillData.Tables["INV_PAT_BILLING"].Select("INV_MAST_SERVICE_ID=" + ServiceID + " AND SL_NO=" + sl_no);
            }
            else if (SelectedServiceType == (int)ServiceType.Pharmacy && BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0 && Batch != string.Empty)
            {
                if (EditService != null)
                {
                    IsExists = false;
                    drItems = BillData.Tables["INV_PAT_BILLING"].Select
                    ("INV_MAST_SERVICE_ID=" + ServiceID + " AND BATCHNO<>'" + EditService["BATCHNO"] + "' AND BATCHNO='" + Batch + "'");
                    if (drItems.Length == 0)//Select 
                    {
                        if (EditService["BATCHNO"].ToString() == Batch)
                        {
                            drItems = BillData.Tables["INV_PAT_BILLING"].Select("INV_MAST_SERVICE_ID=" + ServiceID + " AND BATCHNO='" + Batch + "'");
                        }
                        else
                        {
                            drItems = BillData.Tables["INV_PAT_BILLING"].Select("INV_MAST_SERVICE_ID=" + ServiceID + " AND BATCHNO='" + EditService["BATCHNO"] + "'");
                        }
                    }
                    else
                    {
                        IsExists = true;
                    }
                }
                else
                {
                    drItems = BillData.Tables["INV_PAT_BILLING"].Select("INV_MAST_SERVICE_ID=" + ServiceID + " AND BATCHNO='" + Batch + "'");
                }
            }
            else if (SelectedServiceType == (int)ServiceType.Pharmacy && BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0 && EditService == null)
            {
                drItems = BillData.Tables["INV_PAT_BILLING"].Select("INV_MAST_SERVICE_ID=" + ServiceID);
                if (PhRXDtlsInfo.KIIsNotNullAndRowCount() && DtlsOrderID > 0 && (drItems == null || drItems != null && drItems.Count() == 0))
                {
                    var resErx = PhRXDtlsInfo.AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_DTLS_PH_ORDER_ID"]) == DtlsOrderID
                                    && IfNullReturnZero(x["ORDERED_ITEM_ID"]) == ServiceID
                                    && IfNullReturnZero(x["REQUESTED_ITEM_ID"]) != IfNullReturnZero(x["ORDERED_ITEM_ID"])
                                    && IfNullReturnZero(x["ISGENERIC_ORDER"]) == 0);
                    if (resErx.Any())
                    {
                        drItems = BillData.Tables["INV_PAT_BILLING"].Select("INV_MAST_SERVICE_ID=" + resErx.First()["REQUESTED_ITEM_ID"]);
                    }
                }
            }
            if (drItems != null && drItems.Length > 0)
            {
                _FindService = drItems[0];
                IsAdded = true;
            }
            else if (EnableVerificationSettingBased)
            {
                drItems = BillData.Tables["INV_PAT_BILLING"].Select("EMR_PAT_DTLS_INV_ORDER_ID=" + DtlsOrderID);
                if (drItems != null && drItems.Length > 0)
                {
                    _FindService = drItems[0];
                    IsAdded = true;
                }
            }
            return IsAdded;
        }

        private void DeleteProfileService(long ServiceID, long DtlsOrderID)
        {
            try
            {
                dtTemp = BillData.Tables["INV_BILL_PROFILE_SERVICE"].Copy();
                DataView dv = dtTemp.DefaultView;
                if (DtlsOrderID > 0)
                {
                    dv.RowFilter = "EMR_PAT_DTLS_INV_ORDER_ID IS NOT NULL AND EMR_PAT_DTLS_INV_ORDER_ID<>" + DtlsOrderID;
                }
                else
                {
                    dv.RowFilter = "ID<>" + ServiceID;
                }
                BillData.Tables["INV_BILL_PROFILE_SERVICE"].Clear();
                BillData.Tables["INV_BILL_PROFILE_SERVICE"].Merge(dv.ToTable());
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Clear the bill details,after saved successfully 
        /// </summary>
        System.Threading.Tasks.Task TaskForClearBilling = null;
        bool isTaskClearBilllingEbabled = false;
        public void ClearBillServiceTypeBased(bool IsFromClearButton)
        {
            try
            {
                IsMultipleTimeClearServiceRequired = IsMultipleTimeSchemeSelectionChangeRequired; //Speed Improve
                if (!IsFromClearButton && IsFromCoderReview)
                {
                    // From Coder Review no need to clear selected encounter details and others, so refreshing full window once more
                    IsFromCoderReview = false;
                    IsFromCoderReview = true;
                }
                bool IsConsuptionRefresh = false;
                ConsumptionMessage = false;
                IsFromClear = IsFromClearButton;
                TotalCopay = 0;
                IsValidateService = true;
                if (ServiceBaseCharge != null)
                {
                    ServiceBaseCharge.Clear();
                }
                isMultipleServiceChangeBlock = 3; //Speed Improve
                this.ClearService();
                isMultipleServiceChangeBlock = 0; //Speed Improve
                if (SelectedServiceType == (int)ServiceType.Investigation && BillData.KIIsNotNullOrEmpty())
                {
                    IsConsuptionRefresh = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Count(c => c["ISSALE"] != DBNull.Value && Convert.ToBoolean(c["ISSALE"]) &&
                        Convert.ToInt16(c["SERVICE_TYPE"]) == (int)ServiceType.Pharmacy) > 0 ? true : false;
                }
                BillData.Tables["INV_PAT_BILLING"].Clear();
                BillData.Tables["INV_PAT_BILLING"].Clear();
                BillData.Tables["INV_PAT_BILLING_TOTAL"].RejectChanges();
                BillData.Tables["INV_PAT_BILLING_TOTAL"].AcceptChanges();
                if (BillData.Tables["INV_PAT_BILLING_TOTAL"].Rows.Count > 0)
                {
                    BillData.Tables["INV_PAT_BILLING_TOTAL"].Rows[0]["TOBECOLLECTED"] = DBNull.Value;
                }
                BillData.Tables["CON_PAT_BILLING"].RejectChanges();
                BillData.Tables["CON_PAT_BILLING"].AcceptChanges();
                BillData.Tables["GEN_PAT_BILLING"].RejectChanges();
                BillData.Tables["GEN_PAT_BILLING"].AcceptChanges();
                BillData.Tables["REG_PAT_BILLING"].RejectChanges();
                BillData.Tables["REG_PAT_BILLING"].AcceptChanges();
                BillData.Tables["REG_PATIENT_REGISTRATION"].RejectChanges();
                BillData.Tables["REG_PATIENT_REGISTRATION"].AcceptChanges();
                BillData.Tables["RECEIPT_DATA_BIND"].RejectChanges();
                BillData.Tables["RECEIPT_DATA_BIND"].AcceptChanges();
                BillData.Tables["GEN_CARD_TRANSACTION"].Clear();
                BillData.Tables["GEN_CARD_TRANSACTION_TEMP"].RejectChanges();
                BillData.Tables["GEN_CARD_TRANSACTION_TEMP"].AcceptChanges();
                BillData.Tables["GEN_BANK_TRANSACTION"].Clear();
                BillData.Tables["GEN_BANK_TRANSACTION_TEMP"].RejectChanges();
                BillData.Tables["GEN_BANK_TRANSACTION_TEMP"].AcceptChanges();
                BillData.Tables["SERVICE_CHARGE_CRITERIA"].RejectChanges();
                BillData.Tables["SERVICE_CHARGE_CRITERIA"].AcceptChanges();
                BillData.Tables["LIMIT_CRITERIA"].RejectChanges();
                BillData.Tables["LIMIT_CRITERIA"].AcceptChanges();

                // ----done by vasim for bug 34915 as per instruction of sreeroop
                //BillData.Tables["GEN_PAT_BILLING"].RejectChanges();
                //BillData.Tables["GEN_PAT_BILLING"].AcceptChanges();               
                BillData.Tables["GEN_PAT_BILLING"].Clear();
                BillData.Tables["GEN_PAT_BILLING"].Rows.Add(1);
                BillData.Tables["GEN_PAT_BILLING"].AcceptChanges();
                // ----done by vasim for bug 34915 as per instruction of sreeroop

                BillData.Tables["INV_PAT_BILLING_RESET"].RejectChanges();
                BillData.Tables["INV_PAT_BILLING_RESET"].AcceptChanges();
                BillData.Tables["INV_PAT_BILLING_RESET_FINAL"].RejectChanges();
                BillData.Tables["INV_PAT_BILLING_RESET_FINAL"].AcceptChanges();
                //BillData.Tables["INV_PAT_BILLING_REMOVE_SERVICE"].RejectChanges();
                //BillData.Tables["INV_PAT_BILLING_REMOVE_SERVICE"].AcceptChanges();
                BillData.Tables["GEN_PAT_BILL_ALLOCATION"].Rows.Clear();
                BillData.Tables["GEN_TRANSACTION"].Rows.Clear();
                BillData.Tables["GEN_TRANSACTION_HISTORY"].Rows.Clear();
                BillData.Tables["ACC_MAST_TRANSACTION"].Rows.Clear();
                BillData.Tables["ACC_DTLS_CHARGE_SPLITUP"].Rows.Clear();
                BillData.Tables["ACC_DTLS_TRANSACTION"].Rows.Clear();
                BillData.Tables["APPT_ALLOCATION"].Clear();
                BillData.Tables["INV_BILL_PROFILE_SERVICE"].Rows.Clear();
                BillData.Tables["PAT_REFERENCE_LETTER"].Rows.Clear();
                BillData.Tables["RADIOLOGY_ORDER"].Rows.Clear();
                BillData.Tables["RADIO_REPORT_STATUS"].Rows.Clear();
                BillData.Tables["GEN_BILL_DISCOUNT"].Rows.Clear();
                //Packge table Clear
                BillData.Tables["PKG_MAST_PATIENT"].Clear();
                BillData.Tables["PKG_DTLS_PATIENT_SERVICE"].Clear();
                BillData.Tables["InvTransaction"].Rows.Clear();
                BillData.Tables["SCAN_MAST_FILE"].Rows.Clear();
                BillData.Tables["SCAN_DTLS_FILE"].Rows.Clear();
                BillData.Tables["GEN_FILE_ATTACHMENTS"].Rows.Clear();
                BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Clear();
                if (BillData.Tables.Contains("TEMP_GEN_PAT_BILLING") && BillData.Tables["TEMP_GEN_PAT_BILLING"].Rows.Count > 0)
                {
                    BillData.Tables["TEMP_GEN_PAT_BILLING"].Rows.Clear();
                }
                if (BillData.Tables.Contains("TEMP_GEN_PAT_BILL_DTLS_ALLOCATION") && BillData.Tables["TEMP_GEN_PAT_BILL_DTLS_ALLOCATION"].Rows.Count > 0)
                {
                    BillData.Tables["TEMP_GEN_PAT_BILL_DTLS_ALLOCATION"].Rows.Clear();
                }
                Remarks = string.Empty;
                ToBeCollected = 0;
                ToBeCollectedExists = false;
                IsCPOEKOTOrderExist = false;
                //To clear the receipt details 
                ClearReceipt = false;
                ClearReceipt = true;
                selectedEMROrder = null;
                ServiceCharge.Rows.Clear();
                //this.FetchAdvanceTotalAmt();
                BatchAll.Rows.Clear();
                if (!IsPatient && SelectedServiceType != (int)ServiceType.Cafeteria)
                {
                    Services = null;
                }
                if (SelectedServiceType != (int)ServiceType.Pharmacy)
                {
                    SelectedLabOrSubLocationValue = -1;
                }
                else
                {
                    BillData.Tables["INV_PAT_BILLING_TOTAL"].RejectChanges();
                    BillData.Tables["INV_PAT_BILLING_TOTAL"].AcceptChanges();
                }
                IsCPOEOrderExist = false;
                if (ProviderDetails != null)
                {
                    ProviderDetails = null;
                }
                if (HospitalInformation != null)
                {
                    HospitalInformation = null;
                }
                if (ProviderTemp == null && Provider != null)
                {
                    ProviderTemp = LoadProvider();
                }
                if (SelectedServiceType == (int)ServiceType.Cafeteria && (!IsPatient || !IsCafeteriaBillingForIP))
                {
                    ProviderTemp = LoadCafeteriaProvider();
                }

                if (Provider.KIIsNotNullAndRowCount())
                {
                    Provider.DefaultView.Sort = "EMPLOYEE_NAME";
                }
                if (IsFromClear == true)
                {
                    IsVariableDeductableCopay = false;
                }
                TotalDeferredBillAmount = 0;
                IsEnableCategory = true;
                SelectedItemServiceType = SelectedServiceType;
                IsEnableVisitType = true;
                TotalAmount = 0;
                TotalNet = 0;
                IsProviderWiseOrder = true;
                IsEpisodeNoWiseOrder = false;
                ScanServiceCount = 0;
                IsEnabledLabOrSubLocationValue = true;
                isBlockBatchSelectionChange = false;
                isBlockUnitSaleSelectionChange = false;
                IsCPOEPharmacyOrderExist = false;

                IsGroupByChecked = false;
                ucServiceDeliveryServicesDescription.IsCheckCommonSale = false;
                ucCafeteriaDeliveryServicesDescription.IsCheckCommonSale = false;

                IsDispenseChecked = false;
                //IsLoadEMRCPOE = false;
                ServiceGenirc = string.Empty;
                IsEditExecuted = false;
                IsVerifiedItemEditExecuted = false;
                TotalCopayAmount = 0;
                TotalAdjustment = 0;
                //SetInitalData_EMRCPOE();
                if (TotalTable.KIIsNotNullAndRowCount())
                {
                    TotalTable.Rows.Clear();
                }

                //if (IsFromClearButton)-- Bug ID-22331     
                //{
                SelectedEpisodeDetails = null;
                if (!isEpisodePopUpSelected && !IsFromCoderReview) // ADDED BUG CORRECTION BUG ID-25420
                {
                    isEncounterPopUpSelected = false;
                    SelectedEncounterDetails = null;
                }
                if (!IsFromCoderReview)
                    IsNonConsultEncounter = false;
                //}
                //OnLoadEncounterEpisodeNo(SelectedProviderValue);//, true
                //Add code on 04/june/2014 as said by shamsu sir
                if (!IsFromCoderReview && (!IsFromPharmacyPanel || (IsFromPharmacyPanel && !isOnloadPharmacy)))
                {
                    OnSchemeSelectionChanged(0);
                    IsMultipleTimeSchemeSelectionChangeRequired = IsFromPatientSelectionTime ? IsMultipleTimeSchemeSelectionChangeRequired : true; //Speed Improve
                    LoadDefaultIPProvider();
                    IsMultipleTimeSchemeSelectionChangeRequired = IsFromPatientSelectionTime ? IsMultipleTimeSchemeSelectionChangeRequired : false; //Speed Improve
                    //if IP episode then load default provider and episode
                    //if (SelectedVisitMode != VisitMode.IP)
                    //{

                    if (!isEpisodePopUpSelected && SelectedVisitModeNew != (int)VisitMode.IP && (dtPatientVisit == null || dtPatientVisit.Rows.Count == 0
                       || Convert.ToInt16(dtPatientVisit.Rows[0]["VISIT_TYPE"]) != (int)VisitMode.IP) && (SelectedServiceType != (int)ServiceType.Cafeteria))
                    {
                        SelectedProvider = null;
                    }
                    //// if (IsFromCoderReview && IsFromClearButton && SelectedProvider != null) // 36825 
                    //if (IsFromCoderReview)
                    //{
                    //    SelectedProvider = null;
                    //    SelectedOpenEpisodeID = string.Empty;
                    //    SelectedEncounterNo = string.Empty;
                    //}
                    IsMultipleTimeSchemeSelectionChangeRequired = IsFromPatientSelectionTime ? IsMultipleTimeSchemeSelectionChangeRequired : true; //Speed Improve
                    IsAllChecked = false;
                    IsMultipleTimeSchemeSelectionChangeRequired = IsFromPatientSelectionTime ? IsMultipleTimeSchemeSelectionChangeRequired : false; //Speed Improve
                }
                if (DefaultSettings.Values.IS_VERIFICATION_REQUIRED && IsFromPharmacyPanel
                            && Convert.ToInt16(SelectedVisitModeNew) == (int)VisitMode.IP)
                {
                    EnableVerificationSettingBased = true;
                }
                if (IsMultipleTimeSchemeSelectionChangeRequired) //Speed Improve
                {
                    isTaskClearBilllingEbabled = true;
                    TaskForClearBilling = new System.Threading.Tasks.Task(() => this.loadDefaultValues(true));
                    TaskForClearBilling.Start();
                } //Speed Improve
                else
                {
                    if (IsFromPharmacyPanel && EnableVerificationSettingBased && SelectedVisitModeNew == (int)VisitMode.IP)
                    {
                        //skiping by mohd adil for new requiremnt of verification
                        EMROrderRelation = null;
                    }
                    else if (!isOnloadPharmacy)
                    {

                        SetInitalData_EMRCPOE();

                    }
                    EditService = null;
                    IsLoadEMRCPOE = true;
                    IsTapperEnable = false;
                    if (SelectedServiceType == (int)ServiceType.Pharmacy)
                    {
                        if (!isOnloadPharmacy || (isOnloadPharmacy && !FOData.SubLocations.KIIsNotNullAndRowCount()))
                        {
                            FOData.FetchMedicines();
                            LoadMedicines();
                        }
                    }
                    else if (SelectedServiceType == (int)ServiceType.Investigation)
                    {
                        filterMedicineInServices();
                    }
                    OnloadEmrData();
                }
                ClosedPatientFinEpisodeID = 0;

                if (SelectedVisitModeNew == (int)VisitMode.IP || (dtPatientVisit.KIIsNotNullAndRowCount() && dtPatientVisit.Rows[0]["VISIT_TYPE"] != DBNull.Value
                        && Convert.ToInt16(dtPatientVisit.Rows[0]["VISIT_TYPE"]) == (int)VisitMode.IP))
                {
                    IsExpiredVisibile = false;
                }
                else
                {
                    IsExpiredVisibile = true;
                }
                isERCredit = false;
                IsEmergencyEncounter = false;
                IsHandOverEncounter = false;
                //--  BB-09072014
                if (BillData != null && BillData.Tables.Contains("BILL_COMMON_DETAILS") && BillData.Tables["BILL_COMMON_DETAILS"].Columns.Contains("IS_SAME_ENCOUNTER_ID") && BillData.Tables["BILL_COMMON_DETAILS"].KIIsNotNullAndRowCount())
                {
                    BillData.Tables["BILL_COMMON_DETAILS"].Rows[0]["IS_SAME_ENCOUNTER_ID"] = 0;
                }
                //--  BB-09072014 END             
                //--- Move to common Method
                //  DueAmount();
                string MRNO = (PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Rows[0]["MRNO"] != DBNull.Value)
                   ? Convert.ToString(PatientInformation.Rows[0]["MRNO"]) : Patient != null ? Patient.MRNO : "";
                DueAmounts = objUICommonMethods.DueAmount(MRNO);
                if (Convert.ToDecimal(DueAmounts) > 0)
                    BlinkDueAmount = true;
                else
                    BlinkDueAmount = false;
                //---
                IsFromClear = false;
                // Bug ID : 22426   
                if (!IsFromCoderReview)
                {
                    EncounterEndDate = DateTime.Now;
                    IsClosedEncounterSelected = false;
                }
                // END Bug ID : 22426  
                if (SelectedServiceType == (int)ServiceType.Pharmacy)
                {
                    LoadSubLocations();
                }
                BillData.Tables["GEN_PAT_BILL_ICD"].Clear();
                if (!IsFromCoderReview)
                    IsNonConsultEncounter = false;
                if (IsFromCoderReview && SelectedEncounterDetails != null && SelectedEncounterDetails["ISNONCONSULTENCOUNTER"] != DBNull.Value)
                {
                    if (Convert.ToInt16(SelectedEncounterDetails["ISNONCONSULTENCOUNTER"]) == 0)
                        IsNonConsultEncounter = true;
                    else
                        IsNonConsultEncounter = false;
                }
                IsClickRemovedServiceCheck = false;
                IsRemoveUnWantedService = false;
                if (IsFromPharmacyPanel && ERxVisibility == Visibility.Visible)
                {
                    erxEnable();
                }
                BillData.Tables["BILL_COMMON_DETAILS"].Rows[0]["PRESCRIPTION_TYPE"] = DBNull.Value;
                if (BillData.Tables["INTERNAL_EXTERNAL_DETAILS"].KIIsNotNullAndRowCount())
                {
                    BillData.Tables["INTERNAL_EXTERNAL_DETAILS"].Rows.Clear();
                }
                InternalExternalDetails = null;
                IsAllergyReasonMandatory = true;
                ERXNo = string.Empty;
                ClaimFormNo = string.Empty;
                PhRXDtlsInfo = null;
                PhRXDtlsInfoNotApproved = null;
                EnablePrescriptionDetails = false;
                isPharmacyInServiceBilling = false;
                IsDeferredPayment = false;
                //CategorySelectedValue = -1; // Bug ID : 33497
                if (SelectedServiceType == (int)ServiceType.Cafeteria)
                {
                    LoadSalesCategoryType(); //Bug ID : 34295 -- Vinu
                }
                if (!IsFromCoderReview)
                    DtICDDetails = null;
                if (IsFromCoderReview && !IsNonConsultEncounter)
                    DtICDDetails = null;
                Is_TopUP_checked = false;
                Top_payer_id = 0;
                //for resetting the order selection checkbox
                if (IsFromPharmacyPanel && EnableVerificationSettingBased && IsPendingOrderChecked)
                {
                    IsPendingOrderChecked = false;
                }
                if (IsFromPharmacyPanel && EnableVerificationSettingBased && IsVerifiedChecked)
                {
                    IsVerifiedChecked = false;
                }
                if (IsFromPharmacyPanel && EnableVerificationSettingBased && IsVerifiedOmniChecked)
                {
                    IsVerifiedOmniChecked = false;
                }
                if (IsMultipleTimeSchemeSelectionChangeRequired && isTaskClearBilllingEbabled) //Speed Improve
                {
                    loadDefaultValues(false);
                    IsMultipleTimeClearServiceRequired = false;
                    isTaskClearBilllingEbabled = false;
                    do
                    {
                    } while (!TaskForClearBilling.IsCompleted);
                    TaskForClearBilling.Dispose();
                    ClearService();

                } //Speed Improve
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                IsMultipleTimeClearServiceRequired = false;
                isTaskClearBilllingEbabled = false;
            }

        }
        /// <summary>
        /// Loads the medicines. based on sublocation
        /// </summary>
        public void LoadMedicines()
        {
            try
            {
                Mouse.OverrideCursor = Cursors.Wait;
                if (SelectedLabOrSubLocationValue != -1 && SelectedLabOrSubLocationValue != 0 && SelectedLabOrSubLocationItem != null
                    //&& SelectedLabOrSubLocationItem.Row.Table.Columns.Contains("REFERENCE_CODE")
                    //&& SelectedLabOrSubLocationItem.Row["REFERENCE_CODE"] != DBNull.Value
                   && SelectedServiceType == (int)ServiceType.Pharmacy && SelectedSchemeValue != 0 &&
                   SelectedSchemeValue != 0 && SelectedSchemeValue > 0)
                {
                    //JUBILEE
                    if (BillData.Tables["BILL_COMMON_DETAILS"].Columns.Contains("INVENTORY_APPLICABLE") &&
                        BillData.Tables["BILL_COMMON_DETAILS"].Rows[0]["INVENTORY_APPLICABLE"] != DBNull.Value &&
                        Convert.ToInt16(BillData.Tables["BILL_COMMON_DETAILS"].Rows[0]["INVENTORY_APPLICABLE"]) == 1)
                    {
                        //JUBILEE
                        MainPharmacyShared objPharmacy = new MainPharmacyShared();
                        if (!string.IsNullOrEmpty(LocationType))
                        {
                            dtMedicines = objPharmacy.FetchMedicinesWithLocationType(Convert.ToInt16(SelectedLabOrSubLocationItem.Row["REFERENCE_CODE"]), LocationType);
                        }
                        else
                        {
                            dtMedicines = objPharmacy.FetchMedicines(Convert.ToInt16(SelectedLabOrSubLocationItem.Row["REFERENCE_CODE"]));
                        }
                    }
                    else
                    {
                        if (IsUSSettingEnable)
                        {
                            dtMedicines = Infologics.Medilogics.ERP.GPTransaction.ItemDetails.GetItemlistBylocation(Convert.ToInt64(SelectedLabOrSubLocationValue));
                        }
                        else
                        {
                            DataTable dtCriteria = new DataTable("SEARCH_CRITERIA");
                            dtCriteria.Columns.Add("DEFAULT_LOCATION");
                            dtCriteria.Columns.Add("REFERENCE_CODE");
                            dtCriteria.Rows.Add();
                            DefaultPharmacySubLocationValue = System.Configuration.ConfigurationSettings.AppSettings["DefaultPharmacySublocation"];
                            if (DefaultPharmacySubLocationValue != string.Empty && DefaultPharmacySubLocationValue != null && DefaultPharmacySubLocationValue != "" && LabOrSubLocations != null)
                            {
                                DataRow[] drFounds = LabOrSubLocations.Table.Select("NAME='" + DefaultPharmacySubLocationValue.ToString().ToUpper().Trim() + "'");
                                if (drFounds.Length > 0 && SelectedLabOrSubLocationValue == Convert.ToDecimal(drFounds[0]["INCO_MAST_ID"]))
                                {
                                    dtCriteria.Rows[0]["DEFAULT_LOCATION"] = 1;
                                }
                                else
                                {
                                    dtCriteria.Rows[0]["DEFAULT_LOCATION"] = 0;
                                }
                            }
                            dtCriteria.Rows[0]["REFERENCE_CODE"] = SelectedLabOrSubLocationItem.Row["REFERENCE_CODE"];
                            DataTable dtMedicineData = new DataTable();
                            if (FOData.Medicines != null)
                            {
                                dtMedicineData = FOData.Medicines.Copy();
                            }
                            else if (FOData.Medicines == null && Medicines != null)
                            {
                                dtMedicineData = Medicines.Copy();
                            }
                            MainBillingShared objBillingShared = new MainBillingShared();
                            //DataTable dtSetting = CommonData.GetDefaultSettings(0, "IS_EXTERNAL_PHARMACY");
                            //if (dtSetting != null && dtSetting.Rows.Count > 0 && Convert.ToInt16(dtSetting.Rows[0]["VALUE"]) == 1)
                            if (DefaultSettings.Values.IS_EXTERNAL_PHARMACY)
                            {
                                var Query = dtMedicineData.AsEnumerable()
                                .Where(x => x["PH_SUBLOCATION_ID"] != DBNull.Value && Convert.ToInt32(x["PH_SUBLOCATION_ID"]) == SelectedLabOrSubLocationValue)
                                .Select(x => x);
                                if (Query.Count() > 0)
                                {
                                    dtMedicines = Query.CopyToDataTable();
                                }
                                else
                                {
                                    dtMedicines = null;
                                }
                            }
                            else
                            {
                                MainPharmacyShared objPharmacy = new MainPharmacyShared();
                                dtMedicines = objPharmacy.FetchMedicines(Convert.ToInt16(SelectedLabOrSubLocationItem.Row["REFERENCE_CODE"]));
                                dtMedicines = objBillingShared.FilterMedicines(dtMedicineData, dtCriteria);
                            }
                            ////Static data not implemented
                            //MainPharmacyShared objPharmacy = new MainPharmacyShared();
                            //dtMedicines = objPharmacy.FetchMedicines(Convert.ToInt16(SelectedLabOrSubLocationItem.Row["REFERENCE_CODE"]));

                        }
                    }
                    if (dtMedicines != null)
                    {
                        //dsServiceData = this.LoadServices();
                        if (dsServiceData != null && dsServiceData.Tables.Contains("INV_MAST_SERVICE"))
                        {
                            dsServiceData.Tables.Remove("INV_MAST_SERVICE");
                        }
                        else
                        {
                            dsServiceData = new DataSet();
                        }
                        dtMedicines.TableName = "INV_MAST_SERVICE";
                        if (dtMedicines.Rows.Count == 0 && !dtMedicines.Columns.Contains("Name"))
                        {
                            dtMedicines.Columns.Add("Name");
                        }
                        if (dtMedicines.Columns.Contains("INV_MAST_SERVICE_ID") && !dtMedicines.Columns.Contains("PRIMARY_ID"))
                        {
                            dtMedicines.Columns["INV_MAST_SERVICE_ID"].ColumnName = "PRIMARY_ID";
                        }
                        dsServiceData.Merge(dtMedicines);
                        Services = dsServiceData.Tables["INV_MAST_SERVICE"].Copy();
                    }
                    else
                    {
                        Services = null;
                    }
                }
                else
                {
                    Services = null;
                }
                if (IfNullReturnZero(SelectedLabOrSubLocationValue) > 0)
                {
                    LoadMedicineForVerification(Convert.ToInt16(SelectedLabOrSubLocationValue));
                }
                else
                {
                    LoadMedicineForVerification(IP_Gen_App_Sub_Location);
                }
            }
            catch (Exception)
            {
                throw;
                //ExceptionHandler.WriteErrorLog(ex);
            }
            finally
            {
                Mouse.OverrideCursor = null;
            }
        }

        private void LoadMedicineForVerification(int Sublocation)
        {
            if (IsFromPharmacyPanel && EnableVerificationSettingBased && Sublocation > 0)
            {
                DataTable dtMedicineData = new DataTable();
                if (FOData.Medicines != null)
                {
                    dtMedicineData = FOData.Medicines.Copy();
                }
                else if (FOData.Medicines == null && Medicines != null)
                {
                    dtMedicineData = Medicines.Copy();
                }
                MainBillingShared objBillingShared = new MainBillingShared();
                //DataTable dtSetting = CommonData.GetDefaultSettings(0, "IS_EXTERNAL_PHARMACY");
                //if (dtSetting != null && dtSetting.Rows.Count > 0 && Convert.ToInt16(dtSetting.Rows[0]["VALUE"]) == 1)
                if (DefaultSettings.Values.IS_EXTERNAL_PHARMACY)
                {
                    var Query = dtMedicineData.AsEnumerable()
                    .Where(x => x["PH_SUBLOCATION_ID"] != DBNull.Value && Convert.ToInt32(x["PH_SUBLOCATION_ID"]) == Sublocation)
                    .Select(x => x);
                    if (Query.Count() > 0)
                    {
                        dtMedicines = Query.CopyToDataTable();
                    }
                    else
                    {
                        dtMedicines = null;
                    }
                }
                if (dtMedicines.KIIsNotNullAndRowCount())
                {
                    //dsServiceData = this.LoadServices();
                    if (dsServiceData != null && dsServiceData.Tables.Contains("INV_MAST_SERVICE"))
                    {
                        dsServiceData.Tables.Remove("INV_MAST_SERVICE");
                    }
                    else
                    {
                        dsServiceData = new DataSet();
                    }
                    dtMedicines.TableName = "INV_MAST_SERVICE";
                    if (dtMedicines.Rows.Count == 0 && !dtMedicines.Columns.Contains("Name"))
                    {
                        dtMedicines.Columns.Add("Name");
                    }
                    if (dtMedicines.Columns.Contains("INV_MAST_SERVICE_ID") && !dtMedicines.Columns.Contains("PRIMARY_ID"))
                    {
                        dtMedicines.Columns["INV_MAST_SERVICE_ID"].ColumnName = "PRIMARY_ID";
                    }
                    dsServiceData.Merge(dtMedicines);
                    Services = dsServiceData.Tables["INV_MAST_SERVICE"].Copy();
                }
                else
                {
                    Services = null;
                }
            }
            else if (IsFromPharmacyPanel && EnableVerificationSettingBased && Sublocation == 0)
            {
                DataTable dtMedicineData = new DataTable();
                if (FOData.Medicines != null)
                {
                    dtMedicineData = FOData.Medicines.Copy();
                }
                else if (FOData.Medicines == null && Medicines != null)
                {
                    dtMedicineData = Medicines.Copy();
                }
                MainBillingShared objBillingShared = new MainBillingShared();
                //DataTable dtSetting = CommonData.GetDefaultSettings(0, "IS_EXTERNAL_PHARMACY");
                //if (dtSetting != null && dtSetting.Rows.Count > 0 && Convert.ToInt16(dtSetting.Rows[0]["VALUE"]) == 1)
                if (DefaultSettings.Values.IS_EXTERNAL_PHARMACY)
                {
                    var Query = dtMedicineData.AsEnumerable()
                    .Where(x => x["PH_SUBLOCATION_ID"] != DBNull.Value && (IfNullReturnZero(x["PH_SUBLOCATION_ID"]) == IfNullReturnZero(IP_Gen_App_Sub_Location) ||
                     IfNullReturnZero(x["PH_SUBLOCATION_ID"]) == IfNullReturnZero(IPVerificationLocation)))
                    .Select(x => x);
                    if (Query.Count() > 0)
                    {
                        dtMedicines = Query.CopyToDataTable();
                    }
                    else
                    {
                        dtMedicines = null;
                    }
                }
                if (dtMedicines.KIIsNotNullAndRowCount())
                {
                    if (dtMedicines.Columns.Contains("PH_SUBLOCATION_ID"))
                    {
                        dtMedicines.Columns.Remove("PH_SUBLOCATION_ID");
                    }
                    var GroupedQuery = from drDtls in dtMedicines.AsEnumerable()
                                       group drDtls by drDtls.Field<object>("INV_MAST_SERVICE_ID") into GroupedData
                                       let row = GroupedData.First()
                                       select new
                                       {
                                           NAME = row["NAME"],
                                           MEDICINE_CODE = row["MEDICINE_CODE"],
                                           INV_MAST_SERVICE_ID = GroupedData.Key,
                                           CATEGORY_CODE = row["CATEGORY_CODE"],
                                           GENERIC_ID = row["GENERIC_ID"],
                                           DEFAULT_LOCATION = row["DEFAULT_LOCATION"],
                                           QTY = GroupedData.Sum(s => IfNullReturnZero(s["QTY"])),
                                           IS_STORE = row["IS_STORE"],
                                           ISPROFILE = row["ISPROFILE"],
                                           CPT_CODE = row["CPT_CODE"],
                                           SERVICE_CODE = row["SERVICE_CODE"],
                                           DESCRIPTION = row["DESCRIPTION"],
                                           INV_CATEGORY_ID = row["INV_CATEGORY_ID"],
                                           UNIT_NAME = row["UNIT_NAME"],
                                           DISPLAY_ORDER = row["DISPLAY_ORDER"],
                                           MODALITY_ID = row["MODALITY_ID"],
                                           RESULT_TYPE = row["RESULT_TYPE"],
                                           ISVALID = row["ISVALID"],
                                           PARENT_INV_CATEGORY_ID = row["PARENT_INV_CATEGORY_ID"],
                                           INV_CATEGORY_NAME = row["INV_CATEGORY_NAME"],
                                           ISCONSUMABLE = row["ISCONSUMABLE"],
                                           ISDISPLAY_IN_EMR = row["ISDISPLAY_IN_EMR"],
                                           SERVICE_TYPE = row["SERVICE_TYPE"],
                                           IS_NARCOTIC_DRUG = row["IS_NARCOTIC_DRUG"],
                                           IS_INVESTIGATION_DRUG = row["IS_INVESTIGATION_DRUG"],
                                           PER_DOSE_QUANTITY = row["PER_DOSE_QUANTITY"],
                                           QUANTITY = row["QUANTITY"],
                                           MATERIAL_TYPE = row["MATERIAL_TYPE"],
                                           QUANTITY_UNIT = row["QUANTITY_UNIT"],
                                           OP_UNIT = row["OP_UNIT"],
                                           IP_UNIT = row["IP_UNIT"],
                                           EXTERNAL_SERVICE_CODE = row["EXTERNAL_SERVICE_CODE"]
                                       };
                    if (GroupedQuery.Any())
                    {
                        DataTable dtTempQuery = new DataTable();
                        Infologics.Medilogics.General.Control.Common objCommon = new General.Control.Common();
                        dtTempQuery = objCommon.LINQToDataTable(GroupedQuery);
                        dtMedicines = dtTempQuery;
                        if (dsServiceData != null && dsServiceData.Tables.Contains("INV_MAST_SERVICE"))
                        {
                            dsServiceData.Tables.Remove("INV_MAST_SERVICE");
                        }
                        else
                        {
                            dsServiceData = new DataSet();
                        }
                        dtMedicines.TableName = "INV_MAST_SERVICE";
                        if (dtMedicines.Rows.Count == 0 && !dtMedicines.Columns.Contains("Name"))
                        {
                            dtMedicines.Columns.Add("Name");
                        }
                        if (dtMedicines.Columns.Contains("INV_MAST_SERVICE_ID") && !dtMedicines.Columns.Contains("PRIMARY_ID"))
                        {
                            dtMedicines.Columns["INV_MAST_SERVICE_ID"].ColumnName = "PRIMARY_ID";
                        }
                        dsServiceData.Merge(dtMedicines);
                        Services = dsServiceData.Tables["INV_MAST_SERVICE"].Copy();
                    }
                    else
                    {
                        Services = null;
                    }
                }
                else
                {
                    Services = null;
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>

        private bool ValidateService(DataRow drView)
        {
            try
            {
                if (drView != null)
                {
                    IsNotClearBasedOnValidation = false;
                    long ServiceId = 0;
                    if (EditService == null)
                    {
                        if (drView.Table.Columns.Contains("PRIMARY_ID"))
                        {
                            ServiceId = drView["PRIMARY_ID"] != DBNull.Value ? Convert.ToInt64(drView["PRIMARY_ID"]) : 0;
                        }
                        else
                        {
                            ServiceId = drView["INV_MAST_SERVICE_ID"] != DBNull.Value ? Convert.ToInt64(drView["INV_MAST_SERVICE_ID"]) : 0;
                        }
                    }
                    else
                    {
                        ServiceId = drView["INV_MAST_SERVICE_ID"] != DBNull.Value ?
                            Convert.ToInt64(drView["INV_MAST_SERVICE_ID"]) : 0;
                    }
                    if (SelectedSchemeValue == 0 || SelectedSchemeValue < 0)
                    {
                        if (isThrowMessage)
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                "Scheme missing.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        }
                        return false;
                    }
                    if (IsPackage && EditService == null && (SelectedServiceType == (int)ServiceType.Consultation || SelectedServiceType == (int)ServiceType.Investigation ||
                          SelectedServiceType == (int)ServiceType.Cafeteria)
                          && dsPackageMstDtls != null && dsPackageMstDtls.Tables["PKG_MAST_PATIENT"].KIIsNotNullAndRowCount())
                    {
                        DataRow[] drPackageExist = dsPackageMstDtls.Tables["PKG_MAST_PATIENT"].Select("PKG_SERVICE_ID=" + Convert.ToInt64(SelectedPackageItem.Row["PKG_SERVICE_ID"]));
                        if (drPackageExist.Length > 0 && drPackageExist[0]["PKG_STATUS"] != DBNull.Value
                            && Convert.ToInt16(drPackageExist[0]["PKG_STATUS"]) == (int)PackageStatus.Quit)
                        {
                            if (isThrowMessage)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                    "Selected package has been quit", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            }
                            return false;
                        }
                    }
                   // DataTable dtValues = CommonData.GetDefaultSettings(0, "MULTI PHARMACY COMPANY APPLICABLE");
                    //Infologics.Medilogics.CommonSharedUI.BillingView.UcPatientEpisodeDetails objUcPatientEpisodeDetails = new Infologics.Medilogics.CommonSharedUI.BillingView.UcPatientEpisodeDetails();
                    //objUcPatientEpisodeDetails.MRNO = PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Columns.Contains("MRNO")
                    //&& PatientInformation.Rows[0]["MRNO"] != DBNull.Value ? Convert.ToString(PatientInformation.Rows[0]["MRNO"]) : "";
                    //DataTable dtPatientEpisode = new DataTable();
                    //dtPatientEpisode = objUcPatientEpisodeDetails.PatientEpisode;
                    //if ((dtPatientEpisode == null || dtPatientEpisode.Rows.Count == 0) && SelectedVisitMode == VisitMode.OPCREDIT)
                    //{
                    //    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                    //       "Please do a consultation before doing service bill(s).", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    //    return false;
                    //} 
                    if (EditService == null && SelectedServiceType != null &&
                        SelectedServiceType == (int)ServiceType.Investigation && SelectedService != null &&
                     BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0 && SelectedService.Row.Table.Columns.Contains("SERVICE_CATEGORY")
                     && SelectedService["SERVICE_CATEGORY"] != DBNull.Value &&
                     BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Count(dr => dr["SERVICE_CATEGORY"] != DBNull.Value &&
                     Convert.ToInt16(dr["SERVICE_CATEGORY"]) == Convert.ToInt16(SelectedService["SERVICE_CATEGORY"])) == 0
                        && SelectedItemServiceType != (int)ServiceType.Pharmacy) //!IsSelectAllCpoeOrders && 
                    {
                        IsNotClearBasedOnValidation = true;
                        if (isThrowMessage)
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                             "Medical and non medical items cannot be added in an invoice.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        }
                        return false;
                    }
                    if (SelectedServiceType == (int)ServiceType.Pharmacy || SelectedItemServiceType == (int)ServiceType.Pharmacy)
                    {
                        if (EditService == null && drView.Table.Columns.Contains("IS_ADDITIVE") && BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(r => IfNullReturnZero(r["IS_ADDITIVE"]) == 1).Count() > 0 && drView["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value && Convert.ToBoolean(drView["ISSALE"]))
                        {
                            var query = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_DTLS_INV_ORDER_ID"]) == IfNullReturnZero(drView["EMR_PAT_DTLS_INV_ORDER_ID"]) ||
                                         IfNullReturnZero(x["REF_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(drView["EMR_PAT_DTLS_INV_ORDER_ID"])).Select(x => x);
                            if (query.Any())
                            {
                                if (query.AsEnumerable().Where(x => IfNullReturnZero(x["INV_MAST_SERVICE_ID"]) == 0).Any())
                                {
                                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                                        "Brand medicine details are missing. Please provide brand medicine for additive item(s).", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                    return false;
                                }

                            }
                        }
                        decimal IssuedQty = 0;
                        if (IsPharmacyOrderSelected && OrderItems != null)
                        {
                            if (EMRItemSelected == null)
                            {
                                drArrayTemp = OrderItems.Select("MEDICINE_CODE='" + SelectedService.Row["MEDICINE_CODE"].ToString() + "'");
                                if (drArrayTemp != null && drArrayTemp.Length > 0)
                                {
                                    EMRItemSelected = drArrayTemp[0];
                                }
                            }
                            if (EMRItemSelected != null)
                            {
                                IssuedQty = this.ReadNullableValue(EMRItemSelected["ISSUED_QTY"]);
                            }
                        }
                        if (EditService != null)
                        {
                            IssuedQtyTotal = (Convert.ToDecimal(IssuedQty) +
                                    Convert.ToDecimal(drView["QTY"]))
                                    - Convert.ToDecimal(EditService["QTY"]);
                        }
                        else
                        {
                            IssuedQtyTotal = (Convert.ToDecimal(IssuedQty) +
                                    Convert.ToDecimal(drView["QTY"]));
                        }
                        if (IsPharmacyOrderSelected && EMRItemSelected != null &&
                          Convert.ToDecimal(EMRItemSelected["QTY"]) < IssuedQtyTotal)
                        {
                            if (isThrowMessage)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "Issued quantity (" + drView["QTY"] + ") should not be greater than " +
                                " Requested(" + EMRItemSelected["QTY"] + ").", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            }
                            return false;
                        }
                        if ((SelectedLabOrSubLocationValue == -1 || SelectedLabOrSubLocationValue == 0 || SelectedSubLocationIndex == -1) && SelectedItemServiceType != (int)ServiceType.Pharmacy)
                        {
                            if (isThrowMessage)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "Sublocation missing.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            }
                            return false;
                        }
                        if (drView["BATCHNO"] == DBNull.Value)
                        {
                            IsNotClearBasedOnValidation = true;
                            if (isThrowMessage)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "Batch missing.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            }
                            return false;
                        }
                        if (!IsUSSettingEnable && UnitSalesConversionApplicable && SelectedForm == null && SelectedItemServiceType != (int)ServiceType.Pharmacy)
                        {
                            IsNotClearBasedOnValidation = true;
                            if (isThrowMessage)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "Unit missing.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            }
                            return false;
                        }
                        ///PHARMACY_BILLING_EXPIRY_PERIOD
                        //dtValues = CommonData.GetDefaultSettings(0, "PHARMACY_BILLING_EXPIRY_PERIOD");
                        //if (dtValues != null && dtValues.Rows.Count > 0 && drView["EXP_DATE"] != DBNull.Value)
                        if (DefaultSettings.Values.PHARMACY_BILLING_EXPIRY_PERIOD >= 0 && drView["EXP_DATE"] != DBNull.Value)
                        {
                            bool hasPrivilege = CommonData.CheckPrivilege("BILL_EXPIRED_MEDICINE");
                            if (!String.IsNullOrEmpty(Convert.ToString(drView["EXP_DATE"])) && DateTime.Compare(Convert.ToDateTime(Convert.ToDateTime(drView["EXP_DATE"]).ToShortDateString()), DateTime.Now.Date) == -1 && !hasPrivilege) //Less than now
                            {
                                IsNotClearBasedOnValidation = true;
                                if (isThrowMessage)
                                {
                                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "Medicine has expired.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                }
                                return false;
                            }
                        }
                        //if (SelectedBatchOrUnit != null && dtValues != null && dtValues.Rows.Count > 0
                        //    && !String.IsNullOrEmpty(Convert.ToString(drView["EXP_DATE"]))

                        if (SelectedBatchOrUnit != null && DefaultSettings.Values.PHARMACY_BILLING_EXPIRY_PERIOD >= 0
                            && !String.IsNullOrEmpty(Convert.ToString(drView["EXP_DATE"]))
                            && Convert.ToDateTime(drView["EXP_DATE"]) < DateTime.Now.AddDays(DefaultSettings.Values.PHARMACY_BILLING_EXPIRY_PERIOD) && isThrowMessage)
                        {
                            var EndDate = DateTime.Now.Date;
                            var StartDate = Convert.ToDateTime(drView["EXP_DATE"]).Date;
                            var days = StartDate - EndDate;
                            if (days.Days == 0)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "Medicine will Expire Today.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            }
                            else
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "Medicine will expire within " + days.Days.ToString() + " days.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            }
                        }
                        if (String.IsNullOrEmpty(Convert.ToString(drView["EXP_DATE"])) && IfNullReturnZero(drView["IS_CONSUMPTION"]) == 0)
                        {
                            if (isThrowMessage)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "Medicine  Expired.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            }
                            return false;
                        }
                        //Pending2020
                        if (!this.IsValidService())
                        {
                            return false;
                        }
                        if (!IsAdjustmentClear && !AdjustmentValidation())
                        {
                            return false;
                        }
                        IsAdjustmentClear = false;
                        if (IfNullReturnZero(drView["CONSUMPTION_STATUS"]) == 0)
                        {
                            MainBilling objBIlling = new MainBilling();
                            DataTable dtCriteriatable = new DataTable();
                            dtCriteriatable.Columns.Add("PH_SUBLOCATION_ID", typeof(int));
                            dtCriteriatable.Columns.Add("MEDICINE_CODE", typeof(long));
                            dtCriteriatable.Columns.Add("BATCHNO", typeof(string));
                            dtCriteriatable.Columns.Add("INV_MAST_SERVICE_ID", typeof(long));
                            dtCriteriatable.Rows.Add(drView["SUBLOCATION"], drView["MEDICINE_CODE"], drView["BATCHNO"], drView["INV_MAST_SERVICE_ID"]);
                            DataTable dttable = objBIlling.GetMedicinesStockDetails(dtCriteriatable);
                            decimal sales_actual_qty = 0; IfNullReturnZero(drView["SALES_ACTUAL_QTY"]);
                            decimal query = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                .Where(x => x["INV_MAST_SERVICE_ID"] != DBNull.Value && x["BATCHNO"] != DBNull.Value &&
                              Convert.ToInt64(x["INV_MAST_SERVICE_ID"]) == Convert.ToInt64(drView["INV_MAST_SERVICE_ID"]) &&
                              Convert.ToString(x["BATCHNO"]) == Convert.ToString(drView["BATCHNO"]) && Convert.ToBoolean(x["ISSALE"]))
                              .Select(x => IfNullReturnZero(x["SALES_ACTUAL_QTY"])).Sum();
                            sales_actual_qty += query;
                            //if (query.Count() > 0)
                            //{
                            //    decimal des = Convert.ToDecimal(query.CopyToDataTable().AsEnumerable().Select(x => x["SALES_ACTUAL_QTY"]).Sum());
                            //    sales_actual_qty += Convert.ToDecimal(query.AsEnumerable().Select(x => x["SALES_ACTUAL_QTY"]).Sum());
                            //}
                            if (dttable.KIIsNotNullAndRowCount())
                            {
                                if (sales_actual_qty > IfNullReturnZero(dttable.Rows[0]["QTY"]))
                                {
                                    if (isThrowMessage)
                                    {
                                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                        "No Stock Available for Item " + drView["NAME"] + " With Batch No " + drView["BATCHNO"], MessageBoxButtonType.OK, MessageBoxImages.Information);
                                    }
                                    return false;
                                }
                            }
                            else if (drView["BATCHNO"] != DBNull.Value)
                            {
                                if (isThrowMessage)
                                {
                                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                    "No Stock Available for Item " + drView["NAME"] + " With Batch No " + drView["BATCHNO"], MessageBoxButtonType.OK, MessageBoxImages.Information);
                                }
                                return false;
                            }
                        }
                        if (IfNullReturnZero(drView["IS_APPROVED"]) == 0)
                        {
                            if(isThrowMessage)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                "This item is not approved.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            }
                            return false;//not approved. checkbox is disabled. for unchecking the checkbox return false;
                        }
                        if (IfNullReturnZero(drView["IS_OMNICELL_ITEM"]) == 1 && IfNullReturnZero(drView["IS_VERIFIED"]) == 1)
                        {
                            if (isThrowMessage)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                "Omnicell item cannot be sale from here", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            }
                            return false;
                        }
                    }
                    else if (SelectedServiceType == (int)ServiceType.Investigation || SelectedServiceType == (int)ServiceType.Cafeteria
                        || SelectedServiceType == (int)ServiceType.IncomingService)
                    {
                        IsAddedService = false;
                        if (!IsPackage && SelectedServiceType == (int)ServiceType.IncomingService && SelectedLabOrSubLocationItem != null
                            && SelectedLabOrSubLocationItem["ACC_HEAD_ID"] == DBNull.Value)
                        {
                            if (isThrowMessage)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                    "Account head not defined for '" + SelectedLabOrSubLocationItem["NAME"] + "'", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            }
                            return false;
                        }
                        if (IsQtyEditable && drView["QTY"] != DBNull.Value && (Convert.ToDecimal(drView["QTY"]) == 0 || Convert.ToDecimal(drView["QTY"]) <= 0))
                        {
                            IsNotClearBasedOnValidation = true;
                            if (isThrowMessage)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                    "Invalid quantity.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            }
                            return false;
                        }
                        IsAddedService = FindServiceAdded(ServiceId, string.Empty);
                        //if (EditService != null && (Convert.ToInt64(EditService["INV_MAST_SERVICE_ID"]) !=
                        //    ServiceId) && IsAddedService && !IsQtyEditable)
                        //{
                        //    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                        //        "Service already added", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        //    return false;
                        //}
                        ////Fetching profile service
                        if (SelectedServiceType == (int)ServiceType.Investigation || SelectedServiceType == (int)ServiceType.IncomingService)
                        {
                            DataTable dtBaseCategory = InvestigationData.GetLookupData("BASE CATEGORY");
                            string Data = string.Empty;
                            if (dtBaseCategory != null && dtBaseCategory.Rows.Count > 0)
                            {
                                var DataCount = from drBase in dtBaseCategory.AsEnumerable().Where(dr1 => dr1["LOOKUP_VALUE"] != DBNull.Value &&
                                                Convert.ToInt16(dr1["FIELD2"]) == Convert.ToInt16(BaseCategory.Laboratory)
                                                || Convert.ToInt16(dr1["FIELD2"]) == Convert.ToInt16(BaseCategory.Radiology)
                                                || Convert.ToInt16(dr1["FIELD2"]) == Convert.ToInt16(BaseCategory.Procedure))
                                                join drService in BillData.Tables["INV_PAT_BILLING_TEMP"].AsEnumerable().Where(dr2 => dr2["INV_PARENT_CATEGORY_ID"] != DBNull.Value)
                                                on Convert.ToInt64(drBase["LOOKUP_VALUE"]) equals
                                                Convert.ToInt64(drService["INV_PARENT_CATEGORY_ID"])
                                                where Convert.ToInt64(drBase["LOOKUP_VALUE"]) == Convert.ToInt64(drService["INV_PARENT_CATEGORY_ID"])
                                                select drBase;
                                if (DataCount.Count() > 0 && PatientInformation != null && (PatientInformation.Rows[0]["AGE"] == DBNull.Value ||
                                    PatientInformation.Rows[0]["GENDER"] == DBNull.Value))
                                {
                                    if (isThrowMessage)
                                    {
                                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                            "Gender/Age not specified", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                    }
                                    return false;
                                }
                            }

                        }
                        ///CHECK THE SERVICE ALREADY BILLED
                        if (EditService == null && !IsDonor)
                        {
                            if (!IsServiceBilled(drView))
                            {
                                return false;
                            }
                        }
                        if (drView["NET_AMOUNT"] != DBNull.Value && Convert.ToDecimal(drView["NET_AMOUNT"]) < 0)
                        {
                            if (isThrowMessage)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                    "Invalid Amount.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            }
                            return false;
                        }
                        if (!this.IsValidService())
                        {
                            return false;
                        }
                        if (SelectedService != null && EditService == null && SelectedItemServiceType != (int)ServiceType.Pharmacy)
                        {
                            DataRow[] SelectedServiceBillgroup = CategoryTemp.Select("ROOT_INV_CATEGORY_ID="
                                + Convert.ToInt64(SelectedService["PARENT_INV_CATEGORY_ID"]) + " AND ISROOT=1");
                            if (SelectedServiceBillgroup != null && SelectedServiceBillgroup.Length > 0)
                            {
                                if (SelectedServiceBillgroup[0]["BILL_GROUP"] == DBNull.Value)
                                {
                                    if (isThrowMessage)
                                    {
                                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                            "Bill group not defined for specified category", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                    }
                                    return false;
                                }
                                /// -- Bug ID: 32243. Validation not required for DAE -- Benson , START
                                ////if (BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0)
                                ////{
                                ////    var AddedServiceBillgroup = from drGroup in CategoryTemp.AsEnumerable()//.Where(dr=>dr["ROOT_INV_CATEGORY_ID"]!=DBNull.Value) 
                                ////                                where drGroup["ROOT_INV_CATEGORY_ID"] != DBNull.Value && drGroup["ISROOT"] != DBNull.Value
                                ////                                && BillData.Tables["INV_PAT_BILLING"].Rows[0]["INV_PARENT_CATEGORY_ID"] != DBNull.Value
                                ////                                && Convert.ToInt64(drGroup["ROOT_INV_CATEGORY_ID"])
                                ////                                == Convert.ToInt64(BillData.Tables["INV_PAT_BILLING"].Rows[0]["INV_PARENT_CATEGORY_ID"])
                                ////                                && Convert.ToInt16(drGroup["ISROOT"]) == 1
                                ////                                select drGroup;

                                ////    if (AddedServiceBillgroup.Count() > 0)
                                ////    {
                                ////        if (SelectedServiceBillgroup[0]["BILL_GROUP"] != DBNull.Value && AddedServiceBillgroup.ElementAt(0)["BILL_GROUP"] != DBNull.Value
                                ////           && Convert.ToInt64(SelectedServiceBillgroup[0]["BILL_GROUP"]) != Convert.ToInt64(AddedServiceBillgroup.ElementAt(0)["BILL_GROUP"]))
                                ////        {
                                ////            DataRow[] drBillGroup = CategoryTemp.Select("BILL_GROUP=" + Convert.ToInt64(AddedServiceBillgroup.ElementAt(0)["BILL_GROUP"]) + " AND ISROOT=1");
                                ////            foreach (DataRow drTemp in drBillGroup.CopyToDataTable().Rows)
                                ////            {
                                ////                if (!strMessage.ToString().Contains(drTemp["NAME"].ToString()))
                                ////                {
                                ////                    strMessage.Append(drTemp["NAME"]);
                                ////                    strMessage.Append(",");
                                ////                }
                                ////            }
                                ////            if (strMessage.ToString() != string.Empty)
                                ////            {
                                ////                if (isThrowMessage)
                                ////                {
                                ////                    strMessage.Remove(strMessage.Length - 1, 1);
                                ////                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                ////                    "All services should be within the bill group (" + strMessage.ToString() + ").\n '" +
                                ////                    SelectedService["NAME"] + "' are of different bill group.",
                                ////                    MessageBoxButtonType.OK, MessageBoxImages.Information);
                                ////                    strMessage.Length = 0;
                                ////                }
                                ////                return false;
                                ////            }
                                ////        }
                                ////    }
                                ////}
                                /// -- Bug ID: 32243. Validation not required for DAE -- Benson , END
                            }
                        }
                        else if (EditService == null)
                        {
                            if (drView != null && drView["INV_PARENT_CATEGORY_ID"] != DBNull.Value)
                            {
                                DataRow[] SelectedServiceBillgroup = CategoryTemp.Select("ROOT_INV_CATEGORY_ID="
                                    + Convert.ToInt64(drView["INV_PARENT_CATEGORY_ID"]) + " AND ISROOT=1");
                                if (SelectedServiceBillgroup != null && SelectedServiceBillgroup.Length > 0 && SelectedServiceBillgroup[0]["BILL_GROUP"] == DBNull.Value)
                                {
                                    if (isThrowMessage)
                                    {
                                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                            "Bill group not defined for specified category", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                    }
                                    return false;
                                }
                            }
                        }
                        //End
                        if (EditService == null && SelectedServiceType == (int)ServiceType.Investigation)
                        {
                            if (!ValidatePackage())
                            {
                                return false;
                            }
                            if (dsPackageMstDtls != null && dsPackageMstDtls.Tables["PKG_MAST_PATIENT"].KIIsNotNullAndRowCount())
                            {
                                var packageExist = from dr in dsPackageMstDtls.Tables["PKG_MAST_PATIENT"].AsEnumerable()
                                                   where dr.RowState != DataRowState.Deleted && SelectedService.Row["PRIMARY_ID"] != DBNull.Value
                                                   && dr["PKG_SERVICE_ID"] != DBNull.Value
                                                   && Convert.ToInt64(dr["PKG_SERVICE_ID"]) == Convert.ToInt64(SelectedService.Row["PRIMARY_ID"])
                                                   && dr["PKG_STATUS"] != DBNull.Value && (Convert.ToInt16(dr["PKG_STATUS"]) == (int)PackageStatus.Billed
                                                   || Convert.ToInt16(dr["PKG_STATUS"]) == (int)PackageStatus.Open)
                                                   select dr;
                                if (packageExist.Count() > 0)
                                {
                                    if (isThrowMessage)
                                    {
                                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                            "Selected package is currently active for this patient", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                    }
                                    return false;
                                }
                            }
                            //if (IsPatientIP())
                            //{
                            //    if (SelectedService != null && SelectedService.Row["ISPACKAGE"] != DBNull.Value && Convert.ToInt16(SelectedService.Row["ISPACKAGE"]) == 1)
                            //    {
                            //        if (BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
                            //        {
                            //            var found = from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                            //                        where dr.RowState != DataRowState.Deleted && dr["ISPACKAGE_SERVICE"] != DBNull.Value
                            //                        && Convert.ToInt16(dr["ISPACKAGE_SERVICE"]) == 1
                            //                        select dr;
                            //            if (found.Count() > 0)
                            //            {
                            //                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                            //                    "Package already added ", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            //                return false;
                            //            }
                            //        }
                            //    }
                            //    if (SelectedService != null && SelectedService.Row["ISPACKAGE"] != DBNull.Value && Convert.ToInt16(SelectedService.Row["ISPACKAGE"]) == 1)
                            //    {
                            //        if (BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
                            //        {
                            //            var found = from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                            //                        where dr.RowState != DataRowState.Deleted && (dr["ISPACKAGE_SERVICE"] == DBNull.Value
                            //                        || Convert.ToInt16(dr["ISPACKAGE_SERVICE"]) == 0)
                            //                        select dr;
                            //            if (found.Count() > 0)
                            //            {
                            //                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "IP package cannot be added ", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            //                return false;
                            //            }
                            //        }
                            //    }
                            //    else if (SelectedService != null && SelectedService.Row["ISPACKAGE"] == DBNull.Value || Convert.ToInt16(SelectedService.Row["ISPACKAGE"]) == 0)
                            //    {
                            //        if (BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
                            //        {
                            //            var found = from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                            //                        where dr.RowState != DataRowState.Deleted && dr["ISPACKAGE_SERVICE"] != DBNull.Value
                            //                        && Convert.ToInt16(dr["ISPACKAGE_SERVICE"]) == 1
                            //                        select dr;
                            //            if (found.Count() > 0)
                            //            {
                            //                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "IP package can only be added ", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            //                return false;
                            //            }
                            //        }
                            //    }
                            //}
                        }

                        if (IsPackage && EditService == null && (SelectedServiceType == (int)ServiceType.Investigation || SelectedServiceType == (int)ServiceType.Cafeteria)
                            && dsPackageMstDtls != null && dsPackageMstDtls.Tables["PKG_DTLS_PATIENT_SERVICE"].KIIsNotNullAndRowCount())
                        {
                            dsPackageMstDtls.Tables["PKG_DTLS_PATIENT_SERVICE"].DefaultView.RowFilter = "PKG_MAST_PATIENT_ID="
                                + Convert.ToInt64(SelectedPackageItem.Row["PKG_MAST_PATIENT_ID"]) + "AND SERVICE_ID=" + Convert.ToInt64(SelectedService.Row["PRIMARY_ID"]);
                            decimal qtyAvail = dsPackageMstDtls.Tables["PKG_DTLS_PATIENT_SERVICE"].DefaultView.ToTable().Rows[0]["AVAILED_QTY"] != DBNull.Value
                                ? Convert.ToDecimal(dsPackageMstDtls.Tables["PKG_DTLS_PATIENT_SERVICE"].DefaultView.ToTable().Rows[0]["AVAILED_QTY"]) : 0;
                            if (Convert.ToDecimal(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["QTY"])
                                > (Convert.ToDecimal(dsPackageMstDtls.Tables["PKG_DTLS_PATIENT_SERVICE"].DefaultView.ToTable().Rows[0]["ACTUAL_QTY"]) - qtyAvail))
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                    "Billing quantity should not be greater than availed quantity", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                return false;
                            }
                        }
                        if (EditService != null && EditService["IS_STOCK_EXIST"] != DBNull.Value && Convert.ToInt16(EditService["IS_STOCK_EXIST"]) == 1)
                        {
                            if (isThrowMessage)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                       "Stock not available", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            }
                            return false;
                        }
                        if (!AdjustmentValidation())
                        {
                            return false;
                        }
                    }
                    if (IsFromPharmacyPanel && EnableVerificationSettingBased)
                    {
                        if (IfNullReturnZero(drView["IS_VERIFIED"]) == 1 && IfNullReturnZero(drView["ISSALE"]) == 1 && IfNullReturnZero(drView["VERIFICATION_BTN_VISIBILITY"]) == 1
                            && IfNullReturnZero(drView["GRANULAR_UNIT"]) < IfNullReturnZero(drView["SALES_ACTUAL_QTY"]))
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "Sale Quantity should not be greater than verified Quantity", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            return false;
                        }
                    }
                }
                return true;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="LocationID"></param>
        /// <returns></returns>
        private string GetLocationName(long LocationID)
        {
            string LocationName = string.Empty;
            if (Location != null && Location.Table.Columns.Contains("INCO_MAST_ID"))
            {
                DataTable dt = Location.Table.Copy();
                drArrayTemp = dt.Select("INCO_MAST_ID=" + LocationID);
                if (drArrayTemp.Length > 0)
                {
                    LocationName = drArrayTemp[0]["INCO_MAST_NAME"].ToString();
                }
            }
            return LocationName;
        }
        /// <summary>
        /// /
        /// </summary>
        /// <param name="ServiceID"></param>
        /// <returns></returns>
        private bool IsServiceBilled(DataRow drData)
        {   ///SP SELECTALL_INV_PAT_BILLING
            string ServiceName = string.Empty;
            bool IsContinue = true;
            if (IsPatient && ServiceCriteria.Rows.Count > 0)
            {
                dtTemp = null;
                if (drData != null)
                {
                    //Code Modified for bug correction Bug ID-18013
                    dtTemp = BillData.Tables["INV_PAT_BILLING_TEMP"].Copy().Clone();
                    dtTemp.ImportRow(drData);
                }
                DataTable dtBaseCategory = InvestigationData.GetLookupData("BASE CATEGORY");
                string Data = string.Empty;
                if (dtBaseCategory != null && dtBaseCategory.Rows.Count > 0 && dtTemp != null && dtTemp.Rows.Count > 0)
                {
                    Data = string.Join(",", (from drBase in dtBaseCategory.AsEnumerable().Where(dr1 => dr1["LOOKUP_VALUE"] != DBNull.Value
                                             && dr1["FIELD6"] != DBNull.Value && Convert.ToInt16(dr1["FIELD6"]) == 1)
                                             join drService in dtTemp.AsEnumerable().Where(dr2 => dr2["INV_PARENT_CATEGORY_ID"] != DBNull.Value)
                                             on Convert.ToInt64(drBase["LOOKUP_VALUE"]) equals
                                             Convert.ToInt64(drService["INV_PARENT_CATEGORY_ID"])
                                             where Convert.ToInt64(drBase["LOOKUP_VALUE"]) == Convert.ToInt64(drService["INV_PARENT_CATEGORY_ID"])
                                             select drService["INV_MAST_SERVICE_ID"].ToString()).ToArray());
                }//   Convert.ToInt16(dr1["FIELD2"]) == Convert.ToInt16(BaseCategory.Laboratory)|| Convert.ToInt16(dr1["FIELD2"]) == Convert.ToInt16(BaseCategory.Radiology)
                if (Data != string.Empty && dtTemp.Select("ISVALIDATE_BILLED<>1").Length > 0)
                {
                    ServiceCriteria.Rows[0]["MRNO"] = PatientInformation != null ? PatientInformation.Rows[0]["MRNO"] : Patient != null ? Patient.MRNO : string.Empty;
                    ServiceCriteria.Rows[0]["MODE"] = 2;
                    ServiceCriteria.Rows[0]["SERVICEIDS"] = Data;
                    ServiceCriteria.Rows[0]["BILL_DATE"] = DateTime.Now.Date;
                    MainBillingShared objBillingShared = new MainBillingShared();
                    DataTable dtData = objBillingShared.FetchInvPatBillDetails(ServiceCriteria);
                    if (dtData != null && dtData.Rows.Count > 0)
                    {
                        dtData = dtData.DefaultView.ToTable(true, "INV_MAST_SERVICE_ID");
                        ServiceName = string.Join(",", (from drInsert in dtTemp.AsEnumerable()
                                                        join drFetch in dtData.AsEnumerable()
                                                         on Convert.ToInt64(drInsert["INV_MAST_SERVICE_ID"]) equals
                                                                   Convert.ToInt64(drFetch["INV_MAST_SERVICE_ID"])
                                                        where drInsert["ISVALIDATE_BILLED"].ToString() != "1"
                                                        select drInsert["NAME"].ToString()).ToArray());

                        if (!string.IsNullOrEmpty(ServiceName))
                        {
                            if (fromAddBtn || fromEMR)
                            {
                                drData["ISSALE"] = false;
                                return false;

                            }
                            Mouse.OverrideCursor = null;
                            if (giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                               "Service already billed (" + ServiceName + "), do you want to continue?",
                                               MessageBoxButtonType.YesNo, MessageBoxImages.Question) == MessageBoxDialogueResult.Yes)
                            {
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["ISVALIDATE_BILLED"] = 1;//TO identify the validate message is already handled while adding.
                                IsContinue = true;
                            }
                            else
                            {
                                isMultipleServiceChangeBlock = 3; //Speed Improve
                                ClearService();
                                isMultipleServiceChangeBlock = 0; //Speed Improve
                                IsContinue = false;
                            }
                        }
                    }
                }
            }
            return IsContinue;
        }
        /// <summary>
        /// Determines whether service is blocked or not based on the different scenario.(manual adjustment)
        /// </summary>
        /// <returns>
        /// 	<c>true</c> if [is block service]; otherwise, <c>false</c>.
        /// </returns>
        private bool IsValidService()
        {
            bool IsValid = true;
            bool IsShowMessage = false;
            if (!isallowvalidationBarcode)
            {
                return true;
            }
            drCommon = BillData.Tables["INV_PAT_BILLING_TOTAL"].Rows[0];
            if ((drCommon["DISCOUNT_MARKUP_MANUAL"] != DBNull.Value && Convert.ToDecimal(drCommon["DISCOUNT_MARKUP_MANUAL"]) > 0)
                                &&
                (dbOperation == DBOperation.Update
                                ||
                (dbOperation == DBOperation.Insert && BillData.Tables["INV_PAT_BILLING"].Rows.Count >= 1)
                                ||
                (dbOperation == DBOperation.Delete && BillData.Tables["INV_PAT_BILLING"].Rows.Count > 1)))
            {

                IsShowMessage = true;
            }
            if (IsShowMessage)
            {
            }
            if (SelectedServiceType == (int)ServiceType.Pharmacy && EditService != null &&
                EditService.Table.Rows.Count > 0)
            {
                if ((EditService["BATCHNO"] == DBNull.Value && EditService["INV_MAST_SERVICE_ID"] != DBNull.Value)
                    && !EnableVerificationSettingBased)
                {
                    if (isThrowMessage)
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "Please select the batch", MessageBoxButtonType.OK,
                            MessageBoxImages.Information);
                        Executed_RefreshItemList(null, null);
                    }
                    IsValid = false;
                    return false;
                }
                if (EditService["SALES_UNIT_NAME"] == DBNull.Value && EditService["INV_MAST_SERVICE_ID"] != DBNull.Value)
                {
                    if (isThrowMessage)
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "Please select unit of qty", MessageBoxButtonType.OK,
                            MessageBoxImages.Information);
                        Executed_RefreshItemList(null, null);
                    }
                    IsValid = false;
                    return false;
                }
            }
            return IsValid;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        private bool ValidatePackage()
        {
            bool isSuccess = true;
            if (SelectedService != null && (SelectedService.Row.Table.Columns.Contains("ISPACKAGE")
                && SelectedService.Row["ISPACKAGE"] != DBNull.Value && Convert.ToInt16(SelectedService.Row["ISPACKAGE"]) == 1))
            {
                if (IsPatientIP())
                {
                    if (SelectedService.DataView.ToTable().Columns.Contains("ISIP_PACKAGE")
                       && SelectedService.Row["ISIP_PACKAGE"] == DBNull.Value || Convert.ToInt16(SelectedService.Row["ISIP_PACKAGE"]) == 0)
                    {
                        giMessageBox.Show(CommonData.MESSAGEHEADER,
                            "IP facility does not exist for this package", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        isSuccess = false;
                    }
                }
                if (isSuccess && SelectedVisitMode == VisitMode.OPCASH)
                {
                    if (SelectedService.DataView.ToTable().Columns.Contains("ISOP_PACKAGE")
                        && SelectedService.Row["ISOP_PACKAGE"] == DBNull.Value || Convert.ToInt16(SelectedService.Row["ISOP_PACKAGE"]) == 0)
                    {
                        giMessageBox.Show(CommonData.MESSAGEHEADER,
                            "Cash facility does not exist for this package", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        isSuccess = false;
                    }
                }
                else if (isSuccess && SelectedVisitMode == VisitMode.OPCREDIT)
                {
                    if (SelectedService.DataView.ToTable().Columns.Contains("ISOPCREDIT_PACKAGE")
                        && SelectedService.Row["ISOPCREDIT_PACKAGE"] == DBNull.Value || Convert.ToInt16(SelectedService.Row["ISOPCREDIT_PACKAGE"]) == 0)
                    {
                        giMessageBox.Show(CommonData.MESSAGEHEADER, "OP Credit facility does not exist for this package", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        isSuccess = false;
                    }
                }
                else if (isSuccess && SelectedVisitMode == VisitMode.IP)
                {
                    if (SelectedService.DataView.ToTable().Columns.Contains("ISIP_PACKAGE")
                        && SelectedService.Row["ISIP_PACKAGE"] == DBNull.Value || Convert.ToInt16(SelectedService.Row["ISIP_PACKAGE"]) == 0)
                    {
                        giMessageBox.Show(CommonData.MESSAGEHEADER, "IP facility does not exist for this package", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        isSuccess = false;
                    }
                }
            }
            return isSuccess;
        }
        /// <summary>
        /// Loads the sub locations.
        /// </summary>
        private void LoadSubLocations()
        {
            try
            {
                DataTable dtData = new DataTable();
                if (!FOData.SubLocations.KIIsNotNullAndRowCount())
                {
                    FOData.FetchSubLocations();
                }
                if (FOData.SubLocations != null)
                {
                    dtData = FOData.SubLocations.Copy();
                }
                else if (FOData.SubLocations == null && SubLocations != null)
                {
                    dtData = SubLocations.Copy();
                }
                if (dtData != null && dtData.Rows.Count > 0)
                {
                    dtData.Columns["PH_SUBLOCATION_ID"].ColumnName = "INCO_MAST_ID";
                }
                //IsBlockSelectedItem = true;
                if (SelectedServiceType == (int)ServiceType.Pharmacy)
                {
                    LabOrSubLocations = dtData.DefaultView;
                }
                else
                {
                    AssociatedLabOrSubLocations = dtData.DefaultView;
                }
                //IsBlockSelectedItem = false;
                //PkgSubLocations = LabOrSubLocations.ToTable().Copy().DefaultView;
                //Get default pharmacy location specified ini APP.config
                DefaultPharmacySubLocationValue = System.Configuration.ConfigurationSettings.AppSettings["DefaultPharmacySublocation"];
                if (DefaultPharmacySubLocationValue != string.Empty && DefaultPharmacySubLocationValue != null && DefaultPharmacySubLocationValue != "" && (LabOrSubLocations != null || AssociatedLabOrSubLocations != null)
                    && dtData != null && dtData.Rows.Count > 0)
                {
                    DataRow[] drFounds = dtData.Select("NAME='" + DefaultPharmacySubLocationValue.ToString().ToUpper().Trim() + "'");
                    if (drFounds.Length > 0)
                    {
                        //#region load_from_pharmacy_panel
                        ////written by ubythulla. while calling pharmacy billing alone from different module default sublocation getting null some where and taking 0th row 
                        ////from convertors to avoid this issue written below condition on 07/11/2014.
                        //if (IsFromPharmacyPanel)
                        //{
                        //    DataTable dtTemp = new DataTable();
                        //    dtTemp = dtData.Clone();
                        //    dtTemp.Rows.Add();
                        //    dtTemp.Rows[0].ItemArray = dtData.Rows[0].ItemArray;
                        //    int index = dtData.Rows.IndexOf(drFounds[0]);
                        //    dtData.Rows[0].ItemArray = drFounds[0].ItemArray;
                        //    dtData.Rows[index].ItemArray = dtTemp.Rows[0].ItemArray;
                        //    LabOrSubLocations = dtData.DefaultView;
                        //    drFounds[0].ItemArray = dtData.Rows[0].ItemArray;
                        //}
                        //#endregion
                        SelectedLabOrSubLocationValue = Convert.ToDecimal(drFounds[0]["INCO_MAST_ID"]);
                        AssociatedSelectedLabOrSubLocationValue = Convert.ToDecimal(drFounds[0]["INCO_MAST_ID"]);
                    }
                    else
                    {
                        SelectedLabOrSubLocationValue = -1;
                    }
                }
                else
                {
                    SelectedLabOrSubLocationValue = -1;
                }
                if ((LabOrSubLocations == null || LabOrSubLocations.Table.Rows.Count == 0) && Services != null)
                {
                    Services = null;
                }

            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// Adds the pharmacy.
        /// </summary>
        private bool AddPharmacy()
        {
            bool isSuccess = false;// Used in bill hold to find the services that cannot add to list while loading holded services to grid
            bool isContinue = true;
            try
            {
                if (SelectedProvider == null && SelectedEMROrder == null)
                {
                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                        "Select provider", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    isContinue = false;
                }
                if (isTaskBilllingEbabled && SelectedServiceDetails != null) //Speed Improve
                {
                    Service = SelectedServiceDetails;
                }
                if (isContinue && EMRItemSelected == null)
                {
                    IsValidateService = basicValidation();
                }
                if (isContinue && IsValidateService)
                {
                    isSuccess = true;
                    int Mode = 0;
                    bool IsAdded = false;
                    bool isProceed = true;
                    bool isTapper = false;
                    long ServiceId = Int64.MinValue;
                    //Mouse.OverrideCursor = Cursors.Arrow;
                    DataRow drService = Service;
                    if ((Service.Table.Columns.Contains("PRIMARY_ID") &&
                        Service["PRIMARY_ID"] != DBNull.Value) || (Service.Table.Columns.Contains("INV_MAST_SERVICE_ID") && Service["INV_MAST_SERVICE_ID"] != DBNull.Value))
                    {
                        if (EditService == null && Service != null && Service.Table.Columns.Contains("PRIMARY_ID"))
                        {
                            ServiceId = Convert.ToInt64(Service["PRIMARY_ID"]);
                        }
                        else if (EditService != null && Service != null && Service.Table.Columns.Contains("PRIMARY_ID"))
                        {
                            ServiceId = Convert.ToInt64(Service["PRIMARY_ID"]);
                        }
                        else
                        {
                            ServiceId = Convert.ToInt64(Service["INV_MAST_SERVICE_ID"]);
                        }

                        DataRow drItemTemp = this.GetEMRCPOEPrescription(Service);
                        if (drItemTemp != null && drItemTemp.Table.Columns.Contains("STOP_STATUS"))
                        {
                            SetDiscontinuedMedicationStatus(drItemTemp);
                        }
                        else if (drDisContinueStatus != null && drDisContinueStatus.Table.Columns.Contains("STOP_STATUS"))
                        {
                            SetDiscontinuedMedicationStatus(drDisContinueStatus);
                        }

                        if (drItemTemp != null)
                        {
                            if (Convert.ToDecimal(drItemTemp["QTY"]) > 0 && EditService == null && isEmrOrder)
                            {
                                //to handle the O-D quantity unit and combobox quantity unit mismatch
                                Int64 billedqty = 0;
                                billedqty = Convert.ToInt64(IfNullReturnZero(drItemTemp["BILLED_QTY"])) - Convert.ToInt64(IfNullReturnZero(drItemTemp["RETURN_QTY"]));
                                if (billedqty == 0)
                                {
                                    drItemTemp["QTY"] = IfNullReturnZero(drItemTemp["TOTAL_QUANTITY"]);
                                }
                                //end
                                decimal tempQty = Convert.ToDecimal(drItemTemp["QTY"]);
                                Int64 tempQty1 = (Int64)tempQty;
                                decimal tempqty2 = 0;  // Bug id 36312
                                if ((tempQty - tempQty1) > 0)
                                {
                                    ++tempQty1;
                                }
                                if (IfNullReturnZero(drItemTemp["EMR_PAT_PH_DRUG_ADMIN_ID"]) > 0)
                                {
                                    Quantity = PhUnitconvertion(Convert.ToInt64(Convert.ToDecimal(tempQty1) - Convert.ToDecimal(drItemTemp["BILLED_QTY"])), Convert.ToInt64(ServiceId), drItemTemp);
                                }
                                else
                                {
                                    // Bug id 36312
                                    tempqty2 = PhUnitconvertion(Convert.ToInt64(Convert.ToDecimal(tempQty1) - Convert.ToDecimal(drItemTemp["BILLED_QTY"])), Convert.ToInt64(ServiceId));
                                    if (tempqty2 == 00)
                                    {
                                        Quantity = tempQty1;
                                    }
                                    else
                                    {
                                        Quantity = PhUnitconvertion(Convert.ToInt64(Convert.ToDecimal(tempQty1) - Convert.ToDecimal(drItemTemp["BILLED_QTY"])), Convert.ToInt64(ServiceId));
                                    }//end
                                }
                                //Quantity = PhUnitconvertion(Convert.ToInt32(Convert.ToDecimal(drItemTemp["QTY"]) - Convert.ToDecimal(drItemTemp["BILLED_QTY"])), Convert.ToInt64(ServiceId));
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["QTY"] = Quantity;
                            }
                            else if ((IsBarCodeSearch || !IsBarCodeSearchbyManual) && Convert.ToDecimal(drItemTemp["QTY"]) > 0 && isEmrOrder &&
                                IsFromPharmacyPanel && EditService != null
                                && EditService["EMR_PAT_DTLS_MEDICATION_ID"] != DBNull.Value && BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_MEDICATION_ID"] != DBNull.Value
                                && SelectedBatchOrUnit != null && Convert.ToString(SelectedBatchOrUnit.Row["BATCHNO"]) != Convert.ToString(EditService["BATCHNO"])
                                && Convert.ToInt64(EditService["EMR_PAT_DTLS_MEDICATION_ID"]) == Convert.ToInt64(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_MEDICATION_ID"]))
                            {
                                decimal tempQty = Convert.ToDecimal(drItemTemp["QTY"]);
                                Int64 tempQty1 = (Int64)tempQty;
                                if ((tempQty - tempQty1) > 0)
                                {
                                    ++tempQty1;
                                }
                                decimal query = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                           .Where(x => x["INV_MAST_SERVICE_ID"] != DBNull.Value && x["BATCHNO"] != DBNull.Value &&
                         Convert.ToInt64(x["INV_MAST_SERVICE_ID"]) == Convert.ToInt64(EditService["INV_MAST_SERVICE_ID"]))
                         .Select(x => Convert.ToDecimal(x["SALES_ACTUAL_QTY"])).Sum();
                                if (IfNullReturnZero(drItemTemp["EMR_PAT_PH_DRUG_ADMIN_ID"]) > 0)
                                {
                                    Quantity = Math.Abs(PhUnitconvertion(Convert.ToInt64(Convert.ToDecimal(tempQty1) - Convert.ToDecimal(drItemTemp["BILLED_QTY"])), Convert.ToInt64(ServiceId), drItemTemp) - query);
                                }
                                else
                                {
                                    Quantity = Math.Abs(PhUnitconvertion(Convert.ToInt64(Convert.ToDecimal(tempQty1) - Convert.ToDecimal(drItemTemp["BILLED_QTY"])), Convert.ToInt64(ServiceId)) - query);
                                }
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["QTY"] = Quantity;
                            }
                        }
                        bool isallowtocheck = true;//Ubythulla PBM Live QTY_UNIT issue correction 26-oct-2015
                        if (IsFromPharmacyPanel)
                        {
                            if (PhRXDtlsInfo.KIIsNotNullAndRowCount() && EditService == null && drItemTemp != null && PharamacyUnitSales.KIIsNotNullAndRowCount())
                            {
                                DataRow[] filteredQuer = PhRXDtlsInfo.AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(drItemTemp["EMR_PAT_DTLS_INV_ORDER_ID"])
                                    && IfNullReturnZero(x["ORDERED_ITEM_ID"]) == IfNullReturnZero(drItemTemp["BRAND_ID"])).ToArray();
                                if (filteredQuer.Any())
                                {

                                    DataRow[] drRow = PharamacyUnitSales.Select("PH_UNIT_SALES_CONVERSION_ID=" + IfNullReturnZero(filteredQuer[0]["PH_UNIT_SALES_CONVERSION_ID"]));
                                    if (drRow.Length > 0)
                                    {
                                        SelectedPharamacyUnitSales = PharamacyUnitSales.DefaultView[PharamacyUnitSales.Rows.IndexOf(drRow[0])];
                                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["PH_RX_INFO_ID"] = filteredQuer[0]["PH_RX_INFO_ID"];
                                        isallowtocheck = false;
                                    }
                                }
                            }
                            if (PhRXDtlsInfo.KIIsNotNullAndRowCount() && EditService == null && PharamacyUnitSales.KIIsNotNullAndRowCount())
                            {
                                DataRow[] filteredQuer = PhRXDtlsInfo.AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_INV_ORDER_ID"])
                                    && IfNullReturnZero(x["ORDERED_GENERIC_ID"]) == IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["GENERIC_ID"])
                                    && IfNullReturnZero(x["ISGENERIC_ORDER"]) == 1).ToArray();
                                if (filteredQuer.Any())
                                {
                                    DataRow[] drRow = PharamacyUnitSales.Select("PH_UNIT_SALES_CONVERSION_ID=" + IfNullReturnZero(filteredQuer[0]["PH_UNIT_SALES_CONVERSION_ID"]));
                                    if (drRow.Length > 0)
                                    {
                                        SelectedPharamacyUnitSales = PharamacyUnitSales.DefaultView[PharamacyUnitSales.Rows.IndexOf(drRow[0])];
                                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["PH_RX_INFO_ID"] = filteredQuer[0]["PH_RX_INFO_ID"];
                                        isallowtocheck = false;
                                    }
                                }
                                else if (drPhRxDtlsData != null)
                                {
                                    DataRow[] drRow = PharamacyUnitSales.Select("PH_UNIT_SALES_CONVERSION_ID=" + IfNullReturnZero(drPhRxDtlsData["PH_UNIT_SALES_CONVERSION_ID"]));
                                    if (drRow.Length > 0)
                                    {
                                        SelectedPharamacyUnitSales = PharamacyUnitSales.DefaultView[PharamacyUnitSales.Rows.IndexOf(drRow[0])];
                                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["PH_RX_INFO_ID"] = drPhRxDtlsData["PH_RX_INFO_ID"];
                                        isallowtocheck = false;
                                    }
                                }
                            }
                        }
                        if (isallowtocheck && drItemTemp != null && PharamacyUnitSales.KIIsNotNullAndRowCount() && drItemTemp["QUANTITY_UNIT"] != DBNull.Value && !IsVerifiedItemEditExecuted
                            && (EditService == null || (EditService != null && SelectedPharamacyUnitSales == null)))//bug id 42725
                        {
                            DataRow[] filteredQuer = PharamacyUnitSales.AsEnumerable().Where(x => Convert.ToString(x["TO_UNIT_NAME"]) == Convert.ToString(drItemTemp["QUANTITY_UNIT"])
                                && IfNullReturnZero(x["INV_MAST_SERVICE_ID"]) == IfNullReturnZero(drItemTemp["BRAND_ID"])).ToArray();
                            if (filteredQuer.Any())
                            {
                                DataRow[] drRow = PharamacyUnitSales.Select("PH_UNIT_SALES_CONVERSION_ID=" + IfNullReturnZero(filteredQuer[0]["PH_UNIT_SALES_CONVERSION_ID"]));
                                if (drRow.Length > 0)
                                {
                                    SelectedPharamacyUnitSales = PharamacyUnitSales.DefaultView[PharamacyUnitSales.Rows.IndexOf(drRow[0])];
                                }
                            }
                        }
                        if (SelectedPharamacyUnitSales != null)
                        {
                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["SALES_UNIT_NAME"] = SelectedPharamacyUnitSales["TO_UNIT_NAME"];
                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["PH_UNIT_SALES_CONVERSION_ID"] = SelectedPharamacyUnitSales["PH_UNIT_SALES_CONVERSION_ID"];
                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BASE_QTY"] = SelectedPharamacyUnitSales["BASE_QTY"];
                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["SALES_ACTUAL_QTY"] = Convert.ToDecimal(Quantity * Convert.ToDecimal(SelectedPharamacyUnitSales["BASE_QTY"]));

                        }
                        //DataTable dtPBMSetting = CommonData.GetDefaultSettings(0, "IS_PBM_REQUEST_ONLY");
                        //if (dtPBMSetting != null && dtPBMSetting.Rows.Count > 0 && Convert.ToInt16(dtPBMSetting.Rows[0]["VALUE"]) == 1)
                        if (DefaultSettings.Values.IS_PBM_REQUEST_ONLY)
                        {
                            if (PhRXDtlsInfo.KIIsNotNullAndRowCount() && EditService == null && drItemTemp != null && IsFromPharmacyPanel)
                            {
                                DataRow[] filteredQuer = PhRXDtlsInfo.AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(drItemTemp["EMR_PAT_DTLS_INV_ORDER_ID"])
                                    && IfNullReturnZero(x["ORDERED_ITEM_ID"]) == IfNullReturnZero(drItemTemp["BRAND_ID"])).ToArray();
                                if (filteredQuer.Any())
                                {
                                    Quantity = IfNullReturnZero(filteredQuer[0]["APPROVED_QTY"]);
                                    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["PH_RX_INFO_ID"] = filteredQuer[0]["PH_RX_INFO_ID"];
                                    //if (IfNullReturnZero(filteredQuer[0]["APPROVED_QTY"]) == 0 && IfNullReturnZero(filteredQuer[0]["PRESCRIPTION_TYPE_TEMP"]) == 2)
                                    //{
                                    //    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_APPROVED"] = 0;//not approved will disable the save checkbox
                                    //}
                                    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_APPROVED_ENABLE"] = 0;//to disable edit, qty and qty unit.
                                    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["QTY"] = Quantity;//ubythulla PBM QTY Live issue correction on 26-oct-2015
                                }
                            }
                            if (PhRXDtlsInfo.KIIsNotNullAndRowCount() && EditService == null && PharamacyUnitSales.KIIsNotNullAndRowCount())
                            {
                                DataRow[] filteredQuer = PhRXDtlsInfo.AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_INV_ORDER_ID"])
                                    && IfNullReturnZero(x["ORDERED_GENERIC_ID"]) == IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["GENERIC_ID"])
                                    && IfNullReturnZero(x["ISGENERIC_ORDER"]) == 1).ToArray();
                                if (filteredQuer.Any())
                                {
                                    Quantity = IfNullReturnZero(filteredQuer[0]["APPROVED_QTY"]);
                                    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["PH_RX_INFO_ID"] = filteredQuer[0]["PH_RX_INFO_ID"];
                                    //if (IfNullReturnZero(filteredQuer[0]["APPROVED_QTY"]) == 0 && IfNullReturnZero(filteredQuer[0]["PRESCRIPTION_TYPE_TEMP"]) == 2)
                                    //{
                                    //    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_APPROVED"] = 0;//not approved will disable the save checkbox
                                    //}
                                    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_APPROVED_ENABLE"] = 0;//to disable edit, qty and qty unit.
                                    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["QTY"] = Quantity;//ubythulla PBM QTY Live issue correction on 26-oct-2015
                                }
                                else if (drPhRxDtlsData != null)
                                {
                                    DataRow[] drRow = PharamacyUnitSales.Select("PH_UNIT_SALES_CONVERSION_ID=" + IfNullReturnZero(drPhRxDtlsData["PH_UNIT_SALES_CONVERSION_ID"]));
                                    if (drRow.Length > 0)
                                    {
                                        Quantity = IfNullReturnZero(drPhRxDtlsData["APPROVED_QTY"]);
                                        SelectedPharamacyUnitSales = PharamacyUnitSales.DefaultView[PharamacyUnitSales.Rows.IndexOf(drRow[0])];
                                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["PH_RX_INFO_ID"] = drPhRxDtlsData["PH_RX_INFO_ID"];
                                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["QTY"] = Quantity;//ubythulla PBM QTY Live issue correction on 26-oct-2015
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (PhRXDtlsInfo.KIIsNotNullAndRowCount() && EditService == null && drItemTemp != null && IsFromPharmacyPanel)
                            {
                                DataRow[] filteredQuer = PhRXDtlsInfo.AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(drItemTemp["EMR_PAT_DTLS_INV_ORDER_ID"])
                                    && IfNullReturnZero(x["REQUESTED_ITEM_ID"]) == IfNullReturnZero(drItemTemp["BRAND_ID"])).ToArray();
                                if (filteredQuer.Any())
                                {
                                    Quantity = IfNullReturnZero(filteredQuer[0]["QUANTITY"]);
                                }

                            }
                        }
                        if (drConsumptionRow != null)
                        {
                            //Quantity = IfNullReturnZero(drConsumptionRow["SALES_ACTUAL_QTY"]);
                            Quantity = IfNullReturnZero(drConsumptionRow["QTY"]);
                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["SALES_UNIT_NAME"] = drConsumptionRow["TO_UNIT_NAME"];
                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["PH_UNIT_SALES_CONVERSION_ID"] = IfNullReturnZero(drConsumptionRow["PH_UNIT_SALES_CONVERSION_ID"]);
                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BASE_QTY"] = IfNullReturnZero(drConsumptionRow["BASE_QTY"]);
                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BATCHNO"] = Convert.ToString(drConsumptionRow["BATCHNO"]);
                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["SUBLOCATION"] = IfNullReturnZero(drConsumptionRow["PH_SUBLOCATION_ID"]);
                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_CONSUMPTION"] = 1;
                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["CONSUMPTION_STATUS"] = drConsumptionRow["CONSUMPTION_STATUS"];
                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["SALES_ACTUAL_QTY"] = drConsumptionRow["SALES_ACTUAL_QTY"];
                            if (EditService == null && Quantity == 1)
                            {
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["QTY"] = Quantity;
                            }
                            else if (EditService != null)
                            {
                                Quantity = Convert.ToDecimal(EditService["QTY"]);
                            }
                        }
                        InsuranceApprovalIncoPatSchemeId = 0;
                        if (TaskForBilling != null && isTaskBilllingEbabled) //Speed Improve
                        {
                            /*Check Selected Service Change Completed*/
                            SetServiceDetailsforCPOEorder(true);
                            isTaskBilllingEbabled = false;
                            do
                            {
                            } while (!TaskForBilling.IsCompleted);
                            TaskForBilling.Dispose();
                            /*Check Selected Service Change Completed*/
                            if (SelectedServiceDetails.Table.Columns.Contains("MATERIAL_TYPE") && SelectedServiceDetails["MATERIAL_TYPE"] != DBNull.Value &&
                                Convert.ToInt16(SelectedServiceDetails["MATERIAL_TYPE"]) != 0)
                            {
                                IsConsumable = false;
                            }
                            if (PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Rows[0]["MRNO"] != DBNull.Value && ((EMRItemSelected != null && EMRItemSelected["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value) || BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value))
                            {
                                string strMrno = Convert.ToString(PatientInformation.Rows[0]["MRNO"]);

                                decimal invDtlsorderID = EMRItemSelected != null ? Convert.ToDecimal(EMRItemSelected["EMR_PAT_DTLS_INV_ORDER_ID"]) : Convert.ToDecimal(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_INV_ORDER_ID"]);
                                isTaskBilllingEbabled = true;
                                TaskForBilling = new System.Threading.Tasks.Task(() => this.GetInsuranceApprovalDetailsForChecking(invDtlsorderID, strMrno, false));
                                TaskForBilling.Start();
                            }
                        } //Speed Improve


                        if (LoadServiceChargeDetails(ServiceId, BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]) && ValidateInsuranceApproval(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]))
                        {


                            if (IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_INV_ORDER_ID"]) > 0 && ERxVisibility == Visibility.Visible
                                && DefaultSettings.Values.IS_PBM_REQUEST_ONLY) // IS_PBM_REQUEST_ONLY condition for bug id 39841
                            {
                                if (PhRXDtlsInfoNotApproved.KIIsNotNullAndRowCount())
                                {
                                    DataRow[] filteredQuer = PhRXDtlsInfoNotApproved.AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_INV_ORDER_ID"])).ToArray();
                                    if ((filteredQuer.Any() && (IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) != 1 && IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) != 2 && IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) != 7 && IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) != 3)) || !filteredQuer.Any())
                                    {
                                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_APPROVED"] = 0;//not approved will disable the save checkbox
                                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_APPROVED_ENABLE"] = 0;//to disable edit, qty and qty unit.
                                    }
                                    if (filteredQuer.Any() && IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) == 3)
                                    {
                                        //BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCEXLCSTATUS"] = 0;
                                        //if included item is denied Through PBM then make it excluded....PBM Live issue correction
                                        if (BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCEXLCSTATUS"] != DBNull.Value && Convert.ToInt32(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCEXLCSTATUS"]) == 1)
                                        {
                                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCEXLCSTATUS"] = 0;
                                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_EDITED"] = 1;
                                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EDITED_STATUS"] = (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.InclusiontoExclusion;
                                            LoadServiceChargeDetails(ServiceId, BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]);
                                            //BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_EDITED"] = 0;
                                            //BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EDITED_STATUS"] = DBNull.Value;
                                        }

                                    }
                                    if (filteredQuer.Any() && (IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) == 1 || IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) == 2 || IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) == 7))
                                    {
                                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["APPROVAL_STATUS"] = 5;
                                        //if excluded item is approved Through PBM then make it included....PBM Live issue correction
                                        if (BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCEXLCSTATUS"] != DBNull.Value && Convert.ToInt32(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCEXLCSTATUS"]) == 0)
                                        {
                                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCEXLCSTATUS"] = 1;
                                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_EDITED"] = 1;
                                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EDITED_STATUS"] = (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.ExclusiontoInclusion;
                                            LoadServiceChargeDetails(ServiceId, BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]);
                                            //BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_EDITED"] = 0;
                                            //BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EDITED_STATUS"] = DBNull.Value;
                                        }
                                    }
                                }
                                else
                                {
                                    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_APPROVED"] = 0;//not approved will disable the save checkbox
                                    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_APPROVED_ENABLE"] = 0;//to disable edit, qty and qty unit.
                                }
                                if (IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCEXLCSTATUS"]) == 0 || IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["MATERIAL_TYPE"]) == 1 || IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["MATERIAL_TYPE"]) == 2
                                    || IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["MATERIAL_TYPE"]) == 3)
                                {
                                    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_APPROVED"] = 1;//not approved will disable the save checkbox
                                    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_APPROVED_ENABLE"] = 1;//to disable edit, qty and qty unit.
                                }
                            }
                            else if (isNonConsultationOrder && ERxVisibility == Visibility.Visible
                                 && DefaultSettings.Values.IS_PBM_REQUEST_ONLY) // IS_PBM_REQUEST_ONLY condition for bug id 39841
                            {
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_APPROVED_ENABLE"] = 0;
                                if (PhRXDtlsInfoNotApproved.KIIsNotNullAndRowCount())
                                {
                                    if (PhRXDtlsInfoNotApproved.AsEnumerable().Where(x => IfNullReturnZero(x["PH_UNIT_SALES_CONVERSION_ID"]) ==
                                       IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["PH_UNIT_SALES_CONVERSION_ID"])).Count() > 0)
                                    {
                                        DataRow[] filteredQuer = PhRXDtlsInfoNotApproved.AsEnumerable().Where(x => IfNullReturnZero(x["PH_UNIT_SALES_CONVERSION_ID"]) == IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["PH_UNIT_SALES_CONVERSION_ID"])).ToArray();
                                        if ((filteredQuer.Any() && (IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) != 1 && IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) != 2 && IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) != 7 && IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) != 3)) || !filteredQuer.Any())
                                        {
                                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_APPROVED"] = 0;//not approved will disable the save checkbox
                                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_APPROVED_ENABLE"] = 0;//to disable edit, qty and qty unit.
                                        }
                                        if (filteredQuer.Any() && IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) == 3)
                                        {
                                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_APPROVED"] = 1;//not approved will disable the save checkbox
                                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_APPROVED_ENABLE"] = 1;
                                            //BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCEXLCSTATUS"] = 0;
                                            //if included item is denied Through PBM then make it excluded....PBM Live issue correction
                                            if (BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCEXLCSTATUS"] != DBNull.Value && Convert.ToInt32(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCEXLCSTATUS"]) == 1)
                                            {
                                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCEXLCSTATUS"] = 0;
                                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_EDITED"] = 1;
                                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EDITED_STATUS"] = (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.InclusiontoExclusion;
                                                LoadServiceChargeDetails(ServiceId, BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]);
                                                //BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_EDITED"] = 0;
                                                //BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EDITED_STATUS"] = DBNull.Value;
                                            }
                                        }
                                        if (filteredQuer.Any() && (IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) == 1 || IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) == 2 || IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) == 7))
                                        {
                                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["APPROVAL_STATUS"] = 5;
                                            //if excluded item is approved Through PBM then make it included....PBM Live issue correction
                                            if (BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCEXLCSTATUS"] != DBNull.Value && Convert.ToInt32(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCEXLCSTATUS"]) == 0)
                                            {
                                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCEXLCSTATUS"] = 1;
                                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_EDITED"] = 1;
                                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EDITED_STATUS"] = (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.ExclusiontoInclusion;
                                                LoadServiceChargeDetails(ServiceId, BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]);
                                                //BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_EDITED"] = 0;
                                                //BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EDITED_STATUS"] = DBNull.Value;
                                            }
                                        }
                                    }
                                }
                            }
                            if (SelectedBatchOrUnit != null)
                            {
                                if (IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_ADDITIVE"]) == 0) //bug id 38537
                                {
                                    if (EMRItemSelected != null && EMRItemSelected["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value)//only for Bug ID 41104
                                    {
                                        IsAdded = FindPharmacyWithDtlsOrderIDandDateRange(ServiceId, SelectedBatchOrUnit.Row["BATCHNO"].ToString(), EMRItemSelected);
                                    }
                                    else
                                    {
                                        IsAdded = FindServiceAdded(ServiceId, SelectedBatchOrUnit.Row["BATCHNO"].ToString());
                                    }
                                }
                                if (BillData.Tables["INV_PAT_BILLING"] != null && BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0)
                                {
                                    if (BillData.Tables["INV_PAT_BILLING"].Select("INV_MAST_SERVICE_ID=" + ServiceId + " AND BATCHNO='" + Convert.ToString(SelectedBatchOrUnit.Row["BATCHNO"]) + "'").Length > 0)
                                    {
                                        DataRow drTapper = BillData.Tables["INV_PAT_BILLING"].Select("INV_MAST_SERVICE_ID=" + ServiceId + " AND BATCHNO='" + Convert.ToString(SelectedBatchOrUnit.Row["BATCHNO"]) + "'").First();
                                        if (drTapper != null)
                                            isTapper = Convert.ToBoolean(drTapper["ISTAPPER_ENABLE"]);
                                    }
                                }
                            }
                            DataRow drTemp = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0];
                            // Bar code wise validation and appending
                            if (_FindService != null && SelectedServiceType == (int)ServiceType.Pharmacy && PharmacyByDevice == "1")//&& !IsBarcodeSettingWithBatchChanging
                            {
                                if (EditService == null && !IsAdded)
                                {
                                    BillData.Tables["INV_PAT_BILLING"].Merge(BillData.Tables["INV_PAT_BILLING_TEMP"]);
                                }
                                else if (EditService != null && IsAdded)
                                {
                                    _FindService.ItemArray = drTemp.ItemArray;
                                }
                                if (EditService == null && BatchItemWise != null)
                                {
                                    if (BatchAll.Rows.Count == 0)// || BatchAll.Select("MEDICINE_CODE=" + Service["MEDICINE_CODE"]).Length <= 0)
                                    {
                                        BatchAll.Merge(BatchItemWise);
                                    }
                                }
                                isMultipleServiceChangeBlock = 3; //Speed Improve
                                ClearService();
                                isMultipleServiceChangeBlock = 0; //Speed Improve
                                CalculateServiceTotal();
                                return true;
                            }
                            if (EditService != null && IsExists && isThrowMessage)
                            {
                                if (IsAdded && !isTapper)// && !IsQtyEditable)
                                {
                                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                        "Medicine already exists", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                    return false;
                                }
                            }
                            else if (EditService == null && IsAdded && !isTapper && isThrowMessage)// && !IsQtyEditable)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                    "Medicine already exists", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                ismsgPopped = true;//bug id 42283
                                return false;
                            }
                            //Adding Pharmacy orders(assigning selected pharmcy item id)
                            if (IsPharmacyOrderSelected)
                            {
                                this.AssignPharmacyOrder(drTemp);
                            }
                            if ((EditService == null || (EditService != null && IfNullReturnZero(EditService["INV_MAST_SERVICE_ID"]) == 0 && string.IsNullOrEmpty(Convert.ToString(EditService["ALLERGY_REASON"])))) && !IsAdded && drTemp.Table.Columns.Contains("INV_PARENT_CATEGORY_ID") && drTemp["INV_PARENT_CATEGORY_ID"] != DBNull.Value
                                && Convert.ToInt64(drTemp["INV_PARENT_CATEGORY_ID"]) == (Int64)BaseCategory.Pharmacy)
                            {
                                //Allergy checking validation
                                DataTable dtAllergy = null;
                                DataTable dtCriteria = new DataTable("AllergyChecking");
                                dtCriteria.Columns.Add("MRNO");
                                dtCriteria.Columns.Add("HOSPITAL_ID");
                                dtCriteria.Columns.Add("EMR_PAT_DTLS_PH_ORDER_ID");
                                dtCriteria.Columns.Add("GENERIC_ID");
                                dtCriteria.Columns.Add("INV_MAST_SERVICE_ID");
                                dtCriteria.Rows.Add();
                                dtCriteria.Rows[0]["MRNO"] = PatientInformation != null && PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Rows[0]["MRNO"] != DBNull.Value ? PatientInformation.Rows[0]["MRNO"] : 0;
                                dtCriteria.Rows[0]["HOSPITAL_ID"] = InvestigationData.HospitalID;
                                dtCriteria.Rows[0]["EMR_PAT_DTLS_PH_ORDER_ID"] = drTemp["EMR_PAT_DTLS_INV_ORDER_ID"];
                                dtCriteria.Rows[0]["GENERIC_ID"] = SelectedService != null && SelectedService.Row.Table.Columns.Contains("GENERIC_ID")
                                   && (!string.IsNullOrEmpty(Convert.ToString(SelectedService.Row["GENERIC_ID"]))) ? SelectedService.Row["GENERIC_ID"] : drService != null ? drService["GENERIC_ID"] : DBNull.Value;//0
                                dtCriteria.Rows[0]["INV_MAST_SERVICE_ID"] = ServiceId;
                                //if (IsPharmacyOrderSelected)
                                //{
                                //    Mode = 1;
                                //}
                                //else
                                //{
                                Mode = 2;
                                //}
                                if (dtCriteria.Rows[0]["GENERIC_ID"] != DBNull.Value && IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_VERIFIED"]) == 0)
                                {
                                    MainEMRShared objEMRShared = new MainEMRShared();
                                    dtAllergy = objEMRShared.AllergyChecking(dtCriteria, Mode);
                                }
                                if (dtAllergy.KIIsNotNullAndRowCount() && (dtAllergy.Rows[0]["ALLERGY_MESSAGE"] != DBNull.Value || dtAllergy.Rows[0]["OVERRIDING_REASON"] != DBNull.Value && !isEmrOrder))
                                {
                                    if (isOnLoadEmrOrder)
                                    {
                                        IsAllergicOrder = false;
                                    }
                                    StringBuilder strallergy = new StringBuilder();
                                    strallergy.Append(dtAllergy.Rows[0]["ALLERGY_MESSAGE"]);
                                    strallergy.AppendLine();
                                    strallergy.Append(dtAllergy.Rows[0]["OVERRIDING_REASON"]);
                                    strallergy.Append("\nDo you want to continue?");
                                    bool isProceedAllergyChecking = false;
                                    if (dtAllergy.Rows[0]["SEVERITY_LEVEL"] == DBNull.Value || (dtAllergy.Rows[0]["SEVERITY_LEVEL"] != DBNull.Value
                                        && (Convert.ToInt16(dtAllergy.Rows[0]["SEVERITY_LEVEL"]) == 0 || Convert.ToInt16(dtAllergy.Rows[0]["SEVERITY_LEVEL"]) == 1)))
                                    {
                                        if (MessageBoxDialogueResult.No
                                            == giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                            strallergy.ToString(), MessageBoxButtonType.YesNo, MessageBoxImages.Question))
                                        {
                                            isProceedAllergyChecking = false;
                                        }
                                        else
                                        {
                                            isProceedAllergyChecking = true;
                                        }
                                    }
                                    else if (dtAllergy.Rows[0]["SEVERITY_LEVEL"] != DBNull.Value && Convert.ToInt16(dtAllergy.Rows[0]["SEVERITY_LEVEL"]) == 2)
                                    {
                                        if (MessageBoxDialogueResult.No
                                            == giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                            strallergy.ToString(), MessageBoxButtonType.YesNo, MessageBoxImages.Warning))
                                        {
                                            isProceedAllergyChecking = false;
                                        }
                                        else
                                        {
                                            isProceedAllergyChecking = true;
                                        }
                                    }
                                    else if (dtAllergy.Rows[0]["SEVERITY_LEVEL"] != DBNull.Value && Convert.ToInt16(dtAllergy.Rows[0]["SEVERITY_LEVEL"]) == 3)
                                    {
                                        if (MessageBoxDialogueResult.No ==
                                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                            strallergy.ToString(), MessageBoxButtonType.YesNo, MessageBoxImages.Stop))
                                        {
                                            isProceedAllergyChecking = false;
                                        }
                                        else
                                        {
                                            isProceedAllergyChecking = true;
                                        }
                                    }
                                    //if (giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,dtAllergy.Rows[0]["ALLERGY_MESSAGE"]+"\n"+
                                    //   dtAllergy.Rows[0]["OVERRIDING_REASON"]+"\n"+"Do you want to continue?", MessageBoxButtonType.YesNo, MessageBoxImages.Information) ==                                           MessageBoxDialogueResult.Yes)
                                    if (isProceedAllergyChecking)
                                    {
                                        ReasonforOverRiding();
                                        if (AllergyRemarks != string.Empty)
                                        {
                                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["ALLERGY_REASON"] = AllergyRemarks;
                                        }
                                        else
                                        {
                                            isMultipleServiceChangeBlock = 3; //Speed Improve
                                            ClearService();
                                            isMultipleServiceChangeBlock = 0; //Speed Improve
                                            isProceed = false;
                                        }
                                    }
                                    else
                                    {
                                        isMultipleServiceChangeBlock = 3; //Speed Improve
                                        ClearService();
                                        isMultipleServiceChangeBlock = 0; //Speed Improve
                                        isProceed = false;
                                        EditService = null;
                                    }
                                }
                                //End
                            }
                            bool istapper = false;
                            if (drConsumptionRow != null)
                            {
                                //Quantity = IfNullReturnZero(drConsumptionRow["SALES_ACTUAL_QTY"]);
                                Quantity = IfNullReturnZero(drConsumptionRow["QTY"]);
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["SALES_UNIT_NAME"] = drConsumptionRow["TO_UNIT_NAME"];
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["PH_UNIT_SALES_CONVERSION_ID"] = IfNullReturnZero(drConsumptionRow["PH_UNIT_SALES_CONVERSION_ID"]);
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BASE_QTY"] = IfNullReturnZero(drConsumptionRow["BASE_QTY"]);
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BATCHNO"] = Convert.ToString(drConsumptionRow["BATCHNO"]);
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["SUBLOCATION"] = IfNullReturnZero(drConsumptionRow["PH_SUBLOCATION_ID"]);
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_CONSUMPTION"] = 1;
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["CONSUMPTION_STATUS"] = drConsumptionRow["CONSUMPTION_STATUS"];
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["SALES_ACTUAL_QTY"] = drConsumptionRow["SALES_ACTUAL_QTY"];
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCO_MAST_NAME"] = Convert.ToString(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCO_MAST_NAME"]) != string.Empty ?
                                    Convert.ToString(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCO_MAST_NAME"]) + "(" + Convert.ToString(drConsumptionRow["SUBLOCATION_NAME"]) + ")" : Convert.ToString(drConsumptionRow["SUBLOCATION_NAME"]);
                                if (drConsumptionINVRow != null)
                                {
                                    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PROVIDER_VISIT_ID"] = drConsumptionINVRow["EMR_PROVIDER_VISIT_ID"];
                                    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_INV_ORDER_ID"] = drConsumptionINVRow["EMR_PAT_DTLS_INV_ORDER_ID"];//EMR_PAT_DTLS_INV_ORDER_ID=EMR_PAT_DTLS_PH_ORDER_ID
                                    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_MEDICATION_ID"] = drConsumptionINVRow["EMR_PAT_DTLS_INV_ORDER_ID"];
                                }
                                //FOR USING CONSUMPTION TABLE UPDATION
                                if (BillData.Tables["INV_PAT_BILLING_TEMP"].Columns.Contains("PH_DTLS_STOCK_CONSUMPTION_ID") &&
                                      drConsumptionRow.Table.Columns.Contains("PH_DTLS_STOCK_CONSUMPTION_ID"))
                                {
                                    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["PH_DTLS_STOCK_CONSUMPTION_ID"] = drConsumptionRow["PH_DTLS_STOCK_CONSUMPTION_ID"];
                                }
                            }
                            if (BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
                            {
                                int tappercount = BillData.Tables["INV_PAT_BILLING"].Rows.Count;
                                istapper = BillData.Tables["INV_PAT_BILLING"].Rows[tappercount - 1]["ISTAPPER_ENABLE"] != DBNull.Value ?
                                    Convert.ToBoolean(BillData.Tables["INV_PAT_BILLING"].Rows[tappercount - 1]["ISTAPPER_ENABLE"]) == true ? true : false : false;
                            }
                            bool isallotoCheck = false;
                            if (EditService == null)
                                isallotoCheck = (IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["APPROVAL_STATUS"]) == (int)Infologics.Medilogics.Enumerators.Insurance.InsuranceRequestStatus.Approve ||
                                    IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["APPROVAL_STATUS"]) == 0) && IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["ISCASHIERREMOVED"]) != 1;
                            else
                                isallotoCheck = (IfNullReturnZero(drTemp["APPROVAL_STATUS"]) == (int)Infologics.Medilogics.Enumerators.Insurance.InsuranceRequestStatus.Approve ||
                                    IfNullReturnZero(drTemp["APPROVAL_STATUS"]) == 0) && IfNullReturnZero(drTemp["ISCASHIERREMOVED"]) != 1;
                            //if (isProceed && EditService == null && (!IsAdded || istapper))
                            if (IsFromPharmacyPanel && EditService != null && BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BATCHNO"] != DBNull.Value && EditService["BATCHNO"] != DBNull.Value &&
                                Convert.ToString(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BATCHNO"]) != Convert.ToString(EditService["BATCHNO"])
                                && EditService["EMR_PAT_DTLS_MEDICATION_ID"] != DBNull.Value && BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_MEDICATION_ID"] != DBNull.Value
                                && Convert.ToInt64(EditService["EMR_PAT_DTLS_MEDICATION_ID"]) == Convert.ToInt64(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_MEDICATION_ID"]) && !EnableVerificationSettingBased)
                            {
                                if (IsFromPharmacyPanel && isallotoCheck && IfNullReturnZero(EditService["IS_ADDITIVE"]) == 0)
                                    EditService["ISSALE"] = true;
                                isThrowMessage = false;
                                if (IsFromPharmacyPanel && isallotoCheck && ValidateServiceCharge(EditService) && ValidateService(EditService))
                                {
                                    if (IfNullReturnZero(EditService["IS_ADDITIVE"]) == 0)
                                        EditService["ISLABEL"] = true;
                                    if (IsBarCodeSearch)
                                        EditService["IS_BARCODE_READ"] = true;
                                }
                                else
                                {
                                    EditService["ISSALE"] = false;
                                }
                                EditService = null;
                            }
                            if (isProceed && EditService == null)
                            {
                                if (!IsVerificationLoaded)
                                {
                                    FillPhPatDtlsOrder();
                                }
                                BillData.Tables["INV_PAT_BILLING"].Merge(BillData.Tables["INV_PAT_BILLING_TEMP"]);
                                if (BillData.Tables["INV_PAT_BILLING"].Rows.Count == 1
                                && BillData.Tables["INV_PAT_BILLING"].Rows[0]["APPROVAL_STATUS"] != DBNull.Value && Convert.ToInt16(BillData.Tables["INV_PAT_BILLING"].Rows[0]["APPROVAL_STATUS"]) == -1
                                && BillData.Tables["INV_PAT_BILLING"].Rows[0]["INV_MAST_SERVICE_ID"] != DBNull.Value)
                                {
                                    //ExclusionToInclusionStatusChange(BillData.Tables["INV_PAT_BILLING"].Rows[0], Convert.ToInt64(BillData.Tables["INV_PAT_BILLING"].Rows[0]["INV_MAST_SERVICE_ID"])); 
                                }
                                int count = BillData.Tables["INV_PAT_BILLING"].Rows.Count - 1;
                                if ((IsFromPharmacyPanel && isallotoCheck) || drConsumptionRow != null)
                                {
                                    if (drConsumptionINVRow != null && isConsumptionBilling && drConsumptionINVRow["ISSALE"] != DBNull.Value &&
                                        !Convert.ToBoolean(drConsumptionINVRow["ISSALE"]))
                                    {
                                        BillData.Tables["INV_PAT_BILLING"].Rows[count]["ISSALE"] = false;
                                    }
                                    else
                                    {
                                        if (drConsumptionRow != null)
                                        {
                                            if (BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(w => w["ISSALE"] != DBNull.Value && w["CONSUMPTION_STATUS"] != DBNull.Value &&
                                                w["SUBLOCATION"] != DBNull.Value &&
                                               Convert.ToBoolean(w["ISSALE"]) && Convert.ToInt16(w["CONSUMPTION_STATUS"]) != 0).
                                               Count(c => Convert.ToDecimal(c["SUBLOCATION"]) != Convert.ToDecimal(drConsumptionRow["PH_SUBLOCATION_ID"])) > 0)
                                            {
                                                if (Convert.ToInt16(drConsumptionRow["CONSUMPTION_STATUS"]) == 1)
                                                {
                                                    drConsumptionINVRow["ISSALE"] = false;
                                                }
                                                BillData.Tables["INV_PAT_BILLING"].Rows[count]["ISSALE"] = false;
                                            }
                                            else if (IfNullReturnZero(BillData.Tables["INV_PAT_BILLING"].Rows[count]["IS_ADDITIVE"]) == 0)
                                                BillData.Tables["INV_PAT_BILLING"].Rows[count]["ISSALE"] = true;
                                        }
                                        else if (IfNullReturnZero(BillData.Tables["INV_PAT_BILLING"].Rows[count]["IS_ADDITIVE"]) == 0)
                                            BillData.Tables["INV_PAT_BILLING"].Rows[count]["ISSALE"] = true;
                                    }
                                }
                                //31848
                                if (count > 0 && drConsumptionRow != null && BillData.Tables["INV_PAT_BILLING"].Rows[count - 1]["EXCLUDED_SERVICE"] != DBNull.Value
                                    && Convert.ToInt16(BillData.Tables["INV_PAT_BILLING"].Rows[count - 1]["EXCLUDED_SERVICE"]) == 1)
                                {
                                    BillData.Tables["INV_PAT_BILLING"].Rows[count]["ISSALE"] = false;
                                }
                                //31848
                                isThrowMessage = false;
                                if (((IsFromPharmacyPanel && isallotoCheck) || drConsumptionRow != null) && BillData.Tables["INV_PAT_BILLING"].Rows[count]["BATCHNO"] != DBNull.Value &&
                                    ValidateServiceCharge(BillData.Tables["INV_PAT_BILLING"].Rows[count]) && ValidateService(BillData.Tables["INV_PAT_BILLING"].Rows[count]))
                                {
                                    if (IfNullReturnZero(BillData.Tables["INV_PAT_BILLING"].Rows[count]["IS_ADDITIVE"]) == 0)
                                        BillData.Tables["INV_PAT_BILLING"].Rows[count]["ISLABEL"] = true;
                                    CalculateMaxMinCopay();
                                    //RejectDiscountCalculation();
                                    //CalculateServiceTotal();
                                }
                                else
                                {
                                    BillData.Tables["INV_PAT_BILLING"].Rows[count]["ISSALE"] = false;
                                }
                                if (IsBarCodeSearch)
                                    BillData.Tables["INV_PAT_BILLING"].Rows[count]["IS_BARCODE_READ"] = true;
                                isThrowMessage = true;
                                if (EnableVerificationSettingBased && SelectedVisitModeNew == (int)VisitMode.IP &&
                                   IfNullReturnZero(BillData.Tables["INV_PAT_BILLING"].Rows[count]["EMR_PAT_DTLS_MEDICATION_ID"]) > 0 &&
                                    IfNullReturnZero(BillData.Tables["INV_PAT_BILLING"].Rows[count]["IS_VERIFIED"]) == 0)
                                {
                                    BillData.Tables["INV_PAT_BILLING"].Rows[count]["VERIFICATION_SAVE_ENABLE"] = 1;
                                    BillData.Tables["INV_PAT_BILLING"].Rows[count]["ISSALE"] = false;
                                    BillData.Tables["INV_PAT_BILLING"].Rows[count]["ISLABEL"] = false;
                                    DataRow[] drRowOrder = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + IfNullReturnZero(BillData.Tables["INV_PAT_BILLING"].Rows[count]["INV_MAST_SERVICE_ID"]));
                                    foreach (DataRow drdose in drRowOrder)
                                    {
                                        drdose["ISLABEL"] = false;
                                    }
                                }
                                if (EnableVerificationSettingBased && SelectedVisitModeNew == (int)VisitMode.IP &&
                                   IfNullReturnZero(BillData.Tables["INV_PAT_BILLING"].Rows[count]["EMR_PAT_DTLS_MEDICATION_ID"]) > 0 && IsConsumable)
                                {
                                    BillData.Tables["INV_PAT_BILLING"].Rows[count]["VERIFICATION_BTN_VISIBILITY"] = 1;
                                }
                            }
                            else if (isProceed && EditService != null && EditService.Table.KIIsNotNullAndRowCount() && EditService["GENERIC_ID"] != DBNull.Value && (EditService["INV_MAST_SERVICE_ID"] == DBNull.Value
                                || EditService["IS_STOCK_EXIST"] != DBNull.Value && Convert.ToInt16(EditService["IS_STOCK_EXIST"]) == 1 && IsAdded))
                            {
                                DataRow drTempRemove = null;
                                if (BillData.Tables["INV_PAT_BILLING"].Select("INV_MAST_SERVICE_ID IS NULL AND GENERIC_ID=" + EditService["GENERIC_ID"] + "AND SL_NO=" + IfNullReturnZero(EditService["SL_NO"])).Any())
                                {
                                    drTempRemove = BillData.Tables["INV_PAT_BILLING"].Select("INV_MAST_SERVICE_ID IS NULL AND GENERIC_ID=" + EditService["GENERIC_ID"] + "AND SL_NO=" + IfNullReturnZero(EditService["SL_NO"])).First();// SL_NO added for bug id 36917
                                }
                                else if (BillData.Tables["INV_PAT_BILLING"].Select("GENERIC_ID=" + EditService["GENERIC_ID"] + "AND SL_NO=" + IfNullReturnZero(EditService["SL_NO"])).Any())
                                {
                                    drTempRemove = BillData.Tables["INV_PAT_BILLING"].Select("GENERIC_ID=" + EditService["GENERIC_ID"] + "AND SL_NO=" + IfNullReturnZero(EditService["SL_NO"])).First();// SL_NO added for bug id 36917
                                }
                                if (EditService["IS_STOCK_EXIST"] == DBNull.Value)
                                {
                                    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_GENERIC_AGAINST"] = 1;
                                    if (!(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["NAME"].ToString().EndsWith("]")))
                                    {
                                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["NAME"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["NAME"] + "[" +
                                            EditService["NAME"] + "]";
                                    }
                                    if (EnableVerificationSettingBased && FOData.Medicines.KIIsNotNullAndRowCount() &&
                                       IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_VERIFIED"]) == 0
                                        && IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["VERIFICATION_BTN_VISIBILITY"]) == 1)
                                    {
                                        //                     DataTable dtMedicinetab = new DataTable();
                                        //                     var Query = FOData.Medicines.AsEnumerable()
                                        //.Where(x => x["PH_SUBLOCATION_ID"] != DBNull.Value && IfNullReturnZero(x["PH_SUBLOCATION_ID"]) == IfNullReturnZero(IPVerificationLocation)
                                        //&& IfNullReturnZero(x["INV_MAST_SERVICE_ID"]) == IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INV_MAST_SERVICE_ID"]))
                                        //.Select(x => x);
                                        //                     if (Query.Count() > 0)
                                        //                     {
                                        //                         BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["SUBLOCATION"] = IPVerificationLocation;
                                        //                     }
                                        //                     else
                                        //                     {
                                        //                         var QueryNext = FOData.Medicines.AsEnumerable()
                                        //    .Where(x => x["PH_SUBLOCATION_ID"] != DBNull.Value && IfNullReturnZero(x["PH_SUBLOCATION_ID"]) == IfNullReturnZero(IP_Gen_App_Sub_Location)
                                        //        && IfNullReturnZero(x["INV_MAST_SERVICE_ID"]) == IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INV_MAST_SERVICE_ID"]))
                                        //    .Select(x => x);
                                        //                         if (QueryNext.Count() > 0)
                                        //                         {
                                        //                             BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["SUBLOCATION"] = IP_Gen_App_Sub_Location;
                                        //                         }
                                        //                     }
                                        if (IfNullReturnZero(SelectedLabOrSubLocationValue) > 0)
                                        {
                                            LoadMedicineForVerification(Convert.ToInt16(SelectedLabOrSubLocationValue));
                                        }
                                        else
                                        {
                                            LoadMedicineForVerification(IP_Gen_App_Sub_Location);
                                        }
                                    }
                                }
                                if (!IsVerificationLoaded)
                                {
                                    FillPhPatDtlsOrder();
                                }
                                BillData.Tables["INV_PAT_BILLING"].Rows.Remove(drTempRemove);
                                BillData.Tables["INV_PAT_BILLING"].Merge(BillData.Tables["INV_PAT_BILLING_TEMP"]);
                                int count = BillData.Tables["INV_PAT_BILLING"].Rows.Count - 1;
                                EditService = BillData.Tables["INV_PAT_BILLING"].Rows[count];
                                if (IsFromPharmacyPanel && isallotoCheck && IfNullReturnZero(BillData.Tables["INV_PAT_BILLING"].Rows[count]["IS_ADDITIVE"]) == 0)
                                    BillData.Tables["INV_PAT_BILLING"].Rows[count]["ISSALE"] = true;
                                isThrowMessage = false;
                                if (IsFromPharmacyPanel && ValidateServiceCharge(BillData.Tables["INV_PAT_BILLING"].Rows[count]) && ValidateService(BillData.Tables["INV_PAT_BILLING"].Rows[count]))
                                {
                                    if (IfNullReturnZero(BillData.Tables["INV_PAT_BILLING"].Rows[count]["IS_ADDITIVE"]) == 0)
                                        BillData.Tables["INV_PAT_BILLING"].Rows[count]["ISLABEL"] = true;
                                    CalculateMaxMinCopay();
                                    //RejectDiscountCalculation();
                                    //CalculateServiceTotal();
                                }
                                else
                                {
                                    BillData.Tables["INV_PAT_BILLING"].Rows[count]["ISSALE"] = false;
                                }
                                if (IsBarCodeSearch)
                                    BillData.Tables["INV_PAT_BILLING"].Rows[count]["IS_BARCODE_READ"] = true;
                                isThrowMessage = true;
                                if (EnableVerificationSettingBased && SelectedVisitModeNew == (int)VisitMode.IP &&
                                  IfNullReturnZero(BillData.Tables["INV_PAT_BILLING"].Rows[count]["EMR_PAT_DTLS_MEDICATION_ID"]) > 0 &&
                                   IfNullReturnZero(BillData.Tables["INV_PAT_BILLING"].Rows[count]["IS_VERIFIED"]) == 0)
                                {
                                    BillData.Tables["INV_PAT_BILLING"].Rows[count]["VERIFICATION_SAVE_ENABLE"] = 1;
                                    BillData.Tables["INV_PAT_BILLING"].Rows[count]["ISSALE"] = false;
                                    BillData.Tables["INV_PAT_BILLING"].Rows[count]["ISLABEL"] = false;
                                    DataRow[] drRowOrder = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + IfNullReturnZero(BillData.Tables["INV_PAT_BILLING"].Rows[count]["INV_MAST_SERVICE_ID"]));
                                    foreach (DataRow drdose in drRowOrder)
                                    {
                                        drdose["ISLABEL"] = false;
                                    }
                                }
                                if (EnableVerificationSettingBased && SelectedVisitModeNew == (int)VisitMode.IP &&
                                   IfNullReturnZero(BillData.Tables["INV_PAT_BILLING"].Rows[count]["EMR_PAT_DTLS_MEDICATION_ID"]) > 0 && IsConsumable)
                                {
                                    BillData.Tables["INV_PAT_BILLING"].Rows[count]["VERIFICATION_BTN_VISIBILITY"] = 1;
                                }
                            }
                            else if ((EditService != null && EditService.Table.Rows.Count > 0 && IsAdded) || (EditService != null && EditService.Table.Rows.Count > 0 && EnableVerificationSettingBased))
                            {
                                if (EditService["IS_GENERIC_AGAINST"] != DBNull.Value && Convert.ToBoolean(EditService["IS_GENERIC_AGAINST"]))
                                {
                                    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["NAME"] = EditService["NAME"];
                                }
                                FillPhPatDtlsOrder();
                                string batchno = Convert.ToString(drTemp["BATCHNO"]);
                                int unitId = Convert.ToInt16(drTemp["PH_UNIT_SALES_CONVERSION_ID"]);
                                DataRow[] drRow = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                    .Where(x => x["SL_NO"] != DBNull.Value && Convert.ToInt32(x["SL_NO"]) == Convert.ToInt32(drTemp["SL_NO"]))
                                    .Select(x => x).ToArray();
                                if (drRow.Length > 0)
                                {
                                    isBlockBatchSelectionChange = true;
                                    isBlockUnitSaleSelectionChange = true;
                                    isQTYUnitChange = false;
                                    drRow[0].ItemArray = drTemp.ItemArray;
                                    isBlockBatchSelectionChange = true;
                                    isBlockUnitSaleSelectionChange = true;
                                    isQTYUnitChange = true;
                                    _FindService = drRow[0];
                                }
                                DataRow dr = _FindService;
                                //isBlockBatchSelectionChange = true;
                                //isBlockUnitSaleSelectionChange = true;
                                //isQTYUnitChange = false;
                                ////_FindService.ItemArray = drTemp.ItemArray;
                                //isBlockBatchSelectionChange = true;
                                //isBlockUnitSaleSelectionChange = true;
                                //isQTYUnitChange = true;
                                _FindService = dr;
                                if (_FindService != null)
                                {
                                    _FindService["BATCHNO"] = batchno;
                                    _FindService = dr;
                                    _FindService["PH_UNIT_SALES_CONVERSION_ID"] = unitId;
                                    //_FindService["SALES_UNIT_NAME"] = drTemp["SALES_UNIT_NAME"];
                                }
                                drTemp["BATCHNO"] = batchno;
                                drTemp["SALES_UNIT_NAME"] = unitId;
                                isBlockBatchSelectionChange = false;
                                if (IsFromPharmacyPanel && isallotoCheck && IfNullReturnZero(_FindService["IS_ADDITIVE"]) == 0)
                                    _FindService["ISSALE"] = true;
                                isThrowMessage = false;
                                if (IsFromPharmacyPanel && isallotoCheck && ValidateServiceCharge(_FindService) && ValidateService(_FindService))
                                {
                                    if (IfNullReturnZero(_FindService["IS_ADDITIVE"]) == 0)
                                        _FindService["ISLABEL"] = true;
                                    if (IsBarCodeSearch)
                                        _FindService["IS_BARCODE_READ"] = true;
                                    CalculateMaxMinCopay();
                                    //RejectDiscountCalculation();
                                    //CalculateServiceTotal();
                                }
                                else
                                {
                                    if (IsBarCodeSearch)
                                        _FindService["IS_BARCODE_READ"] = true;
                                    _FindService["ISSALE"] = false;
                                }
                                isThrowMessage = true;
                                if (_FindService != null && EnableVerificationSettingBased && SelectedVisitModeNew == (int)VisitMode.IP &&
                                  IfNullReturnZero(_FindService["EMR_PAT_DTLS_MEDICATION_ID"]) > 0 &&
                                   IfNullReturnZero(_FindService["IS_VERIFIED"]) == 0)
                                {
                                    _FindService["VERIFICATION_SAVE_ENABLE"] = 1;
                                    _FindService["ISSALE"] = false;
                                    _FindService["ISLABEL"] = false;
                                    DataRow[] drRowOrder = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + IfNullReturnZero(_FindService["INV_MAST_SERVICE_ID"]));
                                    foreach (DataRow drdose in drRowOrder)
                                    {
                                        drdose["ISLABEL"] = false;
                                    }
                                }
                                if (_FindService != null && EnableVerificationSettingBased && SelectedVisitModeNew == (int)VisitMode.IP &&
                                  IfNullReturnZero(_FindService["EMR_PAT_DTLS_MEDICATION_ID"]) > 0 && IsConsumable)
                                {
                                    _FindService["VERIFICATION_BTN_VISIBILITY"] = 1;
                                }
                            }
                            if (EditService == null && BatchItemWise != null && isProceed)// && Service["MEDICINE_CODE"] != DBNull.Value)
                            {
                                //if (BatchAll.Rows.Count == 0)// || BatchAll.Select("MEDICINE_CODE='" + Convert.ToString(Service["MEDICINE_CODE"]) + "'").Length <= 0)
                                //{
                                BatchAll.Merge(BatchItemWise);
                                //}
                            }
                            else if (EditService != null && BatchItemWise != null
                                && isProceed)// && Service["MEDICINE_CODE"] != DBNull.Value)
                            {
                                //if (BatchAll.Rows.Count == 0)// || BatchAll.Select("MEDICINE_CODE=" + Service["MEDICINE_CODE"]).Length <= 0)
                                //{
                                BatchAll.Merge(BatchItemWise);
                                //}
                            }
                            if (EMRItemSelected != null && isProceed)
                            {
                                //EMRItemSelectedTemp = EMRItemSelected;
                            }
                            CreateGPTransactionData(BillData, BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]);
                            if (IsTapperEnable)
                            {
                                StartDateChange();
                                StrDuration = string.Empty;
                                SelectedUrgency = null;
                                SelectedFrequency = null;
                                if (ServicesTemp != null)
                                    Services = ServicesTemp.Copy();
                                SelectedDose = null;
                                SelectedDuratioin = null;
                                StrDrugUnit = string.Empty;
                                SelectedAdmnInst = null;
                                DisableOnServiceAddedIntoGrid();
                                //SelectedPharamacyUnitSales = null;
                            }
                            else
                            {
                                if (ServicesTemp != null)
                                    Services = ServicesTemp.Copy();
                                isMultipleServiceChangeBlock = 3;
                                ClearService();
                                isMultipleServiceChangeBlock = 0;
                            }
                            //   CalculateServiceTotal();
                            IsEditExecuted = false;
                        }
                    }
                    else
                    {
                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INV_MAST_SERVICE_ID"] = DBNull.Value;
                        DataRow drTemp = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0];
                        drTemp["NAME"] = drService["NAME"].ToString();
                        drTemp["GENERIC_ID"] = drService["GENERIC_ID"];
                        if (drService.Table.Columns.Contains("EMR_PAT_DTLS_INV_ORDER_ID") && drService["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value)
                        {
                            drTemp["EMR_PAT_DTLS_INV_ORDER_ID"] = drService["EMR_PAT_DTLS_INV_ORDER_ID"];
                            drTemp["EMR_PAT_DTLS_MEDICATION_ID"] = drService["EMR_PAT_DTLS_INV_ORDER_ID"];
                        }
                        drTemp["SERVICE_TYPE"] = (int)ServiceType.Pharmacy;
                        if (ERxVisibility == Visibility.Visible)
                        {
                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_APPROVED"] = 0;//not approved will disable the save checkbox
                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_APPROVED_ENABLE"] = 0;//to disable edit, qty and qty unit.
                            drTemp["IS_APPROVED_ENABLE"] = 0;
                            drTemp["IS_APPROVED"] = 0;
                        }
                        if (IfNullReturnZero(drTemp["SUBLOCATION"]) == 0 && IfNullReturnZero(SelectedLabOrSubLocationValue) > 0)
                        {
                            drTemp["SUBLOCATION"] = Convert.ToInt32(SelectedLabOrSubLocationValue);
                        }
                        if (IsVerificationLoaded)
                        {
                            drTemp["SUBLOCATION"] = IfNullReturnZero(drTemp["IS_OMNICELL_ITEM"]) == 0 ? IP_Gen_App_Sub_Location : IfNullReturnZero(IPVerificationLocation);
                        }
                        if (EnableVerificationSettingBased && SelectedVisitModeNew == (int)VisitMode.IP &&
                                   IfNullReturnZero(drTemp["EMR_PAT_DTLS_MEDICATION_ID"]) > 0 && IsConsumable)
                        {
                            drTemp["VERIFICATION_BTN_VISIBILITY"] = 1;
                        }
                        DataRow drItem = this.GetEMRCPOEPrescription(drTemp);


                        if (drItem != null && drItem.Table.Columns.Contains("STOP_STATUS"))
                        {
                            SetDiscontinuedMedicationStatus(drItem);
                        }
                        else if (drDisContinueStatus != null && drDisContinueStatus.Table.Columns.Contains("STOP_STATUS"))
                        {
                            SetDiscontinuedMedicationStatus(drDisContinueStatus);
                        }

                        if (drItem != null)
                        {
                            drTemp["ISEDIT_COUNT"] = true;
                            drTemp["EMR_PROVIDER_VISIT_ID"] = drItem["EMR_PROVIDER_VISIT_ID"];
                            drTemp["EMR_PAT_DTLS_INV_ORDER_ID"] = drItem["EMR_PAT_DTLS_INV_ORDER_ID"];//EMR_PAT_DTLS_INV_ORDER_ID=EMR_PAT_DTLS_PH_ORDER_ID
                            drTemp["EMR_PAT_DTLS_MEDICATION_ID"] = drItem["EMR_PAT_DTLS_INV_ORDER_ID"];//EMR_PAT_DTLS_INV_ORDER_ID=EMR_PAT_DTLS_PH_ORDER_ID

                            if (drItem.Table.Columns.Contains("REF_DTLS_PH_ORDER_ID") && drItem["REF_DTLS_PH_ORDER_ID"] != DBNull.Value)
                            {
                                drTemp["REF_DTLS_PH_ORDER_ID"] = drItem["REF_DTLS_PH_ORDER_ID"];
                                drTemp["IS_CHILD_ITEM"] = 1;
                            }
                            if (drItem.Table.Columns.Contains("IS_ADDITIVE"))
                            {
                                drTemp["IS_ADDITIVE"] = drItem["IS_ADDITIVE"];
                            }
                            if (drItem.Table.Columns.Contains("EMR_PAT_PH_DRUG_ADMIN_ID"))
                            {
                                drTemp["EMR_PAT_PH_DRUG_ADMIN_ID"] = drItem["EMR_PAT_PH_DRUG_ADMIN_ID"];
                            }
                            if (drItem.Table.Columns.Contains("CONSUMPTION_STATUS"))
                            {
                                drTemp["CONSUMPTION_STATUS"] = drItem["CONSUMPTION_STATUS"];
                            }
                            drTemp["ISORDERWISEBILL"] = 1;  //CPOE WISE
                            drTemp["ENTRY_DATE"] = drItem["ENTRY_DATE"];
                            if (drItem.Table.Columns.Contains("FREQUENCY") && drItem["FREQUENCY"] != DBNull.Value && FrequencyTemp.KIIsNotNullAndRowCount() &&
                                FrequencyTemp.Select("EMR_LOOKUP_ID=" + drItem["FREQUENCY"]).Count() > 0)
                            {
                                drTemp["FREQUENCY"] = FrequencyTemp.Select("EMR_LOOKUP_ID=" + drItem["FREQUENCY"]).First()["LOOKUP_VALUE"];


                            }
                            else if (drItem.Table.Columns.Contains("FREQUENCY_FREETEXT") && drItem["FREQUENCY_FREETEXT"] != DBNull.Value)
                            {
                                drTemp["FREQUENCY"] = drItem["FREQUENCY_FREETEXT"].ToString();
                            }
                            if (drItem.Table.Columns.Contains("QTY") && IfNullReturnZero(drItem["QTY"]) > 0)
                            {
                                decimal tempQty = Convert.ToDecimal(drItem["QTY"]);
                                Int64 tempQty1 = (Int64)tempQty;
                                if ((tempQty - tempQty1) > 0)
                                {
                                    ++tempQty1;
                                }
                                if (string.IsNullOrEmpty(drTemp["ORDER_QTY"].ToString()))
                                {
                                    Int64 billedqty = 0, ordderedQty = 0;
                                    if (drItem.Table.Columns.Contains("EMR_PAT_PH_DRUG_ADMIN_ID") && IfNullReturnZero(drItem["EMR_PAT_PH_DRUG_ADMIN_ID"]) > 0)
                                    {
                                        billedqty = PhUnitconvertion(Convert.ToInt64(IfNullReturnZero(drItem["BILLED_QTY"])) - Convert.ToInt64(IfNullReturnZero(drItem["RETURN_QTY"])), Convert.ToInt64(IfNullReturnZero(drItem["INV_MAST_SERVICE_ID"])), drItem);
                                        ordderedQty = PhUnitconvertion(Convert.ToInt64(Convert.ToDecimal(tempQty1)), Convert.ToInt64(IfNullReturnZero(drItem["INV_MAST_SERVICE_ID"])), drItem);
                                        if (ordderedQty == 0)
                                        {
                                            ordderedQty = tempQty1;
                                        }
                                        drTemp["ORDER_QTY"] = ordderedQty + " - " + billedqty;
                                    }
                                    else
                                    {
                                        billedqty = PhUnitconvertion(Convert.ToInt64(IfNullReturnZero(drItem["BILLED_QTY"])) - Convert.ToInt64(IfNullReturnZero(drItem["RETURN_QTY"])), Convert.ToInt64(IfNullReturnZero(drItem["INV_MAST_SERVICE_ID"])), drItem);
                                        ordderedQty = PhUnitconvertion(Convert.ToInt64(Convert.ToDecimal(tempQty1)), Convert.ToInt64(IfNullReturnZero(drItem["INV_MAST_SERVICE_ID"])));
                                        if (ordderedQty == 0)
                                        {
                                            ordderedQty = tempQty1;
                                        }
                                        drTemp["ORDER_QTY"] = ordderedQty + " - " + billedqty;
                                    }
                                    if (IsFromPharmacyPanel && ERxVisibility == Visibility.Visible)
                                        drTemp["IS_SALE_ENABLE"] = billedqty > 0 ? 1 : 0;
                                }
                            }
                            drTemp["ISSALE"] = false;
                            if (!Duratioin.KIIsNotNullAndRowCount())
                            {
                                Duratioin = fillDuration();
                            }
                            if (drItem.Table.Columns.Contains("DURATION_TYPE") && drItem["DURATION_TYPE"] != DBNull.Value && Duratioin.KIIsNotNullAndRowCount() && Duratioin.Select("KEY=" + drItem["DURATION_TYPE"]).Count() > 0)
                            {
                                DataRow dr = Duratioin.Select("KEY=" + drItem["DURATION_TYPE"]).First();
                                SelectedDuratioin = Duratioin.DefaultView[Duratioin.Rows.IndexOf(dr)];
                            }
                            if (drItem.Table.Columns.Contains("DURATION") && drItem["DURATION"] != DBNull.Value && IsConsumable)
                            {
                                StrDuration = Convert.ToString(drItem["DURATION"]);
                            }
                            if (StrDuration != string.Empty && SelectedDuratioin != null && SelectedDuratioin["VALUE"] != DBNull.Value && IsConsumable)
                            {
                                drTemp["DURATION"] = StrDuration + SelectedDuratioin["VALUE"].ToString().ToLower().First();
                                StrDuration = string.Empty;
                                SelectedDuratioin = null;
                            }
                            if (drItem.Table.Columns.Contains("QUANTITY_UNIT") && drItem["QUANTITY_UNIT"] != DBNull.Value && DrugUnit.KIIsNotNullAndRowCount() && DrugUnit.Select("LOOKUP_VALUE='" + drItem["QUANTITY_UNIT"] + "'").Count() > 0)
                            {
                                DataRow dr = DrugUnit.Select("LOOKUP_VALUE='" + drItem["QUANTITY_UNIT"] + "'").First();
                                SelectedDose = DrugUnit.DefaultView[DrugUnit.Rows.IndexOf(dr)];
                            }
                            if (drItem.Table.Columns.Contains("QUANTITY") && drItem["QUANTITY"] != DBNull.Value)
                            {
                                StrDrugUnit = Convert.ToString(drItem["QUANTITY"]);
                            }
                            if (StrDrugUnit != null && SelectedDose != null && SelectedDose["LOOKUP_VALUE"] != DBNull.Value)
                            {
                                drTemp["DOSE"] = StrDrugUnit + SelectedDose["LOOKUP_VALUE"].ToString();
                            }
                            if (drItem.Table.Columns.Contains("PRIORITY") && Convert.ToDecimal(MedicinePriority.STAT) == Convert.ToDecimal(drItem["PRIORITY"]))
                            {
                                drTemp["IS_STAT"] = 1;
                            }
                            else if (drItem.Table.Columns.Contains("PRIORITY") && Convert.ToDecimal(MedicinePriority.DischargeMedicine) == Convert.ToDecimal(drItem["PRIORITY"]))
                            {
                                drTemp["IS_STAT"] = 2;
                            }
                            else if (drItem.Table.Columns.Contains("PRIORITY") && Convert.ToDecimal(MedicinePriority.Urgent) == Convert.ToDecimal(drItem["PRIORITY"]))
                            {
                                drTemp["IS_STAT"] = 3;
                            }
                        }
                        BillData.Tables["INV_PAT_BILLING"].Merge(BillData.Tables["INV_PAT_BILLING_TEMP"]);
                        isMultipleServiceChangeBlock = 3; //Speed Improve
                        ClearService();
                        isMultipleServiceChangeBlock = 0; //Speed Improve
                    }
                    if (SelectedGeneric != null && !IsEditExecuted)
                    {
                        SelectedGeneric = null;
                    }
                    if (ServiceGenirc != string.Empty && !IsEditExecuted)
                    {
                        ServiceGenirc = string.Empty;
                    }
                    if (EditService == null)
                    {
                        isBlockUnitSaleSelectionChange = true;
                    }
                    if (EditService != null)
                    {
                        EditService = null;
                    }
                }
                //CalculateMaxMinCopay();
                SerialNoCount();
                //Beena Code
                /*  if (IsValidateService == true && BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0)
                  {
                      DataTable dt = BillData.Tables["INV_PAT_BILLING"];
                      DataRow dr1 = dt.Rows[dt.Rows.Count - 1];
                      DataRowView drv1 = dt.DefaultView[dt.Rows.IndexOf(dr1)];
                      BillData.Tables["INV_PAT_BILLING"].Rows[dt.Rows.Count - 1]["ISSALE"] = true;
                      bool valid = ValidateServiceCharge(dr1);
                      bool insValid = false;
                      if (dr1["APPROVAL_STATUS"] != DBNull.Value)
                      {
                          if (Convert.ToInt16(dr1["APPROVAL_STATUS"]) == 5)
                          {
                              if (valid == true)
                              {
                                  valid = true;
                              }
                          }
                          else
                          {
                              valid = false;
                          }
                      }
                      if (dr1["INCEXLCSTATUS"] != DBNull.Value)
                      {
                          if (Convert.ToInt16(dr1["INCEXLCSTATUS"]) == 1)
                          {
                              if (valid == true)
                              {
                                  valid = true;
                              }
                          }
                          else
                          {
                              valid = false;
                          }
                      }

                      if (valid == true)
                      {
                          SaveCheck(drv1);
                      }
                      else
                      {
                          BillData.Tables["INV_PAT_BILLING"].Rows[dt.Rows.Count - 1]["ISSALE"] = false;
                      }
                  }*/
                //Code
                isBlockBatchSelectionChange = true;
                ToBeCollected = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                            .Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]))
                            .Select(x => IfNullReturnZero(x["PATIENT_SHARE"])).Sum();
                TotalAmount = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                               where dr.RowState != DataRowState.Deleted && dr["NET"] != DBNull.Value &&
                               dr["ISSALE"] != DBNull.Value && Convert.ToBoolean(dr["ISSALE"]) == true
                               select Convert.ToDecimal(dr["NET"])).Sum();
                TotalNet = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                            where dr.RowState != DataRowState.Deleted && dr["NET_AMOUNT"] != DBNull.Value &&
                           dr["ISSALE"] != DBNull.Value && Convert.ToBoolean(dr["ISSALE"]) == true
                            select Convert.ToDecimal(dr["NET_AMOUNT"])).Sum();
                isBlockUnitSaleSelectionChange = false;
                isBlockBatchSelectionChange = false;
                IsBarCodeSearch = false;
                IsVerifiedItemEditExecuted = false;
                IsSubstitution = false;
                if (IfNullReturnZero(SelectedLabOrSubLocationValue) > 0)
                {
                    LoadMedicineForVerification(Convert.ToInt16(SelectedLabOrSubLocationValue));
                }
                else
                {
                    LoadMedicineForVerification(IP_Gen_App_Sub_Location);
                }
            }
            catch (Exception)
            {
                isSuccess = false;
                throw;
                //ExceptionHandler.WriteErrorLog(ex);
            }
            finally
            {
                isTaskBilllingEbabled = false;
                //Mouse.OverrideCursor = null;
            }
            return isSuccess;
        }
        /// <summary>
        /// Sets the medicine details.
        /// </summary>
        private void SetMedicineDetails(string Batch)
        {
            try
            {
                if (BatchOrUnit != null && BatchOrUnit.Rows.Count > 0)
                {
                    DataRow[] drDetails = null;
                    drDetails = BatchOrUnit.Select("BATCHNO='" + Batch + "'");
                    if (drDetails.Length > 0)
                    {
                        MedicineDetails = drDetails[0];
                    }
                    else
                    {
                        MedicineDetails = null;
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }


        /// <summary>
        /// Creates the investigation description.
        /// </summary>
        /// <param name="ServiceId">The service id.</param>
        private void CreateServiceDescription(long ServiceId, DataRowView drRow)
        {
            try
            {
                DataRow[] drFounds = null;
                StringBuilder Data = new StringBuilder();
                string notes = string.Empty;
                if (drRow != null && drRow.Row.Table.Columns.Contains("NAME") &&
                    drRow.Row["NAME"] != DBNull.Value)
                {
                    Data.Append("Name              : " + " " + drRow.Row["NAME"] + Environment.NewLine);
                }
                if (drRow != null && drRow.Row.Table.Columns.Contains("REMARKS")
                    && drRow.Row["REMARKS"] != DBNull.Value)
                {
                    Data.Append("Remarks           : " + " " + drRow.Row["REMARKS"] + Environment.NewLine);
                }
                if (dsCharge != null && dsCharge.Tables["SERVICE_BASE_CHARGE"].KIIsNotNullAndRowCount()
                    && SelectedBaseCharge.KIIsNotNullAndRowCount() && SelectedBaseCharge.Rows[0]["CHARGE_AMOUNT"] != DBNull.Value) //dsCharge.Tables["SERVICE_BASE_CHARGE"]
                {
                    Data.Append("Charge            : " + " " + SelectedBaseCharge.Rows[0]["CHARGE_AMOUNT"].ToString());
                }
                if (BillData.Tables["INV_PAT_BILLING_TEMP"].Columns.Contains("alias_name") &&
                    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["alias_name"] != DBNull.Value
                    && BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["alias_name"] != DBNull.Value)
                {
                    Data.Append(Environment.NewLine + "Alias Name      : " + " " + Convert.ToString(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["alias_name"]));
                }
                if (drRow != null)
                {
                    if (drRow.Row.Table.Columns.Contains("CPT_CODE") && drRow.Row["CPT_CODE"] != DBNull.Value)
                    {
                        if (Data.Length > 0)
                        {
                            Data.Append(Environment.NewLine + "CPT Code        : " + " " + drRow.Row["CPT_CODE"]);
                        }
                        else
                        {
                            Data.Append("CPT Code        : " + " " + drRow.Row["CPT_CODE"]);
                        }
                    }
                    if (drRow.Row.Table.Columns.Contains("SERVICE_CODE") && drRow.Row["SERVICE_CODE"] != DBNull.Value)
                    {
                        Data.Append(Environment.NewLine + "Service Code     : " + " " + drRow.Row["SERVICE_CODE"]);
                    }
                }
                if (dsServiceData != null && dsServiceData.Tables.Contains("INV_SERVICE_VALIDATION") && dsServiceData.Tables["INV_SERVICE_VALIDATION"].Rows.Count > 0)
                {
                    drFounds = dsServiceData.Tables["INV_SERVICE_VALIDATION"].Select("INV_MAST_SERVICE_ID=" + ServiceId);
                    if (drFounds.Length > 0)
                    {
                        if (drFounds[0]["INSTRUCTIONS_TO_PATIENT"] != DBNull.Value)
                        {
                            //notes = notes + Environment.NewLine + "To Patient : " + drFounds[0]["INSTRUCTIONS_TO_PATIENT"].ToString();
                            Data.Append(Environment.NewLine + "To Patient       : " + " " + drFounds[0]["INSTRUCTIONS_TO_PATIENT"].ToString());
                        }
                        if (drFounds[0]["INSTRUCTIONS_TO_DOCTOR"] != DBNull.Value)
                        {
                            Data.Append(Environment.NewLine + "To Patient        : " + " " + drFounds[0]["INSTRUCTIONS_TO_DOCTOR"].ToString());
                        }
                        if (drFounds[0]["INSTRUCTIONS_TO_LAB"] != DBNull.Value)
                        {
                            Data.Append(Environment.NewLine + "To Lab            : " + " " + drFounds[0]["INSTRUCTIONS_TO_LAB"].ToString());
                        }
                        if (drFounds[0]["WARNING_NOTE"] != DBNull.Value)
                        {
                            Data.Append(Environment.NewLine + "Warning           : " + " " + drFounds[0]["WARNING_NOTE"].ToString());
                        }
                        if (drFounds[0]["PHYSIOLOGIC_CONDITION"] != DBNull.Value)
                        {
                            Data.Append(Environment.NewLine + "Physiologics Group : " + " " + drFounds[0]["PHYSIOLOGIC_CONDITION"].ToString());
                        }
                    }
                }
                DataTable dtProfileService = this.FetchProfileServices(ServiceId, null);
                if (dtProfileService.KIIsNotNullAndRowCount())
                {
                    string[] Names = (from dr in dtProfileService.AsEnumerable()
                                      where dr["NAME"] != DBNull.Value
                                      select dr["NAME"].ToString()).Distinct().ToArray();
                    if (Names.Length > 0)
                    {
                        Data.Append(Environment.NewLine + "Profile Services  : " + " " + string.Join(",", Names));
                    }
                }
                Notes = Data.ToString();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void CreatePharmacyStockDescription(DataTable Data)
        {
            try
            {
                string notes = string.Empty;
                object sumObject = null;
                StringBuilder strNotes = new StringBuilder();
                if (Data != null)
                {
                    //sumObject = Data.Compute("Sum(QTY)", "");
                    //strNotes.Append("Total Qty:" + sumObject);
                    if (Data != null && Data.Columns.Contains("NAME") && Data.Rows[0]["NAME"] != DBNull.Value)
                    {
                        strNotes.Append("BRAND                 : " + " " + Data.Rows[0]["NAME"] + Environment.NewLine);
                    }
                    if (Data != null && Data.Columns.Contains("CPT_CODE") && Data.Rows[0]["CPT_CODE"] != DBNull.Value)
                    {
                        strNotes.Append("Code                   : " + " " + Data.Rows[0]["CPT_CODE"] + Environment.NewLine);
                    }
                    if (Data != null && Data.Columns.Contains("GENERIC_NAME") && Data.Rows[0]["GENERIC_NAME"] != DBNull.Value)
                    {
                        strNotes.Append("Generic Name     : " + " " + Data.Rows[0]["GENERIC_NAME"] + Environment.NewLine);
                    }
                    strNotes.Append(Environment.NewLine);
                    foreach (DataRow item in Data.Rows)
                    {
                        if (item != null && item.Table.Columns.Contains("BATCHNO"))
                        {
                            strNotes.Append("Batch                  : " + " " + item["BATCHNO"] + Environment.NewLine);
                        }
                        //if (item != null && item.Table.Columns.Contains("CPT_CODE") && item["CPT_CODE"] != DBNull.Value)
                        //{
                        //    strNotes.Append("Code              : " + " " + item["CPT_CODE"] + Environment.NewLine);
                        //}
                        if (item != null && item.Table.Columns.Contains("PRICE"))
                        {
                            strNotes.Append("Price                   : " + " " + item["PRICE"] + Environment.NewLine);
                        }
                        if (item != null && item.Table.Columns.Contains("QTY"))
                        {
                            strNotes.Append("Qty                     : " + " " + item["QTY"] + Environment.NewLine);
                        }
                        if (item != null && item.Table.Columns.Contains("EXPDATE"))
                        {
                            strNotes.Append("Expiry Date         : " + " " + (String.IsNullOrEmpty(Convert.ToString(item["EXPDATE"])) ? String.Empty : Convert.ToDateTime(item["EXPDATE"]).ToString("dd-MMM-yyyy")) + Environment.NewLine);
                        }
                        if (item != null && item.Table.Columns.Contains("RACK_CODE") && item["RACK_CODE"] != DBNull.Value)
                        {
                            strNotes.Append("Rack                   : " + " " + item["RACK_CODE"] + Environment.NewLine);
                        }
                        strNotes.Append(Environment.NewLine);
                    }
                }
                Notes = strNotes.ToString();
            }
            catch (Exception)
            {
                throw;
            }
        }


        /// <summary>
        /// Gets the EMRCPOE prescription.
        /// </summary>
        /// <returns></returns>
        private DataRow GetEMRCPOEPrescription(DataRow drRow)
        {
            try
            {
                DataRow drPrescription = null;
                DataRow[] drFounds = null;
                if (drRow != null && SelectedEMROrder != null && EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail") &&
                    EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0
                    && SelectedEMROrder["EMR_PAT_MAST_INV_ORDER_ID"] != DBNull.Value)
                {
                    if (SelectedServiceType != (int)ServiceType.Pharmacy)
                    {
                        if (drRow.Table.Columns.Contains("PRIMARY_ID") && drRow["PRIMARY_ID"] != DBNull.Value)
                        {
                            if (EMROrderRelation.Tables["Detail"].Columns.Contains("IS_CONSUMPTION_EXIST"))
                            {
                                drFounds = EMROrderRelation.Tables["Detail"].Select("ISNULL(IS_CONSUMPTION_EXIST,0)=0 AND INV_MAST_SERVICE_ID=" + drRow["PRIMARY_ID"]
                                    + " AND EMR_PAT_MAST_INV_ORDER_ID='" + SelectedEMROrder["EMR_PAT_MAST_INV_ORDER_ID"].ToString() + "'");
                            }
                            else
                            {

                                drFounds = EMROrderRelation.Tables["Detail"].Select("INV_MAST_SERVICE_ID=" + drRow["PRIMARY_ID"]
                                   + " AND EMR_PAT_MAST_INV_ORDER_ID='" + SelectedEMROrder["EMR_PAT_MAST_INV_ORDER_ID"].ToString() + "'");
                            }
                        }
                        else
                        {
                            if (!EMROrderRelation.Tables["Detail"].Columns.Contains("IS_CONSUMPTION_EXIST"))
                            {
                                drFounds = EMROrderRelation.Tables["Detail"].Select("INV_MAST_SERVICE_ID=" + drRow["INV_MAST_SERVICE_ID"]
                                    + " AND EMR_PAT_MAST_INV_ORDER_ID='" + SelectedEMROrder["EMR_PAT_MAST_INV_ORDER_ID"].ToString() + "'");
                            }
                            else
                            {
                                drFounds = EMROrderRelation.Tables["Detail"].Select("ISNULL(IS_CONSUMPTION_EXIST,0)=0 AND INV_MAST_SERVICE_ID=" + drRow["INV_MAST_SERVICE_ID"]
                                   + " AND EMR_PAT_MAST_INV_ORDER_ID='" + SelectedEMROrder["EMR_PAT_MAST_INV_ORDER_ID"].ToString() + "'");
                            }
                        }
                    }
                    else
                    {
                        if (drRow.Table.Columns.Contains("PRIMARY_ID") && drRow["PRIMARY_ID"] != DBNull.Value
                            && EMRItemSelected != null)
                        {
                            drFounds = EMROrderRelation.Tables["Detail"].Select("INV_MAST_SERVICE_ID=" + drRow["PRIMARY_ID"]
                                + " AND EMR_PAT_DTLS_INV_ORDER_ID='" + EMRItemSelected["EMR_PAT_DTLS_INV_ORDER_ID"].ToString() + "'");
                            // by riyas while branded pbm editing ,change anothor branded medicine start
                            if ((drFounds == null || drFounds.Count() == 0) && PhRXDtlsInfo.KIIsNotNullAndRowCount() &&
                                EMRItemSelected["INV_MAST_SERVICE_ID"] != DBNull.Value && drRow["PRIMARY_ID"] != DBNull.Value &&
                            Convert.ToDecimal(EMRItemSelected["INV_MAST_SERVICE_ID"]) != Convert.ToDecimal(drRow["PRIMARY_ID"]) &&
                             PhRXDtlsInfo.AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(EMRItemSelected["EMR_PAT_DTLS_INV_ORDER_ID"])
                                   && IfNullReturnZero(x["ORDERED_ITEM_ID"]) == IfNullReturnZero(EMRItemSelected["INV_MAST_SERVICE_ID"])
                                   && IfNullReturnZero(x["REQUESTED_ITEM_ID"]) == IfNullReturnZero(drRow["PRIMARY_ID"])
                                   && IfNullReturnZero(x["REQUESTED_ITEM_ID"]) != IfNullReturnZero(x["ORDERED_ITEM_ID"])
                                   && IfNullReturnZero(x["ISGENERIC_ORDER"]) == 0).Any())
                            {
                                drFounds = EMROrderRelation.Tables["Detail"].Select("INV_MAST_SERVICE_ID=" + EMRItemSelected["INV_MAST_SERVICE_ID"]
                                    + " AND EMR_PAT_DTLS_INV_ORDER_ID='" + EMRItemSelected["EMR_PAT_DTLS_INV_ORDER_ID"].ToString() + "'");
                            }
                            // by riyas while branded pbm editing ,change anothor branded medicine end
                        }
                        else if (EMRItemSelected != null && drRow["INV_MAST_SERVICE_ID"] != DBNull.Value)
                        {
                            drFounds = EMROrderRelation.Tables["Detail"].Select("INV_MAST_SERVICE_ID=" + drRow["INV_MAST_SERVICE_ID"]
                                + " AND EMR_PAT_DTLS_INV_ORDER_ID='" + EMRItemSelected["EMR_PAT_DTLS_INV_ORDER_ID"].ToString() + "'");
                            // by riyas while branded pbm editing ,change anothor branded medicine start
                            if ((drFounds == null || drFounds.Count() == 0) && PhRXDtlsInfo.KIIsNotNullAndRowCount() &&
                                EMRItemSelected["INV_MAST_SERVICE_ID"] != DBNull.Value && drRow["INV_MAST_SERVICE_ID"] != DBNull.Value &&
                            Convert.ToDecimal(EMRItemSelected["INV_MAST_SERVICE_ID"]) != Convert.ToDecimal(drRow["INV_MAST_SERVICE_ID"]) &&
                                PhRXDtlsInfo.AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(EMRItemSelected["EMR_PAT_DTLS_INV_ORDER_ID"])
                                   && IfNullReturnZero(x["ORDERED_ITEM_ID"]) == IfNullReturnZero(EMRItemSelected["INV_MAST_SERVICE_ID"])
                                   && IfNullReturnZero(x["REQUESTED_ITEM_ID"]) == IfNullReturnZero(drRow["INV_MAST_SERVICE_ID"])
                                   && IfNullReturnZero(x["REQUESTED_ITEM_ID"]) != IfNullReturnZero(x["ORDERED_ITEM_ID"])
                                   && IfNullReturnZero(x["ISGENERIC_ORDER"]) == 0).Any())
                            {
                                drFounds = EMROrderRelation.Tables["Detail"].Select("INV_MAST_SERVICE_ID=" + EMRItemSelected["INV_MAST_SERVICE_ID"]
                                    + " AND EMR_PAT_DTLS_INV_ORDER_ID='" + EMRItemSelected["EMR_PAT_DTLS_INV_ORDER_ID"].ToString() + "'");
                            }
                            // by riyas while branded pbm editing ,change anothor branded medicine end
                        }

                    }
                    if (drFounds != null && drFounds.Length > 0)
                    {
                        drPrescription = drFounds[0];
                    }
                    //else if (drRow.Table.Columns.Contains("GENERIC_ID") &&
                    //    drRow["GENERIC_ID"] != DBNull.Value) //Generic
                    //{
                    //    drFounds = EMROrderRelation.Tables["Detail"].Select("GENERIC_ID=" + drRow["GENERIC_ID"] + " AND EMR_PAT_DTLS_INV_ORDER_ID="
                    //        + SelectedEMROrder["EMR_PAT_DTLS_INV_ORDER_ID"]);
                    //    if (drFounds != null && drFounds.Length > 0)
                    //    {
                    //        drPrescription = drFounds[0];
                    //    }
                    //}
                    else if (drRow.Table.Columns.Contains("INV_MAST_SERVICE_ID") &&
                        drRow["INV_MAST_SERVICE_ID"] != DBNull.Value && EMRItemSelected != null) //No stock medicine
                    {
                        drFounds = EMROrderRelation.Tables["Detail"].Select("INV_MAST_SERVICE_ID=" + drRow["INV_MAST_SERVICE_ID"] + " AND EMR_PAT_DTLS_INV_ORDER_ID="
                            + EMRItemSelected["EMR_PAT_DTLS_INV_ORDER_ID"]);
                        if (drFounds != null && drFounds.Length > 0)
                        {
                            drPrescription = drFounds[0];
                        }
                        else if (drRow.Table.Columns.Contains("EMR_PAT_DTLS_INV_ORDER_ID") && drRow.Table.Columns.Contains("GENERIC_ID")
                        && drRow["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value && drRow["GENERIC_ID"] != DBNull.Value && //checking generic condition Bug 36472
                           EMROrderRelation.Tables["Detail"].Columns.Contains("GENERIC_ID"))//and here checking generic condition for Bug 39451
                        {
                            drFounds = EMROrderRelation.Tables["Detail"].Select("ISNULL(INV_MAST_SERVICE_ID,0) = 0 AND EMR_PAT_DTLS_INV_ORDER_ID="
                           + drRow["EMR_PAT_DTLS_INV_ORDER_ID"] + " AND GENERIC_ID=" + drRow["GENERIC_ID"]);
                            if (drFounds != null && drFounds.Length > 0)
                            {
                                drPrescription = drFounds[0];
                            }
                        }
                    }
                    else if (drRow.Table.Columns.Contains("INV_MAST_SERVICE_ID") && drRow.Table.Columns.Contains("EMR_PAT_DTLS_INV_ORDER_ID") &&
                        drRow["INV_MAST_SERVICE_ID"] != DBNull.Value && drRow["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value) //No stock medicine
                    {
                        drFounds = EMROrderRelation.Tables["Detail"].Select("INV_MAST_SERVICE_ID=" + drRow["INV_MAST_SERVICE_ID"] + " AND EMR_PAT_DTLS_INV_ORDER_ID="
                            + drRow["EMR_PAT_DTLS_INV_ORDER_ID"]);
                        if (drFounds != null && drFounds.Length > 0)
                        {
                            drPrescription = drFounds[0];
                        }
                        else if (drRow.Table.Columns.Contains("GENERIC_ID") && drRow["GENERIC_ID"] != DBNull.Value && //checking generic condition Bug 36472
                             EMROrderRelation.Tables["Detail"].Columns.Contains("GENERIC_ID"))//and here checking generic condition for Bug 39451
                        {
                            drFounds = EMROrderRelation.Tables["Detail"].Select("ISNULL(INV_MAST_SERVICE_ID,0) = 0 AND EMR_PAT_DTLS_INV_ORDER_ID="
                           + drRow["EMR_PAT_DTLS_INV_ORDER_ID"] + " AND GENERIC_ID=" + drRow["GENERIC_ID"]);
                            if (drFounds != null && drFounds.Length > 0)
                            {
                                drPrescription = drFounds[0];
                            }
                            else//substitution
                            {
                                drFounds = EMROrderRelation.Tables["Detail"].Select("INV_MAST_SERVICE_ID <>" + drRow["INV_MAST_SERVICE_ID"] + " AND EMR_PAT_DTLS_INV_ORDER_ID="
                           + drRow["EMR_PAT_DTLS_INV_ORDER_ID"] + " AND GENERIC_ID=" + drRow["GENERIC_ID"]);
                                if (drFounds != null && drFounds.Length > 0)
                                {
                                    drPrescription = drFounds[0];
                                }
                            }
                        }
                    }
                    else if (drRow.Table.Columns.Contains("EMR_PAT_DTLS_INV_ORDER_ID") && drRow.Table.Columns.Contains("GENERIC_ID")
                        && drRow["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value && drRow["GENERIC_ID"] != DBNull.Value && //checking generic condition Bug 36472
                             EMROrderRelation.Tables["Detail"].Columns.Contains("GENERIC_ID"))//and here checking generic condition for Bug 39451
                    {
                        drFounds = EMROrderRelation.Tables["Detail"].Select("ISNULL(INV_MAST_SERVICE_ID,0) = 0 AND EMR_PAT_DTLS_INV_ORDER_ID="
                       + drRow["EMR_PAT_DTLS_INV_ORDER_ID"] + " AND GENERIC_ID=" + drRow["GENERIC_ID"]);
                        if (drFounds != null && drFounds.Length > 0)
                        {
                            drPrescription = drFounds[0];
                        }
                    }
                    if ((drFounds == null || drFounds.Count() == 0) && PhRXDtlsInfo.KIIsNotNullAndRowCount())//Generic
                    {
                        if (PhRXDtlsInfo.AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_MEDICATION_ID"])
                                   && IfNullReturnZero(x["ORDERED_GENERIC_ID"]) == IfNullReturnZero(drRow["GENERIC_ID"])
                                   && IfNullReturnZero(x["ISGENERIC_ORDER"]) == 1).Any() && EMROrderRelation.Tables["Detail"].Columns.Contains("GENERIC_ID"))//and here checking generic condition for Bug 39451
                        {
                            drFounds = EMROrderRelation.Tables["Detail"].Select("GENERIC_ID=" + drRow["GENERIC_ID"]);
                            if (drFounds.Length > 0)
                            {
                                drPrescription = drFounds[0];
                            }
                        }
                    }
                    
                    //For EMR order printing...mapping the selected item (EMR_PAT_DTLS_INV_ORDER_ID)
                    if (drPrescription != null && drFounds.Length > 0)
                    {
                        if (EMRSelectedItem != null)
                        {
                            drFounds = drFounds.CopyToDataTable().Select("EMR_PAT_DTLS_INV_ORDER_ID=" + EMRSelectedItem["EMR_PAT_DTLS_INV_ORDER_ID"]);
                            if (drFounds.Length > 0)
                            {
                                drPrescription = drFounds[0];
                            }
                        }                        
                    }

                    if (isPharmacyInServiceBilling && drPrescription != null && drPrescription.Table.KIIsNotNullAndRowCount() && drPrescription != null && drPrescription.Table.KIIsNotNullAndRowCount()
                        && drPrescription.Table.Columns.Contains("EMR_PAT_MAST_INV_ORDER_ID_ORIGINAL") && drPrescription["EMR_PAT_MAST_INV_ORDER_ID_ORIGINAL"] != DBNull.Value)
                    {
                        DataTable dtEmrOrder = new DataTable();
                        MainEMRShared objEMRShared = new MainEMRShared();
                        DataTable dtTable = new DataTable();
                        dtTable.Columns.Add("EMR_PAT_DTLS_PH_ORDER_ID", typeof(long));
                        dtTable.Columns.Add("MODE", typeof(int));
                        dtTable.Rows.Add(Convert.ToInt64(IfNullReturnZero(drPrescription["EMR_PAT_DTLS_INV_ORDER_ID"])), 33);
                        dtEmrOrder = objEMRShared.FetchDtlsPHOrderwithCriteriaTable(dtTable);
                        if (dtEmrOrder.KIIsNotNullAndRowCount())
                        {
                            if (drRow.Table.Columns.Contains("PRIMARY_ID"))
                            {
                                drFounds = dtEmrOrder.Select("INV_MAST_SERVICE_ID=" + drRow["PRIMARY_ID"]);
                            }
                            else if (drRow.Table.Columns.Contains("INV_MAST_SERVICE_ID"))
                            {
                                drFounds = dtEmrOrder.Select("INV_MAST_SERVICE_ID=" + drRow["INV_MAST_SERVICE_ID"]);
                            }
                            if (drFounds != null && drFounds.Length > 0)
                            {
                                drPrescription = drFounds[0];
                            }
                            else
                            {
                                drFounds = dtEmrOrder.Select("EMR_PAT_DTLS_PH_ORDER_ID=" + drPrescription["EMR_PAT_DTLS_INV_ORDER_ID"]);
                                if (drFounds != null && drFounds.Length > 0)
                                {
                                    drPrescription = drFounds[0];
                                }
                            }
                        }
                    }
                }
                return drPrescription;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Loads the EMR pharmacy order.
        /// </summary>
        /// <param name="drPatientData">The dr patient data.</param>
        /// <returns></returns>
        private DataSet LoadEMRPharmacyOrder(DataRow drPatientData)
        {
            try
            {
                DataTable dtValue = CPOECriteria(drPatientData);
                return objEmrShared.FetchMedicinePrescriptions(dtValue);
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// Creates the EMR pharmacy order relation.
        /// </summary>
        /// <param name="dsData">The ds data.</param>
        /// <returns></returns>
        private DataSet CreateEMRPharmacyOrderRelation(DataSet dsData)
        {
            try
            {
                if (dsData != null && dsData.Tables["EMR_PAT_MAST_PH_ORDER"].Rows.Count > 0 && SelectedProviderValue != string.Empty)//&& (SelectedPatientFinEncounterID > 0 || IsAllChecked)
                {
                    //IsArrangeCpoeColumn = true;
                    IsCPOEOrderExist = true;
                    IsCPOEPharmacyOrderExist = true;
                    string[] emrMastID = null;
                    if (dsData.Tables.Contains("EMR_PAT_MAST_PH_ORDER") && dsData.Tables.Contains("EMR_PAT_DTLS_PH_ORDER"))
                    {
                        DataTable dtTemp = dsData.Tables["EMR_PAT_DTLS_PH_ORDER"];
                        if (dtTemp.Columns.Contains("QTY") && dtTemp.Columns.Contains("BILLED_QTY") && dtTemp.Columns.Contains("RETURN_QTY"))
                        {   //to get data with pending order qty only 
                            var varMastOrder = from drMast in dsData.Tables["EMR_PAT_MAST_PH_ORDER"].AsEnumerable()
                                               join drDtls in dsData.Tables["EMR_PAT_DTLS_PH_ORDER"].AsEnumerable()
                                               on Convert.ToString(drMast["EMR_PAT_MAST_PH_ORDER_ID"]) equals Convert.ToString(drDtls["EMR_PAT_MAST_PH_ORDER_ID"])
                                               select drMast;
                            DataTable dtTempMast = varMastOrder.Count() > 0 ? varMastOrder.Distinct(DataRowComparer.Default).CopyToDataTable()
                                : dsData.Tables["EMR_PAT_MAST_PH_ORDER"].Clone();
                            dsData.Tables["EMR_PAT_MAST_PH_ORDER"].Rows.Clear();
                            dsData.Tables["EMR_PAT_MAST_PH_ORDER"].Merge(dtTempMast);
                            if (dsData.Tables["EMR_PAT_MAST_PH_ORDER"] == null || dsData.Tables["EMR_PAT_MAST_PH_ORDER"].Rows.Count == 0)
                            {
                                IsCPOEOrderExist = false;
                            }
                        }
                    }
                    if (dsData.Tables.Contains("EMR_PAT_MAST_PH_ORDER"))
                    {
                        dsData.Tables["EMR_PAT_MAST_PH_ORDER"].TableName = "Order";
                        dsData.Tables["Order"].Columns["EMR_PAT_MAST_PH_ORDER_ID"].ColumnName = "EMR_PAT_MAST_INV_ORDER_ID";
                    }
                    if (dsData.Tables.Contains("EMR_PAT_DTLS_PH_ORDER"))
                    {
                        dsData.Tables["EMR_PAT_DTLS_PH_ORDER"].Columns["EMR_PAT_MAST_PH_ORDER_ID"].ColumnName = "EMR_PAT_MAST_INV_ORDER_ID";
                        dsData.Tables["EMR_PAT_DTLS_PH_ORDER"].Columns.Add("SL_NO", typeof(int));
                        dsData.Tables["EMR_PAT_DTLS_PH_ORDER"].Columns["EMR_PAT_DTLS_PH_ORDER_ID"].ColumnName = "EMR_PAT_DTLS_INV_ORDER_ID";
                        dsData.Tables["EMR_PAT_DTLS_PH_ORDER"].TableName = "Detail";

                    }
                    DataTable dtEMRorder = dsData.Tables["Order"];

                    if ((IsAllChecked && ERxVisibility != Visibility.Visible) || (IsAllChecked && ERxVisibility == Visibility.Visible && Convert.ToInt16(PrescriptionModeValue) == 0))
                    {
                        if (SelectedProviderValue != string.Empty)
                        {
                            if (ERPatientFinEncounterID > 0)
                            {
                                //--- AA0907
                                //dtEMRorder.DefaultView.RowFilter = "EPISODE_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "' OR (EPISODE_END_DATE IS NULL  AND PAT_FIN_ENCOUNTER_ID<>'" + ERPatientFinEncounterID + "' AND PROVIDER_ID='" + SelectedProviderValue + "')";
                                dtEMRorder.DefaultView.RowFilter = "(ENCOUNTER_END_DATE IS NOT NULL AND ENCOUNTER_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "')" + " AND PAT_FIN_ENCOUNTER_ID<>'" + ERPatientFinEncounterID + "' AND PROVIDER_ID='" + SelectedProviderValue + "'";
                                //--- AA0907
                            }
                            else if (SelectedPatientFinEncounterID > 0)
                            {
                                //Bug ID-19276,18855,19157
                                //EMROrder.DefaultView.RowFilter = "(EPISODE_END_DATE IS  NULL OR EPISODE_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "')" + " AND PAT_FIN_ENCOUNTER_ID<>'" + SelectedPatientFinEncounterID + "' AND PROVIDER_ID='" + SelectedProviderValue + "'";
                                //--- AA0907
                                //EMROrder.DefaultView.RowFilter = "(EPISODE_END_DATE IS NOT NULL AND EPISODE_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "')" + " AND PAT_FIN_ENCOUNTER_ID<>'" + SelectedPatientFinEncounterID + "' AND PROVIDER_ID='" + SelectedProviderValue + "'";
                                dtEMRorder.DefaultView.RowFilter = "(ENCOUNTER_END_DATE IS NOT NULL AND ENCOUNTER_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "')" + " AND PAT_FIN_ENCOUNTER_ID<>'" + SelectedPatientFinEncounterID + "' AND PROVIDER_ID='" + SelectedProviderValue + "'";
                                //--- AA0907
                            }
                            else
                            {
                                //EMROrder.DefaultView.RowFilter = "EPISODE_END_DATE IS NULL OR EPISODE_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "'" + " AND PROVIDER_ID='" + SelectedProviderValue + "'";
                                //if ((SelectedOpenEpisodeID != "" || SelectedOpenEpisodeID != null || SelectedOpenEpisodeID != string.Empty) && SelectedOpenEpisodeID != "0")
                                //{
                                //    dtEMRorder.DefaultView.RowFilter = "EPISODE_END_DATE IS NOT NULL AND EPISODE_END_DATE >= '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "' AND PROVIDER_ID='" + SelectedProviderValue + "'";
                                //}
                                //else
                                //{
                                //dtEMRorder.DefaultView.RowFilter = " EPISODE_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "' OR (EPISODE_END_DATE IS NULL AND PROVIDER_ID='" + SelectedProviderValue + "')";
                                //--- AA0907
                                //dtEMRorder.DefaultView.RowFilter = "(EPISODE_END_DATE IS NOT NULL AND EPISODE_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "')" + " AND PROVIDER_ID='" + SelectedProviderValue + "'";
                                dtEMRorder.DefaultView.RowFilter = "(ENCOUNTER_END_DATE IS NOT NULL AND ENCOUNTER_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "')" + " AND PROVIDER_ID='" + SelectedProviderValue + "'";
                                //--- AA0907
                                //}
                            }

                        }
                        else
                        {
                            if (ERPatientFinEncounterID > 0)
                            {
                                //--- AA0907
                                //EMROrder.DefaultView.RowFilter = "(EPISODE_END_DATE IS NULL OR EPISODE_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "')"+ " AND PAT_FIN_ENCOUNTER_ID<>'" + ERPatientFinEncounterID + "'";
                                dtEMRorder.DefaultView.RowFilter = "(ENCOUNTER_END_DATE IS NULL OR ENCOUNTER_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "')" + " AND PAT_FIN_ENCOUNTER_ID<>'" + ERPatientFinEncounterID + "'";
                                //--- AA0907
                            }
                            else if (SelectedPatientFinEncounterID > 0)
                            {
                                //--- AA0907
                                //EMROrder.DefaultView.RowFilter = "(EPISODE_END_DATE IS NULL OR EPISODE_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "')" + " AND PAT_FIN_ENCOUNTER_ID<>'" + SelectedPatientFinEncounterID + "'";
                                dtEMRorder.DefaultView.RowFilter = "(ENCOUNTER_END_DATE IS NULL OR ENCOUNTER_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "')" + " AND PAT_FIN_ENCOUNTER_ID<>'" + SelectedPatientFinEncounterID + "'";
                                //--- AA0907
                            }
                            else
                            {
                                if ((SelectedOpenEpisodeID != "" || SelectedOpenEpisodeID != null || SelectedOpenEpisodeID != string.Empty) && SelectedOpenEpisodeID != "0")
                                {
                                    //--- AA0907
                                    //EMROrder.DefaultView.RowFilter = "EPISODE_END_DATE IS NOT NULL AND EPISODE_END_DATE >= '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "'";
                                    dtEMRorder.DefaultView.RowFilter = "ENCOUNTER_END_DATE IS NOT NULL AND ENCOUNTER_END_DATE >= '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "'";
                                    //--- AA0907
                                }
                                ////else
                                ////{
                                ////    EMROrder.DefaultView.RowFilter = " EPISODE_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "' OR EPISODE_END_DATE IS NULL ")";
                                ////}
                            }
                        }
                        DataTable dtOrderFilter = dtEMRorder.DefaultView.ToTable();
                        if (dtOrderFilter.KIIsNotNullAndRowCount() && dtOrderFilter.Columns.Contains("EMR_PAT_MAST_ORDER_ID"))
                        {
                            emrMastID = (from dr in dtOrderFilter.AsEnumerable()
                                         select dr["EMR_PAT_MAST_ORDER_ID"].ToString()).ToArray();
                        }
                        if (dtEMRorder.KIIsNotNullAndRowCount() && dtEMRorder.Columns.Contains("EMR_PAT_MAST_INV_ORDER_ID"))
                        {
                            dtEMRorder = dtEMRorder.DefaultView.ToTable(true, "PROVIDER_ID", "EMPNAME", "EPISODE_STATUS", "EPISODE_NO", "PAT_FIN_ENCOUNTER_ID", "EPISODE_ENCOUNTER_NO", "TOOLTIP_EPI_ENC_NO", "ISEMERGENCY", "EMR_PAT_MAST_INV_ORDER_ID");
                        }
                        else if (dtEMRorder.KIIsNotNullAndRowCount() && dtEMRorder.Columns.Contains("EMR_PAT_MAST_ORDER_ID"))
                        {
                            dtEMRorder.Columns["EMR_PAT_MAST_ORDER_ID"].ColumnName = "EMR_PAT_MAST_INV_ORDER_ID";
                            dtEMRorder = dtEMRorder.DefaultView.ToTable(true, "PROVIDER_ID", "EMPNAME", "EPISODE_STATUS", "EPISODE_NO", "PAT_FIN_ENCOUNTER_ID", "EPISODE_ENCOUNTER_NO", "TOOLTIP_EPI_ENC_NO", "ISEMERGENCY", "EMR_PAT_MAST_INV_ORDER_ID");
                        }
                        //"VISIT_DATE",
                        dtEMRorder.TableName = "Order";
                        if (dsData.Tables.Contains("Order"))
                        {
                            dsData.Tables.Remove("Order");
                        }
                        dsData.Tables.Add(dtEMRorder.Copy());
                    }
                    ////  AA0907 else if (ERPatientFinEncounterID > 0 || SelectedPatientFinEncounterID > 0 || SelectedPatientFinEpisodeID > 0 || ClosedPatientFinEpisodeID > 0) --
                    else if ((SelectedPatientFinEncounterID > 0 && (isEncounterSelectedfromPharmacy || isEncounterPopUpSelected || SelectedVisitModeNew == (int)VisitMode.IP || (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE") && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.IP)) && ERxVisibility != Visibility.Visible)
                        || ((SelectedPatientFinEncounterID > 0 && (isEncounterSelectedfromPharmacy || isEncounterPopUpSelected || SelectedVisitModeNew == (int)VisitMode.IP || (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE") && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.IP))) && ERxVisibility == Visibility.Visible && Convert.ToInt16(PrescriptionModeValue) == 0))
                    {
                        ////--- AA0907
                        ////if (SelectedPatientFinEpisodeID > 0)
                        ////{
                        ////    EMROrder.DefaultView.RowFilter = "PAT_FIN_EPISODE_ID='" + SelectedPatientFinEpisodeID + "'";
                        ////}
                        ////else if (ERPatientFinEncounterID > 0)
                        ////{
                        ////    EMROrder.DefaultView.RowFilter = "PAT_FIN_ENCOUNTER_ID='" + SelectedPatientFinEncounterID + "'";//+ "AND PROVIDER_ID='" + SelectedProviderValue + "'" --- For ER and IP , orders to be displayed on episodea and encounter, not for provider
                        ////}
                        //// else if (SelectedPatientFinEncounterID > 0)
                        ////END  AA0907
                        if (SelectedPatientFinEncounterID > 0)
                        {
                            dtEMRorder.DefaultView.RowFilter = "PAT_FIN_ENCOUNTER_ID='" + SelectedPatientFinEncounterID + "'";//+ "AND PROVIDER_ID='" + SelectedProviderValue + "'" --- For ER and IP , orders to be displayed on episodea and encounter, not for provider
                        }
                        if (EMROrder != null && EMROrder.DefaultView.KIIsNotNullOrEmpty() && EMROrder.DefaultView.ToTable().KIIsNotNullAndRowCount())
                        {
                            emrMastID = (from dr in dtEMRorder.DefaultView.ToTable().AsEnumerable()
                                         select dr["EMR_PAT_MAST_INV_ORDER_ID"].ToString()).ToArray();
                        }
                        if (SelectedPatientFinEpisodeID > 0)
                        {
                            dtEMRorder = dtEMRorder.DefaultView.ToTable(true, "PROVIDER_ID", "EMPNAME", "EPISODE_STATUS", "EPISODE_NO", "PAT_FIN_EPISODE_ID", "ISEMERGENCY", "EMR_PAT_MAST_INV_ORDER_ID", "EPISODE_ENCOUNTER_NO", "TOOLTIP_EPI_ENC_NO", "EMR_PROVIDER_VISIT_ID", "VISIT_DATE");
                        }
                        else
                        {
                            dtEMRorder = dtEMRorder.DefaultView.ToTable(true, "PROVIDER_ID", "EMPNAME", "EPISODE_STATUS", "EPISODE_NO", "PAT_FIN_ENCOUNTER_ID", "EPISODE_ENCOUNTER_NO", "TOOLTIP_EPI_ENC_NO", "ISEMERGENCY", "EMR_PAT_MAST_INV_ORDER_ID", "EMR_PROVIDER_VISIT_ID", "VISIT_DATE");
                        }
                        dtEMRorder.DefaultView.ToTable().TableName = "Order";
                        if (dsData.Tables.Contains("Order"))
                        {
                            dsData.Tables.Remove("Order");
                        }
                        dsData.Tables.Add(dtEMRorder.DefaultView.ToTable().Copy());
                    }
                    else
                    {
                        dtEMRorder.Rows.Clear();
                    }

                    ////if (IsAllChecked)
                    ////{
                    ////    if (ERPatientFinEncounterID > 0)
                    ////    {
                    ////        //--- AA0907
                    ////        //dtEMRorder.DefaultView.RowFilter = "EPISODE_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "' OR (EPISODE_END_DATE IS NULL  AND PAT_FIN_ENCOUNTER_ID<>'" + ERPatientFinEncounterID + "' AND PROVIDER_ID='" + SelectedProviderValue + "')";
                    ////        dtEMRorder.DefaultView.RowFilter = "ENCOUNTER_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "' OR (ENCOUNTER_END_DATE IS NULL  AND PAT_FIN_ENCOUNTER_ID<>'" + ERPatientFinEncounterID + "' AND PROVIDER_ID='" + SelectedProviderValue + "')";
                    ////        //--- AA0907
                    ////    }
                    ////    ////else if (ClosedPatientFinEncounterID > 0)
                    ////    ////{
                    ////    ////    dtEMRorder.DefaultView.RowFilter = "EPISODE_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "' OR (EPISODE_END_DATE IS NULL  AND PAT_FIN_ENCOUNTER_ID<>'" + ClosedPatientFinEncounterID + "' AND PROVIDER_ID='" + SelectedProviderValue + "')";
                    ////    ////}
                    ////    else if (SelectedPatientFinEncounterID > 0)
                    ////    {
                    ////        //EMROrder.DefaultView.RowFilter = "EPISODE_END_DATE IS NULL OR (EPISODE_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "' AND PAT_FIN_ENCOUNTER_ID<>'" + SelectedPatientFinEncounterID + "') AND PROVIDER_ID='" + SelectedProviderValue + "'";
                    ////        //--- AA0907
                    ////        //dtEMRorder.DefaultView.RowFilter = "EPISODE_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "' OR (EPISODE_END_DATE IS NULL  AND PAT_FIN_ENCOUNTER_ID<>'" + SelectedPatientFinEncounterID + "' AND PROVIDER_ID='" + SelectedProviderValue + "')";
                    ////        dtEMRorder.DefaultView.RowFilter = "ENCOUNTER_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "' OR (ENCOUNTER_END_DATE IS NULL  AND PAT_FIN_ENCOUNTER_ID<>'" + SelectedPatientFinEncounterID + "' AND PROVIDER_ID='" + SelectedProviderValue + "')";
                    ////        //--- AA0907
                    ////    }
                    ////    else
                    ////    {
                    ////        //EMROrder.DefaultView.RowFilter = "EPISODE_END_DATE IS NULL OR EPISODE_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "'" + " AND PROVIDER_ID='" + SelectedProviderValue + "'";
                    ////        //if ((SelectedOpenEpisodeID != "" || SelectedOpenEpisodeID != null || SelectedOpenEpisodeID != string.Empty) && SelectedOpenEpisodeID != "0")
                    ////        //{
                    ////        //    dtEMRorder.DefaultView.RowFilter = "EPISODE_END_DATE IS NOT NULL AND EPISODE_END_DATE >= '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "' AND PROVIDER_ID='" + SelectedProviderValue + "'";
                    ////        //}
                    ////        //else
                    ////        //{
                    ////        //dtEMRorder.DefaultView.RowFilter = " EPISODE_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "' OR (EPISODE_END_DATE IS NULL AND PROVIDER_ID='" + SelectedProviderValue + "')";
                    ////        //--- AA0907
                    ////        //dtEMRorder.DefaultView.RowFilter = "(EPISODE_END_DATE IS NOT NULL AND EPISODE_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "')" + " AND PROVIDER_ID='" + SelectedProviderValue + "'";
                    ////        dtEMRorder.DefaultView.RowFilter = "(ENCOUNTER_END_DATE IS NOT NULL AND ENCOUNTER_END_DATE < '" + Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm")) + "')" + " AND PROVIDER_ID='" + SelectedProviderValue + "'";
                    ////        //--- AA0907
                    ////        //}
                    ////    }
                    ////    DataTable dtOrderFilter = dtEMRorder.DefaultView.ToTable();
                    ////    if (dtOrderFilter.KIIsNotNullAndRowCount() && dtOrderFilter.Columns.Contains("EMR_PAT_MAST_ORDER_ID"))
                    ////    {
                    ////        emrMastID = (from dr in dtOrderFilter.AsEnumerable()
                    ////                     select dr["EMR_PAT_MAST_ORDER_ID"].ToString()).ToArray();
                    ////    }
                    ////    if (EMROrder.KIIsNotNullAndRowCount() && EMROrder.Columns.Contains("EMR_PAT_MAST_INV_ORDER_ID"))
                    ////    {
                    ////        dtEMRorder = dtEMRorder.DefaultView.ToTable(true, "PROVIDER_ID", "EMPNAME", "EPISODE_STATUS", "EPISODE_NO", "PAT_FIN_ENCOUNTER_ID", "EPISODE_ENCOUNTER_NO", "TOOLTIP_EPI_ENC_NO", "ISEMERGENCY", "EMR_PAT_MAST_INV_ORDER_ID");
                    ////    }
                    ////    else if (EMROrder.KIIsNotNullAndRowCount() && EMROrder.Columns.Contains("EMR_PAT_MAST_ORDER_ID"))
                    ////    {
                    ////        EMROrder.Columns["EMR_PAT_MAST_ORDER_ID"].ColumnName = "EMR_PAT_MAST_INV_ORDER_ID";
                    ////        dtEMRorder = dtEMRorder.DefaultView.ToTable(true, "PROVIDER_ID", "EMPNAME", "EPISODE_STATUS", "EPISODE_NO", "PAT_FIN_ENCOUNTER_ID", "EPISODE_ENCOUNTER_NO", "TOOLTIP_EPI_ENC_NO", "ISEMERGENCY", "EMR_PAT_MAST_INV_ORDER_ID");
                    ////    }
                    ////    //"VISIT_DATE",
                    ////    dtEMRorder.TableName = "Order";
                    ////    if (dsData.Tables.Contains("Order"))
                    ////    {
                    ////        dsData.Tables.Remove("Order");
                    ////    }
                    ////    dsData.Tables.Add(dtEMRorder.Copy());
                    ////}
                    ////else if (ERPatientFinEncounterID > 0 || SelectedPatientFinEncounterID > 0 || SelectedPatientFinEpisodeID > 0)
                    ////{
                    ////    if (SelectedPatientFinEpisodeID > 0)
                    ////    {
                    ////        dtEMRorder.DefaultView.RowFilter = "PAT_FIN_EPISODE_ID='" + SelectedPatientFinEpisodeID + "'";
                    ////    }
                    ////    else if (ERPatientFinEncounterID > 0)
                    ////    {
                    ////        dtEMRorder.DefaultView.RowFilter = "PAT_FIN_ENCOUNTER_ID='" + SelectedPatientFinEncounterID + "'";//+ "AND PROVIDER_ID='" + SelectedProviderValue + "'" --- For ER and IP , orders to be displayed on episodea and encounter, not for provider
                    ////    }
                    ////    ////else if (ClosedPatientFinEncounterID > 0)
                    ////    ////{
                    ////    ////    dtEMRorder.DefaultView.RowFilter = "PAT_FIN_ENCOUNTER_ID='" + ClosedPatientFinEncounterID + "'";//+ "AND PROVIDER_ID='" + SelectedProviderValue + "'" --- For ER and IP , orders to be displayed on episodea and encounter, not for provider
                    ////    ////}
                    ////    else if (SelectedPatientFinEncounterID > 0)
                    ////    {
                    ////        dtEMRorder.DefaultView.RowFilter = "PAT_FIN_ENCOUNTER_ID='" + SelectedPatientFinEncounterID + "'";//+ "AND PROVIDER_ID='" + SelectedProviderValue + "'" --- For ER and IP , orders to be displayed on episodea and encounter, not for provider
                    ////    }
                    ////    if (EMROrder.DefaultView.KIIsNotNullOrEmpty() && EMROrder.DefaultView.ToTable().KIIsNotNullAndRowCount())
                    ////    {
                    ////        emrMastID = (from dr in dtEMRorder.DefaultView.ToTable().AsEnumerable()
                    ////                     select dr["EMR_PAT_MAST_INV_ORDER_ID"].ToString()).ToArray();
                    ////    }
                    ////    if (SelectedPatientFinEpisodeID > 0)
                    ////    {
                    ////        dtEMRorder = dtEMRorder.DefaultView.ToTable(true, "PROVIDER_ID", "EMPNAME", "EPISODE_STATUS", "EPISODE_NO", "PAT_FIN_EPISODE_ID", "ISEMERGENCY", "EMR_PAT_MAST_INV_ORDER_ID", "EPISODE_ENCOUNTER_NO", "TOOLTIP_EPI_ENC_NO", "EMR_PROVIDER_VISIT_ID", "VISIT_DATE");
                    ////    }
                    ////    else
                    ////    {
                    ////        dtEMRorder = dtEMRorder.DefaultView.ToTable(true, "PROVIDER_ID", "EMPNAME", "EPISODE_STATUS", "EPISODE_NO", "PAT_FIN_ENCOUNTER_ID", "EPISODE_ENCOUNTER_NO", "TOOLTIP_EPI_ENC_NO", "ISEMERGENCY", "EMR_PAT_MAST_INV_ORDER_ID", "EMR_PROVIDER_VISIT_ID", "VISIT_DATE");
                    ////    }
                    ////    dtEMRorder.DefaultView.ToTable().TableName = "Order";
                    ////    if (dsData.Tables.Contains("Order"))
                    ////    {
                    ////        dsData.Tables.Remove("Order");
                    ////    }
                    ////    dsData.Tables.Add(dtEMRorder.DefaultView.ToTable().Copy());
                    ////}


                    if (dtEMRorder.KIIsNotNullAndRowCount())
                    {
                        if (IsAllChecked)
                        {
                        }
                        else if (SelectedPatientFinEncounterID > 0)
                        {
                            dsData.Tables["Detail"].DefaultView.RowFilter = "PAT_FIN_ENCOUNTER_ID='" + SelectedPatientFinEncounterID + "'";
                            DataTable dtDetail = dsData.Tables["Detail"].DefaultView.ToTable().Copy();
                            if (dsData.Tables.Contains("Detail"))
                            {
                                dsData.Tables.Remove("Detail");
                            }
                            dtDetail.TableName = "Detail";
                            dsData.Tables.Add(dtDetail.Copy());
                        }

                        DataTable DetailRelation = null;
                        Common objCommon = new Common();
                        var result = from row in dsData.Tables["Detail"].Copy().AsEnumerable()
                                     group row by new
                                     {
                                         PARENT_INV_CATEGORY_ID = row.Field<decimal>("PARENT_INV_CATEGORY_ID"),
                                         EMR_PAT_MAST_INV_ORDER_ID = row.Field<decimal>("EMR_PAT_MAST_INV_ORDER_ID"),
                                         INV_PARENT_CATEGORY_NAME = row.Field<string>("INV_PARENT_CATEGORY_NAME"),
                                         MAINITEM = row.Field<decimal>("MAINITEM"),
                                         VISIT_DATE = row.Field<string>("ENTRY_DATE"),
                                         //VISIT_DATE = row.Field<DateTime>("ENCOUNTER_MIN_DATE"),
                                         //ENTER_VISIT = row.Field<DateTime>("ENTER_VISIT"),
                                         ISSELECT = false,
                                         PROVIDER_ID = row.Field<string>("PROVIDER_ID"),
                                         //EMR_PAT_DTLS_INV_ORDER_ID = row.Field<decimal>("EMR_PAT_DTLS_INV_ORDER_ID"),
                                         PAT_FIN_ENCOUNTER_ID = row.Field<decimal>("PAT_FIN_ENCOUNTER_ID"),
                                         ISEMERGENCY = row.Field<decimal>("ISEMERGENCY")
                                     } into grp
                                     select new
                                     {
                                         PARENT_INV_CATEGORY_ID = grp.Key.PARENT_INV_CATEGORY_ID,
                                         EMR_PAT_MAST_INV_ORDER_ID = grp.Key.EMR_PAT_MAST_INV_ORDER_ID,
                                         INV_PARENT_CATEGORY_NAME = grp.Key.INV_PARENT_CATEGORY_NAME,
                                         MAINITEM = grp.Key.MAINITEM,
                                         VISIT_DATE = grp.Key.VISIT_DATE,
                                         //ENTER_VISIT = grp.Key.ENTER_VISIT,
                                         Count = grp.Count(),
                                         ISSELECT = grp.Key.ISSELECT,
                                         PROVIDER_ID = grp.Key.PROVIDER_ID,
                                         // EMR_PAT_DTLS_INV_ORDER_ID = grp.Key.EMR_PAT_DTLS_INV_ORDER_ID,
                                         PAT_FIN_ENCOUNTER_ID = grp.Key.PAT_FIN_ENCOUNTER_ID,
                                         ISEMERGENCY = grp.Key.ISEMERGENCY,
                                     };
                        DetailRelation = objCommon.LINQToDataTable(result);
                        DetailRelation.TableName = "OrderRelation";
                        if (DetailRelation != null && DetailRelation.Rows.Count > 0 && dtEMRorder.KIIsNotNullAndRowCount())
                        {
                            dsData.Tables.Add(DetailRelation.Copy());
                            dsData.Relations.Add(
                                "Order2OrderRelation",
                                dsData.Tables["Order"].Columns["EMR_PAT_MAST_INV_ORDER_ID"],
                                dsData.Tables["OrderRelation"].Columns["EMR_PAT_MAST_INV_ORDER_ID"]);
                            //Load first order details    
                            dsData.Tables["Detail"].DefaultView.RowFilter = "EMR_PAT_MAST_INV_ORDER_ID=" + dsData.Tables["Order"].Rows[0]["EMR_PAT_MAST_INV_ORDER_ID"];
                            OrderItems = dsData.Tables["Detail"].DefaultView.ToTable();
                            if (!OrderItems.Columns.Contains("ISAUTHORIZE"))
                            {
                                OrderItems.Columns.Add("ISAUTHORIZE", typeof(bool));
                                OrderItems.Columns["ISAUTHORIZE"].DefaultValue = "false";
                            }

                        }
                        if (!dsData.Tables["Order"].Columns.Contains("ISSELECT"))
                        {
                            dsData.Tables["Order"].Columns.Add("ISSELECT", typeof(bool));
                        }
                        int count = 1;
                        foreach (DataRow dr in dsData.Tables["Order"].Rows)
                        {
                            dr["ISSELECT"] = "false";
                        }
                        foreach (DataRow dr in dsData.Tables["Detail"].Rows)
                        {
                            dr["SL_NO"] = count;
                            count++;
                        }
                    }
                }
                return dsData;
            }
            catch (Exception)
            {
                throw;
            }
        }

        bool isServiceAddedIntoGrid = false;
        public bool IsServiceAddedIntoGrid
        {
            get
            {
                return isServiceAddedIntoGrid;
            }
            set
            {
                isServiceAddedIntoGrid = value;
                OnPropertyChanged("IsServiceAddedIntoGrid");
            }
        }


        private DataRowView selectedEpisodeDetails;
        public DataRowView SelectedEpisodeDetails
        {
            get
            {
                return selectedEpisodeDetails;
            }
            set
            {
                selectedEpisodeDetails = value;
                OnPropertyChanged("SelectedEpisodeDetails");
            }
        }

        private DataRowView selectedEncounterDetails;
        public DataRowView SelectedEncounterDetails
        {
            get
            {
                return selectedEncounterDetails;
            }
            set
             {
                selectedEncounterDetails = value;
                OnPropertyChanged("SelectedEncounterDetails");
            }
        }



        /// <summary>
        /// Disables the pharmacy sublocation.
        /// </summary>
        private void DisableOnServiceAddedIntoGrid()
        {
            //if (SelectedServiceType != (int)ServiceType.Investigation)
            //{
            var filter = from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                         where dr.RowState != DataRowState.Deleted
                         select dr;
            if (filter.Count() > 0)
            {
                IsEnabledLabOrSubLocationValue = false; //Enable
                IsServiceAddedIntoGrid = true; //Enable
            }
            else
            {
                IsEnabledLabOrSubLocationValue = true; //disable
                IsServiceAddedIntoGrid = false; //disable
                IsNormalOrder = true;
                DrugDetails = string.Empty;
            }
            //}
        }


        /// <summary>
        /// Handles the Executed event of the EditService control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        private void Executed_EditService(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                IsBarCodeSearchbyManual = false;
                bool isBackUpServiceNeeded = false;
                dbOperation = DBOperation.Update;
                if (isallowvalidationBarcode)
                    Executed_RefreshItemList(null, null);
                DataRowView parameter = null;
                if (isallowvalidationBarcode)
                {
                    parameter = (e.Parameter as DataRowView);
                    EditService = parameter.Row;
                }
                else
                {
                    parameter = drMedicineRowbyManual;
                }
                if (EnableVerificationSettingBased)
                {
                    if (parameter != null && IfNullReturnZero(parameter["INV_MAST_SERVICE_ID"]) == 0)
                    {
                        LoadMedicineForVerification(0);
                    }
                    else if (parameter != null && IfNullReturnZero(parameter["IS_OMNICELL_ITEM"]) == 1)
                    {
                        LoadMedicineForVerification(Convert.ToInt16(IfNullReturnZero(IPVerificationLocation)));
                    }
                    else
                    {
                        LoadMedicineForVerification(Convert.ToInt16(IfNullReturnZero(IP_Gen_App_Sub_Location)));
                    }
                }
                if (this.IsValidService())
                {
                    if (SelectedServiceType == (int)ServiceType.IncomingService)
                    {
                    }
                    if (SelectedServiceType == (int)ServiceType.Pharmacy && parameter["INV_MAST_SERVICE_ID"] == DBNull.Value && parameter["GENERIC_ID"] != DBNull.Value)
                    {
                        //BugId 33378 Start
                        isBackUpServiceNeeded = true;
                        ServicesTemp = dsServiceData.Tables["INV_MAST_SERVICE"].Copy();
                        //BugId 33378 End
                        dsServiceData.Tables["INV_MAST_SERVICE"].DefaultView.RowFilter = "GENERIC_ID=" + parameter["GENERIC_ID"];
                        Services = dsServiceData.Tables["INV_MAST_SERVICE"].DefaultView.ToTable();
                        if (Services.Rows.Count == 1)
                        {
                            SelectedService = Services.DefaultView[0];
                        }
                    }
                    else
                    {
                        SelectedService = parameter;
                    }

                    //lOCATION 
                    if (SelectedServiceType == (int)ServiceType.Investigation)// to reset the default lab. 
                    {
                        if (dsCharge != null && dsCharge.Tables.Contains("INV_PAT_BILLING_TEMP") &&
                           dsCharge.Tables["INV_PAT_BILLING_TEMP"].Rows.Count > 0)
                        {
                            dsCharge.Tables["INV_PAT_BILLING_TEMP"].Rows[0].ItemArray = parameter.Row.ItemArray;
                        }

                        DataTable Loc = dsServiceData.Tables["INV_EXTERNAL_LAB"].Copy();
                        Loc.DefaultView.RowFilter = "INV_MAST_SERVICE_ID=" + parameter["INV_MAST_SERVICE_ID"] + " AND HOSPITAL_ID=" + InvestigationData.HospitalID
                            + " AND ISVALID=1";
                        Location = Loc.DefaultView;
                        if (Location != null && parameter["INCO_MAST_ID"] != DBNull.Value && Location.ToTable().Select("INCO_MAST_ID=" + parameter["INCO_MAST_ID"]).Length > 0)
                        {
                            SelectedLocationValue = Convert.ToInt64(Location.ToTable().Select("INCO_MAST_ID=" + parameter["INCO_MAST_ID"])[0]["INCO_MAST_ID"]);
                            //DataRow dr = Location.ToTable().Select("INCO_MAST_ID=" + parameter["INCO_MAST_ID"]).First();
                            //DataTable dtTemp = Location.ToTable();
                            //SelectedLocation = dtTemp.DefaultView[Location.ToTable().Rows.IndexOf(dr)];
                        }

                        

                        txtServiceRemarks = Convert.ToString(parameter.Row["REMARKS"]);
                        FillPriority();
                        if (EditService != null && EditService["PRIORITY"] != DBNull.Value)
                        {
                            DataRow[] drPriority = DtTestPriority.Select("PriorityId=" + Convert.ToInt16(EditService["PRIORITY"]));
                            if (drPriority.Length > 0)
                            {
                                SelectedPriority = DtTestPriority.DefaultView[DtTestPriority.Rows.IndexOf(drPriority[0])];
                            }
                        }
                    }

                    if (parameter["INV_MAST_SERVICE_ID"] != DBNull.Value)
                        ServiceName = parameter.Row["NAME"].ToString();
                    //if (SelectedServiceType == (int)ServiceType.Pharmacy)
                    if (SelectedItemServiceType == (int)ServiceType.Pharmacy)
                    {
                        //IsPharmacySelected = true;
                        if (!IsUSSettingEnable && EditService["MEDICINE_CODE"] != DBNull.Value)
                        {
                            BatchAll.DefaultView.RowFilter = "MEDICINE_CODE=" + EditService["MEDICINE_CODE"];
                            BatchOrUnit = BatchAll.DefaultView.ToTable();
                            //DataTable dtExpired = CommonData.GetDefaultSettings(0, "IS_VISIBILE_EXPIRED_MEDICINES");
                            //if (dtExpired != null && dtExpired.Rows.Count > 0)
                            //{
                            //if (Convert.ToInt32(dtExpired.Rows[0]["VALUE"]) == 0)
                            if (DefaultSettings.Values.IS_VISIBILE_EXPIRED_MEDICINES == false)
                            {
                                if (BatchOrUnit != null)
                                {
                                    var Query = BatchOrUnit.AsEnumerable()
                                        .Where(x => Convert.ToDateTime(x["EXPDATE"]) > DateTime.Today)
                                        .Select(x => x);
                                    if (Query.Count() > 0)
                                    {
                                        DataTable dtTemp = new DataTable();
                                        dtTemp = Query.CopyToDataTable();
                                        BatchOrUnit = null;
                                        BatchOrUnit = dtTemp;
                                    }
                                    else
                                    {
                                        BatchOrUnit = null;
                                    }
                                }
                            }
                            //}
                        }
                        
                        SelectedBatchOrUnitIndex = 0;
                        SelectedBatchOrUnitValue = EditService["BATCHNO"].ToString();
                        this.SetMedicineDetails(EditService["BATCHNO"].ToString());
                        if (UnitSalesConversionApplicable && PharamacyUnitSales.KIIsNotNullAndRowCount())
                        {
                            SelectedPharamacyUnitSalesIndex = 0;
                            SelectedPharamacyUnitSalesValue = EditService["PH_UNIT_SALES_CONVERSION_ID"] != DBNull.Value
                                ? Convert.ToInt64(EditService["PH_UNIT_SALES_CONVERSION_ID"]) : 0;
                        }
                        if (EditService["INV_MAST_SERVICE_ID"] != DBNull.Value)
                            GetMedicineDetails(Convert.ToInt64(EditService["INV_MAST_SERVICE_ID"]));
                        else
                        {
                            if (!isBackUpServiceNeeded)//BugId 33378
                            {
                                ServicesTemp = Services.Copy();
                            }
                            Services.DefaultView.RowFilter = "GENERIC_ID=" + EditService["GENERIC_ID"];
                            Services = Services.DefaultView.ToTable();
                        }
                        EditService["ISSALE"] = false;
                        EditService["ISLABEL"] = false;
                    }
                    if (isallowvalidationBarcode)
                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0].ItemArray = (e.Parameter as DataRowView).Row.ItemArray;
                    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0].ItemArray = EditService.ItemArray;
                    Quantity = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["QTY"] != DBNull.Value
                        ? Convert.ToDecimal(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["QTY"]) : 1;
                    //Bug ID-17490
                    //SelectedLocationValue = EditService["INCO_MAST_ID"] != DBNull.Value ? Convert.ToInt64(EditService["INCO_MAST_ID"] != DBNull.Value) : 0;
                    IsServiceNameEnable = false;
                    if (SelectedServiceType == (int)ServiceType.Investigation)// to reset the default lab. 
                    {
                        BillData.Tables["INV_PAT_BILLING_RESET"].Rows[0].ItemArray = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0].ItemArray;
                    }
                    if (SelectedServiceType == (int)ServiceType.Pharmacy)
                    {
                        if (EditService["INV_MAST_SERVICE_ID"] != DBNull.Value && Generic.KIIsNotNullAndRowCount())
                        {
                            DataRow drRow = null;
                            drRow = Generic.Rows[0];
                            SelectedGeneric = Generic.DefaultView[Generic.Rows.IndexOf(drRow)];
                            ServiceGenirc = Convert.ToString(SelectedGeneric["LOOKUP_VALUE"]);
                        }
                        else
                        {
                            DataRow drRow = null;
                            if (Generic.KIIsNotNullAndRowCount() && Generic.Select("LOOKUP_VALUE='" + EditService["NAME"] + "'").Count() > 0)
                            {
                                drRow = Generic.Select("LOOKUP_VALUE='" + EditService["NAME"] + "'").First();
                                SelectedGeneric = Generic.DefaultView[Generic.Rows.IndexOf(drRow)];
                                ServiceGenirc = Convert.ToString(SelectedGeneric["LOOKUP_VALUE"]);
                            }
                        }
                        DataTable dtMedicineCriteria = new DataTable("SEARCH_CRITERIA");
                        dtMedicineCriteria.Columns.Add("RECOMMEND_DOSE_ID");
                        dtMedicineCriteria.Rows.Add(DBNull.Value);
                        MainEMRShared objEMRShared = new MainEMRShared();
                        Route = objEMRShared.GetEMRDrugRoutes(dtMedicineCriteria);
                        if (Route.KIIsNotNullAndRowCount())
                        {
                            dtMedicineCriteria = new DataTable("SEARCH_CRITERIA");
                            dtMedicineCriteria.Columns.Add("EMR_PH_ROUTE_ID");
                            dtMedicineCriteria.Rows.Add(Route.Rows[0]["EMR_PH_ROUTE_ID"]);
                            Form = objEMRShared.GetEMRDrugForms(dtMedicineCriteria);
                        }
                        Urgency = objCommon.EnumToDataTable(typeof(Enumerators.EMR.MedicinePriority), "KEY", "VALUE");
                        DrugUnit = DrugUnitTemp;
                        Frequency = FrequencyTemp;
                        if (BillData.Tables.Contains("PH_PAT_DTLS_ORDER") && BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Count > 0
                            && parameter["INV_MAST_SERVICE_ID"] != DBNull.Value)
                        {
                            DataRow drPatOrder = null;
                            if (BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + parameter["INV_MAST_SERVICE_ID"] + "AND SL_NO=" + parameter["SL_NO"]).Count() > 0)
                            {
                                drPatOrder = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + parameter["INV_MAST_SERVICE_ID"] + "AND SL_NO=" + parameter["SL_NO"]).First();
                            }
                            DataRow dr = null;                            
                            if (drPatOrder != null)
                            {                                
                                if (drPatOrder["EMR_PAT_DTLS_PH_ORDER_ID"] != DBNull.Value)
                                {
                                    isEmrOrder = true;
                                }
                                if (Route.KIIsNotNullAndRowCount() && drPatOrder["ROUTE"] != DBNull.Value
                                    && Route.Select("ROUTE='" + drPatOrder["ROUTE"] + "'").Length > 0)
                                {
                                    dr = Route.Select("ROUTE='" + drPatOrder["ROUTE"] + "'").First();
                                    SelectedRoute = Route.DefaultView[Route.Rows.IndexOf(dr)];
                                }
                                OnselectedRouteChanged();
                                if (Form.KIIsNotNullAndRowCount() && drPatOrder["FORM"] != DBNull.Value &&
                                     Form.Select("FORM='" + drPatOrder["FORM"] + "'").Length > 0)
                                {
                                    dr = Form.Select("FORM='" + drPatOrder["FORM"] + "'").First();
                                    SelectedForm = Form.DefaultView[Form.Rows.IndexOf(dr)];
                                }
                                Duratioin = fillDuration();
                                if (Duratioin.KIIsNotNullAndRowCount() && drPatOrder["DURATION_TYPE"] != DBNull.Value &&
                                    Duratioin.Select("KEY=" + drPatOrder["DURATION_TYPE"]).Length > 0)
                                {
                                    dr = Duratioin.Select("KEY=" + drPatOrder["DURATION_TYPE"]).First();
                                    SelectedDuratioin = Duratioin.DefaultView[Duratioin.Rows.IndexOf(dr)];
                                }
                                if (FrequencyTemp.KIIsNotNullAndRowCount() && drPatOrder["FREQUENCY"] != DBNull.Value &&
                                    Convert.ToString(drPatOrder["FREQUENCY"]) != string.Empty &&
                                    FrequencyTemp.Select("EMR_LOOKUP_ID=" + drPatOrder["FREQUENCY"]).Length > 0)
                                {
                                    //SelectedFrequencyvalue = IfNullReturnZero(drPatOrder["FREQUENCY"]);
                                    dr = Frequency.Select("EMR_LOOKUP_ID=" + drPatOrder["FREQUENCY"]).First();
                                    SelectedFrequency = FrequencyTemp.DefaultView[FrequencyTemp.Rows.IndexOf(dr)];
                                }
                                //if (AdminInstruction.KIIsNotNullAndRowCount() && drPatOrder["ADMINISTRATION_INSTRUCTION"] != DBNull.Value &&
                                //   Convert.ToString(drPatOrder["ADMINISTRATION_INSTRUCTION"]) != string.Empty &&
                                //     AdminInstruction.Select("LOOKUP_VALUE='" + Convert.ToString(drPatOrder["ADMINISTRATION_INSTRUCTION"]) + "'").Length > 0)
                                //{
                                //    dr = AdminInstruction.Select("LOOKUP_VALUE='" + Convert.ToString(drPatOrder["ADMINISTRATION_INSTRUCTION"]) + "'").First();
                                //    SelectedAdmnInst = AdminInstruction.DefaultView[AdminInstruction.Rows.IndexOf(dr)];
                                //}
                                if (drPatOrder["ADMINISTRATION_INSTRUCTION"] != DBNull.Value)
                                {
                                    AdmnInstName = Convert.ToString(drPatOrder["ADMINISTRATION_INSTRUCTION"]);
                                }
                                StrDuration = Convert.ToString(drPatOrder["DURATION"]);
                                StrUnit = Convert.ToString(drPatOrder["QUANTITY"]);
                                Remarks = Convert.ToString(drPatOrder["REMARKS"]);
                                StartDate = Convert.ToDateTime(drPatOrder["START_DATE"]);
                                StrDrugUnit = Convert.ToString(drPatOrder["DOSE"]);
                                if (drPatOrder["EMR_PAT_DTLS_PH_ORDER_ID"] != DBNull.Value)
                                {
                                    IsNormalOrder = false;                                    
                                }
                                if (drPatOrder["PRIORITY"] != DBNull.Value &&
                                    Urgency.Select("KEY=" + drPatOrder["PRIORITY"]).Length > 0)
                                {
                                    dr = Urgency.Select("KEY=" + drPatOrder["PRIORITY"]).First();
                                    SelectedUrgency = Urgency.DefaultView[Urgency.Rows.IndexOf(dr)];
                                }
                                if (DrugUnitTemp.KIIsNotNullAndRowCount() && drPatOrder["DOSE_UNIT"] != DBNull.Value &&
                                    DrugUnitTemp.Select("LOOKUP_VALUE='" + drPatOrder["DOSE_UNIT"] + "'").Length > 0)
                                {
                                    dr = DrugUnit.Select("LOOKUP_VALUE='" + drPatOrder["DOSE_UNIT"] + "'").First();
                                    SelectedDose = DrugUnitTemp.DefaultView[DrugUnitTemp.Rows.IndexOf(dr)];
                                }
                                if (drPatOrder["HOURLY"] != DBNull.Value)
                                {
                                    StrFreqHours = Convert.ToString(drPatOrder["HOURLY"]);
                                }
                                if (PharamacyUnitSales != null && PharamacyUnitSales.Rows.Count > 0)
                                {
                                    var Query = pharamacyUnitSales.AsEnumerable()
                                         .Where(x => x["INV_MAST_SERVICE_ID"] != DBNull.Value && x["TO_UNIT_NAME"] != DBNull.Value &&
                                       Convert.ToInt64(x["INV_MAST_SERVICE_ID"]) == Convert.ToInt64(drPatOrder["BRAND_ID"]) &&
                                       Convert.ToString(x["TO_UNIT_NAME"]) == Convert.ToString(drPatOrder["QUANTITY_UNIT"]))
                                         .Select(x => x);
                                    if (Query.Count() > 0)
                                    {
                                        dr = Query.First();
                                        SelectedPharamacyUnitSales = PharamacyUnitSales.DefaultView[PharamacyUnitSales.Rows.IndexOf(dr)];
                                    }
                                }
                            }
                            if (EditService["IS_STOCK_EXIST"] != DBNull.Value && Convert.ToInt16(EditService["IS_STOCK_EXIST"]) == 1)
                            {
                                IsGeneric = true;
                            }
                        }
                        else
                        {
                            if (EditService["INV_MAST_SERVICE_ID"] == DBNull.Value && EditService["GENERIC_ID"] != DBNull.Value)
                            {
                                DataRow drItem = this.GetEMRCPOEPrescription(EditService);
                                DataRow dr = null;
                                if (drItem != null)
                                {
                                    if (Route.KIIsNotNullAndRowCount() && drItem["ROUTE"] != DBNull.Value
                                        && Route.Select("ROUTE='" + drItem["ROUTE"] + "'").Length > 0)
                                    {
                                        dr = Route.Select("ROUTE='" + drItem["ROUTE"] + "'").First();
                                        SelectedRoute = Route.DefaultView[Route.Rows.IndexOf(dr)];
                                    }
                                    OnselectedRouteChanged();
                                    if (Form.KIIsNotNullAndRowCount() && drItem["FORM"] != DBNull.Value &&
                                         Form.Select("FORM='" + drItem["FORM"] + "'").Length > 0)
                                    {
                                        dr = Form.Select("FORM='" + drItem["FORM"] + "'").First();
                                        SelectedForm = Form.DefaultView[Form.Rows.IndexOf(dr)];
                                    }
                                    Duratioin = fillDuration();
                                    if (Duratioin.KIIsNotNullAndRowCount() && drItem["DURATION_TYPE"] != DBNull.Value &&
                                        Duratioin.Select("KEY=" + drItem["DURATION_TYPE"]).Length > 0)
                                    {
                                        dr = Duratioin.Select("KEY=" + drItem["DURATION_TYPE"]).First();
                                        SelectedDuratioin = Duratioin.DefaultView[Duratioin.Rows.IndexOf(dr)];
                                    }
                                    if (FrequencyTemp.KIIsNotNullAndRowCount() && drItem["FREQUENCY"] != DBNull.Value &&
                                        Convert.ToString(drItem["FREQUENCY"]) != string.Empty &&
                                        FrequencyTemp.Select("EMR_LOOKUP_ID=" + drItem["FREQUENCY"]).Length > 0)
                                    {
                                        //SelectedFrequencyvalue = IfNullReturnZero(drPatOrder["FREQUENCY"]);
                                        dr = FrequencyTemp.Select("EMR_LOOKUP_ID=" + drItem["FREQUENCY"]).First();
                                        SelectedFrequency = FrequencyTemp.DefaultView[FrequencyTemp.Rows.IndexOf(dr)];
                                        if (drItem.Table.Columns.Contains("FREQUENCY_VALUE") && drItem["FREQUENCY_VALUE"] != DBNull.Value && IfNullReturnZero(drItem["FREQUENCY"]) == 2733)
                                        {
                                            StrFreqHours = Convert.ToString(drItem["FREQUENCY_VALUE"]);
                                        }
                                    }
                                    //if (AdminInstruction.KIIsNotNullAndRowCount() && drPatOrder["ADMINISTRATION_INSTRUCTION"] != DBNull.Value &&
                                    //   Convert.ToString(drPatOrder["ADMINISTRATION_INSTRUCTION"]) != string.Empty &&
                                    //     AdminInstruction.Select("LOOKUP_VALUE='" + Convert.ToString(drPatOrder["ADMINISTRATION_INSTRUCTION"]) + "'").Length > 0)
                                    //{
                                    //    dr = AdminInstruction.Select("LOOKUP_VALUE='" + Convert.ToString(drPatOrder["ADMINISTRATION_INSTRUCTION"]) + "'").First();
                                    //    SelectedAdmnInst = AdminInstruction.DefaultView[AdminInstruction.Rows.IndexOf(dr)];
                                    //}
                                    if (drItem["ADMINISTRATION_INSTRUCTION"] != DBNull.Value)
                                    {
                                        AdmnInstName = Convert.ToString(drItem["ADMINISTRATION_INSTRUCTION"]);
                                    }
                                    StrDuration = Convert.ToString(drItem["DURATION"]);
                                    if (IfNullReturnZero(drItem["QUANTITY"]) > 0)
                                        StrUnit = Convert.ToString(drItem["QUANTITY"]);
                                    Remarks = Convert.ToString(drItem["REMARKS"]);
                                    StartDate = Convert.ToDateTime(drItem["START_DATE"]);
                                    StrDrugUnit = Convert.ToString(drItem["QUANTITY"]);
                                    if (drItem["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value)
                                    {
                                        IsNormalOrder = false;
                                        isEmrOrder = true;
                                    }                                    
                                    if (drItem["PRIORITY"] != DBNull.Value &&
                                        Urgency.Select("KEY=" + drItem["PRIORITY"]).Length > 0)
                                    {
                                        dr = Urgency.Select("KEY=" + drItem["PRIORITY"]).First();
                                        SelectedUrgency = Urgency.DefaultView[Urgency.Rows.IndexOf(dr)];
                                    }
                                    if (DrugUnitTemp.KIIsNotNullAndRowCount() && drItem["QUANTITY_UNIT"] != DBNull.Value &&
                                        DrugUnitTemp.Select("LOOKUP_VALUE='" + drItem["QUANTITY_UNIT"] + "'").Length > 0)
                                    {
                                        dr = DrugUnitTemp.Select("LOOKUP_VALUE='" + drItem["QUANTITY_UNIT"] + "'").First();
                                        SelectedDose = DrugUnit.DefaultView[DrugUnitTemp.Rows.IndexOf(dr)];
                                    }
                                }
                                IsGeneric = true;
                            }
                        }
                        EnableControl();
                        if (PharamacyUnitSales.KIIsNotNullAndRowCount() && EditService["PH_UNIT_SALES_CONVERSION_ID"] != DBNull.Value)
                        {
                            DataRow[] dr = PharamacyUnitSales.Select("PH_UNIT_SALES_CONVERSION_ID=" + Convert.ToInt64(EditService["PH_UNIT_SALES_CONVERSION_ID"]));
                            if (dr.Length > 0)
                            {
                                SelectedPharamacyUnitSales = PharamacyUnitSales.DefaultView[PharamacyUnitSales.Rows.IndexOf(dr[0])];
                            }
                        }
                    }
                    IsEditExecuted = true;
                    if (IsFromPharmacyPanel && EnableVerificationSettingBased && SelectedServiceType == (int)ServiceType.Pharmacy &&
                      IfNullReturnZero(EditService["VERIFICATION_BTN_VISIBILITY"]) == 1 && IfNullReturnZero(EditService["IS_VERIFIED"]) == 0)
                    {
                        IsSubstitution = true;
                    }
                    if (SelectedServiceType == (int)ServiceType.Investigation && EditService.Table.Columns.Contains("INV_PARENT_CATEGORY_ID") && IfNullReturnZero(EditService["INV_PARENT_CATEGORY_ID"]) == 5)
                    {
                        isPharmacyInServiceBilling = true;
                    }
                    if (EnableVerificationSettingBased && SelectedVisitModeNew == (int)VisitMode.IP &&
                                  IfNullReturnZero(EditService["EMR_PAT_DTLS_MEDICATION_ID"]) > 0 &&
                                   IfNullReturnZero(EditService["IS_VERIFIED"]) == 1)
                    {
                        IsVerifiedItemEditExecuted = true;
                    }
                    if (CostCenter != null && parameter["COST_CENTER_ID"] != DBNull.Value && CostCenter.Select("H_ADMIN_DEPT_DEPTID=" + parameter["COST_CENTER_ID"]).Length > 0)
                    {
                        SelectedCostCenterValue = Convert.ToInt64(CostCenter.Select("H_ADMIN_DEPT_DEPTID=" + parameter["COST_CENTER_ID"])[0]["H_ADMIN_DEPT_DEPTID"]);
                    }
                }
            }
            catch (Exception)
            {
                throw;
                //ExceptionHandler.WriteErrorLog(ex);
            }
        }

        private void EnableControl()
        {
            try
            {
                TextBox txtDose = UcPharmacyOrderDtls.FindName("txtDose") as TextBox;
                ComboBox cbxDose = UcPharmacyOrderDtls.FindName("cbxDose") as ComboBox;
                ComboBox cbxRoute = UcPharmacyOrderDtls.FindName("cbxRoute") as ComboBox;
                ComboBox cbxForm = UcPharmacyOrderDtls.FindName("cbxForm") as ComboBox;
                if (EditService != null && EditService.Table.Rows.Count>0)
                {
                    if (IsGeneric || IfNullReturnZero(EditService["IS_GENERIC_AGAINST"]) == 1)
                    {
                        if (txtDose != null)
                            txtDose.IsEnabled = true;
                        if (cbxDose != null)
                            cbxDose.IsEnabled = true;
                        //if (txtDose != null)
                        //{
                        //    Dispatcher.BeginInvoke(
                        //       DispatcherPriority.ContextIdle,
                        //               new Action(delegate()
                        //               {
                        //                   txtDose.IsEnabled = false;
                        //               }));
                        //}
                    }
                    if (!IsNormalOrder)
                    {
                        if (cbxRoute != null)
                            cbxRoute.IsEnabled = true; //false New Changes
                        if (cbxForm != null)
                            cbxForm.IsEnabled = true;  //false
                        if (!IsGeneric)
                        {
                            if (txtDose != null)
                                txtDose.IsEnabled = false;  
                            if (cbxDose != null)
                                cbxDose.IsEnabled = false; 
                        }
                    }
                }
                else
                {
                    if (cbxRoute != null)
                        cbxRoute.IsEnabled = true;
                    if (cbxForm != null)
                        cbxForm.IsEnabled = true;
                    if (txtDose != null)
                        txtDose.IsEnabled = true;
                    if (cbxDose != null)
                        cbxDose.IsEnabled = true;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Executed_EpisodePopUP(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {

                //add on 06/june/2014, clear all datas defore clicking on episode
                isEpisodePopUpSelected = true;// Bug ID-25098     
                ClearBillServiceTypeBased(false);
                isEpisodePopUpSelected = false;// Bug ID-25098     
                Infologics.Medilogics.CommonSharedUI.BillingView.UcPatientEpisodeDetails objUcPatientEpisodeDetails = new Infologics.Medilogics.CommonSharedUI.BillingView.UcPatientEpisodeDetails();
                CommonWindow objWin = new CommonWindow(WindowControlBoxStyle.None);
                objUcPatientEpisodeDetails.MRNO = PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Columns.Contains("MRNO")
                    && PatientInformation.Rows[0]["MRNO"] != DBNull.Value ? Convert.ToString(PatientInformation.Rows[0]["MRNO"]) : "";
                objUcPatientEpisodeDetails.IsEpisode = true;
                objUcPatientEpisodeDetails.IsArrangeCpoeColumn = true; // For Rearranging Columns
                objWin.Content = objUcPatientEpisodeDetails;
                objWin.SizeToContent = SizeToContent.Manual;
                objWin.ResizeMode = ResizeMode.NoResize;
                objWin.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                objWin.Title = "Patient Open Episodes";
                CommandBinding objPatientEpisodeOk = FindResource("SelectOpenEpisode") as CommandBinding;
                objUcPatientEpisodeDetails.CommandBindings.Add(objPatientEpisodeOk);
                objWin.Width = 875;
                objWin.Height = 320;
                objWin.ShowDialog();
                dtPatientEpisodefromPopup = objUcPatientEpisodeDetails.PatientEpisode;
                if (objUcPatientEpisodeDetails.drv != null)
                {
                    isEpisodePopUpSelected = true;// Bug ID-19330
                    SelectedEpisodeDetails = objUcPatientEpisodeDetails.drv;
                    DataTable dtcriteria = new DataTable();
                    dtcriteria.Columns.Add("MODE");
                    dtcriteria.Columns.Add("MRNO");
                    dtcriteria.Columns.Add("PAT_FIN_EPISODE_ID");
                    dtcriteria.Rows.Add(2, objUcPatientEpisodeDetails.drv.Row["MRNO"], objUcPatientEpisodeDetails.drv.Row["PAT_FIN_EPISODE_ID"]);
                    MainCommon objCommon = new MainCommon();
                    DataTable dtAllEncounterBasedOnEpisode = objCommon.SelectFinancialEncounter(dtcriteria);
                    DataTable dtActiveEncounterBasedOnEpisode = null;
                    DataTable dtClosedEncounterBasedOnEpisode = null;
                    if (dtAllEncounterBasedOnEpisode != null && dtAllEncounterBasedOnEpisode.Rows.Count > 0)
                    {
                        DataRow[] drActiveEnc = dtAllEncounterBasedOnEpisode.Select("ENCOUNTER_STATUS=1");
                        DataRow[] drClosedEnc = dtAllEncounterBasedOnEpisode.Select("ENCOUNTER_STATUS=0");
                        if (drActiveEnc != null && drActiveEnc.Length > 0)
                        {
                            dtActiveEncounterBasedOnEpisode = drActiveEnc.CopyToDataTable();
                        }
                        if (drClosedEnc != null && drClosedEnc.Length > 0)
                        {
                            dtClosedEncounterBasedOnEpisode = drClosedEnc.CopyToDataTable();
                        }
                    }
                    SelectedEMROrder = null;//handle Clearing issue
                    ////Doctor selection change no need to select Pending order
                    ClosedPatientFinEpisodeID = objUcPatientEpisodeDetails.drv.Row["PAT_FIN_EPISODE_ID"] != DBNull.Value ? Convert.ToInt64(objUcPatientEpisodeDetails.drv.Row["PAT_FIN_EPISODE_ID"]) : 0;
                    ////End
                    SelectedPatientFinEpisodeID = objUcPatientEpisodeDetails.drv.Row["PAT_FIN_EPISODE_ID"] != DBNull.Value ? Convert.ToInt64(objUcPatientEpisodeDetails.drv.Row["PAT_FIN_EPISODE_ID"]) : 0;
                    //Commented Bug ID-18855
                    if (objUcPatientEpisodeDetails.drv.Row.Table.Columns.Contains("PAT_FIN_ENCOUNTER_ID")
                        && objUcPatientEpisodeDetails.drv["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value)
                    {
                        SelectedPatientFinEncounterID = Convert.ToInt64(objUcPatientEpisodeDetails.drv["PAT_FIN_ENCOUNTER_ID"]);
                        //ClosedPatientFinEncounterID = SelectedPatientFinEncounterID;
                    }
                    else if (objUcPatientEpisodeDetails.drv.Row.Table.Columns.Contains("PAT_FIN_ENCOUNTER_ID")
                     && objUcPatientEpisodeDetails.drv["PAT_FIN_ENCOUNTER_ID"] == DBNull.Value
                     && objUcPatientEpisodeDetails.drv["PAT_FIN_EPISODE_ID"] != DBNull.Value
                     && dtActiveEncounterBasedOnEpisode.KIIsNotNullAndRowCount()
                     && dtActiveEncounterBasedOnEpisode.Rows[0]["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value)
                    {
                        DataRow[] drEpisode = dtActiveEncounterBasedOnEpisode.Select("PAT_FIN_EPISODE_ID IS NOT NULL AND PAT_FIN_EPISODE_ID=" + Convert.ToInt64(objUcPatientEpisodeDetails.drv["PAT_FIN_EPISODE_ID"]));
                        if (drEpisode.Length > 0 && drEpisode[0]["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value)
                        {
                            SelectedPatientFinEncounterID = Convert.ToInt64(drEpisode[0]["PAT_FIN_ENCOUNTER_ID"]);
                            //For fetchin advance based on active enocunter ID
                            SelectedPatientFinEncounterIDActive = Convert.ToInt64(drEpisode[0]["PAT_FIN_ENCOUNTER_ID"]);
                        }
                        //ClosedPatientFinEncounterID = SelectedPatientFinEncounterID;
                    }
                    //Bug ID-18514
                    if (dtClosedEncounterBasedOnEpisode.KIIsNotNullAndRowCount() && dtClosedEncounterBasedOnEpisode.Columns.Contains("PAT_FIN_ENCOUNTER_ID")
                        && dtClosedEncounterBasedOnEpisode.Rows[0]["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value)
                    {
                        ClosedPatientFinEncounterID = Convert.ToInt64(dtClosedEncounterBasedOnEpisode.Rows[0]["PAT_FIN_ENCOUNTER_ID"]);
                    }
                    //End
                    SelectedProviderValue = objUcPatientEpisodeDetails.drv.Row["PROVIDER_ID"] != DBNull.Value ? Convert.ToString(objUcPatientEpisodeDetails.drv.Row["PROVIDER_ID"]) : "";
                    SelectedSpecialityValue = objUcPatientEpisodeDetails.drv.Row["GEN_DEPARTMENT_ID"] != DBNull.Value ? Convert.ToString(objUcPatientEpisodeDetails.drv.Row["GEN_DEPARTMENT_ID"]) : "";
                    SelectedOpenEpisodeID = dtActiveEncounterBasedOnEpisode.KIIsNotNullAndRowCount() && dtActiveEncounterBasedOnEpisode.Columns.Contains("EPISODE_NO")
                        && dtActiveEncounterBasedOnEpisode.Rows[0]["EPISODE_NO"] != DBNull.Value ? Convert.ToString(dtActiveEncounterBasedOnEpisode.Rows[0]["EPISODE_NO"])
                        : dtClosedEncounterBasedOnEpisode.KIIsNotNullAndRowCount() && dtClosedEncounterBasedOnEpisode.Columns.Contains("EPISODE_NO")
                        && dtClosedEncounterBasedOnEpisode.Rows[0]["EPISODE_NO"] != DBNull.Value ? Convert.ToString(dtClosedEncounterBasedOnEpisode.Rows[0]["EPISODE_NO"]) : "";
                    //ENCOUNTER_NO VALID CHECKING
                    SelectedEncounterNo = CheckingEncounterNoValidity(dtActiveEncounterBasedOnEpisode);
                    IsEmergencyEncounter = objUcPatientEpisodeDetails.drv.Row["ISEMERGENCY"] != DBNull.Value ? Convert.ToBoolean(objUcPatientEpisodeDetails.drv.Row["ISEMERGENCY"]) : false;
                    IsHandOverEncounter = (objUcPatientEpisodeDetails.drv.Row.Table.Columns.Contains("ISHANDOVER") && objUcPatientEpisodeDetails.drv.Row["ISHANDOVER"] != DBNull.Value
                        && Convert.ToBoolean(objUcPatientEpisodeDetails.drv.Row["ISHANDOVER"])) ? true : false;
                    //END
                    isEpisodePopUpSelected = false;
                }
                FetchCopayAmountUsed();
                OnSchemeSelectionChanged(SelectedPatientFinEncounterID);
            }
            catch (Exception ex)
            {
                throw ;
            }
        }
        #endregion

        #region Adjustment

        private void Executed_LoadAdjustment(object sender, ExecutedRoutedEventArgs e)
        {
            if (BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0 && BillData.Tables["INV_PAT_BILLING"].Select("ISSALE=" + true).Length > 0)
            {
                Infologics.Medilogics.Billing.UIControls.Billing.UIBillAdjustments objAdjustment = new UIControls.Billing.UIBillAdjustments();
                CommonWindow objWin = new CommonWindow(WindowControlBoxStyle.OnlyWithClose);
                objAdjustment.IsFinalBilling = false;
                DataSet dsAdjusment = new DataSet();
                dsAdjusment = load_Adjustment();
                objAdjustment.Services = dsAdjusment.Tables["SERVICES"];
                objAdjustment.ServicesCopy = dsAdjusment.Tables["SERVICES"];
                var GrossAmount = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                 .Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]) == true)
                                 .Select(s => s.Field<decimal>("GROSS_AMOUNT")).Sum();
                decimal scheme_discount = 0;
                scheme_discount = (from drSum in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                   where drSum["SCHEME_DISCOUNT"] != DBNull.Value
                                   select Convert.ToDecimal(drSum["SCHEME_DISCOUNT"])).Sum();
                objAdjustment.GrossAmount = GrossAmount;
                DataRow[] TempQuery = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
              .Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]) == true)
              .Select(x => x).ToArray();
                if (BillData.Tables["GEN_BILL_DISCOUNT"] != null && BillData.Tables["GEN_BILL_DISCOUNT"].Rows.Count > 0
                    && dtTempServiceDetails.Rows.Count == TempQuery.Count())
                {
                    var tempGrossAmount = dtTempServiceDetails.AsEnumerable()
                         .Select(s => s.Field<decimal>("AMOUNT")).Sum();
                    objAdjustment.IsFirstTime = true;
                    objAdjustment.ServiceDetails = dtTempServiceDetails;
                    objAdjustment.GenBillDiscount = BillData.Tables["GEN_BILL_DISCOUNT"];
                    objAdjustment.SelectedAdjustmentType = tempselectedAdjustmentType;
                    objAdjustment.SelectedAuthorizedBy = tempselectedAuthorizationType;
                    objAdjustment.AuthorizedProviderId = Convert.ToString(tempselectedAuthorizationType["EMPLOYEE_ID"]);
                    objAdjustment.NetAmount = tempGrossAmount + tempAdjustmentAmount;
                    objAdjustment.TotalAdjustemnts = tempAdjustmentAmount;
                    objAdjustment.StrRemarks = Convert.ToString(dtTempGenBillDiscount.Rows[0]["REMARKS"]);
                    objAdjustment.IsAdjModeChangeEnabled = false;
                    //objAdjustment.RangeDtls = tempRange;
                    objAdjustment.Authorization = dttempAutorization;
                    objAdjustment.AdjustmentType = dttempAdjustmenttype;
                    objAdjustment.IncreaseDecreaseMode = tempIncreasingMode;
                    objAdjustment.GrossAmount = tempGrossAmount;
                    objAdjustment.IsFirstTime = false;
                }
                else
                {
                    objAdjustment.ServiceDetails = dsAdjusment.Tables["ServiceDetails"];
                    objAdjustment.GenBillDiscount = BillData.Tables["GEN_BILL_DISCOUNT"].Clone();
                    objAdjustment.GenBillDiscount.Rows.Add();
                    objAdjustment.SetRangeOnLoad();
                    objAdjustment.NetAmount = ToBeCollected;
                    //objAdjustment.TotalAdjustemnts = 0;
                    objAdjustment.TotalAdjustemnts = TotalAdjustment;
                }
                if (BillData.Tables["INV_PAT_BILLING"].Select("PROVIDER_DISCOUNT_AMOUNT <0").Length > 0)
                {
                    objAdjustment.IsAdjModeChangeEnabled = false;
                }
                objWin.Content = objAdjustment;
                objWin.Title = "Adjustment";
                objWin.SizeToContent = SizeToContent.WidthAndHeight;
                objWin.ResizeMode = ResizeMode.NoResize;
                objWin.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                objWin.Owner = Window.GetWindow(this);
                objWin.ShowDialog();
                if (objAdjustment.SelectedAdjustmentType != null && objAdjustment.SelectedAuthorizedBy != null
                    && objAdjustment.GenBillDiscount.Rows[0]["EMPLOYEE_ID"] != DBNull.Value && objAdjustment.GenBillDiscount.Rows[0]["REMARKS"] != DBNull.Value
                    && Convert.ToString(objAdjustment.GenBillDiscount.Rows[0]["REMARKS"]) != string.Empty && !objAdjustment.IsClose)
                //&& objAdjustment.RangeFrom != null
                {
                    tempselectedAdjustmentType = objAdjustment.SelectedAdjustmentType;
                    tempselectedAuthorizationType = objAdjustment.SelectedAuthorizedBy;
                    tempTobecollected = objAdjustment.GrossAmount;
                    dtTempServiceDetails = objAdjustment.ServiceDetails.Copy();
                    dtTempGenBillDiscount = objAdjustment.GenBillDiscount.Copy();
                    if (BillData.Tables["GEN_BILL_DISCOUNT"].Rows.Count == 0)
                    {
                        BillData.Tables["GEN_BILL_DISCOUNT"].Merge(dtTempGenBillDiscount.Copy());
                    }
                    else
                    {
                        BillData.Tables["GEN_BILL_DISCOUNT"].Rows[0].ItemArray = dtTempGenBillDiscount.Rows[0].ItemArray;
                    }
                    tempAdjustmentAmount = objAdjustment.TotalAdjustemnts;
                    dttempAutorization = objAdjustment.Authorization;
                    dttempAdjustmenttype = objAdjustment.AdjustmentType;
                    //tempRange = objAdjustment.RangeDtls;
                    ToBeCollected = tempTobecollected + tempAdjustmentAmount;
                    TotalAdjustment = tempAdjustmentAmount;
                    tempIncreasingMode = objAdjustment.IncreaseDecreaseMode;
                }
                else
                {
                    BillData.Tables["GEN_BILL_DISCOUNT"].Rows.Clear();
                    if (SelectedVisitMode == (int)VisitMode.OPCASH)
                    {
                        ToBeCollected = GrossAmount;
                        //TotalAdjustment = Provadj;
                    }
                    if ((SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE")
                      && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value
                      && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.OPCASH)
                      || SelectedVisitMode == (int)VisitMode.OPCASH)
                    {
                        CalculateTotalAdjustment();
                    }
                    else
                    {
                        TotalAdjustment = 0;
                    }
                }
                if (TempQuery.Count() > 0)
                {
                    if (BillData.Tables["GEN_BILL_DISCOUNT"] != null && BillData.Tables["GEN_BILL_DISCOUNT"].Rows.Count > 0)
                    {
                        for (int i = 0; i < TempQuery.Count(); i++)
                        {

                            TempQuery[i]["REMARKS"] = BillData.Tables["GEN_BILL_DISCOUNT"].Rows[0]["REMARKS"];
                            if (IsPhamracySettingEnable || IsServiceSettingEnable)
                            {
                                //bugid 25295 1/20/2015 DJJ
                                //***********************************
                                decimal Adjustment_Amt_RoundOff = 0;
                                TempQuery[i]["ADJUSTMENT"] = objAdjustment.ServiceDetails.Rows[i]["ADJUSTMENT_AMT"];
                                //TempQuery[i]["ADJUSTMENT"] = Medilogics.General.Control.Common.MathRound(Convert.ToDecimal(TempQuery[i]["ADJUSTMENT"]), DecimalPlace);
                                TempQuery[i]["DISCOUNT_MARKUP"] = objAdjustment.ServiceDetails.Rows[i]["ADJUSTMENT_AMT"];
                                Adjustment_Amt_RoundOff = IfNullReturnZero(objAdjustment.ServiceDetails.Rows[i]["ADJUSTMENT_AMT"]);
                                Adjustment_Amt_RoundOff = Medilogics.General.Control.Common.MathRound(Adjustment_Amt_RoundOff, DecimalPlace);
                                //TempQuery[i]["NET_AMOUNT"] = IfNullReturnZero(objAdjustment.ServiceDetails.Rows[i]["PATIENT_SHARE_TEMP"]) + IfNullReturnZero(objAdjustment.ServiceDetails.Rows[i]["ADJUSTMENT_AMT"]);
                                TempQuery[i]["NET_AMOUNT"] = IfNullReturnZero(objAdjustment.ServiceDetails.Rows[i]["PATIENT_SHARE_TEMP"]) + Adjustment_Amt_RoundOff;
                                //******************************************************************
                                //end bug
                                if (SelectedVisitMode == VisitMode.OPCASH)
                                {
                                    TempQuery[i]["PATIENT_SHARE"] = IfNullReturnZero(objAdjustment.ServiceDetails.Rows[i]["PATIENT_SHARE_TEMP"]) + IfNullReturnZero(objAdjustment.ServiceDetails.Rows[i]["ADJUSTMENT_AMT"]);
                                    // TempQuery[i]["CO_PAY_AMOUNT"] = TempQuery[i]["PATIENT_SHARE"];
                                }
                                else
                                {
                                    TempQuery[i]["SPONSOR"] = IfNullReturnZero(objAdjustment.ServiceDetails.Rows[i]["SPONSOR_TEMP"]) + IfNullReturnZero(objAdjustment.ServiceDetails.Rows[i]["ADJUSTMENT_AMT"]);
                                }
                                //  TempQuery[i]["NET_AMOUNT"] = objAdjustment.ServiceDetails.Rows[i]["NET"];
                            }
                            else
                            {
                                //   TempQuery[i]["NET_AMOUNT"] = objAdjustment.ServiceDetails.Rows[i]["NET"];
                            }
                            if (BillData.Tables["GEN_BILL_DISCOUNT"].Rows[0]["DISCOUNT"] != DBNull.Value)
                            {
                                TempQuery[i]["DISCOUNT"] = dtTempServiceDetails.Rows[i]["ADJUSTMENT_AMT"];
                            }
                            else
                            {
                                TempQuery[i]["MARKUP"] = dtTempServiceDetails.Rows[i]["ADJUSTMENT_AMT"];
                            }
                        }
                    }
                    else
                    {
                        foreach (DataRow dr in BillData.Tables["INV_PAT_BILLING"].Rows)
                        {
                            if (IsPhamracySettingEnable || IsServiceSettingEnable)
                            {
                                dr["NET_AMOUNT"] = IfNullReturnZero(dr["NET_AMOUNT"]) + (-1 * IfNullReturnZero(dr["ADJUSTMENT"]));
                                // dr["NET_AMOUNT"] = dr["NET"];
                                if (SelectedVisitMode == VisitMode.OPCASH)
                                {
                                    dr["PATIENT_SHARE"] = IfNullReturnZero(dr["PATIENT_SHARE"]) + (-1 * IfNullReturnZero(dr["ADJUSTMENT"]));
                                }
                                else
                                {
                                    dr["SPONSOR"] = IfNullReturnZero(dr["SPONSOR"]) + (-1 * IfNullReturnZero(dr["ADJUSTMENT"]));
                                }
                                dr["ADJUSTMENT"] = 0;
                            }
                            else
                            {
                                //    dr["NET_AMOUNT"] = IfNullReturnZero(dr["NET_AMOUNT"]) + (-1 * IfNullReturnZero(dr["DISCOUNT"]));
                            }
                            //     dr["CO_PAY_AMOUNT"] = dr["PATIENT_SHARE"];
                            //     dr["NET_AMOUNT"] = IfNullReturnZero(dr["NET_AMOUNT"]) - (IfNullReturnZero(dr["MARKUP"]));
                            dr["DISCOUNT"] = 0;
                            dr["MARKUP"] = 0;
                            dr["REMARKS"] = DBNull.Value;
                        }
                    }
                }
                foreach (DataRow dr in BillData.Tables["INV_PAT_BILLING"].Rows)
                {
                    //bug id 23972
                    //CalculateMaxMinCopay();
                    if (Convert.ToString(dr["IS_DISPENSE"]) != "1")
                    {
                        SelectedItemServiceType = dr["SERVICE_TYPE"] != DBNull.Value ? Convert.ToInt16(dr["SERVICE_TYPE"]) : -1;
                        CalculateServiceTotal();
                    }
                }
                if (IsPhamracySettingEnable || IsServiceSettingEnable)
                {
                    ToBeCollected = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                        .Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]))
                        .Select(x => IfNullReturnZero(x["PATIENT_SHARE"])).Sum();
                    TotalAmount = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                   where dr.RowState != DataRowState.Deleted && dr["NET"] != DBNull.Value &&
                                   dr["ISSALE"] != DBNull.Value && Convert.ToBoolean(dr["ISSALE"]) == true
                                   select Convert.ToDecimal(dr["NET"])).Sum();
                    TotalNet = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                where dr.RowState != DataRowState.Deleted && dr["NET_AMOUNT"] != DBNull.Value &&
                               dr["ISSALE"] != DBNull.Value && Convert.ToBoolean(dr["ISSALE"]) == true
                                select Convert.ToDecimal(dr["NET_AMOUNT"])).Sum();
                }

            }
            else
            {
                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                  "Please select service", MessageBoxButtonType.OK, MessageBoxImages.Information);
            }
        }

        private DataSet load_Adjustment()
        {
            MainServiceShared objMainServiceShared = new MainServiceShared();
            DataTable category = objMainServiceShared.FetchCategory(0, 7, Validity.All);
            DataSet dsSet = new DataSet();
            DataTable dtFilter = new DataTable();
            dtFilter.Columns.Add("INV_PARENT_CATEGORY_ID", typeof(Int64));
            dtFilter.Columns.Add("NAME", typeof(string));
            dtFilter.Columns.Add("SERVICE_CATEGORY", typeof(Int32));
            dtFilter.Rows.Add();
            dtFilter.Rows[0]["INV_PARENT_CATEGORY_ID"] = -1;
            dtFilter.Rows[0]["NAME"] = " All";
            dtFilter.Rows[0]["SERVICE_CATEGORY"] = -1;
            DataTable ServiceDetails = new DataTable();
            ServiceDetails.Columns.Add("SERVICE_NAME", typeof(string));
            ServiceDetails.Columns.Add("BILL_AMOUNT", typeof(decimal));
            ServiceDetails.Columns.Add("ADJUSTMENT_PERC", typeof(decimal));
            ServiceDetails.Columns.Add("SCHEME_ADJUSTMENT", typeof(decimal));
            ServiceDetails.Columns.Add("ADJUSTMENT_AMT", typeof(decimal));
            ServiceDetails.Columns.Add("INV_CATEGORY_ID", typeof(decimal));
            ServiceDetails.Columns.Add("INV_PARENT_CATEGORY_ID", typeof(decimal));
            ServiceDetails.Columns.Add("AMOUNT", typeof(decimal));
            ServiceDetails.Columns.Add("SL_NO", typeof(decimal));
            ServiceDetails.Columns.Add("NET", typeof(decimal));
            ServiceDetails.Columns.Add("PATIENT_SHARE_TEMP", typeof(decimal));
            ServiceDetails.Columns.Add("SPONSOR_TEMP", typeof(decimal));
            ServiceDetails.Columns.Add("PROVIDER_DISCOUNT_AMOUNT", typeof(decimal));
            ServiceDetails.Columns.Add("PROVIDER_DISCOUNT_PERC", typeof(decimal));
            ServiceDetails.Columns.Add("TOTAL_ADJUSTMENT_AMT", typeof(decimal));
            var TempQuery = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                .Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]) == true)
                .Select(x => x);
            DataTable dtInvPatBilling = new DataTable();
            if (TempQuery.Count() > 0)
            {
                dtInvPatBilling = TempQuery.CopyToDataTable();
                for (int i = 0; i < dtInvPatBilling.Rows.Count; i++)
                {
                    ServiceDetails.Rows.Add();
                    ServiceDetails.Rows[i]["SERVICE_NAME"] = dtInvPatBilling.Rows[i]["NAME"];
                    ServiceDetails.Rows[i]["BILL_AMOUNT"] = dtInvPatBilling.Rows[i]["NET_AMOUNT"];
                    ServiceDetails.Rows[i]["SCHEME_ADJUSTMENT"] = IfNullReturnZero(dtInvPatBilling.Rows[i]["SCHEME_DISCOUNT"]) +
                        IfNullReturnZero(dtInvPatBilling.Rows[i]["SCHEME_MARKUP"]);
                    ServiceDetails.Rows[i]["INV_CATEGORY_ID"] = dtInvPatBilling.Rows[i]["INV_CATEGORY_ID"];
                    ServiceDetails.Rows[i]["ADJUSTMENT_PERC"] = 0;
                    ServiceDetails.Rows[i]["ADJUSTMENT_AMT"] = 0;
                    ServiceDetails.Rows[i]["AMOUNT"] = IfNullReturnZero(dtInvPatBilling.Rows[i]["AMOUNT"]);
                    ServiceDetails.Rows[i]["SL_NO"] = i + 1;
                    ServiceDetails.Rows[i]["NET"] = dtInvPatBilling.Rows[i]["NET_AMOUNT"];
                    ServiceDetails.Rows[i]["PATIENT_SHARE_TEMP"] = dtInvPatBilling.Rows[i]["PATIENT_SHARE"];
                    ServiceDetails.Rows[i]["SPONSOR_TEMP"] = dtInvPatBilling.Rows[i]["SPONSOR"];
                    //bugid24080
                    ServiceDetails.Rows[i]["PROVIDER_DISCOUNT_AMOUNT"] = (dtInvPatBilling.Rows[i]["PROVIDER_DISCOUNT_AMOUNT"] != DBNull.Value
                        ? Convert.ToDecimal(dtInvPatBilling.Rows[i]["PROVIDER_DISCOUNT_AMOUNT"]) : 0);
                    ServiceDetails.Rows[i]["PROVIDER_DISCOUNT_PERC"] = dtInvPatBilling.Rows[i]["PROVIDER_DISCOUNT_PERC"];
                    ServiceDetails.Rows[i]["INV_PARENT_CATEGORY_ID"] = dtInvPatBilling.Rows[i]["INV_PARENT_CATEGORY_ID"];
                    ServiceDetails.Rows[i]["TOTAL_ADJUSTMENT_AMT"] = ServiceDetails.Rows[i]["PROVIDER_DISCOUNT_AMOUNT"];

                }
                foreach (DataRow dr in dtInvPatBilling.DefaultView.ToTable(true, "INV_PARENT_CATEGORY_ID").Rows)
                {
                    var temp = (from dtTab in category.AsEnumerable()
                                where dtTab["ROOT_INV_CATEGORY_ID"] != DBNull.Value && dr["INV_PARENT_CATEGORY_ID"] != DBNull.Value
                                && dtTab["SERVICE_CATEGORY"] != DBNull.Value
                                && Convert.ToInt64(dtTab["ROOT_INV_CATEGORY_ID"]) == Convert.ToInt64(dr["INV_PARENT_CATEGORY_ID"])
                                select new
                                {
                                    PARENT_INV_CATEGORY_ID = dtTab["ROOT_INV_CATEGORY_ID"],
                                    NAME = dtTab["ROOT_INV_CATEGORY_NAME"],
                                    Medical_NonMedical = dtTab["SERVICE_CATEGORY"],
                                });
                    foreach (var row in temp)
                    {
                        var newrow = dtFilter.NewRow();
                        newrow["INV_PARENT_CATEGORY_ID"] = row.PARENT_INV_CATEGORY_ID;
                        newrow["NAME"] = row.NAME;
                        newrow["SERVICE_CATEGORY"] = row.Medical_NonMedical;
                        dtFilter.Rows.Add(newrow);
                    }
                }

                DataView dv = dtFilter.DefaultView;
                dv.Sort = "NAME ASC";
                dtFilter = dv.ToTable(true, "Name", "INV_PARENT_CATEGORY_ID", "SERVICE_CATEGORY");
                dtFilter.TableName = "SERVICES";
                ServiceDetails.TableName = "ServiceDetails";
                dsSet.Tables.Add(dtFilter);
                dsSet.Tables.Add(ServiceDetails);
            }
            return dsSet;
        }
        #endregion endAdjustment

        #region Incoming Services
        /// <summary>
        /// Loads the external lab.
        /// </summary>
        private void LoadExternalLab()
        {
            try
            {
                LabOrSubLocations = null;
                DataTable dtCriteria = new DataTable();
                dtCriteria.Columns.Add("INCO_MAST_ID");
                dtCriteria.Columns.Add("ISVALID");
                dtCriteria.Columns.Add("NAME");
                dtCriteria.Columns.Add("MODE");
                DataRow dr = dtCriteria.NewRow();
                dr["INCO_MAST_ID"] = DBNull.Value;
                dr["ISVALID"] = DBNull.Value;
                dr["NAME"] = DBNull.Value;
                dr["MODE"] = Convert.ToInt16(Status.False);
                dtCriteria.Rows.Add(dr);
                MainMasterSettings objInco = new MainMasterSettings();
                LabOrSubLocations = objInco.FetchInsuranceCorporate(dtCriteria, 1, 1).Tables[0].DefaultView;
                LabOrSubLocations.RowFilter = "GEN_PROFILE_CATEGORY_ID=" + (int)ProfileCategory.ExternalInstitutionIncomming;
            }
            catch (Exception)
            {
                throw;
            }
        }

        //Incoming service charge calculation based incoming lab..but location is always default lab  in SelectedLocation property
        private void LoadIncomingLabServices()
        {
            if (SelectedLabOrSubLocationItem != null)
            {
                BillData.Tables["SERVICE_CRITERIA"].Clear();
                DataRow dr = BillData.Tables["SERVICE_CRITERIA"].NewRow();
                if (PatientInformation != null)
                {
                    dr["AGE"] = PatientInformation.Rows[0]["AGE"];
                    dr["GENDER"] = PatientInformation.Rows[0]["GENDER"];
                    dr["VALIDATION_MODE"] = (int)ValidationMode.BasicValidation;
                }
                dr["ISVALID"] = (int)Validity.Valid;
                dr["MODE"] = 3;
                dr["HOSPITAL_ID"] = InvestigationData.HospitalID;
                dr["INCO_MAST_ID"] = SelectedLabOrSubLocationItem["INCO_MAST_ID"]; //SelectedLabOrSubLocationItem["INCO_MAST_ID"];
                BillData.Tables["SERVICE_CRITERIA"].Rows.Add(dr);
                MainServiceShared objMainServiceShared = new MainServiceShared();
                if ((SelectedServiceType == (int)ServiceType.IncomingService || SelectedServiceType == (int)ServiceType.Investigation) &&
                    BillData.Tables["SERVICE_CRITERIA"].Rows[0]["AGE"] != string.Empty
                  && BillData.Tables["SERVICE_CRITERIA"].Rows[0]["AGE"] != DBNull.Value)
                {
                    DataSet dsService = new DataSet();
                    if (FOData.DsServiceDetails != null)
                    {
                        dsService = FOData.DsServiceDetails.Copy();
                    }
                    else if (FOData.DsServiceDetails == null && DsServiceDetails != null)
                    {
                        dsService = DsServiceDetails.Copy();
                    }
                    MainBillingShared objBillingShared = new MainBillingShared();
                    dsServiceData = objBillingShared.FilterHospitalServices(dsService, BillData.Tables["SERVICE_CRITERIA"]);
                    if (dsServiceData != null)
                    {
                        if (dsServiceData.Tables["INV_MAST_SERVICE"].Columns.Contains("INCEXLCSTATUS"))
                        {
                            dsServiceData.Tables["INV_MAST_SERVICE"].Columns.Remove("INCEXLCSTATUS");
                        }
                        if (dsServiceData.Tables["INV_MAST_SERVICE"].Columns.Contains("STATUS"))
                        {
                            dsServiceData.Tables["INV_MAST_SERVICE"].Columns.Remove("STATUS");
                        }
                        dsServiceData.Tables["INV_MAST_SERVICE"].Columns.Add("INCEXLCSTATUS", typeof(int));//Inclusion=1, Exclusion=0
                        //To identify the base rate or scheme specified rate
                        dsServiceData.Tables["INV_MAST_SERVICE"].Columns.Add("STATUS", typeof(int)); //NA=2, Inclusion=1, Exclusion=0

                        foreach (DataRow item in dsServiceData.Tables["INV_MAST_SERVICE"].Rows)
                        {
                            item["INCEXLCSTATUS"] = 4;// InclusionExclusionStatus.Exclusion;
                            item["STATUS"] = InclusionExclusionStatus.Exclusion;
                        }
                        dsServiceData.Tables["INV_MAST_SERVICE"].Columns["INV_MAST_SERVICE_ID"].ColumnName = "PRIMARY_ID";
                        CategorySelectedValue = 0;
                        CategorySelectedValue = -1;
                    }
                }
            }
        }
        #endregion

        #region Delete
        private void DeleteRelatedServices(long RelatedTransID)
        {
            try
            {
                DataTable dtTemp = BillData.Tables["INV_PAT_BILLING_MINORPROC"].Copy();
                dtTemp.DefaultView.RowFilter = "RELATED_TRANSACTION_ID_TEMP=" + RelatedTransID;
                BillData.Tables["INV_PAT_BILLING_MINORPROC"].Clear();
                BillData.Tables["INV_PAT_BILLING_MINORPROC"].Merge(dtTemp.DefaultView.ToTable());
            }
            catch (Exception)
            {
                throw;
            }
        }
        #endregion

        #region Other Charge Details
        private void Executed_OtherCharge(object sender, ExecutedRoutedEventArgs e)
        {
            DataTable dtOtherCharge = new DataTable("BillOtherCharge");
            dtOtherCharge.Columns.Add("SL_NO", typeof(Int32));
            dtOtherCharge.Columns.Add("SERVICE_NAME", typeof(string));
            dtOtherCharge.Columns.Add("SERVICE_TAX", typeof(decimal));
            dtOtherCharge.Columns.Add("CO_PAY_AMOUNT", typeof(decimal));
            //dtOtherCharge.Columns.Add("DISCOUNT", typeof(decimal));
            //dtOtherCharge.Columns.Add("MARKUP", typeof(decimal));  
            dtOtherCharge.Columns.Add("BASEDON", typeof(decimal));
            dtOtherCharge.Columns.Add("DEDUCTIBLE", typeof(decimal));
            dtOtherCharge.Columns.Add("ADJUSTMENT", typeof(decimal));
            dtOtherCharge.Columns.Add("OTHER_CHARGE", typeof(decimal));
            dtOtherCharge.Columns.Add("BILL_AMOUNT", typeof(decimal));
            dtOtherCharge.Columns.Add("SPONSOR", typeof(decimal));
            dtOtherCharge.Columns.Add("TEMP_SPONSOR", typeof(decimal));
            dtOtherCharge.Columns.Add("COPAY_IN_PER", typeof(decimal));
            dtOtherCharge.Columns.Add("PATIENT_SHARETYPE", typeof(decimal));
            dtOtherCharge.Columns.Add("TEMP_PATIENT_SHARE", typeof(decimal));
            dtOtherCharge.Columns.Add("COPAY_MIN", typeof(decimal));
            dtOtherCharge.Columns.Add("COPAY_MAX", typeof(decimal));
            dtOtherCharge.Columns.Add("SERVICE_TYPE", typeof(decimal));
            dtOtherCharge.Columns.Add("INCEXLCSTATUS", typeof(decimal));
            dtOtherCharge.Columns.Add("ISNEWCASE", typeof(decimal));
            dtOtherCharge.Columns.Add("EDITED_STATUS", typeof(decimal));
            dtOtherCharge.Columns.Add("OTHER_NET_AMOUNT", typeof(decimal));
            dtOtherCharge.Columns.Add("TEMP_COPAY_AMOUNT", typeof(decimal));
            dtOtherCharge.Columns.Add("QTY", typeof(decimal));
            dtOtherCharge.Columns.Add("VISTMODE", typeof(Int32));
            dtOtherCharge.Columns.Add("IS_CONSUMPTION", typeof(Int32));
            //for max min copay
            dtOtherCharge.Columns.Add("COPAY_USED", typeof(decimal));
            dtOtherCharge.Columns.Add("COPAY_AGAINST", typeof(Int16));
            dtOtherCharge.Columns.Add("GROUP_MAX_LIMIT", typeof(decimal));
            dtOtherCharge.Columns.Add("INCO_INV_CATEGORY_ID", typeof(decimal));
            dtOtherCharge.Columns.Add("INV_MAST_SERVICE_ID", typeof(decimal));
            dtOtherCharge.Columns.Add("ACTUAL_COPAY", typeof(decimal));
            //end
            DataColumn dcPatientshare = new DataColumn("PATIENT_SHARE", typeof(decimal));
            dcPatientshare.DefaultValue = 0;
            dtOtherCharge.Columns.Add(dcPatientshare);
            DataColumn dc = new DataColumn("NET_AMOUNT", typeof(decimal));
            dc.Expression = "(BILL_AMOUNT+SERVICE_TAX+OTHER_CHARGE)+ADJUSTMENT";
            dtOtherCharge.Columns.Add(dc);
            List<decimal> beforeOtherCharge = new List<decimal>();
            List<decimal> afterOtherCharge = new List<decimal>();
            DataRow[] TempQuery = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
               .Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]) == true)
               .Select(x => x).ToArray();
            if (TempQuery.Count() > 0)
            {
                foreach (DataRow dr in TempQuery)
                {
                    beforeOtherCharge.Add(IfNullReturnZero(dr["OTHER_CHARGE"]));
                }
                if (TempQuery != null && TempQuery.Count() > 0)
                {
                    for (int i = 0; i < TempQuery.Count(); i++)
                    {
                        dtOtherCharge.Rows.Add();
                        dtOtherCharge.Rows[i]["SL_NO"] = i + 1;
                        dtOtherCharge.Rows[i]["SERVICE_NAME"] = TempQuery[i]["NAME"];
                        dtOtherCharge.Rows[i]["SERVICE_TAX"] = IfNullReturnZero(TempQuery[i]["SERVICE_TAX"]);
                        dtOtherCharge.Rows[i]["VISTMODE"] = SelectedVisitMode;
                        dtOtherCharge.Rows[i]["COPAY_USED"] = TempQuery[i]["COPAY_USED"];
                        dtOtherCharge.Rows[i]["COPAY_AGAINST"] = TempQuery[i]["COPAY_AGAINST"];
                        dtOtherCharge.Rows[i]["GROUP_MAX_LIMIT"] = TempQuery[i]["GROUP_MAX_LIMIT"];
                        dtOtherCharge.Rows[i]["INCO_INV_CATEGORY_ID"] = TempQuery[i]["INCO_INV_CATEGORY_ID"];
                        dtOtherCharge.Rows[i]["INV_MAST_SERVICE_ID"] = TempQuery[i]["INV_MAST_SERVICE_ID"];
                        dtOtherCharge.Rows[i]["ACTUAL_COPAY"] = TempQuery[i]["ACTUAL_COPAY"];
                        //if (TempQuery[i]["CO_PAY_AMOUNT"] != DBNull.Value && SelectedVisitMode == VisitMode.OPCASH)
                        //{
                        //    dtOtherCharge.Rows[i]["PATIENT_SHARE"] = IfNullReturnZero(TempQuery[i]["CO_PAY_AMOUNT"]) + IfNullReturnZero(TempQuery[i]["NET_AMOUNT"]);
                        //    dtOtherCharge.Rows[i]["PATIENT_SHARETYPE"] = 1;
                        //}
                        //else if (TempQuery[i]["DEDUCT_AMOUNT"] != DBNull.Value && SelectedVisitMode == VisitMode.OPCASH)
                        //{
                        //    dtOtherCharge.Rows[i]["PATIENT_SHARE"] = IfNullReturnZero(TempQuery[i]["DEDUCTIBLE"]) + IfNullReturnZero(TempQuery[i]["NET_AMOUNT"]);
                        //    dtOtherCharge.Rows[i]["PATIENT_SHARETYPE"] = 2;
                        //}
                        if ((IfNullReturnZero(TempQuery[i]["DISCOUNT"]) +
                             IfNullReturnZero(TempQuery[i]["SCHEME_DISCOUNT"]) + IfNullReturnZero(TempQuery[i]["PROVIDER_DISCOUNT_AMOUNT"])) < 0)
                             // Commented for bug Correction BUg ID-32569     
                             // && Convert.ToInt16(TempQuery[i]["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion)
                        {
                            dtOtherCharge.Rows[i]["ADJUSTMENT"] = IfNullReturnZero(TempQuery[i]["DISCOUNT"]) +
                                 IfNullReturnZero(TempQuery[i]["SCHEME_DISCOUNT"]) + IfNullReturnZero(TempQuery[i]["PROVIDER_DISCOUNT_AMOUNT"]);
                        }
                        else if ((IfNullReturnZero(TempQuery[i]["MARKUP"]) + IfNullReturnZero(TempQuery[i]["SCHEME_MARKUP"])) > 0)
                              // Commented for bug Correction BUg ID-32569     
                              //&& Convert.ToInt16(TempQuery[i]["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion)
                        {
                            dtOtherCharge.Rows[i]["ADJUSTMENT"] = IfNullReturnZero(TempQuery[i]["MARKUP"]) + IfNullReturnZero(TempQuery[i]["SCHEME_MARKUP"]);
                        }
                        else
                        {
                            dtOtherCharge.Rows[i]["ADJUSTMENT"] = 0;
                        }
                        //if (SelectedVisitMode != VisitMode.OPCASH)
                        //{
                        dtOtherCharge.Rows[i]["SPONSOR"] = IfNullReturnZero(TempQuery[i]["SPONSOR"]);
                        dtOtherCharge.Rows[i]["PATIENT_SHARE"] = IfNullReturnZero(TempQuery[i]["PATIENT_SHARE"]);
                        dtOtherCharge.Rows[i]["TEMP_SPONSOR"] = IfNullReturnZero(TempQuery[i]["SPONSOR"]);
                        dtOtherCharge.Rows[i]["TEMP_PATIENT_SHARE"] = IfNullReturnZero(TempQuery[i]["PATIENT_SHARE"]);
                        //}
                        dtOtherCharge.Rows[i]["BILL_AMOUNT"] = IfNullReturnZero(TempQuery[i]["AMOUNT"]);
                        dtOtherCharge.Rows[i]["OTHER_CHARGE"] = IfNullReturnZero(TempQuery[i]["OTHER_CHARGE"]);
                        if (Convert.ToInt16(TempQuery[i]["SERVICE_TYPE"]) == (int)ServiceType.Consultation)
                        {
                            dtOtherCharge.Rows[i]["COPAY_IN_PER"] = 0;
                        }
                        else if (Convert.ToInt16(TempQuery[i]["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion)
                        {
                            dtOtherCharge.Rows[i]["COPAY_IN_PER"] = IfNullReturnZero(TempQuery[i]["CO_PAY_IN_PER"]);
                        }
                        else
                        {
                            dtOtherCharge.Rows[i]["COPAY_IN_PER"] = 0;
                        }
                        dtOtherCharge.Rows[i]["BASEDON"] = TempQuery[i]["BASEDON"];
                        if (Convert.ToInt16(TempQuery[i]["SERVICE_TYPE"]) != (int)ServiceType.Consultation
                            && SelectedMastSchemeValue != CommonData.DefaultScheme
                           && Convert.ToInt16(TempQuery[i]["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion)
                        {
                            dtOtherCharge.Rows[i]["CO_PAY_AMOUNT"] = IfNullReturnZero(TempQuery[i]["CO_PAY_AMOUNT"]);
                        }
                        else if (Convert.ToInt16(TempQuery[i]["SERVICE_TYPE"]) == (int)ServiceType.Consultation
                            && IfNullReturnZero(TempQuery[i]["DEDUCTIBLE"]) == 0 && SelectedMastSchemeValue != CommonData.DefaultScheme
                           && Convert.ToInt16(TempQuery[i]["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion)
                        {
                            dtOtherCharge.Rows[i]["CO_PAY_AMOUNT"] = IfNullReturnZero(TempQuery[i]["CO_PAY_AMOUNT"]);
                        }
                        else
                        {
                            dtOtherCharge.Rows[i]["CO_PAY_AMOUNT"] = 0;
                        }
                        if (Convert.ToInt16(TempQuery[i]["SERVICE_TYPE"]) == (int)ServiceType.Consultation && TempQuery[i]["ISNEWCASE"] != DBNull.Value
                            && Convert.ToInt16(TempQuery[i]["ISNEWCASE"]) == 0)
                        {
                            dtOtherCharge.Rows[i]["DEDUCTIBLE"] = IfNullReturnZero(TempQuery[i]["DEDUCTIBLE"]);
                        }
                        else
                        {
                            dtOtherCharge.Rows[i]["DEDUCTIBLE"] = 0;
                        }
                        dtOtherCharge.Rows[i]["COPAY_MIN"] = IfNullReturnZero(TempQuery[i]["COPAY_MIN_LIMIT_AMT"]);
                        dtOtherCharge.Rows[i]["COPAY_MAX"] = IfNullReturnZero(TempQuery[i]["COPAY_MAX_LIMIT_AMT"]);
                        dtOtherCharge.Rows[i]["SERVICE_TYPE"] = Convert.ToInt16(TempQuery[i]["SERVICE_TYPE"]);
                        dtOtherCharge.Rows[i]["INCEXLCSTATUS"] = IfNullReturnZero(TempQuery[i]["INCEXLCSTATUS"]);
                        if (TempQuery[i]["ISNEWCASE"] != DBNull.Value)
                            dtOtherCharge.Rows[i]["ISNEWCASE"] = IfNullReturnZero(TempQuery[i]["ISNEWCASE"]);
                        dtOtherCharge.Rows[i]["EDITED_STATUS"] = IfNullReturnZero(TempQuery[i]["EDITED_STATUS"]);
                        dtOtherCharge.Rows[i]["OTHER_NET_AMOUNT"] = IfNullReturnZero(TempQuery[i]["NET_AMOUNT"]);
                        if (Convert.ToInt16(TempQuery[i]["SERVICE_TYPE"]) == (int)ServiceType.Investigation
                            || Convert.ToInt16(TempQuery[i]["SERVICE_TYPE"]) == (int)ServiceType.Consultation
                            || Convert.ToInt16(TempQuery[i]["SERVICE_TYPE"]) == (int)ServiceType.ADT)
                        {
                            dtOtherCharge.Rows[i]["QTY"] = Convert.ToDecimal(TempQuery[i]["QTY"]);
                        }
                        else if (Convert.ToInt16(TempQuery[i]["SERVICE_TYPE"]) == (int)ServiceType.Pharmacy)
                        {
                            dtOtherCharge.Rows[i]["QTY"] = Convert.ToDecimal(TempQuery[i]["SALES_ACTUAL_QTY"]);
                        }
                        if (SelectedServiceType == (int)ServiceType.Investigation && Convert.ToInt16(TempQuery[i]["SERVICE_TYPE"]) == (int)ServiceType.Pharmacy)
                        {
                            dtOtherCharge.Rows[i]["IS_CONSUMPTION"] = 1;
                        }
                    }
                }
                Infologics.Medilogics.Billing.UIControls.Billing.UIBillOtherChargeDetails objOtherCharge = new UIControls.Billing.UIBillOtherChargeDetails();
                CommonWindow objWin = new CommonWindow(WindowControlBoxStyle.OnlyWithClose);
                objOtherCharge.BillOtherCharge = dtOtherCharge;
                if (PatientInformation != null && PatientInformation.Rows.Count>0)
                    objOtherCharge.MRNO = Convert.ToString(PatientInformation.Rows[0]["MRNO"]);
                objOtherCharge.SelectedPatientFinEncounterID = SelectedPatientFinEncounterID;
                objOtherCharge.SelectedOpenEpisodeID = SelectedOpenEpisodeID;
                objOtherCharge.SelectedIncoPatientSchemeID = SelectedIncoPatientSchemeID;
                if (SelectedServiceType == (int)ServiceType.Pharmacy)
                {
                    objOtherCharge.IsFromEncounter = true;
                }
                else
                {
                    objOtherCharge.IsFromEncounter = false;
                }
                objOtherCharge.SelectedServiceType = SelectedServiceType;
                objOtherCharge.Onload();
                objWin.Content = objOtherCharge;
                objWin.Title = "Bill other charges";
                objWin.SizeToContent = SizeToContent.WidthAndHeight;
                objWin.ResizeMode = ResizeMode.NoResize;
                objWin.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                objWin.Owner = Window.GetWindow(this);
                objWin.ShowDialog();
                foreach (DataRow dr in objOtherCharge.BillOtherCharge.Rows)
                {
                    afterOtherCharge.Add(IfNullReturnZero(dr["OTHER_CHARGE"]));
                }
                bool isOtherChargeChanged = false;
                for (int i = 0; i < afterOtherCharge.Count; i++)
                {
                    if (!(afterOtherCharge[i] == beforeOtherCharge[i]))
                    {
                        isOtherChargeChanged = true;
                    }
                }
                DataTable dtOtherChargeTemp = objOtherCharge.BillOtherCharge.Copy();
                for (int i = 0; i < TempQuery.Count(); i++)
                {
                    if (isOtherChargeChanged)
                    {
                        //decimal tempNetAmount = IfNullReturnZero(dtOtherChargeTemp.Rows[i]["NET_AMOUNT"]);
                        //dtOtherChargeTemp.Columns["NET_AMOUNT"].Expression = string.Empty;
                        //dtOtherChargeTemp.Columns["NET_AMOUNT"].ReadOnly = false;
                        //dtOtherChargeTemp.Rows[i]["NET_AMOUNT"] = (IfNullReturnZero(dtOtherChargeTemp.Rows[i]["BILL_AMOUNT"]) +
                        //    IfNullReturnZero(dtOtherChargeTemp.Rows[i]["SERVICE_TAX"]) + IfNullReturnZero(dtOtherChargeTemp.Rows[i]["ADJUSTMENT"])
                        //    + IfNullReturnZero(dtOtherChargeTemp.Rows[i]["OTHER_CHARGE"]));
                        TempQuery[i]["OTHER_CHARGE"] = dtOtherChargeTemp.Rows[i]["OTHER_CHARGE"];
                        //if (IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TOTAL"].Rows[0]["DISCOUNT"]) < 0)
                        //{
                        //    dtOtherChargeTemp.Rows[i]["NET_AMOUNT"] = tempNetAmount +
                        //      (-1 * IfNullReturnZero(TempQuery[i]["DISCOUNT"]));
                        //}
                        //if (IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TOTAL"].Rows[0]["MARKUP"]) > 0)
                        //{
                        //    dtOtherChargeTemp.Rows[i]["NET_AMOUNT"] = tempNetAmount -
                        //        IfNullReturnZero(TempQuery[i]["MARKUP"]);
                        //}
                        //if (BillData.Tables["GEN_BILL_DISCOUNT"].Rows.Count > 0)
                        //{
                        //    TempQuery[i]["NET_AMOUNT"] = IfNullReturnZero(dtOtherChargeTemp.Rows[i]["NET_AMOUNT"])
                        //        + IfNullReturnZero(dtOtherChargeTemp.Rows[i]["OTHER_CHARGE"]);
                        //}
                        //else
                        //{
                        //    TempQuery[i]["NET_AMOUNT"] = IfNullReturnZero(dtOtherChargeTemp.Rows[i]["NET_AMOUNT"]);
                        //}
                        //   TempQuery[i]["NET_AMOUNT"] = IfNullReturnZero(dtOtherChargeTemp.Rows[i]["NET_AMOUNT"]);
                        TempQuery[i]["NET_AMOUNT"] = IfNullReturnZero(dtOtherChargeTemp.Rows[i]["NET_AMOUNT"]);
                        TempQuery[i]["SPONSOR"] = IfNullReturnZero(dtOtherChargeTemp.Rows[i]["SPONSOR"]);
                        if (SelectedVisitMode == (int)VisitMode.OPCASH)
                        {
                            bool isallow = true;
                            if (IfNullReturnZero(TempQuery[i]["DISCOUNT"]) < 0)
                            {
                                TempQuery[i]["PATIENT_SHARE"] = ((IfNullReturnZero(TempQuery[i]["BASE_CHARGE"])) + (IfNullReturnZero(TempQuery[i]["PROVIDER_DISCOUNT_AMOUNT"])))
                                    * (IfNullReturnZero(TempQuery[i]["QTY"]));
                                if (SelectedServiceType == (int)ServiceType.Pharmacy)
                                {
                                    TempQuery[i]["PATIENT_SHARE"] = IfNullReturnZero(TempQuery[i]["PATIENT_SHARE"]) * IfNullReturnZero(TempQuery[i]["BASE_QTY"]);
                                }
                                //(IfNullReturnZero(dtOtherChargeTemp.Rows[i]["PATIENT_SHARE"]))
                                //    + (-1 * IfNullReturnZero(TempQuery[i]["DISCOUNT"]));
                            }
                            else if (IfNullReturnZero(TempQuery[i]["MARKUP"]) > 0)
                            {
                                TempQuery[i]["PATIENT_SHARE"] = (IfNullReturnZero(TempQuery[i]["BASE_CHARGE"]))
                                    * (IfNullReturnZero(TempQuery[i]["QTY"]));
                                if (SelectedServiceType == (int)ServiceType.Pharmacy)
                                {
                                    TempQuery[i]["PATIENT_SHARE"] = IfNullReturnZero(TempQuery[i]["PATIENT_SHARE"]) * IfNullReturnZero(TempQuery[i]["BASE_QTY"]);
                                }
                            }
                            else
                            {
                                TempQuery[i]["PATIENT_SHARE"] = IfNullReturnZero(dtOtherChargeTemp.Rows[i]["PATIENT_SHARE"]);
                                isallow = false;
                            }
                            if (-1 * (IfNullReturnZero(dtOtherChargeTemp.Rows[i]["ADJUSTMENT"])) == IfNullReturnZero(dtOtherChargeTemp.Rows[i]["BILL_AMOUNT"]) && isallow)
                            {
                                TempQuery[i]["PATIENT_SHARE"] = IfNullReturnZero(TempQuery[i]["PATIENT_SHARE"]) + IfNullReturnZero(TempQuery[i]["OTHER_CHARGE"]);
                            }
                            else if (-1 * (IfNullReturnZero(dtOtherChargeTemp.Rows[i]["ADJUSTMENT"])) > 0 && isallow)
                            {
                                TempQuery[i]["PATIENT_SHARE"] = IfNullReturnZero(TempQuery[i]["PATIENT_SHARE"]) + IfNullReturnZero(TempQuery[i]["OTHER_CHARGE"]) +
                                    IfNullReturnZero(TempQuery[i]["SCHEME_DISCOUNT"]);
                            }
                            //     TempQuery[i]["NET_AMOUNT"] = TempQuery[i]["PATIENT_SHARE"];
                            TempQuery[i]["NET_AMOUNT"] = TempQuery[i]["PATIENT_SHARE"];
                        }
                        else
                        {
                            TempQuery[i]["PATIENT_SHARE"] = IfNullReturnZero(dtOtherChargeTemp.Rows[i]["PATIENT_SHARE"]);
                        }
                        if (SelectedVisitModeNew != (int)VisitMode.OPCASH &&
                            IfNullReturnZero(TempQuery[i]["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion
                            && IfNullReturnZero(TempQuery[i]["EDITED_STATUS"])
                            != (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.Needapprovaltoselfpay
                            && IfNullReturnZero(TempQuery[i]["EDITED_STATUS"])
                            != (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.Waitingforapprovaltoselfpay)
                        {
                            TempQuery[i]["CO_PAY_AMOUNT"] = TempQuery[i]["PATIENT_SHARE"];
                        }
                        else if (SelectedVisitModeNew != (int)VisitMode.OPCASH &&
                            IfNullReturnZero(TempQuery[i]["INCEXLCSTATUS"]) == (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion)
                        {
                            TempQuery[i]["GEN_PATIENT_SHARE"] = TempQuery[i]["PATIENT_SHARE"];
                        }
                        TempQuery[i]["DISCOUNT"] = 0;
                        TempQuery[i]["MARKUP"] = 0;
                        TempQuery[i]["ADJUSTMENT"] = 0;
                    }
                }
                if (SelectedVisitMode == (int)VisitMode.OPCASH)
                {
                    var tobecollect = (from drOtherSum in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                       where drOtherSum["PATIENT_SHARE"] != DBNull.Value && drOtherSum["PROVIDER_DISCOUNT_AMOUNT"] != DBNull.Value
                                       && drOtherSum["ISSALE"] != DBNull.Value && Convert.ToBoolean(drOtherSum["ISSALE"]) == true
                                       select (Convert.ToDecimal(drOtherSum["PATIENT_SHARE"]) + Convert.ToDecimal(drOtherSum["PROVIDER_DISCOUNT_AMOUNT"]))).Sum();
                    ToBeCollected = tobecollect;
                }
                if (isOtherChargeChanged)
                {
                    if (tempAdjustmentAmount != 0)
                    {
                        BillData.Tables["GEN_BILL_DISCOUNT"].Rows.Clear();
                        if ((SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE")
                      && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value
                      && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.OPCASH)
                      || SelectedVisitMode == (int)VisitMode.OPCASH)
                        {
                            CalculateTotalAdjustment();
                        }
                        else
                        {
                            TotalAdjustment = 0;
                        }
                        tempAdjustmentAmount = 0;
                    }
                }
                CalculateServiceTotal();
            }
            else
            {
                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                  "Please select service", MessageBoxButtonType.OK, MessageBoxImages.Information);
            }
        }
        #endregion

        decimal IfNullReturnZero(object RowToConvert)
        {
            try
            {
                decimal convert = string.IsNullOrEmpty(Convert.ToString(RowToConvert)) ? 0 : Convert.ToDecimal(RowToConvert);
                return convert;
            }
            catch (Exception ex)
            {
                throw ;
            }
        }
        // Track whether Dispose has been called.
        private bool disposed = false;
        #region IDisposable Members
        // Implement IDisposable.
        public void Dispose()
        {
            Dispose(true);
            // This object will be cleaned up by the Dispose method.
            // Therefore, you should call GC.SupressFinalize to
            // take this object off the finalization queue 
            // and prevent finalization code for this object
            // from executing a second time.
            GC.SuppressFinalize(this);

        }
        // Dispose(bool disposing) executes in two distinct scenarios.
        // If disposing equals true, the method has been called directly
        // or indirectly by a user's code. Managed and unmanaged resources
        // can be disposed.
        // If disposing equals false, the method has been called by the 
        // runtime from inside the finalizer and you should not reference 
        // other objects. Only unmanaged resources can be disposed.
        private void Dispose(bool disposing)
        {
            try
            {
                // Check to see if Dispose has already been called.
                if (!this.disposed)
                {
                    // If disposing equals true, dispose all managed 
                    // and unmanaged resources.
                    if (disposing)
                    {
                        BatchAll = null;
                        dsBillXSD = null;
                        dsSOP = null;
                        BillData = null;
                        dsServiceData = null;
                        dsBillData = null;
                        dsCharge = null;
                        objEmrShared = null;
                        BatchItemWise = null;
                        dtMedicines = null;
                        dtTemp = null;//@%.com
                    }
                    // Call the appropriate methods to clean up 
                    // unmanaged resources here.
                    // If disposing is false, 
                    // only the following code is executed.
                    //
                }
                disposed = true;
            }
            catch (Exception)
            {
                throw;
            }
        }
        #endregion
        private void CreateGPTransactionData(DataSet XSD, DataRow drInvPatBilling)
        {
            if (IsUSSettingEnable && SelectedServiceType == (int)ServiceType.Pharmacy && XSD.Tables.Contains("InvTransaction"))
            {
                DataRow drInvTransaction = XSD.Tables["InvTransaction"].NewRow();
                drInvTransaction["HospitalID"] = CommonData.ErpHospitalID;
                drInvTransaction["ItemNumber"] = SelectedBatchOrUnit.Row.Table.Columns.Contains("ITEMNUMBER")
                    ? SelectedBatchOrUnit.Row["ITEMNUMBER"] : DBNull.Value;
                DataTable dtReasonCode = ERP.GPTransaction.SOPTransaction.GetReasonCode();
                if (dtReasonCode.KIIsNotNullAndRowCount())
                {
                    var filterReasonCode = from dr in dtReasonCode.AsEnumerable()
                                           where dr.RowState != DataRowState.Deleted && dr["RecType"] != DBNull.Value
                                           && Convert.ToString(dr["RecType"]) == "add"
                                           select dr;
                    if (filterReasonCode.Count() > 0)
                    {
                        drInvTransaction["ReasonCode"] = filterReasonCode.CopyToDataTable().Rows[0]["ReasonCode"];
                    }
                }
                drInvTransaction["LocationCode"] = SelectedBatchOrUnit.Row.Table.Columns.Contains("LOCATIONCODE")
                    ? SelectedBatchOrUnit.Row["LOCATIONCODE"] : DBNull.Value;
                drInvTransaction["Quantity"] = drInvPatBilling["QTY"] != DBNull.Value ? -(Convert.ToDecimal(drInvPatBilling["QTY"])) : 0;
                drInvTransaction["LotNumber"] = drInvPatBilling["BATCHNO"];
                drInvTransaction["LotQuantity"] = drInvPatBilling["QTY"] != DBNull.Value ? (Convert.ToDecimal(drInvPatBilling["QTY"])) : 0;
                drInvTransaction["SerialList"] = DBNull.Value;
                drInvTransaction["BinCode"] = DBNull.Value;
                XSD.Tables["InvTransaction"].Rows.Add(drInvTransaction);
            }
        }
        private bool IsAssociatedService(DataRowView drvAssociationService)
        {
            ISAssociatedService = false;
            //if (EditService == null && drvAssociationService != null && drvAssociationService.Row["PRIMARY_ID"] != DBNull.Value)
            //{
            //    MainBilling objMain = new MainBilling();
            //    DataTable dtCriteriaItemAsso = new DataTable();
            //    dtCriteriaItemAsso.Columns.Add("INV_MAST_SERVICE_ID");
            //    dtCriteriaItemAsso.Rows.Add(drvAssociationService.Row["PRIMARY_ID"]);
            //    AssociatedServices = objMain.FetchItemAssociation(dtCriteriaItemAsso);
            //    if (AssociatedServices.KIIsNotNullAndRowCount())
            //    {
            //        var filterAssociatedServices = from dr in AssociatedServices.AsEnumerable()
            //                                       where dr.RowState != DataRowState.Deleted && dr["ISVALID"] != DBNull.Value
            //                                       && Convert.ToInt16(dr["ISVALID"]) == 1
            //                                       select dr;
            //        if (filterAssociatedServices.Count() > 0)
            //        {
            //            ISAssociatedService = true;
            //        }
            //    }
            //}
            return ISAssociatedService;
        }

        private void GetMedicineDetails(long ServiceId)
        {
            if (IsConsumable)
            {
                // EMR_PH_RECOMMEND_DOSE
                DataTable dtMedicineCriteria = new DataTable("SEARCH_CRITERIA");
                dtMedicineCriteria.Columns.Add("DRUG_ID");
                dtMedicineCriteria.Columns.Add("MEDICINE_TYPE");
                dtMedicineCriteria.Columns.Add("PROVIDER_ID");
                dtMedicineCriteria.Columns.Add("AGE");
                dtMedicineCriteria.Columns.Add("GENDER");
                dtMedicineCriteria.Columns.Add("MODE");
                dtMedicineCriteria.Rows.Add();
                dtMedicineCriteria.Rows[0]["DRUG_ID"] = ServiceId;
                dtMedicineCriteria.Rows[0]["MEDICINE_TYPE"] = 0;
                dtMedicineCriteria.Rows[0]["PROVIDER_ID"] = DBNull.Value;
                if (isTaskBilllingEbabled) //Speed Improve
                {
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["AGE"] = TaskPatDetails.GetTaskPatDetails.Age;
                    BillData.Tables["SERVICE_CHARGE_CRITERIA"].Rows[0]["GENDER"] = TaskPatDetails.GetTaskPatDetails.Gender;
                } //Speed Improve
                else
                {
                    dtMedicineCriteria.Rows[0]["AGE"] = PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Columns.Contains("AGE")
                        ? PatientInformation.Rows[0]["AGE"] : DBNull.Value;
                    dtMedicineCriteria.Rows[0]["GENDER"] = PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Columns.Contains("GENDER")
                        ? PatientInformation.Rows[0]["GENDER"] : DBNull.Value;
                }
                dtMedicineCriteria.Rows[0]["MODE"] = 1;
                MainEMRShared objEMRShared = new MainEMRShared();
                Dose = objEMRShared.GetEMRRecommendDose(dtMedicineCriteria);
                //EMR_PH_ROUTE
                dtMedicineCriteria = new DataTable("SEARCH_CRITERIA");
                dtMedicineCriteria.Columns.Add("RECOMMEND_DOSE_ID");
                //dtMedicineCriteria.Rows.Add(Dose.Rows[0]["EMR_PH_RECOMMEND_DOSE_ID"]);
                dtMedicineCriteria.Rows.Add(DBNull.Value);
                Route = objEMRShared.GetEMRDrugRoutes(dtMedicineCriteria);
                if (Route.KIIsNotNullAndRowCount())
                {
                    //EMR_PH_FORMS
                    dtMedicineCriteria = new DataTable("SEARCH_CRITERIA");
                    dtMedicineCriteria.Columns.Add("EMR_PH_ROUTE_ID");
                    dtMedicineCriteria.Rows.Add(Route.Rows[0]["EMR_PH_ROUTE_ID"]);
                    Form = objEMRShared.GetEMRDrugForms(dtMedicineCriteria);
                    if (Form.KIIsNotNullAndRowCount())
                    {
                        ////EMR_PH_UNIT
                        //dtMedicineCriteria = new DataTable("SEARCH_CRITERIA");
                        //dtMedicineCriteria.Columns.Add("LOOKUP_TYPE");
                        ////dtMedicineCriteria.Columns.Add("QUANTITY UNIT");
                        ////dtMedicineCriteria.Rows.Add(SelectedService["GENERIC_ID"], Form.Rows[0]["EMR_PH_FORMS_ID"]);
                        //dtMedicineCriteria.Rows.Add("QUANTITY UNIT");
                        DrugUnit = DrugUnitTemp;// getValidEmrData(dtMedicineCriteria);//objEMRShared.GetEMRDrugUnits(dtMedicineCriteria);
                        if (DrugUnit != null && DrugUnit.Rows.Count > 0)
                        {
                            DataRow drrow = DrugUnit.Rows[0];
                            SelectedDose = DrugUnit.DefaultView[DrugUnit.Rows.IndexOf(drrow)];
                        }
                    }
                }
                //DataTable dtAdminInstruction = new DataTable();
                //dtAdminInstruction.Columns.Add("LOOKUP_TYPE");
                //dtAdminInstruction.Rows.Add("ADMIN INSTRUCTION");
                AdminInstruction = AdminInstructionTemp;// getValidEmrData(dtAdminInstruction);
                DataRow dr;
                //DataTable dtCriteria = new DataTable();
                //dtCriteria.Columns.Add("LOOKUP_TYPE");
                //dtCriteria.Rows.Add("FREQUENCY");
                Frequency = FrequencyTemp;// getValidEmrData(dtCriteria);
                if (Route.KIIsNotNullAndRowCount())
                {
                    if (Route.Rows.Count == 1)
                    {
                        dr = Route.Rows[0];
                        SelectedRoute = Route.DefaultView[Route.Rows.IndexOf(dr)];
                    }
                }
                if (Frequency.KIIsNotNullAndRowCount())
                {
                    if (Frequency.Rows.Count == 1)
                    {
                        dr = Frequency.Rows[0];
                        SelectedFrequency = Frequency.DefaultView[Frequency.Rows.IndexOf(dr)];
                    }
                }
                Infologics.Medilogics.General.Control.Common objCommon = new General.Control.Common();
                Duratioin = fillDuration();
                if (Duratioin.KIIsNotNullAndRowCount())
                {
                    dr = Duratioin.Rows[0];
                    SelectedDuratioin = Duratioin.DefaultView[Duratioin.Rows.IndexOf(dr)];
                }
                if (Form.KIIsNotNullAndRowCount())
                {
                    if (Form.Rows.Count == 1)
                    {
                        dr = Form.Rows[0];
                        SelectedForm = Form.DefaultView[Form.Rows.IndexOf(dr)];
                    }
                }
                //Urgency            
                Urgency = objCommon.EnumToDataTable(typeof(Enumerators.EMR.MedicinePriority), "KEY", "VALUE");
                if (Urgency.KIIsNotNullAndRowCount())
                {
                    dr = Urgency.Rows[0];
                    SelectedUrgency = Urgency.DefaultView[Urgency.Rows.IndexOf(dr)];
                }
                if (!(SelectedVisitMode == VisitMode.IP))
                {
                    DataRow[] drRemove = Urgency.Select("KEY=2");
                    Urgency.Rows.Remove(drRemove[0]);
                }
                if (!isEmrOrder)
                {
                    GetRecommendedDose();
                }
            }
        }

        private void SetDefaultCharge(long ServiceId)
        {
            if (SelectedItemServiceType == (int)ServiceType.Pharmacy)
            {
                if (!dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Contains("PRICE"))
                {
                    dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Add("PRICE", typeof(decimal));
                }
                if (!dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Contains("BATCHNO"))
                {
                    dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Add("BATCHNO", typeof(string));
                }
                if (!dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Contains("EXPDATE"))
                {
                    dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Add("EXPDATE", typeof(DateTime));
                }
                if (!dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Contains("MEDICINE_CODE"))
                {
                    dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Add("MEDICINE_CODE", typeof(Int64));
                }
                if (!dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Contains("ACTUAL_RATE"))
                {
                    dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Add("ACTUAL_RATE", typeof(decimal));
                }
                if (!dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Contains("WT_AVG"))
                {
                    dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Add("WT_AVG", typeof(decimal));
                }
                if (!dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Contains("TAX_FROM_CUSTOMER"))
                {
                    dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Add("TAX_FROM_CUSTOMER", typeof(int));
                }
                if (!dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Contains("RACK_CODE"))
                {
                    dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Add("RACK_CODE", typeof(string));
                }
                if (!dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Contains("GRN"))
                {
                    dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Add("GRN", typeof(string));
                }
                if (!dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Contains("MFGDATE"))
                {
                    dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Add("MFGDATE", typeof(DateTime));
                }
                if (!dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Contains("QTY"))
                {
                    dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Add("QTY", typeof(decimal));
                }
                if (!dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Contains("MRP"))
                {
                    dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Add("MRP", typeof(decimal));
                }
            }
            dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows.Clear();
            DataRow drnew = dsCharge.Tables["SERVICE_BASE_CHARGE"].NewRow();
            drnew["INV_MAST_SERVICE_CHARGE_ID"] = -1;
            drnew["INV_MAST_SERVICE_ID"] = ServiceId;
            drnew["CHARGE_UNIT"] = 0;
            drnew["CHARGE_CATEGORY_ID"] = 11;
            drnew["HOSPITAL_ID"] = InvestigationData.HospitalID;
            drnew["CHARGE_AMOUNT"] = SelectedItemServiceType == (int)ServiceType.Pharmacy ? AssociatedServiceCharge : 0;
            drnew["PRICE"] = drnew["CHARGE_AMOUNT"] != DBNull.Value ? Convert.ToDecimal(drnew["CHARGE_AMOUNT"]) : 0;
            drnew["MEDICINE_CODE"] = SelectedItemServiceType == (int)ServiceType.Pharmacy && SelectedService != null && SelectedService.Row.Table.Columns.Contains("MEDICINE_CODE")
                && SelectedService.Row["MEDICINE_CODE"] != DBNull.Value ? SelectedService.Row["MEDICINE_CODE"] : 0;
            drnew["QTY"] = 1;
            drnew["MRP"] = drnew["PRICE"];
            dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows.Add(drnew);
            ServiceBaseCharge.Rows.Clear();
            ServiceBaseCharge.Merge(dsCharge.Tables["SERVICE_BASE_CHARGE"]);
        }

        #region SelectedDate for pharmacy
        private void StartDateChange()
        {
            if (StrDuration != string.Empty)
            {
                double tempduration = Convert.ToDouble(StrDuration);
                Int16 duration = Convert.ToInt16(tempduration);
                if (SelectedDuratioin != null && SelectedDuratioin["KEY"] != DBNull.Value)
                {
                    if (Convert.ToInt16(SelectedDuratioin["KEY"]) == 0)
                    {
                        StartDate = StartDate.AddDays(duration);
                    }
                    else if (Convert.ToInt16(SelectedDuratioin["KEY"]) == 1)
                    {
                        StartDate = StartDate.AddDays(7 * duration);
                    }
                    else if (Convert.ToInt16(SelectedDuratioin["KEY"]) == 2)
                    {
                        StartDate = StartDate.AddMonths(duration);
                    }
                    else if (Convert.ToInt16(SelectedDuratioin["KEY"]) == 3)
                    {
                        StartDate = StartDate.AddHours(duration);
                    }
                    else if (Convert.ToInt16(SelectedDuratioin["KEY"]) == 4)
                    {
                        StartDate = StartDate.AddMinutes(duration);
                    }
                    else if (Convert.ToInt16(SelectedDuratioin["KEY"]) == 5)
                    {
                        StartDate = StartDate.AddYears(duration);
                    }
                }
            }
        }
        #endregion
        #region fill PH_PAT_DTLS_ORDER
        private void FillPhPatDtlsOrder()
        {
            try
            {
                if (BillData.Tables["INV_PAT_BILLING_TEMP"].Rows.Count > 0)
                {
                    DataRow dr = null;
                    long emrPhdltsId = 0;
                    DataRow drItem = null;
                    if (EditService == null)
                    {
                        if (BillData.Tables["INV_PAT_BILLING_TEMP"].Columns.Contains("CONSUMPTION_STATUS") &&
                            IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["CONSUMPTION_STATUS"]) == 1)
                        {
                            drItem = drConsumptionRow;
                        }
                        else
                        {
                            drItem = this.GetEMRCPOEPrescription(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]);
                        }
                    }
                    if (EditService != null && EditService["INV_MAST_SERVICE_ID"] != DBNull.Value)
                    {
                        string batch = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BATCHNO"].ToString();
                        drItem = this.GetEMRCPOEPrescription(EditService);
                        removeDublication = true;
                        EditService.ItemArray = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0].ItemArray;
                        EditService["PH_UNIT_SALES_CONVERSION_ID"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["PH_UNIT_SALES_CONVERSION_ID"];
                        EditService["DURATION"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["DURATION"];
                        EditService["FREQUENCY"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["FREQUENCY"];
                        EditService["DOSE"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["DOSE"];
                        EditService["IS_STAT"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_STAT"];
                        EditService["ISSALE"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["ISSALE"];
                        EditService["NET_AMOUNT"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["NET_AMOUNT"];
                        EditService["NET"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["NET"];
                        EditService["NET"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["NET"];
                        EditService["QTY"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["QTY"];
                        EditService["PATIENT_SHARE"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["PATIENT_SHARE"];
                        EditService["SPONSOR"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["SPONSOR"];
                        EditService["SALES_ACTUAL_QTY"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["SALES_ACTUAL_QTY"];
                        EditService["BATCHNO"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BATCHNO"];
                        EditService["BATCHNO"] = batch;
                        if (!Convert.ToBoolean(EditService["ISSALE"]))
                            EditService["ISLABEL"] = false;
                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0].ItemArray = EditService.ItemArray;
                        if (!Convert.ToBoolean(EditService["ISSALE"]))
                            EditService["ISLABEL"] = false;
                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0].ItemArray = EditService.ItemArray;
                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["QTY"] = EditService["QTY"];
                        removeDublication = false;
                        if (BillData.Tables["PH_PAT_DTLS_ORDER"].Select("SL_NO=" + EditService["SL_NO"]).Length > 0) //bug id 39221
                        {
                            dr = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("SL_NO=" + EditService["SL_NO"]).First();
                        }
                        else if (BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + EditService["INV_MAST_SERVICE_ID"]).Length > 0)
                        {
                            dr = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + EditService["INV_MAST_SERVICE_ID"]).First();
                        }
                        //else if (BillData.Tables["PH_PAT_DTLS_ORDER"].Select("SL_NO=" + EditService["SL_NO"]).Length > 0)
                        //{
                        //    dr = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("SL_NO=" + EditService["SL_NO"]).First();
                        //}
                        if (dr != null && dr["EMR_PAT_DTLS_PH_ORDER_ID"] != DBNull.Value)
                        {
                            emrPhdltsId = Convert.ToInt64(dr["EMR_PAT_DTLS_PH_ORDER_ID"]);
                            if (drItem != null && drItem["QUANTITY"] != DBNull.Value)
                            {
                                dr["TOBEDISPENSED"] = Convert.ToInt64(drItem["QUANTITY"]) - Convert.ToInt64(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["SALES_ACTUAL_QTY"]);
                            }
                        }
                    }
                    else
                    {
                        if (!BillData.Tables["PH_PAT_DTLS_ORDER"].Columns.Contains("SL_NO"))
                        {
                            BillData.Tables["PH_PAT_DTLS_ORDER"].Columns.Add("SL_NO", typeof(int));
                        }
                        if (!BillData.Tables["PH_PAT_DTLS_ORDER"].Columns.Contains("IS_GENERIC_AGAINST"))
                        {
                            BillData.Tables["PH_PAT_DTLS_ORDER"].Columns.Add("IS_GENERIC_AGAINST", typeof(int));
                        }

                        dr = BillData.Tables["PH_PAT_DTLS_ORDER"].NewRow();
                        ////Bug Id 33365 (Riyas Start)
                        int iKeyId = BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Count;  //later changed for bug id 36620
                        //int iKeyId = BillData.Tables["INV_PAT_BILLING"].Rows.Count; 
                        iKeyId = -1 * iKeyId - 1;
                        dr["PH_PAT_DTLS_ORDER_ID"] = iKeyId;
                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["PH_PAT_DTLS_ORDER_ID"] = iKeyId;
                        ////Bug Id 33365 (Riyas End)
                        if (BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value &&
                             IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_GENERIC_AGAINST"]) != 1 && drItem != null)
                        {
                            DataRow DrRow = null;
                            if (drItem.Table.Columns.Contains("ROUTE") && Route.KIIsNotNullAndRowCount())
                            {
                                if (Route.Select("ROUTE='" + drItem["ROUTE"] + "'").Count() > 0)
                                {
                                    DrRow = Route.Select("ROUTE='" + drItem["ROUTE"] + "'").First();
                                    SelectedRoute = Route.DefaultView[Route.Rows.IndexOf(DrRow)];
                                }
                            }
                            if (drItem.Table.Columns.Contains("FORM") && Form.KIIsNotNullAndRowCount())
                            {
                                if (Form.Select("FORM='" + drItem["FORM"] + "'").Count() > 0)
                                {
                                    DrRow = Form.Select("FORM='" + drItem["FORM"] + "'").First();
                                    SelectedForm = Form.DefaultView[Form.Rows.IndexOf(DrRow)];
                                }
                            }
                            if (drItem.Table.Columns.Contains("FREQUENCY_NAME") && Frequency.KIIsNotNullAndRowCount())
                            {
                                if (Frequency.Select("LOOKUP_VALUE='" + drItem["FREQUENCY_NAME"] + "'").Count() > 0)
                                {
                                    DrRow = Frequency.Select("LOOKUP_VALUE='" + drItem["FREQUENCY_NAME"] + "'").First();
                                    SelectedFrequency = Frequency.DefaultView[Frequency.Rows.IndexOf(DrRow)];
                                }
                            }
                            
                            if (drItem.Table.Columns.Contains("PRIORITY") && Urgency.KIIsNotNullAndRowCount())
                            {
                                if (Urgency.Select("KEY=" + drItem["PRIORITY"]).Count() > 0)
                                {
                                    DrRow = Urgency.Select("KEY=" + drItem["PRIORITY"]).First();
                                    SelectedUrgency = Urgency.DefaultView[Urgency.Rows.IndexOf(DrRow)];
                                }
                            }
                            if (drItem.Table.Columns.Contains("DURATION_TYPE") && Duratioin.KIIsNotNullAndRowCount() && drItem["DURATION_TYPE"] != DBNull.Value)
                            {
                                if (Duratioin.Select("KEY=" + drItem["DURATION_TYPE"]).Count() > 0)
                                {
                                    DrRow = Duratioin.Select("KEY=" + drItem["DURATION_TYPE"]).First();
                                    SelectedDuratioin = Duratioin.DefaultView[Duratioin.Rows.IndexOf(DrRow)];
                                }
                            }
                            if (drItem.Table.Columns.Contains("QUANTITY_UNIT") && DrugUnit.KIIsNotNullAndRowCount() && drItem["QUANTITY_UNIT"] != DBNull.Value)
                            {
                                if (DrugUnit.Select("LOOKUP_VALUE='" + drItem["QUANTITY_UNIT"] + "'").Count() > 0)
                                {
                                    DrRow = DrugUnit.Select("LOOKUP_VALUE='" + drItem["QUANTITY_UNIT"] + "'").First();
                                    SelectedDose = DrugUnit.DefaultView[DrugUnit.Rows.IndexOf(DrRow)];
                                }
                            }
                            if (drItem.Table.Columns.Contains("ADMINISTRATION_INSTRUCTION") && AdminInstruction.KIIsNotNullAndRowCount() && drItem["ADMINISTRATION_INSTRUCTION"] != DBNull.Value)
                            {
                                if (AdminInstruction.Select("LOOKUP_VALUE='" + drItem["ADMINISTRATION_INSTRUCTION"] + "'").Count() > 0)
                                {
                                    DrRow = AdminInstruction.Select("LOOKUP_VALUE='" + drItem["ADMINISTRATION_INSTRUCTION"] + "'").First();
                                    SelectedAdmnInst = AdminInstruction.DefaultView[AdminInstruction.Rows.IndexOf(DrRow)];
                                }
                            }
                            if (drItem.Table.Columns.Contains("DURATION") && drItem["DURATION"] != DBNull.Value)
                            {
                                StrDuration = Convert.ToString(drItem["DURATION"]);
                            }
                            if (drItem.Table.Columns.Contains("QUANTITY") && drItem["QUANTITY"] != DBNull.Value &&
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["SALES_ACTUAL_QTY"] != DBNull.Value)
                            {
                                dr["TOBEDISPENSED"] = Convert.ToInt64(drItem["QUANTITY"]) - Convert.ToInt64(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["SALES_ACTUAL_QTY"]);
                            }
                            if (drItem.Table.Columns.Contains("QUANTITY") && drItem["QUANTITY"] != DBNull.Value)
                            {
                                StrDrugUnit = Convert.ToString(drItem["QUANTITY"]);
                            }
                            if (drItem.Table.Columns.Contains("REMARKS") && drItem["REMARKS"] != DBNull.Value)
                            {
                                Remarks = Convert.ToString(drItem["REMARKS"]);
                            }
                            if (drItem.Table.Columns.Contains("FREQUENCY_VALUE") && drItem["FREQUENCY_VALUE"] != DBNull.Value && IfNullReturnZero(drItem["FREQUENCY"]) == 2733)
                            {
                                StrFreqHours = Convert.ToString(drItem["FREQUENCY_VALUE"]);
                                if (!string.IsNullOrEmpty(StrFreqHours))//bug id 42292
                                {
                                    dr["HOURLY"] = Convert.ToInt64(StrFreqHours);
                                }
                            }
                        }
                    }
                    if (PhRXDtlsInfo.KIIsNotNullAndRowCount())
                    {
                        DataRow drRXDtlsRow = null;
                        var query = PhRXDtlsInfo.AsEnumerable().Where(x => x["EMR_PAT_DTLS_PH_ORDER_ID"] != DBNull.Value &&
                            IfNullReturnZero(x["EMR_PAT_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_INV_ORDER_ID"])
                              ).Select(x => x);
                        if (query.Any())
                        {
                            drRXDtlsRow = query.First();
                        }
                        else if (drPhRxDtlsData != null)
                        {
                            drRXDtlsRow = drPhRxDtlsData;
                        }
                        if (drRXDtlsRow != null)
                        {
                            DataRow DrRow = null;
                            if (Frequency.KIIsNotNullAndRowCount())
                            {
                                if (drRXDtlsRow["FREQUENCY"] != DBNull.Value && Frequency.Select("EMR_LOOKUP_ID=" + drRXDtlsRow["FREQUENCY"]).Count() > 0)
                                {
                                    DrRow = Frequency.Select("EMR_LOOKUP_ID=" + drRXDtlsRow["FREQUENCY"]).First();
                                    SelectedFrequency = Frequency.DefaultView[Frequency.Rows.IndexOf(DrRow)];
                                    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["FREQUENCY"] = SelectedFrequency["LOOKUP_VALUE"];
                                }
                            }
                            if (DrugUnit.KIIsNotNullAndRowCount() && drRXDtlsRow["DOSE_UNIT"] != DBNull.Value)
                            {
                                if (DrugUnit.Select("LOOKUP_VALUE='" + drRXDtlsRow["DOSE_UNIT"] + "'").Count() > 0)
                                {
                                    DrRow = DrugUnit.Select("LOOKUP_VALUE='" + drRXDtlsRow["DOSE_UNIT"] + "'").First();
                                    SelectedDose = DrugUnit.DefaultView[DrugUnit.Rows.IndexOf(DrRow)];
                                    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["DOSE_UNIT"] = drRXDtlsRow["DOSE_UNIT"];
                                }
                            }
                            if (Route.KIIsNotNullAndRowCount())
                            {
                                if (Route.Select("ROUTE='" + drRXDtlsRow["ROUTE"] + "'").Count() > 0)
                                {
                                    DrRow = Route.Select("ROUTE='" + drRXDtlsRow["ROUTE"] + "'").First();
                                    SelectedRoute = Route.DefaultView[Route.Rows.IndexOf(DrRow)];
                                    //BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["ROUTE"] = drRXDtlsRow["ROUTE"];
                                }
                            }
                            if (drItem != null && drItem.Table.Columns.Contains("FORM") && Form.KIIsNotNullAndRowCount())
                            {
                                if (Form.Select("FORM='" + drItem["FORM"] + "'").Count() > 0)
                                {
                                    DrRow = Form.Select("FORM='" + drItem["FORM"] + "'").First();
                                    SelectedForm = Form.DefaultView[Form.Rows.IndexOf(DrRow)];
                                }
                            }
                            if (drRXDtlsRow["DOSE"] != DBNull.Value && SelectedDose != null)
                            {
                                StrDrugUnit = Convert.ToString(drRXDtlsRow["DOSE"]);
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["DOSE"] = StrDrugUnit + " " + SelectedDose["LOOKUP_VALUE"];
                            }
                        }
                    }
                    if (IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_CONSUMPTION"]) == 0)
                    {
                        dr["EMR_PAT_DTLS_PH_ORDER_ID"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_MEDICATION_ID"];
                    }
                    else if (BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_MEDICATION_ID"] != DBNull.Value && dr != null
                        && IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["CONSUMPTION_STATUS"]) == 2 &&
                        IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_CONSUMPTION"]) == 1)
                    {
                        dr["EMR_PAT_DTLS_PH_ORDER_ID"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_MEDICATION_ID"];
                    }
                    if (dr["EMR_PAT_DTLS_PH_ORDER_ID"] != DBNull.Value)
                    {
                        IsNormalOrder = false;
                    }
                    if (BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_MEDICATION_ID"] == DBNull.Value && dr != null &&
                        BillData.Tables["INV_PAT_BILLING_TEMP"] != null && BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value
                        )
                    {
                        dr["EMR_PAT_DTLS_PH_ORDER_ID"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_INV_ORDER_ID"];
                    }
                    if (drItem != null && drItem.Table.Columns.Contains("FREQUENCY_FREETEXT") &&
                        IfNullReturnZero(drItem["ISFREQUENCY_FREETEXT"]) == 1 && drItem["FREQUENCY_FREETEXT"] != DBNull.Value)
                    {
                        dr["FREQUENCY_FREETEXT"] = drItem["FREQUENCY_FREETEXT"];
                    }
                    if (!BillData.Tables["PH_PAT_DTLS_ORDER"].Columns.Contains("COMMON_REMARKS")) //Added by Shuaib bug id-35634
                    {
                        BillData.Tables["PH_PAT_DTLS_ORDER"].Columns.Add("COMMON_REMARKS");
                    }
                    if (drItem != null && drItem.Table.Columns.Contains("COMMON_REMARKS") && drItem["COMMON_REMARKS"] != DBNull.Value) //Added by Shuaib
                    {
                        dr["COMMON_REMARKS"] = drItem["COMMON_REMARKS"];
                    }
                    if (drItem == null && BillData.Tables["PH_PAT_DTLS_ORDER"].Columns.Contains("COMMON_REMARKS") &&
                         BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Count > 0 && BillData.Tables["PH_PAT_DTLS_ORDER"].Rows[0]["COMMON_REMARKS"] != DBNull.Value)                //Added by Shuaib use when we convert gen. into brand
                    {
                        dr["COMMON_REMARKS"] = BillData.Tables["PH_PAT_DTLS_ORDER"].Rows[0]["COMMON_REMARKS"];
                    }
                    dr["GENERIC_ID"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["GENERIC_ID"];
                    if (IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_GENERIC_AGAINST"]) == 1)
                    {
                        dr["SUBSTITUTE_MEDICINE_ID"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INV_MAST_SERVICE_ID"];
                    }
                    if (IfNullReturnZero(dr["BRAND_ID"]) > 0 && EditService != null && EditService.Table.KIIsNotNullAndRowCount() && IfNullReturnZero(EditService["INV_MAST_SERVICE_ID"]) > 0 &&
                        IfNullReturnZero(EditService["INV_MAST_SERVICE_ID"]) != IfNullReturnZero(dr["BRAND_ID"]))
                    {
                        dr["SUBSTITUTE_MEDICINE_ID"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INV_MAST_SERVICE_ID"];
                    }
                    dr["BRAND_ID"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INV_MAST_SERVICE_ID"];
                    dr["MEDICINE_TYPE"] = (int)DrugType.Brand;
                    dr["MEDICINE_NAME"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["NAME"];
                    dr["ROUTE"] = SelectedRoute != null ? SelectedRoute["ROUTE"] : DBNull.Value;
                    dr["FORM"] = SelectedForm != null ? SelectedForm["FORM"] : DBNull.Value;
                    dr["DURATION"] = StrDuration != null && StrDuration != string.Empty ? StrDuration : "1";
                    dr["DURATION_TYPE"] = SelectedDuratioin != null ? SelectedDuratioin["KEY"] : DBNull.Value;
                    dr["DURATION_VALUE"] = SelectedDuratioin != null ? SelectedDuratioin["VALUE"] : DBNull.Value;
                    if (!isEmrOrder)
                    {
                        dr["START_DATE"] = StartDate;
                        StartDateChange();
                        dr["END_DATE"] = StartDate;
                        StartDate = Convert.ToDateTime(dr["START_DATE"]);
                    }
                    else 
                    {
                        if (drItem != null && drItem.Table.Columns.Contains("START_DATE") && drItem["START_DATE"] != DBNull.Value)
                        {
                            dr["START_DATE"] = drItem["START_DATE"];
                        }
                        else
                        {
                            dr["START_DATE"] = StartDate;
                        }

                        if (drItem != null && drItem.Table.Columns.Contains("END_DATE") && drItem["END_DATE"] != DBNull.Value)
                        {
                            dr["END_DATE"] = drItem["END_DATE"];
                        }
                    }
                    //   dr["REMARKS"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["REMARKS"];
                    dr["QUANTITY"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["QTY"];
                    dr["QUANTITY_UNIT"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["SALES_UNIT_NAME"];
                    dr["ISVALID"] = 1;
                    dr["REMARKS"] = Remarks;
                    if (drItem == null && BillData.Tables["INV_PAT_BILLING_TEMP"].Columns.Contains("REMARKS") && Remarks.Equals(string.Empty) &&
                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows.Count > 0 && BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["REMARKS"] != DBNull.Value)                                                  //Added by Shuaib 
                    {
                        dr["REMARKS"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["REMARKS"];
                    }
                    if (!IsNormalOrder && drItem != null && drItem.Table.Columns.Contains("ADMINISTRATION_INSTRUCTION"))
                    {
                        dr["ADMINISTRATION_INSTRUCTION"] = SelectedAdmnInst != null ? SelectedAdmnInst["LOOKUP_VALUE"] :
                            drItem["ADMINISTRATION_INSTRUCTION"] != DBNull.Value ? drItem["ADMINISTRATION_INSTRUCTION"] : DBNull.Value;
                    }
                    else
                    {
                        dr["ADMINISTRATION_INSTRUCTION"] = AdmnInstName;
                    }
                    dr["REASON_OVERRIDE_ALLERGY"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["ALLERGY_REASON"];
                    dr["FREQUENCY"] = SelectedFrequency != null ? SelectedFrequency["EMR_LOOKUP_ID"] : DBNull.Value;
                    dr["FREQ_VALUE"] = SelectedFrequency != null ? SelectedFrequency["FIELD10"] : DBNull.Value;   
                    dr["PRIORITY"] = SelectedUrgency != null ? SelectedUrgency["KEY"] : DBNull.Value;
                    if (StrDrugUnit != string.Empty)
                    {
                        dr["DOSE"] = StrDrugUnit;
                    }
                    dr["DOSE_UNIT"] = SelectedDose != null ? SelectedDose["LOOKUP_VALUE"] : DBNull.Value;
                    dr["ALERGY_REASON"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["ALLERGY_REASON"];
                    //  dr["ENTRY_DATE"]=
                    dr["HOSPITAL_ID"] = CommonData.LoginHospitalSiteID;
                    //if generic medicine substituted from PBM screen then filling IS_GENERIC_AGAINST
                    if (ERxVisibility == Visibility.Visible && IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_GENERIC_AGAINST"]) == 0 && BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INV_MAST_SERVICE_ID"]!=DBNull.Value &&
                        drItem != null && drItem["INV_MAST_SERVICE_ID"] == DBNull.Value && drItem["GENERIC_ID"] != DBNull.Value)
                    {
                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_GENERIC_AGAINST"] = 1;
                    }
                    if (IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_GENERIC_AGAINST"]) == 0 && drItem != null && drItem.Table.Columns.Contains("PHARMACY_NOTE"))
                    {
                        dr["PHARMACY_NOTE"] = drItem["PHARMACY_NOTE"];
                    }
                    else
                    {
                        if (dr != null)
                        {
                            string pharmacyFormat = getPharmacyNoteFormat(dr);
                            dr["PHARMACY_NOTE"] = pharmacyFormat;
                        }
                    }
                    if (drItem != null)
                        dr["ENTRY_DATE"] = drItem["PROPOSED_DATE"];
                    else
                        dr["ENTRY_DATE"] = System.DateTime.Now;
                    if (!IsPatient && GenProfileContact != null && GenProfileContact.Rows.Count > 0)
                    {
                        dr["PATIENT_NAME"] = GenProfileContact.Rows[0]["FIRST_NAME"];
                    }
                    else
                    {
                        string name = string.Empty;
                        if (PatientInformation.Rows.Count > 0 && PatientInformation.Columns.Contains("FIRST_NAME")
                            && PatientInformation.Columns.Contains("MIDDLE_NAME") && PatientInformation.Columns.Contains("LAST_NAME") &&
                            PatientInformation.Columns.Contains("FAMILY_NAME"))
                        {
                            name = Convert.ToString(PatientInformation.Rows[0]["FIRST_NAME"]) + " " + Convert.ToString(PatientInformation.Rows[0]["MIDDLE_NAME"]) +
                                " " + Convert.ToString(PatientInformation.Rows[0]["LAST_NAME"]) + " " + Convert.ToString(PatientInformation.Rows[0]["FAMILY_NAME"]);
                        }
                        else if (Patient != null)
                        {
                            name = Patient.Name;
                        }
                        dr["PATIENT_NAME"] = name;
                    }
                    if (emrPhdltsId > 0)
                    {
                        dr["EMR_PAT_DTLS_PH_ORDER_ID"] = emrPhdltsId;
                    }
                    if (EnableVerificationSettingBased)
                    {
                        
                        dr["AUTHORIZATION_STATUS"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["ISVERIFICATION"] != DBNull.Value ?
                            Convert.ToInt16(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["ISVERIFICATION"]) : 0;
                        dr["AUTHORIZATION_EMP_ID"] = CommonData.LoggedInUser;
                        dr["AUTHORIZED_DATE"] = DateTime.Now;
                    }
                    else
                    {
                        dr["AUTHORIZATION_STATUS"] = DBNull.Value;
                    }
                    if (dr.Table.Columns.Contains("IS_GENERIC_AGAINST") &&
                        BillData.Tables["INV_PAT_BILLING_TEMP"].Columns.Contains("IS_GENERIC_AGAINST") &&
                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_GENERIC_AGAINST"] != DBNull.Value)
                    {
                        dr["IS_GENERIC_AGAINST"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_GENERIC_AGAINST"];
                    }
                    dr["MRNO"] = (PatientInformation != null && PatientInformation.Rows.Count > 0) ? PatientInformation.Rows[0]["MRNO"] : DBNull.Value;
                    dr["ISPATIENT"] = IsPatient;
                    dr["ISLABEL"] = true;
                    dr["IS_SHOW_PH_PRESCRIPTION"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["IS_SHOW_PH_PRESCRIPTION"];

                    dr["NUMBER_OF_DOSE"] = 0;
                    dr["ISCONSUMABLE"] = 0;
                    if (EnableVerificationSettingBased && !AllLabOrSubLocations.KIIsNotNullOrEmpty())
                    {
                        FetchAllSubLocations();
                    }
                    //LabOrSubLocations changed to AllLabOrSubLocations,modified by mohd adil for live issue correction
                    //if (LabOrSubLocations.KIIsNotNullOrEmpty() && EnableVerificationSettingBased)
                    if (AllLabOrSubLocations.KIIsNotNullOrEmpty() && EnableVerificationSettingBased)
                    {
                        //IPVerificationLocation
                        DataRow[] drLocation = AllLabOrSubLocations.ToTable().AsEnumerable().Where(x => IfNullReturnZero(x["INCO_MAST_ID"]) == IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["SUBLOCATION"]))//IfNullReturnZero(IPVerificationLocation))
                            .Select(x => x).ToArray();
                        if (drLocation.Any() && IfNullReturnZero(drLocation[0]["IS_MACHINE"]) == 1 && EnableVerificationSettingBased)
                        {
                            //}
                            //if (SelectedLabOrSubLocationItem !=null && IfNullReturnZero(SelectedLabOrSubLocationItem["IS_MACHINE"]) == 1 && EnableVerificationSettingBased &&
                            //    IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["VERIFICATION_BTN_VISIBILITY"]) == 1)
                            //{
                            if (FOData.Medicines != null && FOData.Medicines.KIIsNotNullAndRowCount())
                            {
                                if (FOData.Medicines.Columns.Contains("INV_MAST_SERVICE_ID"))
                                {
                                    var filterMachine = FOData.Medicines.AsEnumerable().Where(x => IfNullReturnZero(x["INV_MAST_SERVICE_ID"])
                                                 == IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INV_MAST_SERVICE_ID"])
                                                 ).Select(x => x).ToArray();
                                    if (filterMachine.Any())
                                    {
                                        dr["IS_HL7_ORDER"] = filterMachine[0]["EXTERNAL_SERVICE_CODE"] == DBNull.Value ? 0 : 1;
                                    }
                                }
                                else if (FOData.Medicines.Columns.Contains("PRIMARY_ID"))
                                {
                                    var filterMachine = FOData.Medicines.AsEnumerable().Where(x => IfNullReturnZero(x["INV_MAST_SERVICE_ID"])
                                                 == IfNullReturnZero(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INV_MAST_SERVICE_ID"])
                                                 ).Select(x => x).ToArray();
                                    if (filterMachine.Any())
                                    {
                                        dr["IS_HL7_ORDER"] = filterMachine[0]["EXTERNAL_SERVICE_CODE"] == DBNull.Value ? 0 : 1;
                                    }
                                }
                            }
                        }
                        else
                        {
                            dr["IS_HL7_ORDER"] = 0;
                        }
                    }
                    //this lines are using for the label print
                    if (string.IsNullOrEmpty(Convert.ToString(dr["EMR_PAT_DTLS_PH_ORDER_ID"])) == false && Convert.ToInt64(dr["EMR_PAT_DTLS_PH_ORDER_ID"]) > 0)
                    {
                        if (dr.Table.Columns.Contains("ISLIFELONG") == false)
                        {
                            dr.Table.Columns.Add("ISLIFELONG");
                        }
                        if (dr.Table.Columns.Contains("CONDITIONAL_FREQUENCY") == false)
                        {
                            dr.Table.Columns.Add("CONDITIONAL_FREQUENCY");
                        }
                        if (dr.Table.Columns.Contains("ADMIN_TIME") == false)
                        {
                            dr.Table.Columns.Add("ADMIN_TIME");
                        }
                        if (dr.Table.Columns.Contains("FREQUENCY_VALUE") == false)
                        {
                            dr.Table.Columns.Add("FREQUENCY_VALUE");
                        }
                        DataTable dtCriteria = new DataTable();
                        dtCriteria.Columns.Add("MODE");
                        dtCriteria.Columns.Add("EMR_PAT_DTLS_PH_ORDER_ID");
                        dtCriteria.Rows.Add(15, dr["EMR_PAT_DTLS_PH_ORDER_ID"]);
                        DataTable dtPrintData = new CommonShared.PharmacyMain.MainPharmacyShared().FetchPharmacyPrintingDetails(dtCriteria);
                        dr["DOSE_FOR_PRESCRIPTION"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["DOSE_FOR_PRESCRIPTION"] : string.Empty;
                        dr["NUMBER_OF_DOSE"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["NUMBER_OF_DOSE"] : 0;
                        dr["ISCONSUMABLE"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["ISCONSUMABLE"] : 0;
                        dr["ISINFUSION"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["ISINFUSION"] : 0;
                        dr["GENERIC_NAME"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["GENERIC_NAME"] : string.Empty;
                        dr["FLUID_NAME"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["FLUID_NAME"] : string.Empty;
                        dr["IV_QUANTITY"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["IV_QUANTITY"] : string.Empty;
                        dr["IV_QUANTITY_UNIT"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["IV_QUANTITY_UNIT"] : string.Empty;
                        dr["RATE"] = (dtPrintData.Rows.Count > 0 && dtPrintData.Rows[0]["DURATION_UNIT_TYPE"] != DBNull.Value) ? Convert.ToString(dtPrintData.Rows[0]["DURATION_UNIT"]) + " " + new Infologics.Medilogics.General.Control.Common().GetDescription((Enumerators.EMR.DurationUnitType)(Convert.ToInt32(dtPrintData.Rows[0]["DURATION_UNIT_TYPE"]))) : string.Empty;
                        dr["ISLIFELONG"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["ISLIFELONG"] : string.Empty;
                        dr["CONDITIONAL_FREQUENCY"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["CONDITIONAL_FREQUENCY"] : string.Empty;
                        dr["ADMIN_TIME"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["ADMIN_TIME"] : string.Empty;
                        dr["FREQUENCY_VALUE"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["FREQUENCY_VALUE"] : string.Empty;
                    }
                    else
                    {
                        if (Generic.KIIsNotNullAndRowCount())
                        {
                            if (dr["GENERIC_ID"].KIIsNotNullOrEmpty())
                            {
                                DataRow[] dritem = Generic.Select("EMR_LOOKUP_ID =" + Convert.ToInt64(dr["GENERIC_ID"]));
                                if (dritem.KIIsNotNullOrEmpty() && dritem.Length > 0)
                                {
                                    dr["GENERIC_NAME"] = Convert.ToString(dritem[0]["LOOKUP_VALUE"]);
                                }
                            }
                        }
                    }
                    //this lines are using for label print
                    if (isAddforPrint)
                    {
                        BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Add(dr);
                    }
                    else if (EditService == null)
                    {
                        BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Add(dr);
                    }
                    else if (EditService != null && EditService["INV_MAST_SERVICE_ID"] == DBNull.Value)
                    {
                        BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Add(dr);
                    }
                    DosageCalculation(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]);
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        #endregion

        private void Executed_IsVerificationChecked(object sender, ExecutedRoutedEventArgs e)
        {
            DataRowView dr = (DataRowView)e.Parameter;
            if (IfNullReturnZero(dr["ISVERIFICATION"]) == 1)
            {
                var query = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_DTLS_INV_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"]) ||
                    IfNullReturnZero(x["REF_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"])).Select(x=>x);
               
                
                if (query.Any())
                {
                    if (BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(r => IfNullReturnZero(r["IS_ADDITIVE"]) == 1).Count() > 0)
                    {
                       
                        //for checking brand
                        if (query.AsEnumerable().Where(x => IfNullReturnZero(x["INV_MAST_SERVICE_ID"]) == 0).Any())
                        {
                            dr["ISVERIFICATION"] = false;
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                                "Brand medicine details are missing. Please provide brand medicine for additive item(s).", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            return;
                        }
                        //for checking sub location
                        int Totitems = query.Count();
                        int omnicellcount = query.AsEnumerable().Where(x => x["IS_OMNICELL_ITEM"] != DBNull.Value && Convert.ToInt16(x["IS_OMNICELL_ITEM"]) == 1).Count();
                        if (omnicellcount > 0 && omnicellcount < Totitems)
                        {
                            dr["ISVERIFICATION"] = false;
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                                    "All additive items should be from same sub location.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            return;
                        }
                        //string[] SublocationID = query.AsEnumerable().Select(x => Convert.ToString(IfNullReturnZero(x["SUBLOCATION"]))).Distinct().ToArray();
                        //if (SublocationID.Length > 1)
                        //{
                        //    dr["ISVERIFICATION"] = false;
                        //    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                        //                            "All additive items should be from same sub location.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        //    return;
                        //}
                        
                    }
                    foreach (DataRow drQuery in query)
                    {
                        DataTable dtTemp = Fetch_PhdtlsOrder(Convert.ToInt64(drQuery["EMR_PAT_DTLS_INV_ORDER_ID"]));
                        if (dtTemp != null && dtTemp.Rows.Count > 0 && Convert.ToBoolean(dtTemp.Rows[0]["AUTHORIZATION_STATUS"]))
                        {
                            drQuery["ISVERIFICATION"] = false;
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                               "Medicine already verified by Pharmacist.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            return;

                        } 
                        MainBilling objBIlling = new MainBilling();
                        DataTable dtCriteriatable = new DataTable();
                        dtCriteriatable.Columns.Add("PH_SUBLOCATION_ID", typeof(int));
                        dtCriteriatable.Columns.Add("MEDICINE_CODE", typeof(long));
                        dtCriteriatable.Columns.Add("BATCHNO", typeof(string));
                        dtCriteriatable.Columns.Add("INV_MAST_SERVICE_ID", typeof(long));
                        dtCriteriatable.Rows.Add(drQuery["SUBLOCATION"], drQuery["MEDICINE_CODE"], DBNull.Value, drQuery["INV_MAST_SERVICE_ID"]);
                        DataTable dttable = objBIlling.GetMedicinesStockDetails(dtCriteriatable);
                        if (dttable.KIIsNotNullAndRowCount())
                        {
                            decimal qty = dttable.AsEnumerable().Select(x => IfNullReturnZero(x["QTY"])).Sum();
                            if (qty >= IfNullReturnZero(drQuery["SALES_ACTUAL_QTY"]))
                            {
                                if (drQuery != null && drQuery["SL_NO"] != DBNull.Value && drQuery["INV_MAST_SERVICE_ID"] != DBNull.Value && BillData.Tables["PH_PAT_DTLS_ORDER"].KIIsNotNullAndRowCount()//bug id 39221
                                    && BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + drQuery["INV_MAST_SERVICE_ID"] + "AND SL_NO=" + drQuery["SL_NO"]).Count() > 0)
                                {
                                    DataRow drTemp = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + drQuery["INV_MAST_SERVICE_ID"] + "AND SL_NO=" + drQuery["SL_NO"]).First();
                                    drQuery["ISVERIFICATION"] = true;
                                    drTemp["AUTHORIZATION_STATUS"] = 1;
                                }
                                else if (drQuery != null && drQuery["INV_MAST_SERVICE_ID"] != DBNull.Value && BillData.Tables["PH_PAT_DTLS_ORDER"].KIIsNotNullAndRowCount()
                                         && BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + drQuery["INV_MAST_SERVICE_ID"]).Count() > 0)
                                {
                                    DataRow drTemp = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + drQuery["INV_MAST_SERVICE_ID"]).First();
                                    drQuery["ISVERIFICATION"] = true;
                                    drTemp["AUTHORIZATION_STATUS"] = 1;
                                }
                            }
                            else
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                                "Available stock for the " + drQuery["NAME"] + " is " + qty, MessageBoxButtonType.OK, MessageBoxImages.Information);
                                //drQuery["ISVERIFICATION"] = false;
                                foreach (DataRow drPat in query)
                                {
                                    if (drQuery != null && drPat["INV_MAST_SERVICE_ID"] != DBNull.Value && BillData.Tables["PH_PAT_DTLS_ORDER"].KIIsNotNullAndRowCount()
                                         && BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + drPat["INV_MAST_SERVICE_ID"]).Count() > 0)
                                    {
                                        DataRow drTemp = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + drPat["INV_MAST_SERVICE_ID"]).First();
                                        drTemp["AUTHORIZATION_STATUS"] = 0;
                                    }
                                }
                                query.AsEnumerable().ForEach(x => x["ISVERIFICATION"] = false);
                                break;
                            }
                        }
                        else
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                                "Stock not available for " + drQuery["NAME"], MessageBoxButtonType.OK, MessageBoxImages.Information);
                            //drQuery["ISVERIFICATION"] = false;
                            foreach (DataRow drPat in query)
                            {
                                if (drQuery != null && drPat["INV_MAST_SERVICE_ID"] != DBNull.Value && BillData.Tables["PH_PAT_DTLS_ORDER"].KIIsNotNullAndRowCount()
                                     && BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + drPat["INV_MAST_SERVICE_ID"]).Count() > 0)
                                {
                                    DataRow drTemp = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + drPat["INV_MAST_SERVICE_ID"]).First();
                                    drTemp["AUTHORIZATION_STATUS"] = 0;
                                }
                            }
                            query.AsEnumerable().ForEach(x => x["ISVERIFICATION"] = false);
                            break;
                        }
                    }
                }
            }
            else if (IfNullReturnZero(dr["ISVERIFICATION"]) == 0)
            {
                BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => (IfNullReturnZero(x["EMR_PAT_DTLS_INV_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"]) ||
                                                                    IfNullReturnZero(x["REF_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"]))).ForEach(x => x["ISVERIFICATION"] = false);

            }
        }

        private void Executed_IsSaveChecked(object sender, ExecutedRoutedEventArgs e)
        {
            DataRowView drInvPatBilling = (DataRowView)e.Parameter;
            DataTable dtTempt = new DataTable();
            dtTempt = BillData.Tables["INV_PAT_BILLING"].Clone();
            dtTempt.Rows.Add();
            dtTempt.Rows[0].ItemArray = drInvPatBilling.Row.ItemArray;
            if (SelectedServiceType == (int)ServiceType.Pharmacy && IfNullReturnZero(drInvPatBilling["EMR_PAT_DTLS_INV_ORDER_ID"]) > 0)
            {
                var queryAd = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_DTLS_INV_ORDER_ID"]) == IfNullReturnZero(drInvPatBilling["EMR_PAT_DTLS_INV_ORDER_ID"]) ||
                                                            IfNullReturnZero(x["REF_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(drInvPatBilling["EMR_PAT_DTLS_INV_ORDER_ID"])).Select(x => x);
                if (queryAd.Any())
                {
                    dtTempt.Rows.Clear();
                    dtTempt = queryAd.CopyToDataTable();
                }
            }
            if (dtTempt.KIIsNotNullAndRowCount())
            {
                var dataExist = from inv in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                join tmp in dtTempt.AsEnumerable()
                                on IfNullReturnZero(inv["INV_MAST_SERVICE_ID"]) equals IfNullReturnZero(tmp["INV_MAST_SERVICE_ID"]) 
                                where IfNullReturnZero(inv["SL_NO"]) == IfNullReturnZero(tmp["SL_NO"])
                                select inv;
                foreach (DataRow dr in dataExist)
                {
                    if (IfNullReturnZero(dr["IS_CHILD_ITEM"]) == 1 && !Convert.ToBoolean(IfNullReturnZero(dr["ISSALE"])))
                    {
                        dr["ISSALE"] = true;
                    }
                    if (dr != null && deleteValidation() && AdjustmentValidation() && MultipleLocationValidation(dr))
                    {
                        bool validservice = true;
                        if (Convert.ToBoolean(dr["ISSALE"]))
                        {
                            SelectedItemServiceType = dr["SERVICE_TYPE"] != DBNull.Value ? Convert.ToInt16(dr["SERVICE_TYPE"]) : -1;
                            validservice = ValidateServiceCharge(dr);
                            if (validservice && ValidateService(dr))
                            {
                                SelectedItemServiceType = dr["SERVICE_TYPE"] != DBNull.Value ? Convert.ToInt16(dr["SERVICE_TYPE"]) : -1;
                            }
                            else
                            {
                                if (Convert.ToBoolean(dr["ISSALE"]))
                                {
                                    dr["ISSALE"] = false;
                                }
                                else
                                {
                                    dr["ISSALE"] = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        if (Convert.ToBoolean(dr["ISSALE"]))
                        {
                            dr["ISSALE"] = false;
                        }
                        else
                        {
                            dr["ISSALE"] = true;
                        }
                    }
                    if (!Convert.ToBoolean(IfNullReturnZero(dr["IS_CHILD_ITEM"])))
                    {
                        dr["ISLABEL"] = Convert.ToBoolean(dr["ISSALE"]) ? true : false;
                    }
                    if (BillData.Tables["PH_PAT_DTLS_ORDER"].KIIsNotNullAndRowCount())
                    {
                        DataRow[] drRow = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("PH_PAT_DTLS_ORDER_ID=" + IfNullReturnZero(dr["PH_PAT_DTLS_ORDER_ID"]));
                        foreach (DataRow drdose in drRow)
                        {
                            if (!Convert.ToBoolean(IfNullReturnZero(dr["IS_CHILD_ITEM"])))
                            {
                                drdose["ISLABEL"] = Convert.ToBoolean(dr["ISSALE"]) ? 1 : 0;
                            }
                        }
                    }
                    if (dr["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value)
                    {
                        if (BillData.Tables["EMR_PAT_PH_DTLS_DOSAGE"].KIIsNotNullAndRowCount() &&
                            BillData.Tables["EMR_PAT_PH_DTLS_DOSAGE"].Select("EMR_PAT_DTLS_PH_ORDER_ID=" + IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"])).Length > 0)
                        {
                            DataRow[] drRow = BillData.Tables["EMR_PAT_PH_DTLS_DOSAGE"].Select("EMR_PAT_DTLS_PH_ORDER_ID=" + IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"]));
                            foreach (DataRow drdose in drRow)
                            {
                                drdose["IS_SELECTED"] = Convert.ToBoolean(dr["ISSALE"]) ? true : false;
                            }
                        }
                    }
                    if (dr["INV_MAST_SERVICE_ID"] != DBNull.Value)
                    {
                        if (!Convert.ToBoolean(dr["ISSALE"]))
                        {
                            dr["PATIENT_SHARE"] = 0;
                            dr["SPONSOR"] = 0;
                            dr["NET"] = IfNullReturnZero(dr["BASE_CHARGE"]) * IfNullReturnZero(dr["QTY"]);
                            if (SelectedServiceType == (int)ServiceType.Pharmacy || IfNullReturnZero(dr["SERVICE_TYPE"]) == (int)ServiceType.Pharmacy)
                            {
                                dr["NET"] = IfNullReturnZero(dr["NET"]) * IfNullReturnZero(dr["BASE_QTY"]);
                            }
                            dr["NET_AMOUNT"] = dr["NET"];
                            dr["DEDUCTIBLE"] = 0;
                        }
                        CalculateMaxMinCopay();
                        //BEENA CODE
                        RejectDiscountCalculation();
                        //END CODE
                        //By Riyas in between we are add new pharmacy item colloection not going against pharmacy
                        if (SelectedItemServiceType != Convert.ToInt16(dr["SERVICE_TYPE"]) &&
                            Convert.ToInt16(dr["SERVICE_TYPE"]) == (Int16)ServiceType.Pharmacy &&
                            SelectedItemServiceType == (Int16)ServiceType.Investigation)
                        {
                            SelectedItemServiceType = Convert.ToInt16(dr["SERVICE_TYPE"]);
                        }
                        //End Riyas 
                        CalculateServiceTotal();
                    }


                    if (IfNullReturnZero(dr["IS_CONSUMPTION"]) == 2 && BillData.Tables["INV_PAT_BILLING"].Select("EMR_PAT_DTLS_INV_ORDER_ID="
                                                        + IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"])).Count() > 0)
                    {
                        DataRow[] drConsumption = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => IfNullReturnZero(x["IS_CONSUMPTION"]) != 2 &&
                                            IfNullReturnZero(x["EMR_PAT_DTLS_INV_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"])).Select(x => x).ToArray();
                        foreach (DataRow drCon in drConsumption)
                        {
                            drCon["ISSALE"] = dr["ISSALE"];
                            if (!Convert.ToBoolean(dr["ISSALE"]))
                            {
                                drCon["PATIENT_SHARE"] = 0;
                                drCon["SPONSOR"] = 0;
                                //drCon["NET"] = IfNullReturnZero(dr.Row["BASE_CHARGE"]) * IfNullReturnZero(dr.Row["QTY"]);
                                drCon["NET"] = IfNullReturnZero(drCon["BASE_CHARGE"]) * IfNullReturnZero(drCon["SALES_ACTUAL_QTY"]);
                                //if (Convert.ToInt16(drCon["SERVICE_TYPE"]) == (int)ServiceType.Pharmacy)
                                //{
                                //    dr.Row["NET"] = IfNullReturnZero(drCon["NET"]) * IfNullReturnZero(drCon["BASE_QTY"]);
                                //}
                                //drCon["NET_AMOUNT"] = dr.Row["NET"];
                                drCon["NET_AMOUNT"] = drCon["NET"];
                                drCon["DEDUCTIBLE"] = 0;
                            }
                        }
                    }
                    if (!Convert.ToBoolean(IfNullReturnZero(dr["ISSALE"])) && IfNullReturnZero(dr["IS_CHILD_ITEM"])==1)
                    {
                        var query = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => (IfNullReturnZero(x["EMR_PAT_DTLS_INV_ORDER_ID"]) == IfNullReturnZero(dr["REF_DTLS_PH_ORDER_ID"]) ||
                                                                IfNullReturnZero(x["REF_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(dr["REF_DTLS_PH_ORDER_ID"]))).Select(x => x);
                        if (query.Any())
                        {
                            query.ForEach(x => { x["ISSALE"] = x["ISLABEL"] = false; x["PATIENT_SHARE"] = 0; x["SPONSOR"] = 0; x["DEDUCTIBLE"] = 0; });
                            break;
                        }
                    }
                    else if (!Convert.ToBoolean(IfNullReturnZero(dr["ISSALE"])) && IfNullReturnZero(dr["IS_ADDITIVE"]) == 1)
                    {
                        var query = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => (IfNullReturnZero(x["EMR_PAT_DTLS_INV_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"]) ||
                                                                IfNullReturnZero(x["REF_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"]))).Select(x => x);
                        if (query.Any())
                        {
                            query.ForEach(x => { x["ISSALE"] = x["ISLABEL"] = false; x["PATIENT_SHARE"] = 0; x["SPONSOR"] = 0; x["DEDUCTIBLE"] = 0; });
                            break;
                        }
                    }

                }
                if (!isERCredit)
                {
                    ToBeCollected = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                              .Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]))
                              .Select(x => IfNullReturnZero(x["PATIENT_SHARE"])).Sum();

                }
                CalculateMaxMinCopay();
                RejectDiscountCalculation();
                CalculateServiceTotal();
            }
        }
        //Beena code
        private void RejectDiscountCalculation()
        {

            decimal qty = 0;
            if (BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
            {
                DataRow[] scheme_details = Scheme.AsEnumerable()
                                    .Where(x => x["INCO_MAST_SCHEME_ID"] != DBNull.Value && Convert.ToInt16(x["INCO_MAST_SCHEME_ID"]) == selectedMastSchemeValue)
                                    .Select(x => x).ToArray();
                var Query = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                        .Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]) &&
                        IfNullReturnZero(x["APPROVAL_STATUS"]) == 6)
                        .Select(x => x);
                if (Query.Count() > 0)
                {
                    //TotalCopayAmount = TotalCopayAmount + Query.AsEnumerable().Where(x => Convert.ToInt16(x["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion)
                    //    .Select(x => IfNullReturnZero(x["CO_PAY_AMOUNT"])).Sum();
                    foreach (DataRow drRow in Query)
                    {
                        if (Convert.ToInt16(drRow["SERVICE_TYPE"]) == (int)ServiceType.Investigation
                            || Convert.ToInt16(drRow["SERVICE_TYPE"]) == (int)ServiceType.Consultation)
                        {
                            qty = Convert.ToDecimal(drRow["QTY"]);
                        }
                        else if (Convert.ToInt16(drRow["SERVICE_TYPE"]) == (int)ServiceType.Pharmacy)
                        {
                            qty = Convert.ToDecimal(drRow["SALES_ACTUAL_QTY"]);
                        }
                        drRow["GROSS_AMOUNT"] = Convert.ToDecimal(drRow["BASE_CHARGE"]) * qty;
                        drRow["AMOUNT"] = Convert.ToDecimal(drRow["BASE_CHARGE"]) * qty;
                        if (drRow["APPROVAL_STATUS"] != DBNull.Value && Convert.ToInt16(drRow["APPROVAL_STATUS"]) == 6 && drRow["IS_EDITED"] == DBNull.Value)
                        {
                            drRow["NET_AMOUNT"] = Convert.ToInt16(drRow["GROSS_AMOUNT"]);
                            drRow["NET"] = Convert.ToInt16(drRow["GROSS_AMOUNT"]);
                            drRow["TOTAL"] = Convert.ToInt16(drRow["GROSS_AMOUNT"]);
                            drRow["PATIENT_SHARE"] = Convert.ToInt16(drRow["GROSS_AMOUNT"]);
                            drRow["SPONSOR"] = 0;
                        }

                    }
                    CalculateServiceTotal();
                }
            }
        }
        //End Code
        private void Executed_LabelClick(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                DataRowView dr = (DataRowView)e.Parameter;
                if (dr != null)
                {
                    if (BillData.Tables["PH_PAT_DTLS_ORDER"].KIIsNotNullAndRowCount())
                    {
                        DataRow[] drRow = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + IfNullReturnZero(dr["INV_MAST_SERVICE_ID"]));
                        foreach (DataRow drdose in drRow)
                        {
                            drdose["ISLABEL"] = Convert.ToBoolean(dr["ISLABEL"]) ? 1 : 0;
                        }
                    }
                    //commented by mohd adil on 21/05/2016,as said by shamsu sir label is not required for additive
                    //if (dr["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value)
                    //{
                    //    var queryAd = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_DTLS_INV_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"]) ||
                    //                  IfNullReturnZero(x["REF_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"])).Select(x => x);

                    //    if (queryAd.Any())
                    //    {
                    //        foreach (DataRow drQuery in queryAd)
                    //        {
                    //            drQuery["ISLABEL"] = dr["ISLABEL"];
                    //            if (BillData.Tables["PH_PAT_DTLS_ORDER"].KIIsNotNullAndRowCount())
                    //            {
                    //                DataRow[] drRow = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + IfNullReturnZero(drQuery["INV_MAST_SERVICE_ID"]));
                    //                foreach (DataRow drdose in drRow)
                    //                {
                    //                    drdose["ISLABEL"] = Convert.ToBoolean(dr["ISLABEL"]) ? 1 : 0;
                    //                }
                    //            }

                    //        }
                    //    }
                    //}
                    //else if (dr["EMR_PAT_DTLS_INV_ORDER_ID"] == DBNull.Value)//for FO order
                    //{
                    //    if (BillData.Tables["PH_PAT_DTLS_ORDER"].KIIsNotNullAndRowCount())
                    //    {
                    //        DataRow[] drRow = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + IfNullReturnZero(dr["INV_MAST_SERVICE_ID"]));
                    //        foreach (DataRow drdose in drRow)
                    //        {
                    //            drdose["ISLABEL"] = Convert.ToBoolean(dr["ISLABEL"]) ? 1 : 0;
                    //        }
                    //    }
                    //}
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Loads the pharmcy order.(From nursing station)
        /// </summary>
        /// <param name="Value">if set to <c>true</c> [value].</param>
        private void LoadPharmcyOrder(bool Value)
        {
            try
            {
                EMROrderItems = null;
                EMROrderRelation = null;
                OrderItems = null;
                PharmacyOrders = null;
                bool IsClear = true;
                if (Value)
                {
                    MainPharmacyShared objPharmacy = new MainPharmacyShared();
                    DataTable dtData = objPharmacy.FetchPatientIndents(PatientInformation.Rows[0]["MRNO"].ToString());
                    if (dtData != null && dtData.Rows.Count > 0)
                    {
                        DataTable dtValues = CommonData.GetDefaultSettings(0, "PATIENT INDENT VALID DAYS");
                        DateTime dtDate = DateTime.Now;
                        if (dtValues != null && dtValues.Rows.Count > 0)
                        {
                            dtDate = DateTime.Today.AddDays(-1 * Convert.ToInt32(dtValues.Rows[0]["VALUE"]));
                        }
                        //dtData.DefaultView.RowFilter = "INDENT_DATE>='" + dtDate + "'";
                        dtData.DefaultView.RowFilter = "REQUEST_DATE>='" + dtDate + "'";
                        dtData = dtData.DefaultView.ToTable();
                    }
                    if (dtData != null && dtData.Rows.Count > 0)
                    {
                        dtData.Columns.Add("ISSUED_QTY", typeof(decimal));
                        PharmacyOrders = dtData;
                        IsCPOEOrderExist = true;
                        DataTable dtOrder;
                        var result = from row in dtData.Copy().AsEnumerable()
                                     group row by new
                                     {
                                         REQUEST_NO = row.Field<string>("REQUEST_NO"),
                                         REQUEST_TO = row.Field<decimal>("REQUEST_TO"),
                                         MRNO = row.Field<string>("MRNO"),
                                         LOCATION = row.Field<string>("LOCATION"),
                                         REQUEST_DATE = Convert.ToDateTime(row.Field<DateTime>("REQUEST_DATE").ToString("dd-MMM-yyyy")),
                                         PH_MAST_STOCK_REQUEST_ID = row.Field<decimal>("PH_MAST_STOCK_REQUEST_ID"),
                                     } into grp
                                     select new
                                     {
                                         REQUEST_NO = grp.Key.REQUEST_NO,
                                         REQUEST_TO = grp.Key.REQUEST_TO,
                                         MRNO = grp.Key.MRNO,
                                         LOCATION = grp.Key.LOCATION,
                                         REQUEST_DATE = grp.Key.REQUEST_DATE,
                                         PH_MAST_STOCK_REQUEST_ID = grp.Key.PH_MAST_STOCK_REQUEST_ID,
                                     };
                        Common objCommon = new Common();
                        dtOrder = objCommon.LINQToDataTable(result);
                        // dtOrder.DefaultView.Sort = "INDENT_DATE DESC";
                        dtOrder.DefaultView.Sort = "REQUEST_DATE DESC";
                        dtOrder = dtOrder.DefaultView.ToTable();
                        // dtOrder.Columns["INDENT_NO"].ColumnName = "EMR_PAT_MAST_INV_ORDER_ID";
                        dtOrder.Columns["REQUEST_NO"].ColumnName = "EMR_PAT_MAST_INV_ORDER_ID";
                        dtOrder.Columns["LOCATION"].ColumnName = "EMPNAME";
                        //dtOrder.Columns["INDENT_DATE"].ColumnName = "VISIT_DATE";
                        dtOrder.Columns["REQUEST_DATE"].ColumnName = "VISIT_DATE";
                        dtOrder.Columns.Add("MAINITEM", typeof(decimal));
                        foreach (DataRow item in dtOrder.Rows)
                        {
                            item["MAINITEM"] = 1;
                            item["EMPNAME"] = item["EMPNAME"].ToString() + "(Indent No." + item["EMR_PAT_MAST_INV_ORDER_ID"].ToString() + ")";
                        }
                        dtOrder.TableName = "Order";
                        DataTable dtDetails = dtData.Copy();
                        dtDetails.Columns["REQUEST_NO"].ColumnName = "EMR_PAT_MAST_INV_ORDER_ID";
                        dtDetails.Columns["REQUEST_TO"].ColumnName = "PARENT_INV_CATEGORY_ID";
                        dtDetails.Columns["INDENT_STATUS_NAME"].ColumnName = "INV_PARENT_CATEGORY_NAME";
                        dtDetails.Columns["REQUEST_DATE"].ColumnName = "PROPOSED_DATE";
                        dtDetails.Columns["MEDICINE_NAME"].ColumnName = "NAME";
                        dtDetails.Columns.Add("SINO", typeof(int));
                        dtDetails.Columns.Add("MAINITEM", typeof(decimal));
                        dtDetails.TableName = "Detail";
                        foreach (DataRow item in dtDetails.Rows)
                        {
                            item["MAINITEM"] = 0;
                        }
                        DataSet dsData = new DataSet();
                        dsData.Tables.Add(dtOrder);
                        dsData.Tables.Add(dtDetails);
                        var result1 = from row in dsData.Tables["Detail"].Copy().AsEnumerable()
                                      group row by new
                                      {
                                          //EMR_PAT_MAST_INV_ORDER_ID = row.Field<decimal>("EMR_PAT_MAST_INV_ORDER_ID"),
                                          EMR_PAT_MAST_INV_ORDER_ID = row.Field<string>("EMR_PAT_MAST_INV_ORDER_ID"),
                                          PARENT_INV_CATEGORY_ID = row.Field<decimal>("PARENT_INV_CATEGORY_ID"),
                                          INV_PARENT_CATEGORY_NAME = row.Field<string>("INV_PARENT_CATEGORY_NAME"),
                                          MAINITEM = row.Field<decimal>("MAINITEM"),
                                          ISSELECT = false
                                      } into grp
                                      select new
                                      {
                                          EMR_PAT_MAST_INV_ORDER_ID = grp.Key.EMR_PAT_MAST_INV_ORDER_ID,
                                          PARENT_INV_CATEGORY_ID = grp.Key.PARENT_INV_CATEGORY_ID,
                                          INV_PARENT_CATEGORY_NAME = grp.Key.INV_PARENT_CATEGORY_NAME,
                                          MAINITEM = grp.Key.MAINITEM,
                                          Count = grp.Count(),
                                          ISSELECT = grp.Key.ISSELECT,
                                      };

                        DataTable DetailRelation = objCommon.LINQToDataTable(result1);
                        DetailRelation.TableName = "OrderRelation";
                        if (DetailRelation != null && DetailRelation.Rows.Count > 0)
                        {
                            dsData.Tables.Add(DetailRelation.Copy());
                            dsData.Relations.Add(
                                "Order2OrderRelation",
                                dsData.Tables["Order"].Columns["EMR_PAT_MAST_INV_ORDER_ID"],
                                dsData.Tables["OrderRelation"].Columns["EMR_PAT_MAST_INV_ORDER_ID"]);

                            //Load first order details   
                            //dsData.Tables["Detail"].DefaultView.RowFilter = "EMR_PAT_MAST_INV_ORDER_ID=" + dsData.Tables["Order"].Rows[0]["EMR_PAT_MAST_INV_ORDER_ID"];
                            dsData.Tables["Detail"].DefaultView.RowFilter = "EMR_PAT_MAST_INV_ORDER_ID= '" + dsData.Tables["Order"].Rows[0]["EMR_PAT_MAST_INV_ORDER_ID"] + "'";
                            DataTable dt = dsData.Tables["Detail"].DefaultView.ToTable();
                            if (dt != null && dt.Rows.Count > 0)
                            {
                                SelectedProviderValue = dt.Rows[0]["DOCT_ID"].ToString();
                            }
                            IsClear = false;
                            if (!dsData.Tables["Order"].Columns.Contains("ISSELECT"))
                            {
                                dsData.Tables["Order"].Columns.Add("ISSELECT", typeof(bool));
                            }
                            foreach (DataRow dr in dsData.Tables["Order"].Rows)
                            {
                                dr["ISSELECT"] = "false";
                            }
                        }
                        EMROrderRelation = dsData;
                        //this.SetCurrentCPOEOrder();
                        ServiceName = "Nothing";
                        ServiceName = string.Empty;
                        if (IsClear)
                        {
                            selectedEMROrder = null;
                            //IsDoctorEnable = true;
                            SelectedProviderValue = string.Empty;
                        }
                    }
                    else
                    {
                        IsPharmacyOrderClear = true;
                        IsPharmacyOrderSelected = false;
                        IsPharmacyOrderClear = false;
                        IsCPOEOrderExist = false;
                    }
                }
                else
                {
                    if (IsCPOEPharmacyOrderExist)
                    {
                        DataSet dsData = this.LoadEMRPharmacyOrder(PatientInformation.Rows[0]);
                        EMROrderRelation = this.CreateEMRPharmacyOrderRelation(dsData);
                    }
                    else
                    {
                        IsCPOEOrderExist = false;
                    }
                    //IsDoctorEnable = true;
                    SelectedProviderValue = string.Empty;
                }
            }
            catch (Exception)
            {
                throw;
               // ExceptionHandler.WriteErrorLog(ex);
            }
        }

        private void CmdOpenEpisodeOk_Executed(object sender, ExecutedRoutedEventArgs e)
        {

        }
        /// <summary>
        /// IsNonConsultEncounterProperty
        /// </summary>
        private bool isNonConsultEncounter;
        public bool IsNonConsultEncounter
        {
            get { return isNonConsultEncounter; }
            set
            {
                isNonConsultEncounter = value;
                OnPropertyChanged("IsNonConsultEncounter");//Implement INotifyPropertyChanged
                if (IsNonConsultEncounter && SelectedEncounterDetails != null)
                {
                    FillNonConsultICDs();
                }
            }
        }
        private bool isClinicianIDenable;
        public bool IsClinicianIDenable
        {
            get { return isClinicianIDenable; }
            set
            {
                isClinicianIDenable = value;
                OnPropertyChanged("IsClinicianIDenable");//Implement INotifyPropertyChanged
            }
        }
        private void FillNonConsultICDs()
        {
            if (DtICDDetails == null || (DtICDDetails != null && !DtICDDetails.Columns.Contains("IS_PENDING_ORDER")))
            {
                MainBilling objMainBilling = new MainBilling();
                DataTable dtcriteria = new DataTable();
                dtcriteria.Columns.Add("PAT_FIN_ENCOUNTER_ID");
                dtcriteria.Rows.Add(SelectedEncounterDetails["PAT_FIN_ENCOUNTER_ID"]);
                DtICDDetails = objMainBilling.FetchGenPatBillICD(dtcriteria);
            }
        }

        private void Executed_EncounterPopUP(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                Infologics.Medilogics.CommonSharedUI.BillingView.UcPatientEpisodeDetails objUcPatientEpisodeDetails = new Infologics.Medilogics.CommonSharedUI.BillingView.UcPatientEpisodeDetails();
                CommonWindow objWin = new CommonWindow(WindowControlBoxStyle.OnlyWithClose);
                objUcPatientEpisodeDetails.IsEpisode = false;
                objUcPatientEpisodeDetails.IsFromPharmacyPanel = IsFromPharmacyPanel;
                objUcPatientEpisodeDetails.ClosedEncounterBillingPrivilege = true;
                objUcPatientEpisodeDetails.MRNO = PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Columns.Contains("MRNO")
                    && PatientInformation.Rows[0]["MRNO"] != DBNull.Value ? Convert.ToString(PatientInformation.Rows[0]["MRNO"]) : "";
                objUcPatientEpisodeDetails.IsArrangeCpoeColumn = true; // For Rearranging Columns
                objWin.Content = objUcPatientEpisodeDetails;
                objWin.SizeToContent = SizeToContent.Manual;
                objWin.ResizeMode = ResizeMode.NoResize;
                objWin.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                objWin.Title = "Patient Open Encounters";
                CommandBinding objPatientEpisodeOk = FindResource("SelectOpenEpisode") as CommandBinding;
                objUcPatientEpisodeDetails.CommandBindings.Add(objPatientEpisodeOk);
                objUcPatientEpisodeDetails.IsEncounter = true;
                objWin.Width = 950;
                objWin.Height = 320;
                objWin.ShowDialog();
                if (objUcPatientEpisodeDetails.drv != null && objUcPatientEpisodeDetails.i)
                {
                    IsFromEncounterSelectectionChange = true;
                    IsFromClear = true;
                    SelectedProvider = null;
                    IsFromClear = false;
                    EncounterSelectionChanged(objUcPatientEpisodeDetails.drv);
                    IsFromEncounterSelectectionChange = false;
                    //--- AA0907
                    if (objUcPatientEpisodeDetails.drv.Row.Table.Columns.Contains("CLINICIAN_ID"))
                    {
                        ClinicianID = Convert.ToString(objUcPatientEpisodeDetails.drv["CLINICIAN_ID"]);
                    }
                    if (objUcPatientEpisodeDetails.drv.Row.Table.Columns.Contains("ISNONCONSULTENCOUNTER") && IfNullReturnZero(objUcPatientEpisodeDetails.drv["ISNONCONSULTENCOUNTER"]) == 0 &&
                        objUcPatientEpisodeDetails.drv.Row.Table.Columns.Contains("CLINICIAN_ID") && (objUcPatientEpisodeDetails.drv["CLINICIAN_ID"]).ToString() == string.Empty)
                    {
                        IsClinicianIDenable = true;
                    }
                    else if (objUcPatientEpisodeDetails.drv.Row.Table.Columns.Contains("ISNONCONSULTENCOUNTER") && IfNullReturnZero(objUcPatientEpisodeDetails.drv["ISNONCONSULTENCOUNTER"]) == 0 &&
                        objUcPatientEpisodeDetails.drv.Row.Table.Columns.Contains("CLINICIAN_ID") && (objUcPatientEpisodeDetails.drv["CLINICIAN_ID"]).ToString() != string.Empty)
                    {
                        IsClinicianIDenable = false;
                    }
                    else if (objUcPatientEpisodeDetails.drv.Row.Table.Columns.Contains("ISNONCONSULTENCOUNTER")
                        && objUcPatientEpisodeDetails.drv["ISNONCONSULTENCOUNTER"] != DBNull.Value)
                    {
                        IsClinicianIDenable = !Convert.ToBoolean(IfNullReturnZero(objUcPatientEpisodeDetails.drv["ISNONCONSULTENCOUNTER"]));
                    }
                    if (objUcPatientEpisodeDetails.drv.Row.Table.Columns.Contains("IS_PBM")
                        && objUcPatientEpisodeDetails.drv["IS_PBM"] != DBNull.Value)
                    {
                        Is_PBM = Convert.ToInt16(objUcPatientEpisodeDetails.drv["IS_PBM"]);
                    }
                    if (objUcPatientEpisodeDetails.drv.Row.Table.Columns.Contains("ISNONCONSULTENCOUNTER")
                        && objUcPatientEpisodeDetails.drv["ISNONCONSULTENCOUNTER"] != DBNull.Value)
                    {
                        IsNonConsultantEncounter = !Convert.ToBoolean(IfNullReturnZero(objUcPatientEpisodeDetails.drv["ISNONCONSULTENCOUNTER"]));
                    }
                    if (objUcPatientEpisodeDetails.drv.Row.Table.Columns.Contains("PH_SUBLOCATION_ID")
                        && objUcPatientEpisodeDetails.drv["PH_SUBLOCATION_ID"] != DBNull.Value)
                    {
                        IPVerificationLocation = Convert.ToInt16(objUcPatientEpisodeDetails.drv["PH_SUBLOCATION_ID"]);
                    }
                }
                OnSchemeSelectionChanged(SelectedPatientFinEncounterID);
                if (SelectedServiceType != (int)ServiceType.Cafeteria && EMROrderRelation != null && EMROrderRelation.Tables.Contains("Order")
                    && EMROrderRelation.Tables["Order"].KIIsNotNullAndRowCount() && SelectedProvider != null && SelectedProvider["H_EMP_ID"] != DBNull.Value)
                {
                    EMROrderRelation.Tables["Order"].DefaultView.RowFilter = "PROVIDER_ID<>" + Convert.ToDecimal(SelectedProvider["H_EMP_ID"]) + "AND ISSELECT=1";
                    foreach (DataRowView drv in EMROrderRelation.Tables["Order"].DefaultView)
                    {
                        drv["ISSELECT"] = false;
                    }
                }
                else if (SelectedServiceType == (int)ServiceType.Cafeteria && EMROrderRelation != null && EMROrderRelation.Tables.Contains("Order")
                    && EMROrderRelation.Tables["Order"].KIIsNotNullAndRowCount() && SelectedProvider != null && SelectedProvider["H_EMP_ID"] != DBNull.Value)
                {
                    EMROrderRelation.Tables["Order"].DefaultView.RowFilter = "EMP_ID<>" + Convert.ToDecimal(SelectedProvider["H_EMP_ID"]) + "AND ISSELECT=1";
                    foreach (DataRowView drv in EMROrderRelation.Tables["Order"].DefaultView)
                    {
                        drv["ISSELECT"] = false;
                    }

                }
                if (IsFromPharmacyPanel && objUcPatientEpisodeDetails.drv != null && objUcPatientEpisodeDetails.i)
                {
                    OnLoadEMROrderSelection();
                }
                ConsumptionMessage = false;
                //commented Bug ID-21179
                //isEncounterPopUpSelected = false;
            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                IsFromEncounterSelectectionChange = false;
            }
        }

        /// <summary>
        /// ERXNoRed Property
        /// </summary>
        private bool erxnored;
        public bool ERXNoRed
        {
            get { return erxnored; }
            set
            {
                erxnored = value;
                OnPropertyChanged("ERXNoRed");//Implement INotifyPropertyChanged
            }
        }

        /// <summary>
        /// ERXEnableCheck Property
        /// </summary>
        private bool erxenablecheck;
        public bool ERXEnableCheck
        {
            get { return erxenablecheck; }
            set
            {
                erxenablecheck = value;
                OnPropertyChanged("ERXEnableCheck");//Implement INotifyPropertyChanged
            }
        }


        /// <summary>
        /// IsIpClosedEncounterBill Property
        /// </summary>
        private bool isIpClosedEncounterBill;
        public bool IsIpClosedEncounterBill
        {
            get { return isIpClosedEncounterBill; }
            set
            {
                isIpClosedEncounterBill = value;
                OnPropertyChanged("IsIpClosedEncounterBill");//Implement INotifyPropertyChanged               
            }
        }

        private void EncounterSelectionChanged(DataRowView drvSelectedEncounter)
        {
            try
            {
                isEncounterPopUpSelected = true;
                SelectedEncounterDetails = drvSelectedEncounter;

                if (Convert.ToInt16(SelectedEncounterDetails["ENCOUNTER_STATUS"]) == 0)
                {
                    IsClosedEncounterSelected = true;
                    ////EncounterEndDate = Convert.ToDateTime(SelectedEncounterDetails["END_DATE"]).AddMinutes(-1);
                    EncounterEndDate = Convert.ToDateTime(SelectedEncounterDetails["END_DATE"]);
                    EncounterEndDateTemp = EncounterEndDate;
                    EncounterStartDate = Convert.ToDateTime(SelectedEncounterDetails["START_DATE"]);
                }
                else
                {
                    IsClosedEncounterSelected = false;
                    EncounterEndDate = System.DateTime.Now;
                    EncounterEndDateTemp = System.DateTime.Now;
                    EncounterStartDate = System.DateTime.Now;
                    if (SelectedEncounterDetails != null && SelectedEncounterDetails["START_DATE"]!=DBNull.Value)
                         EncounterStartDate = Convert.ToDateTime(SelectedEncounterDetails["START_DATE"]);
                }
                //if (SelectedEncounterDetails["END_DATE"] != DBNull.Value || Convert.ToInt16(SelectedEncounterDetails["ENCOUNTER_MODE"]) == (int)VisitMode.IP)
                //{
                //    IsEncounterBilled = true;
                //}
                //else
                //    IsEncounterBilled = false;   
                if (Convert.ToInt16(SelectedEncounterDetails["ENCOUNTER_MODE"]) == (int)VisitMode.IP)
                    IsIPEncounterSelected = true;
                else
                    IsIPEncounterSelected = false;
                //--- Prime Onsite changes, IsIpClosedEncounterBill
                if (Convert.ToInt16(SelectedEncounterDetails["ENCOUNTER_MODE"]) == (int)VisitMode.IP && Convert.ToInt16(SelectedEncounterDetails["ENCOUNTER_STATUS"]) == 0)
                    IsIpClosedEncounterBill = true;
                else
                    IsIpClosedEncounterBill = false;
                //----
                if (Convert.ToInt16(SelectedEncounterDetails["ISNONCONSULTENCOUNTER"]) == 0)
                    IsNonConsultEncounter = true;
                else
                    IsNonConsultEncounter = false;
                if (IsPendingOrderChecked)//for resetting the checkbox selection and loaded data
                {
                    IsPendingOrderChecked = false;
                }
                if (IsVerifiedChecked)
                {
                    IsVerifiedChecked = false;
                }
                if (IsVerifiedOmniChecked)
                {
                    IsVerifiedOmniChecked = false;
                }
                Executed_EMRRootChecked(null, null);
                IsLoadEMRCPOE = true;
                SelectedEMROrder = null;//handle Clearing issue
                //--- AA0907
                SelectedProviderValue = drvSelectedEncounter.Row["PROVIDER_ID"] != DBNull.Value ? Convert.ToString(drvSelectedEncounter.Row["PROVIDER_ID"]) : "";
                if (IsFromCoderReview && SelectedProviderValue==string.Empty) // For selecting SelectedProviderValue if value become empty in above line for Some case.
                {
                    SelectedProviderValue = drvSelectedEncounter.Row["PROVIDER_ID"] != DBNull.Value ? Convert.ToString(drvSelectedEncounter.Row["PROVIDER_ID"]) : "";
                }
                SelectedSpecialityValue = drvSelectedEncounter.Row["GEN_DEPARTMENT_ID"] != DBNull.Value ? Convert.ToString(drvSelectedEncounter.Row["GEN_DEPARTMENT_ID"]) : "";
                //--- AA0907
                ////Doctor selection change no need to select Pending order
                ClosedPatientFinEpisodeID = drvSelectedEncounter.Row["PAT_FIN_EPISODE_ID"] != DBNull.Value ? Convert.ToInt64(drvSelectedEncounter.Row["PAT_FIN_EPISODE_ID"]) : 0;
                ////End
                SelectedPatientFinEpisodeID = drvSelectedEncounter.Row["PAT_FIN_EPISODE_ID"] != DBNull.Value ? Convert.ToInt64(drvSelectedEncounter.Row["PAT_FIN_EPISODE_ID"]) : 0;
                SelectedPatientFinEncounterID = drvSelectedEncounter.Row.Table.Columns.Contains("PAT_FIN_ENCOUNTER_ID") &&
                drvSelectedEncounter.Row["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value ? Convert.ToInt64(drvSelectedEncounter.Row["PAT_FIN_ENCOUNTER_ID"]) : 0;

                //For fetchin advance based on active enocunter ID
                SelectedPatientFinEncounterIDActive = drvSelectedEncounter.Row.Table.Columns.Contains("PAT_FIN_ENCOUNTER_ID") &&
                drvSelectedEncounter.Row["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value ? Convert.ToInt64(drvSelectedEncounter.Row["PAT_FIN_ENCOUNTER_ID"]) : 0;
                if (InternalExternalDetails != null)
                {
                    InternalExternalDetails.Rows.Clear();
                    // InternalExternalDetails.Rows.Add();
                }
                ERXNo = Convert.ToString(drvSelectedEncounter.Row["ERX_REFERENCENO"]);
                ClaimFormNo = Convert.ToString(drvSelectedEncounter.Row["CLAIM_FORM_NO"]);

                if (Convert.ToString(drvSelectedEncounter.Row["ERX_REFERENCENO"]) != string.Empty)
                {
                    ERXEnableCheck = true;
                }
                ERXNoBlack = false;
                ERXNoRed = true;

                // -- Commented by Benson, Client issue -- 25/08/2015
                //if (!IsClosedEncounterSelected)
                //{
                //    //EPISODE_NO VALID CHECKING
                //    SelectedOpenEpisodeID = CheckingEpisodeNoValidity(drvSelectedEncounter.Row.Table);
                //    //ENB
                //}
                //else
                // -- End Commented by Benson, Client issue -- 25/08/2015
                    SelectedOpenEpisodeID = SelectedEncounterDetails["EPISODE_NO"] != DBNull.Value ? Convert.ToString(SelectedEncounterDetails["EPISODE_NO"]) : "";
                SelectedEncounterNo = drvSelectedEncounter.Row["ENCOUNTER_NO"] != DBNull.Value ? Convert.ToString(drvSelectedEncounter.Row["ENCOUNTER_NO"]) : "";
                IsEmergencyEncounter = drvSelectedEncounter.Row["ISEMERGENCY"] != DBNull.Value ? Convert.ToBoolean(drvSelectedEncounter.Row["ISEMERGENCY"]) : false;
                IsHandOverEncounter = (drvSelectedEncounter.Row.Table.Columns.Contains("ISHANDOVER") && drvSelectedEncounter.Row["ISHANDOVER"] != DBNull.Value
                       && Convert.ToBoolean(drvSelectedEncounter.Row["ISHANDOVER"])) ? true : false;
                FetchCopayAmountUsed();
                if (DefaultSettings.Values.IS_VERIFICATION_REQUIRED && IsFromPharmacyPanel
                            && Convert.ToInt16(SelectedVisitModeNew) == (int)VisitMode.IP)
                {
                    EnableVerificationSettingBased = true;
                }
                if (IsFromPharmacyPanel && EnableVerificationSettingBased &&
                   Convert.ToInt16(SelectedEncounterDetails["ENCOUNTER_MODE"]) == (int)VisitMode.IP)
                {
                    //skiping by mohd adil for new requiremnt of verification
                    EMROrderRelation = null;
                }
                //--- AA0907
                else if ((IsLoadEMRCPOE
                    || ((SelectedVisitModeNew == (int)VisitMode.IP
                    || (dtPatientVisit.KIIsNotNullAndRowCount() && dtPatientVisit.Rows[0]["VISIT_TYPE"] != DBNull.Value && Convert.ToInt16(dtPatientVisit.Rows[0]["VISIT_TYPE"]) == (int)VisitMode.IP))
                    && SelectedEncounterDetails != null))
                    && SelectedProvider != null)
                {
                    SetInitalData_EMRCPOE();
                }
                //--- AA0907

                //ganesh
                if (IsFromPharmacyPanel && IsFromPharmacy && Convert.ToInt16(SelectedVisitModeNew) == (int)VisitMode.OPCREDIT
                   && IfNullReturnZero(drvSelectedEncounter["IS_INSURANCE"]) == 1)
                {
                    ERxVisibility = Visibility.Visible;
                }
                else
                {
                    ERxVisibility = Visibility.Collapsed;
                }
                if (IsFromPharmacyPanel && (Convert.ToInt16(SelectedVisitModeNew) == (int)VisitMode.OPCREDIT || Convert.ToInt16(SelectedVisitModeNew) == (int)VisitMode.OPCASH) && IS_TOPUP_REQUIRED)
                {
                    IS_TOPUP_VISIBILE = true;
                }
                else
                {
                    IS_TOPUP_VISIBILE = false;
                }
                //ganesh visibility for erx  
                EnablePrescriptionDetails = true;
                //ucServiceDeliveryServicesDescription.EnableVerificationSettingBased = false;
                EnableVerificationSettingBased = false;
                if (IsIPEncounterSelected)
                {
                    if (drvSelectedEncounter.Row.Table.Columns.Contains("PH_SUBLOCATION_ID")
                    && drvSelectedEncounter["PH_SUBLOCATION_ID"] != DBNull.Value)
                    {
                        IPVerificationLocation = Convert.ToInt16(drvSelectedEncounter["PH_SUBLOCATION_ID"]);
                    }
                    if (DefaultSettings.Values.IS_VERIFICATION_REQUIRED && IsFromPharmacyPanel
                            && Convert.ToInt16(SelectedVisitModeNew) == (int)VisitMode.IP)
                    {
                        EnableVerificationSettingBased = true;
                    }
                   
                    //Commented by Mohd Adil for new requiremnt of verified order
                    //VerificationFetch();
                }
            }
            catch (Exception ex)
            {
                throw ;
            }
        }

        /// <summary>
        /// EnablePrescriptionDetails Property
        /// </summary>
        private bool enablePrescriptionDetails;
        public bool EnablePrescriptionDetails
        {
            get { return enablePrescriptionDetails; }
            set
            {
                enablePrescriptionDetails = value;
                OnPropertyChanged("EnablePrescriptionDetails");//Implement INotifyPropertyChanged
            }
        }



        /// <summary>
        /// DtNonConsultEncSetting Property
        /// </summary>
        private DataTable dtNonConsultEncSetting;
        public DataTable DtNonConsultEncSetting
        {
            get { return dtNonConsultEncSetting; }
            set
            {
                dtNonConsultEncSetting = value;
                OnPropertyChanged("DtNonConsultEncSetting");//Implement INotifyPropertyChanged
            }
        }



        private DataTable Fetch_PhdtlsOrder(long emrdtlsId)
        {
            MainBilling objMainBilling = new MainBilling();
            DataTable dtFetch = new DataTable();
            dtFetch.Columns.Add("EMR_PAT_DTLS_PH_ORDER_ID", typeof(Int64));
            dtFetch.Columns.Add("MODE", typeof(int));
            dtFetch.Rows.Add(emrdtlsId, 0);
            DataTable dtTempVal = objMainBilling.FetchPhDtlsOrder(dtFetch);
            return dtTempVal;
        }
        private long GetLatestDtlsSchemeID(long DtlsSchemeID)
        {
            long dtlsSchemeID = 0;
            MainMasterSettings objMaster = new MainMasterSettings();
            DataTable dtCriteria = new DataTable();
            dtCriteria.Columns.Add("INCO_DTLS_SCHEME_ID", typeof(Int64));
            dtCriteria.Columns.Add("MODE", typeof(int));
            dtCriteria.Columns.Add("MRNO", typeof(string));
            dtCriteria.Rows.Add(DtlsSchemeID, 7, PatientInformation != null && PatientInformation.Rows.Count > 0 && PatientInformation.Columns.Contains("MRNO")
                && PatientInformation.Rows[0]["MRNO"] != DBNull.Value ? PatientInformation.Rows[0]["MRNO"].ToString() : "");
            DataSet dsData = objMaster.FetchSchemeDtls(dtCriteria, 6, 0);//SELECTIONMODE=5
            if (dsData != null && dsData.Tables.Contains("INCO_DTLS_SCHEME") &&
               dsData.Tables["INCO_DTLS_SCHEME"].Rows.Count > 0)
            {
                dtlsSchemeID = Convert.ToInt64(dsData.Tables["INCO_DTLS_SCHEME"].Rows[0]["INCO_DTLS_SCHEME_ID"]);
                if (Scheme.KIIsNotNullAndRowCount() && Scheme.Rows[0]["INCO_DTLS_SCHEME_ID"] != DBNull.Value
                    && Scheme.Select("INCO_DTLS_SCHEME_ID=" + dtlsSchemeID).Length == 0)
                {
                    dtlsSchemeID = Convert.ToInt64(Scheme.Rows[0]["INCO_DTLS_SCHEME_ID"]);
                }
            }
            else if (Scheme.KIIsNotNullAndRowCount() && Scheme.Rows[0]["INCO_DTLS_SCHEME_ID"] != DBNull.Value)
            {
                dtlsSchemeID = Convert.ToInt64(Scheme.Rows[0]["INCO_DTLS_SCHEME_ID"]);
            }
            return dtlsSchemeID;
        }
        private void ReChangeChargeDetails()
        {
            DataRow[] drBrandMed = null;
            //DataTable dtSetting = CommonData.GetDefaultSettings(0, "IS_PBM_REQUEST_ONLY");
            foreach (DataRow item in BillData.Tables["INV_PAT_BILLING"].Rows)
            {
                if (item["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value && EMROrderRelation != null &&
                    EMROrderRelation.Tables["Detail"].KIIsNotNullAndRowCount() &&
                              (EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID='" + item["EMR_PAT_DTLS_INV_ORDER_ID"] + "'").Count() > 0))
                {
                    drBrandMed = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID='" + item["EMR_PAT_DTLS_INV_ORDER_ID"] + "'");
                    EMRItemSelected = drBrandMed[0];
                    Quantity = 1;
                    if (SelectedVisitModeNew == (int)VisitMode.OPCREDIT && SelectedServiceType == (int)ServiceType.Pharmacy && IsFromPharmacyPanel &&
                        PhRXDtlsInfo.KIIsNotNullAndRowCount() && drBrandMed[0]["BRAND_ID"] != DBNull.Value)
                    {
                        var query = PhRXDtlsInfo.AsEnumerable().Where(x => x["REQUESTED_ITEM_ID"] != DBNull.Value && x["ORDERED_ITEM_ID"] != DBNull.Value &&
                            Convert.ToDecimal(x["ORDERED_ITEM_ID"]) != Convert.ToDecimal(x["REQUESTED_ITEM_ID"]) &&
                            Convert.ToDecimal(x["EMR_PAT_DTLS_PH_ORDER_ID"]) == Convert.ToDecimal(item["EMR_PAT_DTLS_INV_ORDER_ID"]) &&
                            Convert.ToDecimal(x["ORDERED_ITEM_ID"]) == Convert.ToDecimal(drBrandMed[0]["BRAND_ID"])
                              ).Select(x => x);
                        if (query.Any())
                        {
                            item["INV_MAST_SERVICE_ID"] = query.First()["REQUESTED_ITEM_ID"];
                            
                        }
                       
                        var queryQty = PhRXDtlsInfo.AsEnumerable().Where(x => Convert.ToDecimal(x["EMR_PAT_DTLS_PH_ORDER_ID"]) == Convert.ToDecimal(item["EMR_PAT_DTLS_INV_ORDER_ID"]) &&
                           Convert.ToDecimal(x["ORDERED_ITEM_ID"]) == Convert.ToDecimal(drBrandMed[0]["BRAND_ID"])).Select(x => x);
                        if (queryQty.Any() && DefaultSettings.Values.IS_PBM_REQUEST_ONLY)
                        {
                            Quantity = IfNullReturnZero(queryQty.First()["APPROVED_QTY"]);
                            item["QTY"] = Quantity;
                        }
                    }
                    else if (SelectedVisitModeNew == (int)VisitMode.OPCREDIT && SelectedServiceType == (int)ServiceType.Pharmacy && IsFromPharmacyPanel &&
                        PhRXDtlsInfo.KIIsNotNullAndRowCount() && drBrandMed[0]["BRAND_ID"] == DBNull.Value)
                    {
                        var query = PhRXDtlsInfo.AsEnumerable().Where(x => x["REQUESTED_ITEM_ID"] != DBNull.Value && IfNullReturnZero(x["ORDERED_GENERIC_ID"]) == IfNullReturnZero(drBrandMed[0]["GENERIC_ID"])
                               && IfNullReturnZero(x["ISGENERIC_ORDER"]) == 1).Select(x => x);
                        if (query.Any())
                        {
                            item["INV_MAST_SERVICE_ID"] = query.First()["REQUESTED_ITEM_ID"];
                            if (DefaultSettings.Values.IS_PBM_REQUEST_ONLY)
                            {
                                Quantity = IfNullReturnZero(query.First()["APPROVED_QTY"]);
                                item["QTY"] = Quantity;
                            }
                        }
                    }

                }
                if (item["INV_MAST_SERVICE_ID"] != DBNull.Value)
                {
                    DataRow drRows;
                    drRows = this.FindService(Convert.ToInt64(item["INV_MAST_SERVICE_ID"]));
                    if (drRows != null)
                    {
                        item["MARKUP"] = 0;
                        item["DISCOUNT"] = 0;
                        item["MARKUP_IN_PERC"] = 0;
                        item["DISCOUNT_IN_PERC"] = 0;
                        item["SCHEME_MARKUP"] = 0;
                        item["SCHEME_DISCOUNT_MARKUP"] = 0;
                        item["DISCOUNT_MARKUP"] = 0;
                        item["AMOUNT_SCHEME"] = 0;
                        item["SCHEME_DISCOUNT_IN_PERC"] = 0;
                        item["SCHEME_DISCOUNT"] = 0;
                        item["CO_PAY_AMOUNT"] = 0;
                        item["NET_AMOUNT"] = 0;
                        item["TOTAL"] = 0;
                        item["CO_PAY_IN_PER"] = 0;
                        item["OTHER_CHARGE"] = 0;
                        item["DISCOUNT_MARKUP_MANUAL"] = 0;
                        item["PERCENT_VALUE_FIXED"] = (int)ValueMode.Percentage;
                        item["CO_PAY_AMOUNT_COLLECT"] = 0;
                        item["APPROVAL_STATUS"] = DBNull.Value;
                        item["VALIDATION_STATUS"] = DBNull.Value;
                        item["IS_EDITED"] = DBNull.Value;
                        Service = item;
                        isvisittypechange = true;
                        LoadServiceChargeDetails(Convert.ToInt64(item["INV_MAST_SERVICE_ID"]), item);
                        if (drBrandMed != null && drBrandMed.Length > 0)
                        {
                            item["EMR_PAT_DTLS_INV_ORDER_ID"] = drBrandMed[0]["EMR_PAT_DTLS_INV_ORDER_ID"];
                        }
                        item["CO_PAY_AMOUNT_COLLECT"] = this.CalculateCopay(item);  //for calculate the copay if payment is patient
                        SelectedItemServiceType = item["SERVICE_TYPE"] != DBNull.Value ? Convert.ToInt16(item["SERVICE_TYPE"]) : -1;
                        if (SelectedVisitModeNew == (int)VisitMode.OPCREDIT || SelectedVisitModeNew == (int)VisitMode.IP)
                        {
                            ValidateInsuranceApproval(item);
                        }
                        //if (dtSetting != null && dtSetting.Rows.Count > 0 && Convert.ToInt16(dtSetting.Rows[0]["VALUE"]) == 1 &&
                        if(DefaultSettings.Values.IS_PBM_REQUEST_ONLY &&
                            IsFromPharmacyPanel && SelectedVisitModeNew == (int)VisitMode.OPCASH)
                        {
                            item["IS_APPROVED"] = 1;//not approved will disable the save checkbox
                            item["IS_APPROVED_ENABLE"] = 1;//to disable edit, qty and qty unit.
                        }
                        else
                        {
                            if (IfNullReturnZero(item["EMR_PAT_DTLS_INV_ORDER_ID"]) > 0 && ERxVisibility == Visibility.Visible)
                            {
                                item["IS_APPROVED"] = 1;//not approved will disable the save checkbox
                                item["IS_APPROVED_ENABLE"] = 1;//to disable edit, qty and qty unit.
                            }
                            else if (IfNullReturnZero(item["EMR_PAT_DTLS_INV_ORDER_ID"]) > 0 && ERxVisibility == Visibility.Collapsed)
                            {
                                Main.MainBilling objMainBilling = new MainBilling();
                                DataTable dtCriteria = new DataTable();
                                dtCriteria.Columns.Add("MODE", typeof(int));
                                dtCriteria.Columns.Add("PAT_FIN_ENCOUNTER_ID", typeof(long));
                                //if (dtSetting != null && dtSetting.Rows.Count > 0 && Convert.ToInt16(dtSetting.Rows[0]["VALUE"]) == 1
                                    if(DefaultSettings.Values.IS_PBM_REQUEST_ONLY 
                                    && IsFromPharmacyPanel && SelectedPatientFinEncounterID != null && SelectedPatientFinEncounterID > 0)
                                {
                                    dtCriteria.Rows.Add(3, SelectedPatientFinEncounterID);
                                    PhRXDtlsInfoNotApproved = objMainBilling.FetchPharmacyRXDtls(dtCriteria);
                                }
                                if (PhRXDtlsInfoNotApproved.KIIsNotNullAndRowCount())
                                {
                                     item["IS_APPROVED"] = 1;//not approved will disable the save checkbox
                                     item["IS_APPROVED_ENABLE"] = 0;
                                    DataRow[] filteredQuer = PhRXDtlsInfoNotApproved.AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(item["EMR_PAT_DTLS_INV_ORDER_ID"])).ToArray();
                                    if ((filteredQuer.Any() && (IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) != 1 && IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) != 2 && IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) != 7 && IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) != 3)) || !filteredQuer.Any())
                                    {
                                        item["IS_APPROVED"] = 0;//not approved will disable the save checkbox
                                        item["IS_APPROVED_ENABLE"] = 0;//to disable edit, qty and qty unit.
                                    }
                                    if (filteredQuer.Any() && IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) == 3)
                                    {
                                        //item["INCEXLCSTATUS"] = 0;
                                        //if included item is denied Through PBM then make it excluded....PBM Live issue correction
                                        if (item["INCEXLCSTATUS"] != DBNull.Value && Convert.ToInt32(item["INCEXLCSTATUS"]) == 1)
                                        {
                                            item["INCEXLCSTATUS"] = 0;
                                            item["IS_EDITED"] = 1;
                                            item["EDITED_STATUS"] = (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.InclusiontoExclusion;
                                            LoadServiceChargeDetails(Convert.ToInt64(item["INV_MAST_SERVICE_ID"]), item);
                                            //item["IS_EDITED"] = 0;
                                            //item["EDITED_STATUS"] = DBNull.Value;
                                        }
                                    }
                                    if (filteredQuer.Any() && (IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) == 1 || IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) == 2 || IfNullReturnZero(filteredQuer[0]["REQUEST_STATUS"]) == 7))
                                    {
                                        item["APPROVAL_STATUS"] = 5;
                                        //if excluded item is approved Through PBM then make it included....PBM Live issue correction
                                        if (item["INCEXLCSTATUS"] != DBNull.Value && Convert.ToInt16(item["INCEXLCSTATUS"]) == 0)
                                        {
                                            item["INCEXLCSTATUS"] = 1;
                                            item["IS_EDITED"] = 1;
                                            item["EDITED_STATUS"] = (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.ExclusiontoInclusion;
                                            LoadServiceChargeDetails(Convert.ToInt64(item["INV_MAST_SERVICE_ID"]), item);
                                            //item["IS_EDITED"] = 0;
                                            //item["EDITED_STATUS"] = DBNull.Value;
                                        }
                                        
                                    }
                                }
                                else
                                {
                                    item["IS_APPROVED"] = 0;//not approved will disable the save checkbox
                                    item["IS_APPROVED_ENABLE"] = 0;//to disable edit, qty and qty unit.
                                }
                                if ((item["INCEXLCSTATUS"]!=DBNull.Value && Convert.ToInt16(item["INCEXLCSTATUS"]) == 0) || IfNullReturnZero(item["MATERIAL_TYPE"]) == 1 || IfNullReturnZero(item["MATERIAL_TYPE"]) == 2
                                    || IfNullReturnZero(item["MATERIAL_TYPE"]) == 3) //for consumable no need to check approval, bug id 39185
                                {
                                    item["IS_APPROVED"] = 1;//not approved will disable the save checkbox
                                    item["IS_APPROVED_ENABLE"] = 1;//to disable edit, qty and qty unit.
                                }
                            }
                        }
                        CalculateMaxMinCopay();
                        CalculateServiceTotal();
                        isvisittypechange = false;
                    }
                }
                else if (DefaultSettings.Values.IS_PBM_REQUEST_ONLY &&
                    //(dtSetting != null && dtSetting.Rows.Count > 0 && Convert.ToInt16(dtSetting.Rows[0]["VALUE"]) == 1 && 
                    IsFromPharmacyPanel && SelectedVisitModeNew == (int)VisitMode.OPCASH)
                {
                    item["IS_APPROVED"] = 1;//not approved will disable the save checkbox
                    item["IS_APPROVED_ENABLE"] = 1;//to disable edit, qty and qty unit.
                }
                else if (DefaultSettings.Values.IS_PBM_REQUEST_ONLY &&
                    //dtSetting != null && dtSetting.Rows.Count > 0 && Convert.ToInt16(dtSetting.Rows[0]["VALUE"]) == 1 && 
                    IsFromPharmacyPanel && SelectedVisitModeNew == (int)VisitMode.OPCREDIT)
                {
                    item["IS_APPROVED"] = 0;//not approved will disable the save checkbox
                    item["IS_APPROVED_ENABLE"] = 0;//to disable edit, qty and qty unit.
                }
            }
            TotalCopay = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(dc => dc["CO_PAY_AMOUNT"] != DBNull.Value)
                                       .Sum(s => Convert.ToDecimal(s["CO_PAY_AMOUNT"]));
        }

        private void Executed_OutSideProviderHospital(object sender, ExecutedRoutedEventArgs e)
        {
            CommonSharedUI.OutSideProviderHospital.UCOutsideProviderHospital objOutsideProviderHospital = new CommonSharedUI.OutSideProviderHospital.UCOutsideProviderHospital();
            CommonWindow objwin = new CommonWindow(WindowControlBoxStyle.OnlyWithClose);
            objwin.Title = "OutSide Provider/Hospital";
            objwin.Width = 500;
            objwin.Height = 150;
            objwin.Content = objOutsideProviderHospital;
            objwin.SizeToContent = SizeToContent.Manual;
            objwin.Owner = Window.GetWindow(this);
            objwin.ResizeMode = ResizeMode.NoResize;
            objwin.WindowStartupLocation = WindowStartupLocation.CenterScreen;
            objwin.ShowInTaskbar = false;
            objOutsideProviderHospital.ProviderInformation = ProviderDetails;
            objOutsideProviderHospital.HospitalInformation = HospitalInformation;
            objwin.ShowDialog();
            ProviderDetails = objOutsideProviderHospital.ProviderInformation;
            HospitalInformation = objOutsideProviderHospital.HospitalInformation;
        }

        private void Executed_menuViewDrugInfo(object sender, ExecutedRoutedEventArgs e)
        {

        }

        private void Executed_menuOrderInfo(object sender, ExecutedRoutedEventArgs e)
        {
            DataRowView dr = (DataRowView)e.Parameter;
            if (EMROrderRelation != null && EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0
                && dr.Row["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value
                && EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID=" + dr.Row["EMR_PAT_DTLS_INV_ORDER_ID"]).Count() > 0)
            {
                DataRow drEmrRow = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID=" + dr.Row["EMR_PAT_DTLS_INV_ORDER_ID"]).First();
                if (Convert.ToInt32(drEmrRow["ISCONSUMABLE"]) == 0 && Convert.ToInt32(drEmrRow["ISGAS"]) == 0)
                {
                    CommonWindow objWin = new CommonWindow(WindowControlBoxStyle.OnlyWithClose);
                    ucCPOEMedicationOrderInfoView objucCPOEMedicine = new ucCPOEMedicationOrderInfoView(Convert.ToString(drEmrRow["EMR_PAT_DTLS_INV_ORDER_ID"]));
                    objWin.Content = objucCPOEMedicine;
                    objWin.ResizeMode = ResizeMode.NoResize;
                    objWin.Width = 570;
                    objWin.Title = "Drug Information View";
                    objWin.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                    objWin.ShowDialog();
                }
            }
        }

        private void Executed_menuMARView(object sender, ExecutedRoutedEventArgs e)
        {
            DataRowView dr = (DataRowView)e.Parameter;
            if (EMROrderRelation != null && EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0
                && dr.Row["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value
                && EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID=" + dr.Row["EMR_PAT_DTLS_INV_ORDER_ID"]).Count() > 0)
            {
                DataRow drEmrRow = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID=" + dr.Row["EMR_PAT_DTLS_INV_ORDER_ID"]).First();
                if (Convert.ToInt32(drEmrRow["ISCONSUMABLE"]) == 0 && Convert.ToInt32(drEmrRow["ISGAS"]) == 0)
                {
                    CommonWindow objWin = new CommonWindow(WindowControlBoxStyle.OnlyWithClose);
                    ucCPOEMedicineAdministrationView objucCPOEMedicine = new ucCPOEMedicineAdministrationView(Convert.ToInt64(drEmrRow["EMR_PAT_DTLS_INV_ORDER_ID"]));
                    objWin.Content = objucCPOEMedicine;
                    objWin.SizeToContent = SizeToContent.WidthAndHeight;
                    objWin.ResizeMode = ResizeMode.NoResize;
                    objWin.Title = "MAR View";
                    objWin.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                    objWin.ShowDialog();
                }
            }
        }

        private void Executed_menuIntervention(object sender, ExecutedRoutedEventArgs e)
        {
            DataRowView dr = (DataRowView)e.Parameter;
            if (EMROrderRelation != null && EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0
                && dr.Row["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value
               && EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID=" + dr.Row["EMR_PAT_DTLS_INV_ORDER_ID"]).Count() > 0)
            {
                DataRow drEmrRow = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID=" + dr.Row["EMR_PAT_DTLS_INV_ORDER_ID"]).First();
                this.IsRefreshTask = false;
                CommonWindow objWin = new CommonWindow(WindowControlBoxStyle.OnlyWithClose);
                ucMedicineInterventionContainer objucMedicineInterventionContainer = new ucMedicineInterventionContainer(Convert.ToInt64(drEmrRow["EMR_PAT_DTLS_INV_ORDER_ID"]));
                objWin.Content = objucMedicineInterventionContainer;
                objWin.SizeToContent = SizeToContent.WidthAndHeight;
                objWin.ResizeMode = ResizeMode.NoResize;
                objWin.WindowStartupLocation = WindowStartupLocation.Manual;
                objWin.Top = 100;
                objWin.Left = 100;
                objWin.Title = "Intervention";
                objWin.ShowDialog();
                if (objucMedicineInterventionContainer.IsDataSaved == true)
                {
                    IsRefreshTask = true;
                }
            }
        }

        private void Executed_menuHold(object sender, ExecutedRoutedEventArgs e)
        {
            DataRowView dr = (DataRowView)e.Parameter;
            if (EMROrderRelation != null && EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0
                && dr.Row["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value
              && EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID=" + dr.Row["EMR_PAT_DTLS_INV_ORDER_ID"]).Count() > 0)
            {
                DataRow drEmrRow = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID=" + dr.Row["EMR_PAT_DTLS_INV_ORDER_ID"]).First();
                if (drEmrRow["START_DATE"] != DBNull.Value && drEmrRow["END_DATE"] != DBNull.Value && Convert.ToInt32(drEmrRow["ISCONSUMABLE"]) == 0)
                {
                    DateTime dtStart = Convert.ToDateTime(drEmrRow["START_DATE"]);
                    DateTime dtEnd = Convert.ToDateTime(drEmrRow["END_DATE"]);
                    DateTime now = DateTime.Now.Date;
                    if (Convert.ToDateTime(DateTime.Now.ToString("dd-MMM-yyyy HH:mm"))
                        <= Convert.ToDateTime(dtEnd.ToString("dd-MMM-yyyy HH:mm")))
                    {
                        CommonWindow objWin = new CommonWindow(WindowControlBoxStyle.OnlyWithClose);
                        DataTable dtTemp = drEmrRow.Table.Clone();
                        dtTemp.ImportRow(drEmrRow);
                        dtTemp.Columns["EMR_PAT_DTLS_INV_ORDER_ID"].ColumnName = "EMR_PAT_DTLS_PH_ORDER_ID";
                        dtTemp.Columns["EMR_PAT_MAST_INV_ORDER_ID"].ColumnName = "EMR_PAT_MAST_PH_ORDER_ID";
                        dtTemp.Columns.Add("MRNO");

                        if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("EMR_PROVIDER_VISIT") &&
                             EMROrderRelation.Tables["EMR_PROVIDER_VISIT"].Rows.Count > 0)
                        {
                            dtTemp.Rows[0]["MRNO"] = EMROrderRelation.Tables["EMR_PROVIDER_VISIT"].Rows[0]["MRNO"];
                        }

                        ucCPOEMedicationDiscontinueHold objucCPOEMedicationDiscontinueHold = new ucCPOEMedicationDiscontinueHold(false,
                            dtTemp.DefaultView[0]);
                        objWin.Content = objucCPOEMedicationDiscontinueHold;
                        objWin.ResizeMode = ResizeMode.NoResize;
                        objWin.SizeToContent = SizeToContent.WidthAndHeight;
                        string strtitle = dr["NAME"].ToString().Trim() + " - DISCONTINUE/HOLD/RESTART";
                        objWin.Title = strtitle;
                        objWin.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                        objWin.ShowDialog();
                        if (objucCPOEMedicationDiscontinueHold.UpdateDataFromFo == true)
                        {
                            DataRow drData = objucCPOEMedicationDiscontinueHold.drvRow;
                            if (drData != null)
                            {
                                drEmrRow["STOP_STATUS"] = drData["STOP_STATUS"];
                                drEmrRow["STOPED_BY"] = drData["STOPED_BY"];
                                drEmrRow["STOP_DATE"] = drData["STOP_DATE"];
                                drEmrRow["STOP_REMARKS"] = drData["STOP_REMARKS"];
                            }
                        }
                    }
                }
            }
        }

        private void Executed_menuPharmacyEducation(object sender, ExecutedRoutedEventArgs e)
        {
            DataRowView dr = (DataRowView)e.Parameter;
            if (EMROrderRelation != null && EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0
               && dr.Row["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value
              && EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID=" + dr.Row["EMR_PAT_DTLS_INV_ORDER_ID"]).Count() > 0)
            {
                DataRow drEmrRow = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID=" + dr.Row["EMR_PAT_DTLS_INV_ORDER_ID"]).First();
                CommonWindow objWin = new CommonWindow(WindowControlBoxStyle.OnlyWithClose);
                ucEducationResourceLinkContainer objucEducationResource = new ucEducationResourceLinkContainer(Convert.ToInt64(drEmrRow["EMR_PAT_DTLS_INV_ORDER_ID"]));
                objWin.Content = objucEducationResource;
                objWin.Width = 570;
                objWin.Height = 300;
                objWin.Title = "Education Resource";
                objWin.ResizeMode = ResizeMode.NoResize;
                objWin.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                objWin.ShowDialog();
            }
        }

        private void Executed_MenuIssueRemark(object sender, ExecutedRoutedEventArgs e)
        {
            DataRowView dr = (DataRowView)e.Parameter;
            if (EMROrderRelation != null && EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0
                && dr.Row["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value
             && EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID=" + dr.Row["EMR_PAT_DTLS_INV_ORDER_ID"]).Count() > 0)
            {
                DataRow drEmrRow = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID=" + dr.Row["EMR_PAT_DTLS_INV_ORDER_ID"]).First();
                CommonWindow objWin = new CommonWindow(WindowControlBoxStyle.OnlyWithClose);
                Bill_IssuingRemarks objBill_IssuingRemarks = new Bill_IssuingRemarks();
                objWin.Content = objBill_IssuingRemarks;
                objWin.Title = "Not Issuing Remark";
                objWin.Width = 225;
                objWin.Height = 165;
                objWin.ResizeMode = ResizeMode.NoResize;
                objWin.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                objWin.ShowDialog();
                IssuingRemarks = objBill_IssuingRemarks.IssuingRemarks;
                drEmrRow["INDENT_ISSUE_REMARK"] = IssuingRemarks;
            }
        }

        private void Executed_EditPharmacy_Click(object sender, ExecutedRoutedEventArgs e)
        {
            DataRowView dr = (DataRowView)e.Parameter;
            if (EMROrderRelation != null && EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0
             && dr.Row["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value
             && EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID=" + dr.Row["EMR_PAT_DTLS_INV_ORDER_ID"]).Count() > 0)
            {
                Infologics.Medilogics.CommonSharedUI.EMROrders.PharmacyTemp ObjectPharmacy = e.Parameter as Infologics.Medilogics.CommonSharedUI.EMROrders.PharmacyTemp;
                bool isAdditiveItem = false;
                DataRow drEmrRow = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID=" + dr.Row["EMR_PAT_DTLS_INV_ORDER_ID"]).First();
                //if (Convert.ToInt32(drEmrRow["ISINFUSION"]) == 0 && Convert.ToInt32(drEmrRow["ISCONSUMABLE"]) == 0 && Convert.ToInt32(drEmrRow["ISGAS"]) == 0)
                {
                    if (IfNullReturnZero(dr["IS_ADDITIVE"]) == 1 && IfNullReturnZero(drEmrRow["ISINFUSION"]) == 1)
                    {
                        isAdditiveItem = true;
                    }
                    CommonWindow objWin = new CommonWindow(WindowControlBoxStyle.OnlyWithClose);
                    DataTable dtTemp = drEmrRow.Table.Clone();
                    dtTemp.ImportRow(drEmrRow);
                    dtTemp.Columns["EMR_PAT_DTLS_INV_ORDER_ID"].ColumnName = "EMR_PAT_DTLS_PH_ORDER_ID";
                    CommonSharedUI.CPOEMedication.ucCPOEMedicationEdit objucCPOEMedicationEdit = new CommonSharedUI.CPOEMedication.ucCPOEMedicationEdit(dtTemp);
                    objWin.Content = objucCPOEMedicationEdit;
                    objWin.ResizeMode = ResizeMode.NoResize;
                    dtMedicationdtls = objucCPOEMedicationEdit.dtMedicationdtls;
                    objWin.SizeToContent = SizeToContent.WidthAndHeight;
                    //objWin.Height = 550;
                    //objWin.Width = 700;
                    string strName = "Edit Pharmacy Order-" + dtMedicationdtls.Rows[0]["MED_NAME"].ToString();
                    if (strName.Length > 45)
                    {
                        strName = strName.Substring(0, 42) + "....";
                    }
                    objWin.Title = strName; //"Edit Pharmacy Order-" + dtMedicationdtls.Rows[0]["MED_NAME"];
                    objWin.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                    objWin.ShowDialog();
                    if (objucCPOEMedicationEdit.IsDataSaved)
                    {
                        if ((IfNullReturnZero(dtTemp.Rows[0]["ISINFUSION"]) == 0 && IfNullReturnZero(dtTemp.Rows[0]["ISINFUSION"]) != IfNullReturnZero(dtMedicationdtls.Rows[0]["ISINFUSION"]))
                    || IfNullReturnZero(dtTemp.Rows[0]["ISINFUSION"]) == 1)
                        {
                            string emr_mast_id = string.Join(",", EMROrderRelation.Tables["Order"].AsEnumerable().Where(x => Convert.ToBoolean(x["ISSELECT"]))
                                .Select(x => Convert.ToString(x["EMR_PAT_MAST_INV_ORDER_ID"])).ToArray());
                            var Orderdetails = EMROrderRelation.Tables["OrderRelation"].AsEnumerable().Where(x => Convert.ToBoolean(x["ISSELECT"])).Select(x => x);
                           // ClearBillServiceTypeBased(true);
                            if (BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
                            {
                                BillData.Tables["INV_PAT_BILLING"].Clear();
                            }
                            if (BillData.Tables["PH_PAT_DTLS_ORDER"].KIIsNotNullAndRowCount())
                            {
                                BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Clear();
                            }
                            SetInitalData_EMRCPOE();
                            if (emr_mast_id.Any() && EMROrderRelation.Tables["Order"].KIIsNotNullAndRowCount())
                            {
                                EMROrderRelation.Tables["Order"].AsEnumerable().Where(x => x["EMR_PAT_MAST_INV_ORDER_ID"] != DBNull.Value &&
                                    emr_mast_id.Contains(Convert.ToString(x["EMR_PAT_MAST_INV_ORDER_ID"]))).ForEach(x => x["ISSELECT"] = true);                                
                            }
                            if (Orderdetails.Any())
                            {
                                foreach (DataRowView drDetails in Orderdetails.CopyToDataTable().DefaultView)
                                {
                                    EMROrderRelation.Tables["OrderRelation"].AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_MAST_INV_ORDER_ID"]) == IfNullReturnZero(drDetails.Row["EMR_PAT_MAST_INV_ORDER_ID"]) &&
                                        Convert.ToDateTime(x["VISIT_DATE"]) == Convert.ToDateTime(drDetails.Row["VISIT_DATE"])).ForEach(x => x["ISSELECT"] = true);
                                    SelectedEMROrderedData(drDetails, true);
                                }
                            }
                            isMultipleServiceChangeBlock = 3; //Speed Improve
                            ClearService();
                            isMultipleServiceChangeBlock = 0; //Speed Improve
                            return;
                        }
                        DataRow[] drorder = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID=" + Convert.ToInt64(drEmrRow["EMR_PAT_DTLS_INV_ORDER_ID"]));
                        if (drorder.Length > 0)
                        {
                            drorder[0]["START_DATE"] = dtMedicationdtls.Rows[0]["START_DATE"];
                            drorder[0]["END_DATE"] = dtMedicationdtls.Rows[0]["END_DATE"];
                            drorder[0]["DURATION"] = dtMedicationdtls.Rows[0]["DURATION"];
                            drorder[0]["DURATION_TYPE"] = dtMedicationdtls.Rows[0]["DURATION_TYPE"];
                            drorder[0]["DISPENSE_COUNT"] = dtMedicationdtls.Rows[0]["DISPENSE_COUNT"];
                            drorder[0]["QUANTITY"] = dtMedicationdtls.Rows[0]["QUANTITY"];
                            drorder[0]["QTY"] = dtMedicationdtls.Rows[0]["DISPENSE_COUNT"];
                            drorder[0]["TOTAL_QUANTITY_UNIT"] = dtMedicationdtls.Rows[0]["TOTAL_QUANTITY_UNIT"];
                            drorder[0]["QUANTITY_UNIT"] = dtMedicationdtls.Rows[0]["QUANTITY_UNIT"];
                            drorder[0]["TOTAL_QUANTITY"] = dtMedicationdtls.Rows[0]["TOTAL_QUANTITY"];
                            drorder[0]["ISLIFELONG"] = dtMedicationdtls.Rows[0]["ISLIFELONG"];
                            drorder[0]["FREQUENCY"] = dtMedicationdtls.Rows[0]["FREQUENCY"];
                            drorder[0]["FREQUENCY_NAME"] = dtMedicationdtls.Rows[0]["FREQUENCY_NAME"];
                            drorder[0]["FORM"]= dtMedicationdtls.Rows[0]["FORM"];
                            drorder[0]["ROUTE"]= dtMedicationdtls.Rows[0]["ROUTE"];
                            drorder[0]["PRIORITY"] = dtMedicationdtls.Rows[0]["PRIORITY"];
                            //drorder[0]["ENTRY_DATE"] = dtMedicationdtls.Rows[0]["ENTRY_DATE"];
                            drorder[0]["ADMINISTRATION_INSTRUCTION"] = dtMedicationdtls.Rows[0]["ADMINISTRATION_INSTRUCTION"];
                            drorder[0]["REMARKS"] = dtMedicationdtls.Rows[0]["REMARKS"];
                            drorder[0]["FREQUENCY_VALUE"] = dtMedicationdtls.Rows[0]["FREQUENCY_VALUE"];
                            drorder[0]["FREQUENCY_FREETEXT"] = dtMedicationdtls.Rows[0]["FREQUENCY_FREETEXT"];
                            drorder[0]["ISINFUSION"] = dtMedicationdtls.Rows[0]["ISINFUSION"];
                            drorder[0]["PHARMACY_NOTE"] = dtMedicationdtls.Rows[0]["PHARMACY_NOTE"];
                            if (EMROrderRelation.Tables.Contains("EMR_PAT_PH_DTLS_DOSAGE") && EMROrderRelation.Tables["EMR_PAT_PH_DTLS_DOSAGE"].KIIsNotNullAndRowCount()
                                && objucCPOEMedicationEdit.Dtdosagedetails.KIIsNotNullAndRowCount())
                            {
                                var dtDosage = EMROrderRelation.Tables["EMR_PAT_PH_DTLS_DOSAGE"].AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_DTLS_PH_ORDER_ID"]) == Convert.ToInt64(drEmrRow["EMR_PAT_DTLS_INV_ORDER_ID"])).Select(x => x);
                                if (dtDosage.Any())
                                {
                                    foreach (DataRow drdosage in dtDosage)
                                    {
                                        foreach (DataRow drEditDosage in objucCPOEMedicationEdit.Dtdosagedetails.Rows)
                                        {
                                            if (IfNullReturnZero(drdosage["EMR_PAT_PH_DTLS_DOSAGE_ID"]) == IfNullReturnZero(drEditDosage["EMR_PAT_PH_DTLS_DOSAGE_ID"]))
                                            {
                                                drdosage["DOSE"] = drEditDosage["DOSE"];
                                                drdosage["DOSE_UNIT"] = drEditDosage["DOSE_UNIT"];
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    EMROrderRelation.Tables["EMR_PAT_PH_DTLS_DOSAGE"].Merge(objucCPOEMedicationEdit.Dtdosagedetails.Copy());
                                }
                            }
                            DataRow drData = drorder[0];
                            if (drData.Table.Columns.Contains("RETURN_QTY") && drData.Table.Columns.Contains("BILLED_QTY"))
                            {
                                decimal Dispense = drData["QTY"] != null && drData["QTY"] != DBNull.Value ?
                                                   System.Convert.ToDecimal(drData["QTY"]) : 0;
                                decimal ReturnQty = drData["QTY"] != null && drData["QTY"] != DBNull.Value ?
                                                   System.Convert.ToDecimal(drData["RETURN_QTY"]) : 0;
                                decimal BilledQty = drData["BILLED_QTY"] != null && drData["RETURN_QTY"] != DBNull.Value ?
                                                   System.Convert.ToDecimal(drData["BILLED_QTY"]) : 0;
                                drData["BAL_QTY"] = (Dispense - BilledQty) + ReturnQty;
                            }
                            if (isAdditiveItem && IfNullReturnZero(dtMedicationdtls.Rows[0]["ISINFUSION"]) == 0)
                            {
                                DataRow[] drTempAdditive = BillData.Tables["INV_PAT_BILLING"].Select("REF_DTLS_PH_ORDER_ID=" + IfNullReturnZero(drEmrRow["EMR_PAT_DTLS_INV_ORDER_ID"]));
                                if (drTempAdditive.Any())
                                {
                                    foreach (DataRow drDelete in drTempAdditive)
                                    {
                                        DataRow drTempDel = drDelete;
                                        DeleteServiceDetails(drTempDel);
                                    }
                                }
                            }
                            DataRow[] drTemp = BillData.Tables["INV_PAT_BILLING"].Select("EMR_PAT_DTLS_INV_ORDER_ID=" + IfNullReturnZero(drEmrRow["EMR_PAT_DTLS_INV_ORDER_ID"]));
                            if (drTemp.Any())
                            {
                                if (drorder[0].Table.Columns.Contains("CONSUMPTION_STATUS"))
                                {
                                    drTemp[0]["CONSUMPTION_STATUS"] = drorder[0]["CONSUMPTION_STATUS"];
                                }
                                if (drorder[0].Table.Columns.Contains("PROVIDER_ID") && drorder[0].Table.Columns.Contains("PROVIDER_ID"))
                                {
                                    drTemp[0]["PROVIDER_ID"] = drorder[0]["PROVIDER_ID"];
                                }
                                if (isAdditiveItem && IfNullReturnZero(dtMedicationdtls.Rows[0]["ISINFUSION"]) == 0)
                                {
                                    drTemp[0]["IS_ADDITIVE"] = 0;
                                }
                                drTemp[0]["ISORDERWISEBILL"] = 1;  //CPOE WISE
                                drTemp[0]["ENTRY_DATE"] = drorder[0]["ENTRY_DATE"];
                                if (drorder[0].Table.Columns.Contains("FREQUENCY") && drorder[0]["FREQUENCY"] != DBNull.Value && FrequencyTemp.KIIsNotNullAndRowCount() &&
                                    FrequencyTemp.Select("EMR_LOOKUP_ID=" + drorder[0]["FREQUENCY"]).Count() > 0)
                                {
                                    drTemp[0]["FREQUENCY"] = FrequencyTemp.Select("EMR_LOOKUP_ID=" + drorder[0]["FREQUENCY"]).First()["LOOKUP_VALUE"];
                                }
                                else if (drorder[0].Table.Columns.Contains("FREQUENCY_FREETEXT") && drorder[0]["FREQUENCY_FREETEXT"] != DBNull.Value)
                                {
                                    drTemp[0]["FREQUENCY"] = drorder[0]["FREQUENCY_FREETEXT"].ToString();
                                }
                                if (string.IsNullOrEmpty(Convert.ToString(drorder[0]["FREQUENCY"])))
                                {
                                    drTemp[0]["FREQUENCY"] = DBNull.Value;
                                    drorder[0]["FREQUENCY_NAME"] = DBNull.Value;
                                }
                                if (drTemp[0].Table.Columns.Contains("QTY") && IfNullReturnZero(drorder[0]["QTY"]) > 0)
                                {
                                    drTemp[0]["ORDER_QTY"] = IfNullReturnZero(drorder[0]["QTY"]) + " - " + IfNullReturnZero(drorder[0]["BILLED_QTY"]);
                                }
                                drTemp[0]["ISSALE"] = false;
                                if (!Duratioin.KIIsNotNullAndRowCount())
                                {
                                    Duratioin = fillDuration();
                                }
                                if (drorder[0].Table.Columns.Contains("DURATION_TYPE") && drorder[0]["DURATION_TYPE"] != DBNull.Value && Duratioin.KIIsNotNullAndRowCount() && Duratioin.Select("KEY=" + drorder[0]["DURATION_TYPE"]).Count() > 0)
                                {
                                    DataRow drRow = Duratioin.Select("KEY=" + drorder[0]["DURATION_TYPE"]).First();
                                    SelectedDuratioin = Duratioin.DefaultView[Duratioin.Rows.IndexOf(drRow)];
                                }
                                if (drorder[0].Table.Columns.Contains("DURATION") && drorder[0]["DURATION"] != DBNull.Value && IsConsumable)
                                {
                                    StrDuration = Convert.ToString(drorder[0]["DURATION"]);
                                }
                                else if (drorder[0].Table.Columns.Contains("DURATION") && drorder[0]["DURATION"] == DBNull.Value)
                                {
                                    StrDuration = string.Empty;
                                }
                                if (!Duratioin.KIIsNotNullAndRowCount())
                                {
                                    Duratioin = fillDuration();
                                }
                                if (drorder[0].Table.Columns.Contains("DURATION_TYPE") && drorder[0]["DURATION_TYPE"] != DBNull.Value && Duratioin.KIIsNotNullAndRowCount() && Duratioin.Select("KEY=" + drorder[0]["DURATION_TYPE"]).Count() > 0)
                                {
                                    DataRow drRow = Duratioin.Select("KEY=" + drorder[0]["DURATION_TYPE"]).First();
                                    SelectedDuratioin = Duratioin.DefaultView[Duratioin.Rows.IndexOf(drRow)];
                                }
                                if (StrDuration != string.Empty && SelectedDuratioin != null && SelectedDuratioin["VALUE"] != DBNull.Value && IsConsumable)
                                {
                                    drTemp[0]["DURATION"] = strDuration + SelectedDuratioin["VALUE"].ToString().ToLower().First();
                                }
                                if (drorder[0].Table.Columns.Contains("QUANTITY_UNIT") && drorder[0]["QUANTITY_UNIT"] != DBNull.Value && DrugUnitTemp.KIIsNotNullAndRowCount() && DrugUnitTemp.Select("LOOKUP_VALUE='" + drorder[0]["QUANTITY_UNIT"] + "'").Count() > 0)
                                {
                                    DataRow drRow = DrugUnitTemp.Select("LOOKUP_VALUE='" + drorder[0]["QUANTITY_UNIT"] + "'").First();
                                    SelectedDose = DrugUnitTemp.DefaultView[DrugUnitTemp.Rows.IndexOf(drRow)];
                                }
                                if (drorder[0].Table.Columns.Contains("QUANTITY") && drorder[0]["QUANTITY"] != DBNull.Value)
                                {
                                    StrDrugUnit = Convert.ToString(drorder[0]["QUANTITY"]);
                                }
                                if (StrDrugUnit != null && SelectedDose != null && SelectedDose["LOOKUP_VALUE"] != DBNull.Value)
                                {
                                    drTemp[0]["DOSE"] = StrDrugUnit + SelectedDose["LOOKUP_VALUE"].ToString();
                                }
                                if (drorder[0].Table.Columns.Contains("PRIORITY") && Convert.ToDecimal(MedicinePriority.STAT) == Convert.ToDecimal(drorder[0]["PRIORITY"]))
                                {
                                    drTemp[0]["IS_STAT"] = 1;
                                }
                                else if (drorder[0].Table.Columns.Contains("PRIORITY") && Convert.ToDecimal(MedicinePriority.Urgent) == Convert.ToDecimal(drorder[0]["PRIORITY"]))
                                {
                                    drTemp[0]["IS_STAT"] = 3;
                                }
                                else if (drorder[0].Table.Columns.Contains("PRIORITY") && Convert.ToDecimal(MedicinePriority.DischargeMedicine) == Convert.ToDecimal(drorder[0]["PRIORITY"]))
                                {
                                    drTemp[0]["IS_STAT"] = 2;
                                }
                                else
                                {
                                    drTemp[0]["IS_STAT"] = 0;
                                }
                                if (IfNullReturnZero(drorder[0]["QTY"]) > 0)
                                {
                                    drTemp[0]["QTY"] = drorder[0]["QTY"];
                                    drTemp[0]["SALES_ACTUAL_QTY"] = drorder[0]["QTY"];
                                }
                                DataTable dtCriteria = new DataTable("CRITERIA");
                                dtCriteria.Columns.Add("INV_MAST_SERVICE_ID", typeof(Int64));
                                dtCriteria.Rows.Add(Convert.ToInt64(IfNullReturnZero(drTemp[0]["INV_MAST_SERVICE_ID"])));
                                MainBillingShared objBillingShared = new MainBillingShared();
                                PharamacyUnitSales = objBillingShared.FetchPharmacyUnitSales(dtCriteria);
                                if (PharamacyUnitSales.KIIsNotNullAndRowCount() && drorder[0]["TOTAL_QUANTITY_UNIT"] != DBNull.Value)
                                {
                                    DataRow[] filteredQuer = PharamacyUnitSales.AsEnumerable().Where(x => Convert.ToString(x["TO_UNIT_NAME"]) == Convert.ToString(drorder[0]["TOTAL_QUANTITY_UNIT"])
                                        && IfNullReturnZero(x["INV_MAST_SERVICE_ID"]) == IfNullReturnZero(drTemp[0]["INV_MAST_SERVICE_ID"])).ToArray();
                                    if (filteredQuer.Any())
                                    {
                                        DataRow[] drRow = PharamacyUnitSales.Select("PH_UNIT_SALES_CONVERSION_ID=" + IfNullReturnZero(filteredQuer[0]["PH_UNIT_SALES_CONVERSION_ID"]));
                                        if (drRow.Length > 0)
                                        {
                                            SelectedPharamacyUnitSales = PharamacyUnitSales.DefaultView[PharamacyUnitSales.Rows.IndexOf(drRow[0])];
                                        }
                                    }
                                }
                                if (SelectedPharamacyUnitSales != null)
                                {
                                    drTemp[0]["SALES_UNIT_NAME"] = SelectedPharamacyUnitSales["TO_UNIT_NAME"];
                                    drTemp[0]["PH_UNIT_SALES_CONVERSION_ID"] = SelectedPharamacyUnitSales["PH_UNIT_SALES_CONVERSION_ID"];
                                    drTemp[0]["BASE_QTY"] = SelectedPharamacyUnitSales["BASE_QTY"];
                                    drTemp[0]["SALES_ACTUAL_QTY"] = IfNullReturnZero(drTemp[0]["QTY"]) * IfNullReturnZero(SelectedPharamacyUnitSales["BASE_QTY"]);
                                }
                                SelectedPharamacyUnitSales = SelectedDose = null;
                                StrDrugUnit = string.Empty;
                                DataTable dtMedicineCriteria = new DataTable("SEARCH_CRITERIA");
                                dtMedicineCriteria.Columns.Add("RECOMMEND_DOSE_ID");
                                dtMedicineCriteria.Rows.Add(DBNull.Value);
                                MainEMRShared objEMRShared = new MainEMRShared();
                                Route = objEMRShared.GetEMRDrugRoutes(dtMedicineCriteria);
                                if (Route.KIIsNotNullAndRowCount())
                                {
                                    dtMedicineCriteria = new DataTable("SEARCH_CRITERIA");
                                    dtMedicineCriteria.Columns.Add("EMR_PH_ROUTE_ID");
                                    dtMedicineCriteria.Rows.Add(Route.Rows[0]["EMR_PH_ROUTE_ID"]);
                                    Form = objEMRShared.GetEMRDrugForms(dtMedicineCriteria);
                                }
                                Urgency = objCommon.EnumToDataTable(typeof(Enumerators.EMR.MedicinePriority), "KEY", "VALUE");
                                DataRow DrRow = null;
                                DataRow drPatOrder = null;
                                if (IfNullReturnZero(drTemp[0]["INV_MAST_SERVICE_ID"]) > 0 && IfNullReturnZero(drTemp[0]["SL_NO"]) > 0 &&
                                    BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + drTemp[0]["INV_MAST_SERVICE_ID"] + "AND SL_NO=" + drTemp[0]["SL_NO"]).Count() > 0)
                                {
                                    drPatOrder = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + drTemp[0]["INV_MAST_SERVICE_ID"] + "AND SL_NO=" + drTemp[0]["SL_NO"]).First();
                                }
                                if (drPatOrder != null)
                                {
                                    if (drorder[0].Table.Columns.Contains("ROUTE") && Route.KIIsNotNullAndRowCount())
                                    {
                                        if (Route.Select("ROUTE='" + drorder[0]["ROUTE"] + "'").Count() > 0)
                                        {
                                            DrRow = Route.Select("ROUTE='" + drorder[0]["ROUTE"] + "'").First();
                                            SelectedRoute = Route.DefaultView[Route.Rows.IndexOf(DrRow)];
                                        }
                                    }
                                    if (drorder[0].Table.Columns.Contains("FORM") && Form.KIIsNotNullAndRowCount())
                                    {
                                        if (Form.Select("FORM='" + drorder[0]["FORM"] + "'").Count() > 0)
                                        {
                                            DrRow = Form.Select("FORM='" + drorder[0]["FORM"] + "'").First();
                                            SelectedForm = Form.DefaultView[Form.Rows.IndexOf(DrRow)];
                                        }
                                    }
                                    if (drorder[0].Table.Columns.Contains("FREQUENCY_NAME") && FrequencyTemp.KIIsNotNullAndRowCount())
                                    {
                                        if (FrequencyTemp.Select("LOOKUP_VALUE='" + drorder[0]["FREQUENCY_NAME"] + "'").Count() > 0)
                                        {
                                            DrRow = FrequencyTemp.Select("LOOKUP_VALUE='" + drorder[0]["FREQUENCY_NAME"] + "'").First();
                                            SelectedFrequency = FrequencyTemp.DefaultView[FrequencyTemp.Rows.IndexOf(DrRow)];
                                        }
                                    }

                                    if (drorder[0].Table.Columns.Contains("PRIORITY") && Urgency.KIIsNotNullAndRowCount())
                                    {
                                        if (Urgency.Select("KEY=" + drorder[0]["PRIORITY"]).Count() > 0)
                                        {
                                            DrRow = Urgency.Select("KEY=" + drorder[0]["PRIORITY"]).First();
                                            SelectedUrgency = Urgency.DefaultView[Urgency.Rows.IndexOf(DrRow)];
                                        }
                                    }
                                    if (drorder[0].Table.Columns.Contains("DURATION_TYPE") && Duratioin.KIIsNotNullAndRowCount() && drorder[0]["DURATION_TYPE"] != DBNull.Value)
                                    {
                                        if (Duratioin.Select("KEY=" + drorder[0]["DURATION_TYPE"]).Count() > 0)
                                        {
                                            DrRow = Duratioin.Select("KEY=" + drorder[0]["DURATION_TYPE"]).First();
                                            SelectedDuratioin = Duratioin.DefaultView[Duratioin.Rows.IndexOf(DrRow)];
                                        }
                                    }
                                    if (drorder[0].Table.Columns.Contains("QUANTITY_UNIT") && DrugUnitTemp.KIIsNotNullAndRowCount() && drorder[0]["QUANTITY_UNIT"] != DBNull.Value)
                                    {
                                        if (DrugUnitTemp.Select("LOOKUP_VALUE='" + drorder[0]["QUANTITY_UNIT"] + "'").Count() > 0)
                                        {
                                            DrRow = DrugUnitTemp.Select("LOOKUP_VALUE='" + drorder[0]["QUANTITY_UNIT"] + "'").First();
                                            SelectedDose = DrugUnitTemp.DefaultView[DrugUnitTemp.Rows.IndexOf(DrRow)];
                                        }
                                    }
                                    if (drorder[0].Table.Columns.Contains("ADMINISTRATION_INSTRUCTION") && AdminInstruction.KIIsNotNullAndRowCount() && drorder[0]["ADMINISTRATION_INSTRUCTION"] != DBNull.Value)
                                    {
                                        if (AdminInstruction.Select("LOOKUP_VALUE='" + drorder[0]["ADMINISTRATION_INSTRUCTION"] + "'").Count() > 0)
                                        {
                                            DrRow = AdminInstruction.Select("LOOKUP_VALUE='" + drorder[0]["ADMINISTRATION_INSTRUCTION"] + "'").First();
                                            SelectedAdmnInst = AdminInstruction.DefaultView[AdminInstruction.Rows.IndexOf(DrRow)];
                                        }
                                    }
                                    if (drorder[0].Table.Columns.Contains("DURATION") && drorder[0]["DURATION"] != DBNull.Value)
                                    {
                                        StrDuration = Convert.ToString(drorder[0]["DURATION"]);
                                    }
                                    if (drorder[0].Table.Columns.Contains("QUANTITY") && drorder[0]["QUANTITY"] != DBNull.Value)
                                    {
                                        StrDrugUnit = Convert.ToString(drorder[0]["QUANTITY"]);
                                    }
                                    if (drorder[0].Table.Columns.Contains("REMARKS") && drorder[0]["REMARKS"] != DBNull.Value)
                                    {
                                        Remarks = Convert.ToString(drorder[0]["REMARKS"]);
                                    }
                                    if (drorder[0].Table.Columns.Contains("FREQUENCY_VALUE") && drorder[0]["FREQUENCY_VALUE"] != DBNull.Value && IfNullReturnZero(drorder[0]["FREQUENCY"]) == 2733)
                                    {
                                        StrFreqHours = Convert.ToString(drorder[0]["FREQUENCY_VALUE"]);
                                    }
                                    if (drorder[0] != null && drorder[0].Table.Columns.Contains("FREQUENCY_FREETEXT") &&
                           IfNullReturnZero(drorder[0]["ISFREQUENCY_FREETEXT"]) == 1 && drorder[0]["FREQUENCY_FREETEXT"] != DBNull.Value)
                                    {
                                        drPatOrder["FREQUENCY_FREETEXT"] = drorder[0]["FREQUENCY_FREETEXT"];
                                    }
                                    if (!BillData.Tables["PH_PAT_DTLS_ORDER"].Columns.Contains("COMMON_REMARKS")) //Added by Shuaib bug id-35634
                                    {
                                        BillData.Tables["PH_PAT_DTLS_ORDER"].Columns.Add("COMMON_REMARKS");
                                    }
                                    if (drorder[0] != null && drorder[0].Table.Columns.Contains("COMMON_REMARKS") && drorder[0]["COMMON_REMARKS"] != DBNull.Value) //Added by Shuaib
                                    {
                                        drPatOrder["COMMON_REMARKS"] = drorder[0]["COMMON_REMARKS"];
                                    }
                                    drPatOrder["ROUTE"] = SelectedRoute != null ? SelectedRoute["ROUTE"] : DBNull.Value;
                                    drPatOrder["FORM"] = SelectedForm != null ? SelectedForm["FORM"] : DBNull.Value;
                                    drPatOrder["DURATION"] = StrDuration != null && StrDuration != string.Empty ? StrDuration : "1";
                                    drPatOrder["DURATION_TYPE"] = SelectedDuratioin != null ? SelectedDuratioin["KEY"] : DBNull.Value;
                                    drPatOrder["DURATION_VALUE"] = SelectedDuratioin != null ? SelectedDuratioin["VALUE"] : DBNull.Value;
                                    if (drorder[0].Table.Columns.Contains("START_DATE") && drorder[0]["START_DATE"] != DBNull.Value)
                                    {
                                        drPatOrder["START_DATE"] = drorder[0]["START_DATE"];
                                    }
                                    if (drorder[0].Table.Columns.Contains("END_DATE") && drorder[0]["END_DATE"] != DBNull.Value)
                                    {
                                        drPatOrder["END_DATE"] = drorder[0]["END_DATE"];
                                    }
                                    drPatOrder["QUANTITY"] = drTemp[0]["SALES_ACTUAL_QTY"];
                                    drPatOrder["QUANTITY_UNIT"] = drTemp[0]["SALES_UNIT_NAME"];
                                    drPatOrder["ISVALID"] = 1;
                                    drPatOrder["REMARKS"] = Remarks;
                                    if (drorder[0].Table.Columns.Contains("ADMINISTRATION_INSTRUCTION"))
                                    {
                                        drPatOrder["ADMINISTRATION_INSTRUCTION"] = SelectedAdmnInst != null ? SelectedAdmnInst["LOOKUP_VALUE"] :
                                            drorder[0]["ADMINISTRATION_INSTRUCTION"] != DBNull.Value ? drorder[0]["ADMINISTRATION_INSTRUCTION"] : DBNull.Value;
                                    }
                                    drPatOrder["FREQUENCY"] = SelectedFrequency != null ? SelectedFrequency["EMR_LOOKUP_ID"] : DBNull.Value;
                                    drPatOrder["FREQ_VALUE"] = SelectedFrequency != null ? SelectedFrequency["FIELD10"] : DBNull.Value;
                                    if (string.IsNullOrEmpty(Convert.ToString(drorder[0]["FREQUENCY"])))
                                    {
                                        drPatOrder["FREQ_VALUE"] = DBNull.Value;
                                        drPatOrder["FREQUENCY"] = DBNull.Value;
                                    }
                                    drPatOrder["PRIORITY"] = SelectedUrgency != null ? SelectedUrgency["KEY"] : DBNull.Value;
                                    if (StrDrugUnit != string.Empty)
                                    {
                                        drPatOrder["DOSE"] = StrDrugUnit;
                                    }
                                    drPatOrder["DOSE_UNIT"] = SelectedDose != null ? SelectedDose["LOOKUP_VALUE"] : DBNull.Value;
                                    drPatOrder["ALERGY_REASON"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["ALLERGY_REASON"];
                                    drPatOrder["HOSPITAL_ID"] = CommonData.LoginHospitalSiteID;
                                    if (dtMedicationdtls.Columns.Contains("PHARMACY_NOTE"))
                                    {
                                        drPatOrder["PHARMACY_NOTE"] = dtMedicationdtls.Rows[0]["PHARMACY_NOTE"];
                                    }
                                    else
                                    {                                        
                                        drPatOrder["PHARMACY_NOTE"] = getPharmacyNoteFormat(drorder[0]);
                                    }
                                    drPatOrder["ENTRY_DATE"] = drorder[0]["PROPOSED_DATE"];
                                    //drPatOrder["ISLABEL"] = true; //35683 bug id
                                    drPatOrder["NUMBER_OF_DOSE"] = 0;
                                    drPatOrder["ISCONSUMABLE"] = 0;
                                    //this lines are using for the label print
                                    if (IfNullReturnZero(drPatOrder["EMR_PAT_DTLS_PH_ORDER_ID"]) > 0)
                                    {
                                        if (drPatOrder.Table.Columns.Contains("ISLIFELONG") == false)
                                        {
                                            drPatOrder.Table.Columns.Add("ISLIFELONG");
                                        }
                                        if (drPatOrder.Table.Columns.Contains("CONDITIONAL_FREQUENCY") == false)
                                        {
                                            drPatOrder.Table.Columns.Add("CONDITIONAL_FREQUENCY");
                                        }
                                        if (drPatOrder.Table.Columns.Contains("ADMIN_TIME") == false)
                                        {
                                            drPatOrder.Table.Columns.Add("ADMIN_TIME");
                                        }
                                        if (drPatOrder.Table.Columns.Contains("FREQUENCY_VALUE") == false)
                                        {
                                            drPatOrder.Table.Columns.Add("FREQUENCY_VALUE");
                                        }

                                        DataTable dtCriterias = new DataTable();
                                        dtCriterias.Columns.Add("MODE");
                                        dtCriterias.Columns.Add("EMR_PAT_DTLS_PH_ORDER_ID");
                                        dtCriterias.Rows.Add(15, drPatOrder["EMR_PAT_DTLS_PH_ORDER_ID"]);
                                        DataTable dtPrintData = new CommonShared.PharmacyMain.MainPharmacyShared().FetchPharmacyPrintingDetails(dtCriterias);
                                        drPatOrder["DOSE_FOR_PRESCRIPTION"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["DOSE_FOR_PRESCRIPTION"] : string.Empty;
                                        drPatOrder["NUMBER_OF_DOSE"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["NUMBER_OF_DOSE"] : 0;
                                        drPatOrder["ISCONSUMABLE"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["ISCONSUMABLE"] : 0;
                                        drPatOrder["ISINFUSION"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["ISINFUSION"] : 0;
                                        drPatOrder["GENERIC_NAME"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["GENERIC_NAME"] : string.Empty;
                                        drPatOrder["FLUID_NAME"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["FLUID_NAME"] : string.Empty;
                                        drPatOrder["IV_QUANTITY"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["IV_QUANTITY"] : string.Empty;
                                        drPatOrder["IV_QUANTITY_UNIT"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["IV_QUANTITY_UNIT"] : string.Empty;
                                        drPatOrder["RATE"] = (dtPrintData.Rows.Count > 0 && dtPrintData.Rows[0]["DURATION_UNIT_TYPE"] != DBNull.Value) ? Convert.ToString(dtPrintData.Rows[0]["DURATION_UNIT"]) + " " + new Infologics.Medilogics.General.Control.Common().GetDescription((Enumerators.EMR.DurationUnitType)(Convert.ToInt32(dtPrintData.Rows[0]["DURATION_UNIT_TYPE"]))) : string.Empty;
                                        drPatOrder["ISLIFELONG"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["ISLIFELONG"] : string.Empty;
                                        drPatOrder["CONDITIONAL_FREQUENCY"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["CONDITIONAL_FREQUENCY"] : string.Empty;
                                        drPatOrder["ADMIN_TIME"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["ADMIN_TIME"] : string.Empty;
                                        drPatOrder["FREQUENCY_VALUE"] = dtPrintData.Rows.Count > 0 ? dtPrintData.Rows[0]["FREQUENCY_VALUE"] : string.Empty;
                                    }
                                    else
                                    {
                                        if (Generic.KIIsNotNullAndRowCount())
                                        {
                                            if (drPatOrder["GENERIC_ID"].KIIsNotNullOrEmpty())
                                            {
                                                DataRow[] dritem = Generic.Select("EMR_LOOKUP_ID =" + Convert.ToInt64(drPatOrder["GENERIC_ID"]));
                                                if (dritem.KIIsNotNullOrEmpty() && dritem.Length > 0)
                                                {
                                                    drPatOrder["GENERIC_NAME"] = Convert.ToString(dritem[0]["LOOKUP_VALUE"]);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    isMultipleServiceChangeBlock = 3; //Speed Improve
                    ClearService();
                    isMultipleServiceChangeBlock = 0; //Speed Improve
                }
            }
        }
    

        private void Executed_CommonSaleClick(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                DataRowView dr = (DataRowView)e.Parameter;
                bool isServiceFailed = false;
                if (dr != null && BillData != null && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
                {
                    if (AdjustmentValidation())
                    {
                        foreach (DataRow drData in BillData.Tables["INV_PAT_BILLING"].Rows)
                        {
                            bool validservice = true;
                            if (SelectedServiceType == (int)ServiceType.Investigation)
                            {
                                validservice = ValidateServiceCharge(drData);
                            }
                            if (validservice && ValidateService(drData))
                            {
                                if (drData["IS_DISPENSE"] == DBNull.Value)
                                {
                                    drData["ISSALE"] = dr.Row["ISCHECK"];
                                    drData["ISLABEL"] = dr.Row["ISCHECK"];
                                    SelectedItemServiceType = drData["SERVICE_TYPE"] != DBNull.Value ? Convert.ToInt16(drData["SERVICE_TYPE"]) : -1;
                                    if (drData["INV_MAST_SERVICE_ID"] != DBNull.Value)
                                    {
                                        CalculateServiceTotal();
                                    }
                                }
                            }
                            else
                            {
                                isServiceFailed = true;
                            }
                        }
                    }
                    else
                    {
                        if (ucServiceDeliveryServicesDescription.IsCheckCommonSale)
                        {
                            ucServiceDeliveryServicesDescription.IsCheckCommonSale = false;
                        }
                        else
                        {
                            ucServiceDeliveryServicesDescription.IsCheckCommonSale = true;
                        }
                    }
                }
                if (isServiceFailed)
                {
                    if (ucServiceDeliveryServicesDescription.IsCheckCommonSale)
                    {
                        ucServiceDeliveryServicesDescription.IsCheckCommonSale = false;
                    }
                    else
                    {
                        ucServiceDeliveryServicesDescription.IsCheckCommonSale = true;
                    }
                }
            }
            catch (Exception ex)
            {
                throw ;
            }
        }

        private void Executed_CommonVerificationClick(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                DataRowView dr = (DataRowView)e.Parameter;
                if (dr != null && BillData != null && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
                {
                    foreach (DataRow drData in BillData.Tables["INV_PAT_BILLING"].Rows)
                    {
                        drData["ISVERIFICATION"] = dr.Row["ISCHECK"];
                        if (drData["INV_MAST_SERVICE_ID"] != DBNull.Value)
                        {
                            DataRow[] drTemp = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + drData["INV_MAST_SERVICE_ID"]);
                            if (drTemp.Length > 0)
                            {
                                drTemp[0]["AUTHORIZATION_STATUS"] = drData["ISVERIFICATION"];
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw ;
            }
        }

        private void FetchAllBatch(decimal? sublocation)
        {
            if (IsUSSettingEnable)
            {
                DataTable dtCriteria = new DataTable();
                dtCriteria.Columns.Add("PH_SUBLOCATION_ID", typeof(decimal));
                dtCriteria.Rows.Add(sublocation);
                CommonShared.ServiceMain.MainServiceShared objmainshared = new MainServiceShared();
                GridBatchOrUnit = objmainshared.FetchItemLot(dtCriteria);
            }
            else
            {
                DataTable dtCriteria = new DataTable();
                dtCriteria.Columns.Add("PH_SUBLOCATION_ID", typeof(decimal));
                dtCriteria.Columns.Add("MODE", typeof(int));
                dtCriteria.Rows.Add(sublocation, 1);
                CommonShared.BillingMain.MainBillingShared objmainshared = new MainBillingShared();
                GridBatchOrUnit = objmainshared.FetchAllBatch(dtCriteria);
            }
        }

        private void Executed_GridBatchSelectionChanged(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                DataRowView dr = (DataRowView)e.Parameter;
                DataRow drRow = dr.Row;
                string batch = string.Empty;
                batch = Convert.ToString(dr.Row["BATCHNO"]);
                long ServiceId = Convert.ToInt64(dr.Row["INV_MAST_SERVICE_ID"]);
                if (dr != null && BillData != null && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount() && !isBlockBatchSelectionChange && !removeDublication)
                {
                    if (!IsUSSettingEnable && BatchAll != null)
                    {
                        IsBatchSelectionChanged = true;
                        var Query = BatchAll.AsEnumerable().Where(x => dr.Row["BATCHNO"] != DBNull.Value
                            // && dr.Row["MEDICINE_CODE"] != DBNull.Value
                            && dr.Row["BATCHNO"] != string.Empty
                            //&& Convert.ToInt64(x["MEDICINE_CODE"]) == Convert.ToInt64(dr.Row["MEDICINE_CODE"])
                             && Convert.ToString(x["BATCHNO"]) == Convert.ToString(dr.Row["BATCHNO"]))
                             .Select(x => IfNullReturnZero(x["PRICE"]));
                        if (Query.Count() > 0)
                        {
                            decimal price = Query.First();
                            this.SetMedicineDetails(dr.Row["BATCHNO"].ToString());
                            isGridBatchSelection = true;
                            dsCharge = this.GetServiceCharge(ServiceId, drRow);
                            if (dsCharge != null && dsCharge.Tables["SERVICE_BASE_CHARGE"] != null
                             && dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows.Count > 0)
                            {
                                if (dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows[0]["PRICE"] == DBNull.Value)
                                {
                                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                        "Base charge not defined", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                    return;
                                }
                                price = Convert.ToDecimal(dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows[0]["PRICE"]);
                                if (dr["EDITED_STATUS"].KIIsNotNullOrEmpty() && Convert.ToInt16(dr["EDITED_STATUS"])==(int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.ChangetoZeroCharge)
                                {
                                    drRow["BASE_CHARGE"] = 0;
                                }
                                else
                                {
                                    drRow["BASE_CHARGE"] = price;
                                }

                                if (!IsAdjustmentClear && BillData.Tables["GEN_BILL_DISCOUNT"].Rows.Count > 0)
                                {
                                    BillData.Tables["GEN_BILL_DISCOUNT"].Rows.Clear();
                                    TotalAdjustment = 0;
                                }
                                if (Convert.ToBoolean(dr["ISSALE"]))
                                {
                                    CalculateMaxMinCopay();
                                    CalculateTotalBilledAmount(dr);
                                }
                                else
                                {
                                    dr["NET_AMOUNT"] = IfNullReturnZero(dr["BASE_CHARGE"]) * IfNullReturnZero(dr["SALES_ACTUAL_QTY"]);
                                    dr["NET"] = dr["NET_AMOUNT"];
                                    dr["PATIENT_SHARE"] = 0;
                                    dr["SPONSOR"] = 0;
                                }
                            }
                            DataRow[] drPatBilling = BillData.Tables["INV_PAT_BILLING"].Select("INV_MAST_SERVICE_ID=" + ServiceId + "AND SL_NO=" + dr["SL_NO"]);
                            drPatBilling[0]["BASE_CHARGE"] = drRow["BASE_CHARGE"];
                            drPatBilling[0]["NET_AMOUNT"] = drRow["NET_AMOUNT"];
                            drPatBilling[0]["ISEDIT_COUNT"] = true;
                            removeDublication = true;
                            drPatBilling[0]["BATCHNO"] = batch;
                            removeDublication = false;
                            IsBatchSelectionChanged = false;
                            isGridBatchSelection = false;
                            if (!IsTapperEnable)
                            {
                                ClearService();
                            }
                        }
                        if (Convert.ToBoolean(dr["ISSALE"]) && IfNullReturnZero(dr["CONSUMPTION_STATUS"]) == 0)
                        {
                            //stock checking
                            MainBilling objBIlling = new MainBilling();
                            DataTable dtCriteriatable = new DataTable();
                            dtCriteriatable.Columns.Add("PH_SUBLOCATION_ID", typeof(int));
                            dtCriteriatable.Columns.Add("MEDICINE_CODE", typeof(long));
                            dtCriteriatable.Columns.Add("BATCHNO", typeof(string));
                            dtCriteriatable.Columns.Add("INV_MAST_SERVICE_ID", typeof(long));
                            dtCriteriatable.Rows.Add(dr["SUBLOCATION"], dr["MEDICINE_CODE"], dr["BATCHNO"], dr["INV_MAST_SERVICE_ID"]);
                            DataTable dttable = objBIlling.GetMedicinesStockDetails(dtCriteriatable);
                            if (dttable.KIIsNotNullAndRowCount())
                            {
                                if (IfNullReturnZero(dr["SALES_ACTUAL_QTY"]) > IfNullReturnZero(dttable.Rows[0]["QTY"]))
                                {
                                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                    "No Stock Available for Item " + dr["NAME"] + " With Batch No " + dr["BATCHNO"], MessageBoxButtonType.OK, MessageBoxImages.Information);
                                    dr["ISSALE"] = false;
                                    dr["ISLABEL"] = false;
                                    CalculateServiceTotal();
                                }
                            }
                            else if (dr["BATCHNO"] != DBNull.Value)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                "No Stock Available for Item " + dr["NAME"] + " With Batch No " + dr["BATCHNO"], MessageBoxButtonType.OK, MessageBoxImages.Information);
                                dr["ISSALE"] = false;
                                dr["ISLABEL"] = false;
                                CalculateServiceTotal();
                            }
                        }
                    }
                }
               
                if (BatchAll.KIIsNotNullAndRowCount())
                {
                    DataRow[] drPatBilling = BillData.Tables["INV_PAT_BILLING"].Select("INV_MAST_SERVICE_ID=" + ServiceId + " AND SL_NO=" + Convert.ToInt16(dr["SL_NO"]));
                    DataRow[] drBatch = BatchAll.Select("BATCHNO='" + drPatBilling[0]["BATCHNO"] + "'");
                    if (drBatch.Length > 0)
                    {
                        drPatBilling[0]["SALES_RATE"] = drBatch[0]["PRICE"];// MedicineDetails["PRICE"];
                        drPatBilling[0]["PURCHASE_RATE"] = IsUSSettingEnable ? drBatch[0]["PRICE"] : MedicineDetails != null ? MedicineDetails["ACTUAL_RATE"] : DBNull.Value;
                        drPatBilling[0]["WT_AVG"] = IsUSSettingEnable ? DBNull.Value : MedicineDetails != null ? MedicineDetails["WT_AVG"] : DBNull.Value;
                        drPatBilling[0]["SALES_MRP"] = drBatch[0]["MRP"];
                        if (!string.IsNullOrEmpty(drPatBilling[0]["BARCODE"].ToString()) && BatchAll.Columns.Contains("BARCODE"))
                        {
                            drPatBilling[0]["BARCODE"] = drBatch[0]["BARCODE"];
                        }
                        if (!string.IsNullOrEmpty(Convert.ToString(drBatch[0]["EXPDATE"])))
                        {
                            drPatBilling[0]["EXP_DATE"] = drBatch[0]["EXPDATE"];
                        }
                        else
                        {
                            drPatBilling[0]["EXP_DATE"] = DBNull.Value;
                        }
                    }
                    if (drRow["BATCHNO"] != DBNull.Value)
                    {
                        bool isallotoCheck = (IfNullReturnZero(drRow["APPROVAL_STATUS"]) == (int)Infologics.Medilogics.Enumerators.Insurance.InsuranceRequestStatus.Approve ||
                                                         IfNullReturnZero(drRow["APPROVAL_STATUS"]) == 0) && IfNullReturnZero(drRow["ISCASHIERREMOVED"]) != 1;
                        if (IsFromPharmacyPanel && isallotoCheck && IfNullReturnZero(drRow["IS_ADDITIVE"]) == 0)
                            drRow["ISSALE"] = true;
                        isThrowMessage = false;
                        if (IsFromPharmacyPanel && ValidateServiceCharge(drRow) && ValidateService(drRow) && IfNullReturnZero(drRow["IS_ADDITIVE"]) == 0)
                        {
                            drRow["ISLABEL"] = true;
                            if (BillData.Tables["PH_PAT_DTLS_ORDER"].KIIsNotNullAndRowCount())
                            {
                                DataRow[] drRows = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + IfNullReturnZero(drRow["INV_MAST_SERVICE_ID"]));
                                foreach (DataRow drdose in drRows)
                                {
                                    drdose["ISLABEL"] = Convert.ToBoolean(drRow["ISSALE"]) ? 1 : 0;
                                }
                            }
                            CalculateMaxMinCopay();
                            //RejectDiscountCalculation();
                            //CalculateServiceTotal();
                        }
                        else if (IsFromPharmacyPanel && IfNullReturnZero(drRow["IS_ADDITIVE"]) == 0)
                        {
                            drRow["ISSALE"] = false;
                        }
                        isThrowMessage = true;
                    }
                }
                if (Convert.ToBoolean(drRow["ISSALE"]))
                {
                    bool hasPrivilege = CommonData.CheckPrivilege("BILL_EXPIRED_MEDICINE");
                    if (!String.IsNullOrEmpty(Convert.ToString(drRow["EXP_DATE"])) && DateTime.Compare(Convert.ToDateTime(Convert.ToDateTime(drRow["EXP_DATE"]).ToShortDateString()), DateTime.Now.Date) == -1 && !hasPrivilege) //Less than now
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "Medicine has expired.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        drRow["ISSALE"] = false;
                    }
                }
                isBlockBatchSelectionChange = false;
                if (EnableVerificationSettingBased && SelectedVisitModeNew == (int)VisitMode.IP &&
                                   IfNullReturnZero(drRow["EMR_PAT_DTLS_MEDICATION_ID"]) > 0 &&
                                    IfNullReturnZero(drRow["IS_VERIFIED"]) == 0 && IfNullReturnZero(drRow["IS_ADDITIVE"]) == 0)
                {
                    drRow["VERIFICATION_SAVE_ENABLE"] = 1;
                    drRow["ISSALE"] = false;
                    drRow["ISLABEL"] = false;
                    if (BillData.Tables["PH_PAT_DTLS_ORDER"].KIIsNotNullAndRowCount())
                    {
                        DataRow[] drRows = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + IfNullReturnZero(drRow["INV_MAST_SERVICE_ID"]));
                        foreach (DataRow drdose in drRows)
                        {
                            drdose["ISLABEL"] = Convert.ToBoolean(drRow["ISSALE"]) ? 1 : 0;
                        }
                    }
                }
                TotalAmount = (from drrow in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                               where drrow.RowState != DataRowState.Deleted && drrow["NET"] != DBNull.Value &&
                               drrow["ISSALE"] != DBNull.Value && Convert.ToBoolean(drrow["ISSALE"]) == true
                               select Convert.ToDecimal(drrow["NET"])).Sum();
                TotalNet = (from drrow in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                            where drrow.RowState != DataRowState.Deleted && drrow["NET_AMOUNT"] != DBNull.Value &&
                           drrow["ISSALE"] != DBNull.Value && Convert.ToBoolean(drrow["ISSALE"]) == true
                            select Convert.ToDecimal(drrow["NET_AMOUNT"])).Sum();
                ToBeCollected = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                           .Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]))
                           .Select(x => Medilogics.General.Control.Common.MathRound(IfNullReturnZero(x["PATIENT_SHARE"]), CommonData.DecimalPlace)).Sum();
            }
            catch (Exception ex)
            {
                throw ;
            }
        }

        private void Executed_PharmacyNote(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                DataRowView dr = (DataRowView)e.Parameter;
                if (dr != null)
                {
                    DataRow[] drRow = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + dr.Row["INV_MAST_SERVICE_ID"]);
                    CommonWindow objWin = new CommonWindow(WindowControlBoxStyle.OnlyWithClose);
                    Infologics.Medilogics.Billing.UIControls.Billing.UIPharamacyNote objPharmacyNote = new UIControls.Billing.UIPharamacyNote();
                    objWin.Content = objPharmacyNote;
                    objWin.Width = 300;
                    objWin.Height = 300;
                    objWin.ResizeMode = ResizeMode.NoResize;
                    if (drRow[0]["PHARMACY_NOTE"] != DBNull.Value)
                        objPharmacyNote.PharmacyReason = Convert.ToString(drRow[0]["PHARMACY_NOTE"]);
                    objWin.Title = "Pharmacy Note";
                    objWin.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                    objWin.ShowDialog();
                    if (objPharmacyNote.PharmacyReason != string.Empty)
                    {
                        drRow[0]["PHARMACY_NOTE"] = objPharmacyNote.PharmacyReason;
                    }
                    else
                    {
                        drRow[0]["PHARMACY_NOTE"] = DBNull.Value;
                    }
                }
            }
            catch (Exception ex)
            {
                throw ;
            }
        }

        private void Executed_SerivceDetails(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                DataRowView dr = (DataRowView)e.Parameter;
                bool isFromGrid = true;
                if (dr == null && selectedService != null)
                {
                    dr = SelectedService;
                    isFromGrid = false;
                }
                if (dr != null)
                {
                    CommonWindow objWin = new CommonWindow(WindowControlBoxStyle.OnlyWithClose);
                    Infologics.Medilogics.Billing.UIControls.Billing.UIServiceDetails objUIServiceDetails = new UIControls.Billing.UIServiceDetails();
                    objWin.Content = objUIServiceDetails;
                    objWin.SizeToContent = SizeToContent.WidthAndHeight;
                    objWin.ResizeMode = ResizeMode.NoResize;
                    if (SelectedServiceType == (int)ServiceType.Pharmacy)
                    {
                        objWin.Title = "Drug Details";
                    }
                    else
                    {
                        objWin.Title = "Service Detail";
                    }
                    objWin.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                    if (SelectedServiceType == (int)ServiceType.Pharmacy && dr != null)
                    {
                        MainMasterSettings objMaster = new MainMasterSettings();
                        DataTable dtCriteria = new DataTable();
                        long ServiceId = 0;
                        decimal price = 0;
                        string Cptcode = string.Empty, service_Name = string.Empty;
                        if (SelectedService != null && SelectedService.Row.Table.Columns.Contains("PRIMARY_ID")
                            && SelectedService.Row["PRIMARY_ID"] != DBNull.Value && !isFromGrid)
                        {
                            ServiceId = Convert.ToInt64(SelectedService.Row["PRIMARY_ID"]);
                        }
                        else
                        {
                            ServiceId = Convert.ToInt64(dr["INV_MAST_SERVICE_ID"]);
                        }
                        if (SelectedService != null && SelectedService.Row.Table.Columns.Contains("CPT_CODE")
                          && SelectedService.Row["CPT_CODE"] != DBNull.Value && !isFromGrid)
                        {
                            Cptcode = Convert.ToString(SelectedService.Row["CPT_CODE"]);
                        }
                        else
                        {
                            Cptcode = Convert.ToString(dr["CPT_CODE"]);
                        }
                        if (SelectedService != null && SelectedService.Row.Table.Columns.Contains("NAME")
                          && SelectedService.Row["NAME"] != DBNull.Value && !isFromGrid)
                        {
                            service_Name = Convert.ToString(SelectedService.Row["NAME"]);
                        }
                        else
                        {
                            service_Name = Convert.ToString(dr["NAME"]);
                        }
                        DataSet dsData = GetServiceCharge(ServiceId,null);
                        if (dsData != null && dsData.Tables["SERVICE_BASE_CHARGE"].KIIsNotNullAndRowCount()
                            && dsData.Tables["SERVICE_BASE_CHARGE"].Rows[0]["PRICE"] != DBNull.Value)
                        {
                            price = Convert.ToDecimal(dsData.Tables["SERVICE_BASE_CHARGE"].Rows[0]["PRICE"]);
                        }
                        dsCharge = this.GetPharmacyCharge(ServiceId);
                        if (!dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Contains("GENERIC_NAME"))
                        {
                            dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Add("GENERIC_NAME");
                        }                        
                        string genericName = string.Empty;
                        if (Generic.KIIsNotNullAndRowCount() && dr["GENERIC_ID"] != DBNull.Value)
                        {
                            DataRow[] drGeneric = Generic.Select("EMR_LOOKUP_ID=" + IfNullReturnZero(dr["GENERIC_ID"]));
                            if (drGeneric.Any())
                            {
                                genericName = Convert.ToString(drGeneric[0]["LOOKUP_VALUE"]);
                            }
                        }
                        if (dsCharge != null && dsCharge.Tables["SERVICE_BASE_CHARGE"].KIIsNotNullAndRowCount())
                        {
                            if (!dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Contains("CPT_CODE"))
                            {
                                dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Add("CPT_CODE");
                            }
                            AddColumn<string>(dsCharge.Tables["SERVICE_BASE_CHARGE"], "NAME");
                            DataRow[] Query = null;
                            //DataTable dtSetting = CommonData.GetDefaultSettings(0, "IS_EXTERNAL_PHARMACY");
                            //if (dtSetting != null && dtSetting.Rows.Count > 0 && Convert.ToInt16(dtSetting.Rows[0]["VALUE"]) == 1)
                            if (DefaultSettings.Values.IS_EXTERNAL_PHARMACY)
                            {
                                if (dr.Row.Table.Columns.Contains("SUBLOCATION"))
                                {
                                    Query = dsCharge.Tables["SERVICE_BASE_CHARGE"].AsEnumerable()
                                       .Where(x => x["PH_SUBLOCATION_ID"] != DBNull.Value && IfNullReturnZero(x["PH_SUBLOCATION_ID"]) == IfNullReturnZero(dr["SUBLOCATION"]))
                                       .Select(x => x).ToArray();
                                }
                                else if (dr.Row.Table.Columns.Contains("PH_SUBLOCATION_ID"))
                                {
                                    Query = dsCharge.Tables["SERVICE_BASE_CHARGE"].AsEnumerable()
                                       .Where(x => x["PH_SUBLOCATION_ID"] != DBNull.Value && IfNullReturnZero(x["PH_SUBLOCATION_ID"]) == IfNullReturnZero(dr["PH_SUBLOCATION_ID"]))
                                       .Select(x => x).ToArray();
                                }
                                else if (!dr.Row.Table.Columns.Contains("PH_SUBLOCATION_ID"))
                                {
                                    if (dr.Row.Table.Columns.Contains("EXTERNAL_SERVICE_CODE") && dr["EXTERNAL_SERVICE_CODE"] != DBNull.Value)
                                    {
                                        Query = dsCharge.Tables["SERVICE_BASE_CHARGE"].AsEnumerable()
                                       .Where(x => x["PH_SUBLOCATION_ID"] != DBNull.Value && IfNullReturnZero(x["PH_SUBLOCATION_ID"]) == IfNullReturnZero(IPVerificationLocation))
                                       .Select(x => x).ToArray();
                                    }
                                    else
                                    {
                                        Query = dsCharge.Tables["SERVICE_BASE_CHARGE"].AsEnumerable()
                                           .Where(x => x["PH_SUBLOCATION_ID"] != DBNull.Value && IfNullReturnZero(x["PH_SUBLOCATION_ID"]) == IfNullReturnZero(IP_Gen_App_Sub_Location))
                                           .Select(x => x).ToArray();
                                    }
                                }
                            }
                            else
                            {
                                Query = dsCharge.Tables["SERVICE_BASE_CHARGE"].AsEnumerable().Select(x => x).ToArray();
                            }
                            if (Query!=null && Query.Count() > 0)
                            {
                                if (price > 0)
                                {
                                    Query.AsEnumerable().ForEach(x => x["PRICE"] = price);
                                }
                                if (Cptcode != string.Empty)
                                {
                                    Query.AsEnumerable().ForEach(x => x["CPT_CODE"] = Cptcode);
                                }
                                if (genericName != string.Empty)
                                {
                                    Query.AsEnumerable().ForEach(x => x["GENERIC_NAME"] = genericName);
                                }
                                if (service_Name != string.Empty)
                                {
                                    Query.AsEnumerable().ForEach(x => x["NAME"] = service_Name);
                                }
                                CreatePharmacyStockDescription(Query.CopyToDataTable());
                            }
                            else
                            {
                                Notes = string.Empty;
                            }
                        }
                    }
                    else if (SelectedServiceType == (int)ServiceType.Pharmacy)
                    {
                        long ServiceId = 0;
                        decimal price = 0;
                        string service_Name = string.Empty;
                        if (SelectedService != null && SelectedService.Row.Table.Columns.Contains("PRIMARY_ID")
                            && SelectedService.Row["PRIMARY_ID"] != DBNull.Value)
                        {
                            ServiceId = Convert.ToInt64(SelectedService.Row["PRIMARY_ID"]);
                        }
                        else
                        {
                            ServiceId = Convert.ToInt64(dr["INV_MAST_SERVICE_ID"]);
                        }
                        if (SelectedService != null && SelectedService.Row.Table.Columns.Contains("NAME")
                          && SelectedService.Row["NAME"] != DBNull.Value && !isFromGrid)
                        {
                            service_Name = Convert.ToString(SelectedService.Row["NAME"]);
                        }
                        else
                        {
                            service_Name = Convert.ToString(dr["NAME"]);
                        }
                        DataSet dsData = GetServiceCharge(ServiceId,null);
                        if (dsData != null && dsData.Tables["SERVICE_BASE_CHARGE"].KIIsNotNullAndRowCount()
                           && dsData.Tables["SERVICE_BASE_CHARGE"].Rows[0]["PRICE"] != DBNull.Value)
                        {
                            price = Convert.ToDecimal(dsData.Tables["SERVICE_BASE_CHARGE"].Rows[0]["PRICE"]);
                        }
                        dsCharge = this.GetPharmacyCharge(ServiceId);
                        if (!dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Contains("GENERIC_NAME"))
                        {
                            dsCharge.Tables["SERVICE_BASE_CHARGE"].Columns.Add("GENERIC_NAME");
                        }
                        AddColumn<string>(dsCharge.Tables["SERVICE_BASE_CHARGE"], "NAME");
                        string genericName = string.Empty;
                        if (Generic.KIIsNotNullAndRowCount() && dr["GENERIC_ID"] != DBNull.Value)
                        {
                            DataRow[] drGeneric = Generic.Select("EMR_LOOKUP_ID=" + IfNullReturnZero(dr["GENERIC_ID"]));
                            if (drGeneric.Any())
                            {
                                genericName = Convert.ToString(drGeneric[0]["LOOKUP_VALUE"]);
                            }
                        }
                        if (dsCharge != null && dsCharge.Tables["SERVICE_BASE_CHARGE"].KIIsNotNullAndRowCount())
                        {
                            if (dr.Row.Table.Columns.Contains("SUBLOCATION"))
                            {
                                var Query = dsCharge.Tables["SERVICE_BASE_CHARGE"].AsEnumerable()
                                    .Where(x => x["PH_SUBLOCATION_ID"] != DBNull.Value && IfNullReturnZero(x["PH_SUBLOCATION_ID"]) == IfNullReturnZero(dr["SUBLOCATION"]))
                                    .Select(x => x);
                                if (Query.Count() > 0)
                                {
                                    if (price > 0)
                                    {
                                        Query.AsEnumerable().ForEach(x => x["PRICE"] = price);
                                    }
                                    if (genericName != string.Empty)
                                    {
                                        Query.AsEnumerable().ForEach(x => x["GENERIC_NAME"] = genericName);
                                    }
                                    if (service_Name != string.Empty)
                                    {
                                        Query.AsEnumerable().ForEach(x => x["NAME"] = service_Name);
                                    }
                                    CreatePharmacyStockDescription(Query.CopyToDataTable());
                                }
                            }
                        }
                    }
                    else if (SelectedServiceType == (int)ServiceType.Investigation && dr != null)
                    {
                        if (dr.Row.Table.Columns.Contains("INV_MAST_SERVICE_ID"))
                        {
                            CreateServiceDescription(Convert.ToInt64(dr.Row["INV_MAST_SERVICE_ID"]), dr);
                        }
                        else if (SelectedService != null && SelectedService.Row.Table.Columns.Contains("PRIMARY_ID")
                             && SelectedService.Row["PRIMARY_ID"] != DBNull.Value)
                        {
                            CreateServiceDescription(Convert.ToInt64(SelectedService.Row["PRIMARY_ID"]), dr);
                        }
                    }
                    else if (SelectedServiceType == (int)ServiceType.Investigation && SelectedService != null)
                    {
                        if (SelectedService.Row.Table.Columns.Contains("PRIMARY_ID"))
                        {
                            CreateServiceDescription(Convert.ToInt64(SelectedService.Row["PRIMARY_ID"]), SelectedService);
                        }
                        else
                        {
                            CreateServiceDescription(Convert.ToInt64(SelectedService.Row["INV_MAST_SERVICE_ID"]), SelectedService);
                        }
                    }
                    objUIServiceDetails.Notes = Notes;
                    objWin.ShowDialog();
                }
            }
            catch (Exception ex)
            {
                throw ;
            }
        }

        //delete validation
        private bool deleteValidation()
        {
            bool canContinue = true;
            if (IsEditExecuted && AdjustmentValidation())
            {
                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                           "Complete the edit Operation", MessageBoxButtonType.OK, MessageBoxImages.Information);
                canContinue = false;
            }
            return canContinue;
        }

        private bool MultipleLocationValidation(DataRow drConsRow)
        {
            bool canContinue = true;
            if (BillData.Tables["INV_PAT_BILLING"] != null && Convert.ToBoolean(drConsRow["ISSALE"]))
            {
                if (drConsRow["IS_CONSUMPTION"] != DBNull.Value && Convert.ToInt16(drConsRow["IS_CONSUMPTION"]) == 2)
                {
                    var resConsData = BillData.Tables["INV_PAT_BILLING"].Copy().AsEnumerable().Where(w => IfNullReturnZero(w["CONSUMPTION_STATUS"]) == 1 &&
                        IfNullReturnZero(w["EMR_PAT_DTLS_MEDICATION_ID"]) == IfNullReturnZero(drConsRow["EMR_PAT_DTLS_INV_ORDER_ID"]));
                    if (resConsData.Any())
                    {
                        if (BillData.Tables["INV_PAT_BILLING"].Copy().AsEnumerable().Where(w1 => w1["ISSALE"] != DBNull.Value && Convert.ToBoolean(w1["ISSALE"]) &&
                            (IfNullReturnZero(w1["CONSUMPTION_STATUS"]) == 1 || IfNullReturnZero(w1["CONSUMPTION_STATUS"]) == 2)).Count(
                            c => IfNullReturnZero(c["SUBLOCATION"]) != IfNullReturnZero(resConsData.First()["SUBLOCATION"])) > 0)
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                             "Multiple Sublocation billing can't proceed.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            canContinue = false;
                        }

                    }

                }
                else if (drConsRow["CONSUMPTION_STATUS"] != DBNull.Value && drConsRow["SUBLOCATION"] != DBNull.Value && Convert.ToInt16(drConsRow["CONSUMPTION_STATUS"]) == 2)
                {
                    if (BillData.Tables["INV_PAT_BILLING"].Copy().AsEnumerable().Where(w1 => w1["ISSALE"] != DBNull.Value && Convert.ToBoolean(w1["ISSALE"]) &&
                           (IfNullReturnZero(w1["CONSUMPTION_STATUS"]) == 1 || IfNullReturnZero(w1["CONSUMPTION_STATUS"]) == 2)).Count(
                           c => IfNullReturnZero(c["SUBLOCATION"]) != IfNullReturnZero(drConsRow["SUBLOCATION"])) > 0)
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                         "Multiple Sublocation billing can't proceed.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        canContinue = false;
                    }
                }
            }
            return canContinue;
        }

        private void Executed_RefreshItemList(object sender, ExecutedRoutedEventArgs e)
        {
            ServiceGenirc = string.Empty;
            IsEditExecuted = false;
            EditService = null;
            IsTapperEnable = false;
            IsVerifiedItemEditExecuted = false;
            isMultipleServiceChangeBlock = 3; //Speed Improve
            ClearService();
            isMultipleServiceChangeBlock = 0; //Speed Improve
            if (EnableVerificationSettingBased)
            {
                LoadMedicines();
            }
        }

        //scanning for bill
        private void Executed_btnScanclick(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                DataSet billScanning = new DataSet();
                billScanning = fileScanning();
                if (billScanning != null && billScanning.Tables.Contains("SCAN_DTLS_FILE")
                    && billScanning.Tables.Contains("SCAN_MAST_FILE"))
                {
                    if (!(billScanning.Tables["SCAN_DTLS_FILE"].Columns.Contains("IS_BILL_WISE")))
                    {
                        billScanning.Tables["SCAN_DTLS_FILE"].Columns.Add("IS_BILL_WISE", typeof(Int16));
                    }
                    if (!(billScanning.Tables["SCAN_MAST_FILE"].Columns.Contains("IS_BILL_WISE")))
                    {
                        billScanning.Tables["SCAN_MAST_FILE"].Columns.Add("IS_BILL_WISE", typeof(Int16));
                    }
                    foreach (DataRow dr in billScanning.Tables["SCAN_MAST_FILE"].Rows)
                    {
                        dr["HOSPITAL_ID"] = CommonData.LoginHospitalSiteID;
                        dr["IS_BILL_WISE"] = 1;
                    }
                    foreach (DataRow dr in billScanning.Tables["SCAN_DTLS_FILE"].Rows)
                    {
                        if (dr.RowState != DataRowState.Deleted)
                        {
                            dr["IS_BILL_WISE"] = 1;
                            dr["SCAN_TYPE"] = Convert.ToInt16(ScanType.Billing);
                        }
                    }
                    if (billScanning != null && billScanning.Tables.Contains("SCAN_MAST_FILE") && billScanning.Tables["SCAN_MAST_FILE"].Rows.Count > 0)
                    {
                        BillData.Tables["SCAN_MAST_FILE"].Merge(billScanning.Tables["SCAN_MAST_FILE"].Copy());
                    }
                    if (billScanning != null && billScanning.Tables.Contains("SCAN_DTLS_FILE") && billScanning.Tables["SCAN_DTLS_FILE"].Rows.Count > 0)
                    {
                        BillData.Tables["SCAN_DTLS_FILE"].Merge(billScanning.Tables["SCAN_DTLS_FILE"].Copy());
                    }
                }
                if (billScanning != null && billScanning.Tables.Contains("TABLE1"))
                {
                    billScanning.Tables["TABLE1"].TableName = "GEN_FILE_ATTACHMENTS";
                    if (!(billScanning.Tables["GEN_FILE_ATTACHMENTS"].Columns.Contains("IS_BILL_WISE")))
                    {
                        billScanning.Tables["GEN_FILE_ATTACHMENTS"].Columns.Add("IS_BILL_WISE", typeof(Int16));
                    }
                    foreach (DataRow dr in billScanning.Tables["GEN_FILE_ATTACHMENTS"].Rows)
                    {
                        dr["HOSPITAL_ID"] = CommonData.LoginHospitalSiteID;
                        dr["IS_BILL_WISE"] = 1;
                    }
                    if (billScanning != null && billScanning.Tables.Contains("GEN_FILE_ATTACHMENTS") && billScanning.Tables["GEN_FILE_ATTACHMENTS"].Rows.Count > 0)
                    {
                        BillData.Tables["GEN_FILE_ATTACHMENTS"].Merge(billScanning.Tables["GEN_FILE_ATTACHMENTS"].Copy());
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        //scanning for service wise
        private void Executed_btnServiceScanclick(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                ScanServiceCount += 1;
                DataRowView dr = (DataRowView)e.Parameter;
                DataSet ServiceScanning = new DataSet();
                ServiceScanning = fileScanning();
                if (ServiceScanning != null && ServiceScanning.Tables.Contains("SCAN_DTLS_FILE")
                    && ServiceScanning.Tables.Contains("SCAN_MAST_FILE"))
                {
                    dr["SCAN_SERVICE_ID"] = ScanServiceCount;
                    dr["IS_SCAN_EXIST"] = 1;
                    if (!(ServiceScanning.Tables["SCAN_DTLS_FILE"].Columns.Contains("IS_SERVICE_WISE")))
                    {
                        ServiceScanning.Tables["SCAN_DTLS_FILE"].Columns.Add("IS_SERVICE_WISE", typeof(Int16));
                    }
                    if (!(ServiceScanning.Tables["SCAN_MAST_FILE"].Columns.Contains("IS_SERVICE_WISE")))
                    {
                        ServiceScanning.Tables["SCAN_MAST_FILE"].Columns.Add("IS_SERVICE_WISE", typeof(Int16));
                    }
                    if (!(ServiceScanning.Tables["SCAN_DTLS_FILE"].Columns.Contains("SCAN_SERVICE_ID")))
                    {
                        ServiceScanning.Tables["SCAN_DTLS_FILE"].Columns.Add("SCAN_SERVICE_ID", typeof(Int32));
                    }
                    if (!(ServiceScanning.Tables["SCAN_MAST_FILE"].Columns.Contains("SCAN_SERVICE_ID")))
                    {
                        ServiceScanning.Tables["SCAN_MAST_FILE"].Columns.Add("SCAN_SERVICE_ID", typeof(Int32));
                    }
                    foreach (DataRow drRow in ServiceScanning.Tables["SCAN_MAST_FILE"].Rows)
                    {
                        drRow["HOSPITAL_ID"] = CommonData.LoginHospitalSiteID;
                        drRow["IS_SERVICE_WISE"] = 1;
                        drRow["SCAN_SERVICE_ID"] = ScanServiceCount;
                    }
                    foreach (DataRow drRow in ServiceScanning.Tables["SCAN_DTLS_FILE"].Rows)
                    {
                        drRow["IS_SERVICE_WISE"] = 1;
                        drRow["SCAN_TYPE"] = Convert.ToInt16(ScanType.Billing);
                        drRow["SCAN_SERVICE_ID"] = ScanServiceCount;
                    }
                    if (ServiceScanning != null && ServiceScanning.Tables.Contains("SCAN_MAST_FILE") && ServiceScanning.Tables["SCAN_MAST_FILE"].Rows.Count > 0)
                    {
                        BillData.Tables["SCAN_MAST_FILE"].Merge(ServiceScanning.Tables["SCAN_MAST_FILE"].Copy());
                    }
                    if (ServiceScanning != null && ServiceScanning.Tables.Contains("SCAN_DTLS_FILE") && ServiceScanning.Tables["SCAN_DTLS_FILE"].Rows.Count > 0)
                    {
                        BillData.Tables["SCAN_DTLS_FILE"].Merge(ServiceScanning.Tables["SCAN_DTLS_FILE"].Copy());
                    }
                }
                if (ServiceScanning != null && ServiceScanning.Tables.Contains("TABLE1"))
                {
                    dr["SCAN_SERVICE_ID"] = ScanServiceCount;
                    dr["IS_SCAN_EXIST"] = 1;
                    ServiceScanning.Tables["TABLE1"].TableName = "GEN_FILE_ATTACHMENTS";
                    if (!(ServiceScanning.Tables["GEN_FILE_ATTACHMENTS"].Columns.Contains("IS_SERVICE_WISE")))
                    {
                        ServiceScanning.Tables["GEN_FILE_ATTACHMENTS"].Columns.Add("IS_SERVICE_WISE", typeof(Int16));
                    }
                    if (!(ServiceScanning.Tables["GEN_FILE_ATTACHMENTS"].Columns.Contains("SCAN_SERVICE_ID")))
                    {
                        ServiceScanning.Tables["GEN_FILE_ATTACHMENTS"].Columns.Add("SCAN_SERVICE_ID", typeof(Int32));
                    }
                    foreach (DataRow drRow in ServiceScanning.Tables["GEN_FILE_ATTACHMENTS"].Rows)
                    {
                        drRow["HOSPITAL_ID"] = CommonData.LoginHospitalSiteID;
                        drRow["IS_SERVICE_WISE"] = 1;
                        drRow["SCAN_SERVICE_ID"] = ScanServiceCount;
                    }
                    if (ServiceScanning != null && ServiceScanning.Tables.Contains("GEN_FILE_ATTACHMENTS") && ServiceScanning.Tables["GEN_FILE_ATTACHMENTS"].Rows.Count > 0)
                    {
                        BillData.Tables["GEN_FILE_ATTACHMENTS"].Merge(ServiceScanning.Tables["GEN_FILE_ATTACHMENTS"].Copy());
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        //scanning common method
        private DataSet fileScanning()
        {
            try
            {
                DataSet dsScanning = new DataSet();
                CommonWindow objWin = new CommonWindow(WindowControlBoxStyle.OnlyWithClose);
                Infologics.Medilogics.CommonSharedUI.PatientDocument.ucPatientDocumentContainer objucPatientDocumentContainer = new CommonSharedUI.PatientDocument.ucPatientDocumentContainer();
                long? filterDocumentID = null;
                int docViewerMode = 0;
                bool showScanSave = false;//by Hayder Ali
                bool showAttachSave = false;//by Hayder Ali
                DataTable dtFileCategory = null;
                DataTable dtSubFileCategory = null;
                long defaultScanCategory = 0;
                PatientInformation Patient = new PatientInformation();
                Patient.MRNO = Convert.ToString(PatientInformation.Rows[0]["MRNO"]);
                objucPatientDocumentContainer.Patient = Patient;
                objucPatientDocumentContainer.DocumentViewerMode = docViewerMode;
                objucPatientDocumentContainer.DocumentViewFilterID = filterDocumentID;
                objucPatientDocumentContainer.DocViewerVisibility = Visibility.Visible;
                objucPatientDocumentContainer.FileAttachmentVisibility = Visibility.Visible;
                objucPatientDocumentContainer.ScanningVisibility = Visibility.Visible;
                objucPatientDocumentContainer.DocEditorVisibility = Visibility.Collapsed;
                objucPatientDocumentContainer.DefaultControl = 0; //Scan Doc by Hayder Ali
                objucPatientDocumentContainer.ServiceId = 0;
                objucPatientDocumentContainer.ServiceType = Convert.ToInt16(Infologics.Medilogics.Enumerators.General.FileAttachmentServiceType.FO);
                objucPatientDocumentContainer.ScanDisplayAll = true;
                objucPatientDocumentContainer.ShowAttachmentSaveBtn = showAttachSave;
                objucPatientDocumentContainer.ShowScanSaveBtn = showScanSave;
                objucPatientDocumentContainer.IsPatient = 1;
                objucPatientDocumentContainer.MRNO = Patient.MRNO;
                objucPatientDocumentContainer.ProfileCategoryId = 1;
                objucPatientDocumentContainer.AccessModule = Module.FO;
                dtFileCategory = CommonData.GetLookupData("FILE ATTACHMENT CATEGORY");
                objucPatientDocumentContainer.FileAttachmentCategory = dtFileCategory.Copy();
                dtSubFileCategory = CommonData.GetLookupData("FILE ATTACHMENT SUB CATEGORY");
                if (dtSubFileCategory != null && dtSubFileCategory.Rows.Count > 0)
                {
                    objucPatientDocumentContainer.SubFileCategory = dtSubFileCategory.Copy();
                }
                //Modified by Alex Jose on 26thDec 2012 for Privilege Implementation
                //objPatientDocument.ScanFileCategory = dtFileCategory.Copy();
                objucPatientDocumentContainer.ScanFileCategory = objucPatientDocumentContainer.ValidateAndFilterCategory(dtFileCategory, 2);
                if (objucPatientDocumentContainer.ScanDisplayAll == false)
                {
                    DataRow[] drCat = objucPatientDocumentContainer.ScanFileCategory.Select("LOOKUP_VALUE = 'FO'");
                    if (drCat.Length > 0)
                    {
                        defaultScanCategory = Convert.ToInt64(drCat[0]["GEN_LOOKUP_ID"]);
                    }
                }
                else
                {
                    defaultScanCategory = -1;
                }
                objucPatientDocumentContainer.DefaultScanCategoryId = defaultScanCategory;
                objucPatientDocumentContainer.IsfromBilling = true;
                objucPatientDocumentContainer.ScanFetch = true;               //by Hayder Ali
                objucPatientDocumentContainer.SetScanControlBinding();       //by  Hayder Ali
                objucPatientDocumentContainer.AttachmentFetch = true;        //by Hayder Ali
                objucPatientDocumentContainer.SetAttachmentControlBinding();//by Hayder Ali
                objWin.Content = objucPatientDocumentContainer;
                objWin.Width = 1050;
                objWin.Height = 600;
                objWin.ResizeMode = ResizeMode.NoResize;
                objWin.Title = "Document Scan";
                objWin.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                objWin.ShowDialog();
                if (objucPatientDocumentContainer.ScanDataSet != null)
                {
                    dsScanning = objucPatientDocumentContainer.ScanDataSet;
                }
                else if (objucPatientDocumentContainer.AttachedFileList != null)
                {
                    dsScanning.Tables.Add(objucPatientDocumentContainer.AttachedFileList.Copy());
                }
                return dsScanning;
            }
            catch (Exception)
            {

                throw;
            }
        }

        //loding default episode and encounter no while selecting provider
        //private void LoadEncounterEpisodeNo()
        //{
        //    Infologics.Medilogics.CommonSharedUI.BillingView.UcPatientEpisodeDetails objUcPatientEpisodeDetails = new Infologics.Medilogics.CommonSharedUI.BillingView.UcPatientEpisodeDetails();
        //    objUcPatientEpisodeDetails.MRNO = PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Columns.Contains("MRNO")
        //        && PatientInformation.Rows[0]["MRNO"] != DBNull.Value ? Convert.ToString(PatientInformation.Rows[0]["MRNO"]) : "";
        //    DataTable dtPatientEpisode = new DataTable();
        //    dtPatientEpisode = objUcPatientEpisodeDetails.PatientEpisode;
        //    //if (!dtPatientEpisode.KIIsNotNullAndRowCount())
        //    //{
        //        objUcPatientEpisodeDetails.IsEpisode = false;
        //        objUcPatientEpisodeDetails.MRNO = PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Columns.Contains("MRNO")
        //        && PatientInformation.Rows[0]["MRNO"] != DBNull.Value ? Convert.ToString(PatientInformation.Rows[0]["MRNO"]) : "";
        //        dtPatientEpisode = objUcPatientEpisodeDetails.PatientEpisode;
        //    //}
        //    if (dtPatientEpisode != null && dtPatientEpisode.Rows.Count > 0)
        //    {
        //        if (SelectedProviderID != null && dtPatientEpisode.Select("PROVIDER_ID=" + SelectedProviderID.Row["H_EMP_ID"]).Count() > 0)
        //        {
        //            DataRow[] drRow = dtPatientEpisode.Select("PROVIDER_ID=" + SelectedProviderID.Row["H_EMP_ID"]);
        //            SelectedOpenEpisodeID = drRow[0]["EPISODE_NO"] != DBNull.Value ? Convert.ToString(drRow[0]["EPISODE_NO"]) : "";
        //            SelectedEncounterNo = drRow[0]["ENCOUNTER_NO"] != DBNull.Value ? Convert.ToString(drRow[0]["ENCOUNTER_NO"]) : "";
        //            SelectedSpecialityValue = drRow[0]["GEN_DEPARTMENT_ID"] != DBNull.Value ? Convert.ToString(drRow[0]["GEN_DEPARTMENT_ID"]) : "";
        //            SelectedPatientFinEncounterID = drRow[0].Table.Columns.Contains("PAT_FIN_ENCOUNTER_ID") &&
        //            drRow[0]["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value ? Convert.ToInt64(drRow[0]["PAT_FIN_ENCOUNTER_ID"]) : 0;
        //            FetchCopayAmountUsed();
        //        }
        //        else
        //        {
        //            SelectedOpenEpisodeID = null;
        //            SelectedEncounterNo = null;
        //            SelectedPatientFinEncounterID = 0;
        //        }
        //    }
        //    else
        //    {
        //        SelectedOpenEpisodeID = null;
        //        SelectedEncounterNo = null;
        //        SelectedPatientFinEncounterID = 0;
        //    }
        //}

        // Loading Donor Services   ---- Benson
        private void LoadDonorServices()
        {
            try
            {
                if (IsDonor)
                {
                    IsServiceNameEnable = false;
                    if ((BloodDonorServices.KIIsNotNullAndRowCount() || (CommonData.StaticBloodbankData != null
                        && CommonData.StaticBloodbankData.Tables.Contains("INV_MAST_SERVICE") &&
                        CommonData.StaticBloodbankData.Tables["INV_MAST_SERVICE"].Rows.Count > 0))
                        && dsServiceData != null && dsServiceData.Tables["INV_MAST_SERVICE"].Rows.Count > 0)
                    {
                        SelectedService = dsServiceData.Tables["INV_MAST_SERVICE"].DefaultView[0];
                        ParentBaseCharge = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BASE_CHARGE"] != DBNull.Value ?
                                Convert.ToDecimal(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BASE_CHARGE"]) : 0;
                        SelectedParentAssociationService = SelectedService;
                        if (BillData.Tables["GEN_PAT_BILLING"].Rows[0]["SERVICE_TYPE"] == DBNull.Value)
                        {
                            BillData.Tables["GEN_PAT_BILLING"].Rows[0]["GEN_PAT_BILLING_ID"] = -1;
                            BillData.Tables["GEN_PAT_BILLING"].Rows[0]["SERVICE_TYPE"] = SelectedItemServiceType;
                        }

                        this.AssignSelectedService(SelectedService.Row);
                        if (Mouse.OverrideCursor == null)
                            Mouse.OverrideCursor = Cursors.Wait;
                        this.AddService();
                        if (ISAssociatedService)
                        {
                            AssignItemAssociationServices(SelectedParentAssociationService.Row);
                            ISAssociatedService = false;
                        }
                        string Data = CommonData.GetDefaultSettings("BLOOD_BANK_DEFAULT_PROVIDER");
                        if (!string.IsNullOrEmpty(Data))
                        {
                            SelectedProviderValue = Data;
                        }
                        Location = null;
                        Category = null;
                        DtTestPriority.Clear();
                        EnableAddService = false;
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }
            finally
            {

                Mouse.OverrideCursor = null;
            }
        }

        /// <summary>
        /// Loads the KOT order.
        /// </summary>
        /// <param name="drPatientData">The dr patient data.</param>
        /// <returns></returns>
        private DataSet LoadEMRKOTOrder(int iscahierremoved=0)
        {
            try
            {
                DataSet dsResult = null;
                DataTable dtCriteria;
                DataTable dtBedDetails = GetPatientBedID();
                //if (dtBedDetails.KIIsNotNullAndRowCount())
                //{
                    dtCriteria = new DataTable();
                    dtCriteria.Columns.Add("PATIENT_ID");
                    dtCriteria.Columns.Add("VISIT_NO");
                    dtCriteria.Columns.Add("SERVICE_DATE");
                    dtCriteria.Columns.Add("ROOM_ID");
                    dtCriteria.Columns.Add("MODE");
                    dtCriteria.Columns.Add("IS_CHARGE_INCLUDED");
                    dtCriteria.Columns.Add("ISCASHIERREMOVED");
                    dtCriteria.Rows.Add();
                    dtCriteria.Rows[0]["PATIENT_ID"] = PatientInformation.Rows[0]["MRNO"];
                    dtCriteria.Rows[0]["ISCASHIERREMOVED"] = iscahierremoved;

                    //if (PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Rows[0]["MRNO"] != DBNull.Value)
                    //{
                    //    DataTable dtPatientVisit = GetPatientVisit();
                    //    if (dtPatientVisit.KIIsNotNullAndRowCount())
                    //    {
                    //        dtCriteria.Rows[0]["VISIT_NO"] = dtPatientVisit.Rows[0]["VISIT_NO"];
                    //    }
                    //}
                    //dtCriteria.Rows[0]["ROOM_ID"] = dtBedDetails.Rows[0]["ADT_DTLS_ROOM_BED_ID"];

                    dtCriteria.Rows[0]["MODE"] = 0;
                    DataTable dtSetting = CommonData.GetDefaultSettings(0, "IS_KOT_CHARGE_INCLUDED");
                    if (dtSetting != null && dtSetting.Rows.Count > 0 && Convert.ToInt16(dtSetting.Rows[0]["VALUE"]) == 1)
                    {
                        dtCriteria.Rows[0]["IS_CHARGE_INCLUDED"] = 1;
                    }
                                            
                    Infologics.Medilogics.CommonShared.EMRMain.MainEMRShared objEmrShared = new Infologics.Medilogics.CommonShared.EMRMain.MainEMRShared();
                    dsResult = objEmrShared.FetchKOTOrderDetails(dtCriteria);
                //}
                return dsResult;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        private DataTable GetPatientBedID()
        {
            DataTable dtCriteria = new DataTable();
            dtCriteria.Columns.Add("MRNO");
            dtCriteria.Columns.Add("VISIT_NO");
            dtCriteria.Columns.Add("ISINPATIENT");
            dtCriteria.Rows.Add();
            dtCriteria.Rows[0]["MRNO"] = PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Rows[0]["MRNO"] != DBNull.Value
                ? PatientInformation.Rows[0]["MRNO"] : "";
            dtCriteria.Rows[0]["VISIT_NO"] = GetPatientVisit().KIIsNotNullAndRowCount() && GetPatientVisit().Rows[0]["VISIT_NO"] != DBNull.Value
                ? GetPatientVisit().Rows[0]["VISIT_NO"] : 0;
            dtCriteria.Rows[0]["ISINPATIENT"] = 1;
            int mode = 8;
            MainADTShared objMainADTShared = new MainADTShared();
            return objMainADTShared.FetchBedDetails(dtCriteria, mode);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="dsData"></param>
        /// <returns></returns>
        private DataSet CreateEMRKOTOrderRelation(DataSet dsData)
        {
            try
            {
                if (dsData != null && dsData.Tables["EMR_PAT_MAST_KOT"].KIIsNotNullAndRowCount())
                {
                    IsCPOEOrderExist = true;
                    IsCPOEKOTOrderExist = true;
                    if (dsData.Tables.Contains("EMR_PAT_MAST_KOT") && dsData.Tables.Contains("EMR_PAT_DTLS_KOT"))
                    {
                        DataTable dtTemp = dsData.Tables["EMR_PAT_DTLS_KOT"];
                    }
                    if (dsData.Tables.Contains("EMR_PAT_MAST_KOT"))
                    {
                        dsData.Tables["EMR_PAT_MAST_KOT"].TableName = "Order";
                        dsData.Tables["Order"].Columns["EMR_PAT_MAST_KOT_ID"].ColumnName = "EMR_PAT_MAST_INV_ORDER_ID";
                        //dsData.Tables["Order"].Columns["EMP_ID"].ColumnName = "PROVIDER_ID";
                    }
                    if (dsData.Tables.Contains("EMR_PAT_DTLS_KOT"))
                    {
                        dsData.Tables["EMR_PAT_DTLS_KOT"].Columns["EMR_PAT_MAST_KOT_ID"].ColumnName = "EMR_PAT_MAST_INV_ORDER_ID";
                        dsData.Tables["EMR_PAT_DTLS_KOT"].Columns.Add("SINO", typeof(int));
                        dsData.Tables["EMR_PAT_DTLS_KOT"].Columns["EMR_PAT_DTLS_KOT_ID"].ColumnName = "EMR_PAT_DTLS_INV_ORDER_ID";
                        dsData.Tables["EMR_PAT_DTLS_KOT"].TableName = "Detail";
                    }
                    DataTable DetailRelation = null;
                    Common objCommon = new Common();
                    var result = from row in dsData.Tables["Detail"].Copy().AsEnumerable()
                                 group row by new
                                 {
                                     EMR_PAT_MAST_INV_ORDER_ID = row.Field<decimal>("EMR_PAT_MAST_INV_ORDER_ID"),
                                     KOT_NO = row.Field<string>("KOT_NO"),
                                     PROVIDER_ID = row.Field<string>("PROVIDER_ID"),
                                     MAINITEM = row.Field<decimal>("MAINITEM"),
                                     INV_PARENT_CATEGORY_NAME = row.Field<string>("KOT_NO"),
                                     ISSELECT = 0
                                 } into grp
                                 select new
                                 {
                                     EMR_PAT_MAST_INV_ORDER_ID = grp.Key.EMR_PAT_MAST_INV_ORDER_ID,
                                     KOT_NO = grp.Key.KOT_NO,
                                     PROVIDER_ID = grp.Key.PROVIDER_ID,
                                     MAINITEM = grp.Key.MAINITEM,
                                     Count = grp.Count(),
                                     INV_PARENT_CATEGORY_NAME = grp.Key.INV_PARENT_CATEGORY_NAME,
                                     ISSELECT = grp.Key.ISSELECT
                                 };
                    DetailRelation = objCommon.LINQToDataTable(result);
                    DetailRelation.TableName = "OrderRelation";
                    ////First KOT Item Only selected
                    //foreach (DataRow item in DetailRelation.Rows)
                    //{
                    //    int selectedIndex = DetailRelation.Rows.IndexOf(item);
                    //    if (selectedIndex != 0)
                    //    {
                    //        item["ISSELECT"] = 0;
                    //    }
                    //}
                    ////End
                    if (DetailRelation != null && DetailRelation.Rows.Count > 0)
                    {
                        //DetailRelation.Rows[0]["ISSELECT"] = 1;
                        DataTable distinct = (from dr in dsData.Tables["Order"].AsEnumerable()
                                              select dr).Distinct(DataRowComparer.Default).CopyToDataTable();

                        if (distinct.Rows.Count > 0)
                        {
                            distinct.TableName = "Order";
                            dsData.Tables.Remove(dsData.Tables["Order"]);
                            dsData.Tables.Add(distinct.Copy());
                        }

                        if (!dsData.Tables["Order"].Columns.Contains("ISSELECT"))
                        {
                            dsData.Tables["Order"].Columns.Add("ISSELECT", typeof(bool));
                        }
                        foreach (DataRow dr in dsData.Tables["Order"].Rows)
                        {
                            dr["ISSELECT"] = "false";
                        }

                        dsData.Tables.Add(DetailRelation.Copy());
                        dsData.Relations.Add(
                            "Order2OrderRelation",
                            dsData.Tables["Order"].Columns["EMR_PAT_MAST_INV_ORDER_ID"],
                            dsData.Tables["OrderRelation"].Columns["EMR_PAT_MAST_INV_ORDER_ID"]);
                        //Load first order details 
                        if (dsData.Tables["Detail"].Columns.Contains("KOT_NO"))
                        {
                            dsData.Tables["Detail"].Columns["KOT_NO"].ColumnName = "INV_CATEGORY_NAME";
                        }
                        if (dsData.Tables["Detail"].Columns.Contains("ITEM_NAME"))
                        {
                            dsData.Tables["Detail"].Columns["ITEM_NAME"].ColumnName = "NAME";
                        }
                        if (dsData.Tables["Detail"].Columns.Contains("QUANTITY"))
                        {
                            dsData.Tables["Detail"].Columns["QUANTITY"].ColumnName = "QTY";
                        }
                        if (dsData.Tables["Detail"].Columns.Contains("SERVICE_TIME"))
                        {
                            dsData.Tables["Detail"].Columns["SERVICE_TIME"].ColumnName = "ENTRY_DATE";
                        }


                        //if (dsData.Tables["Detail"].Columns.Contains("ISSELECT"))
                        //{
                        //    dsData.Tables["Detail"].Columns.Remove("ISSELECT");
                        //}
                        //dsData.Tables["Detail"].Columns.Add("ISSELECT");

                        dsData.Tables["Detail"].DefaultView.RowFilter = "EMR_PAT_MAST_INV_ORDER_ID=" + dsData.Tables["Order"].Rows[0]["EMR_PAT_MAST_INV_ORDER_ID"];
                        OrderItems = dsData.Tables["Detail"].DefaultView.ToTable();
                    }
                }
                return dsData;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Executed_ViewKOTPackageService(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                DataRowView parameter;
                parameter = (e.Parameter as DataRowView);
                if (KOTPackageServiceTemp.KIIsNotNullAndRowCount())
                {
                    Bill_KOTPKGService objKOTPKGService = new Bill_KOTPKGService();
                    CommonWindow objWin = new CommonWindow(WindowControlBoxStyle.None);
                    objWin.Content = objKOTPKGService;
                    CommandBinding objBind = FindResource("CloseKOTPackageService") as CommandBinding;
                    objWin.CommandBindings.Add(objBind);
                    objWin.Title = "Package Service";
                    objWin.WindowState = WindowState.Normal;
                    objWin.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                    objWin.SizeToContent = SizeToContent.WidthAndHeight;
                    objWin.ResizeMode = ResizeMode.NoResize;
                    objWin.Owner = Window.GetWindow(this);
                    objKOTPKGService.DataContext = this;
                    if (parameter.Row["EMR_PAT_DTLS_KOT_ID"] != DBNull.Value)
                    {
                        KOTPackageServiceTemp.DefaultView.RowFilter = "EMR_PAT_DTLS_KOT_ID=" + parameter.Row["EMR_PAT_DTLS_KOT_ID"];
                        KOTPackageServices = KOTPackageServiceTemp.DefaultView.ToTable();
                    }
                    objWin.ShowDialog();
                }
            }
            catch (Exception Ex)
            {
                //ExceptionHandler.WriteErrorLog(Ex);
                throw;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Executed_CloseKOTPackageService(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                Window obj = sender as Window;
                obj.Close();
            }
            catch (Exception Ex)
            {
                throw;
                //ExceptionHandler.WriteErrorLog(Ex);
            }
        }

        private void Executed_PharmacyUnitSalesChaneged(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                DataRowView drvInvPatBilling = (DataRowView)e.Parameter;
                if (drvInvPatBilling != null)
                {
                    DataTable dtCriteria = new DataTable("CRITERIA");
                    dtCriteria.Columns.Add("INV_MAST_SERVICE_ID", typeof(Int64));
                    dtCriteria.Rows.Add(drvInvPatBilling.Row["INV_MAST_SERVICE_ID"]);
                    MainBillingShared objBillingShared = new MainBillingShared();
                    PharamacyUnitSales = objBillingShared.FetchPharmacyUnitSales(dtCriteria);
                }
                if (drvInvPatBilling != null && drvInvPatBilling.Row["PH_UNIT_SALES_CONVERSION_ID"] != DBNull.Value
                    && BillData != null && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount() && PharamacyUnitSalesGrid.KIIsNotNullAndRowCount()
                    && !isBlockUnitSaleSelectionChange)
                {
                    DataRow[] drFilter = PharamacyUnitSalesGrid.Select("PH_UNIT_SALES_CONVERSION_ID=" + drvInvPatBilling.Row["PH_UNIT_SALES_CONVERSION_ID"]);
                    if (drFilter.Length > 0)
                    {
                        drvInvPatBilling.Row["SALES_UNIT_NAME"] = drFilter[0]["TO_UNIT_NAME"];
                        drvInvPatBilling.Row["PH_UNIT_SALES_CONVERSION_ID"] = drFilter[0]["PH_UNIT_SALES_CONVERSION_ID"];
                        //drvInvPatBilling.Row["TEMP_PH_UNIT_ID"]= drFilter[0]["PH_UNIT_SALES_CONVERSION_ID"];
                        drvInvPatBilling.Row["BASE_QTY"] = drFilter[0]["BASE_QTY"];
                        drvInvPatBilling.Row["SALES_ACTUAL_QTY"] = IfNullReturnZero(drvInvPatBilling.Row["BASE_QTY"]) * IfNullReturnZero(drvInvPatBilling.Row["QTY"]);
                        if (BillData.Tables["GEN_BILL_DISCOUNT"].Rows.Count > 0)
                        {
                            foreach (DataRow dr in BillData.Tables["INV_PAT_BILLING"].Rows)
                            {

                                if (SelectedVisitModeNew == (int)VisitMode.OPCASH && Convert.ToBoolean(drvInvPatBilling.Row["ISSALE"]))
                                {
                                    dr["NET_AMOUNT"] = IfNullReturnZero(dr["BASE_CHARGE"]) * IfNullReturnZero(dr["QTY"]) + IfNullReturnZero(dr["OTHER_CHARGE"]);
                                    //  dr["NET_AMOUNT"] = dr["NET"];
                                    dr["PATIENT_SHARE"] = dr["NET_AMOUNT"];
                                }
                                dr["DISCOUNT"] = 0;
                                dr["MARKUP"] = 0;
                                dr["ADJUSTMENT"] = 0;
                                BillData.Tables["GEN_BILL_DISCOUNT"].Rows.Clear();
                                TotalAdjustment = 0;
                            }
                        }
                        if (SelectedVisitModeNew != (int)VisitMode.OPCASH)
                        {
                            AdjustmentValidation();
                        }
                        if (Convert.ToBoolean(drvInvPatBilling.Row["ISSALE"]))
                        {
                            CalculateTotalBilledAmount(drvInvPatBilling);
                            CalculateMaxMinCopay();
                            //CalculateServiceTotal();
                        }
                        else
                        {
                            drvInvPatBilling["NET_AMOUNT"] = IfNullReturnZero(drvInvPatBilling["BASE_CHARGE"]) * IfNullReturnZero(drvInvPatBilling["SALES_ACTUAL_QTY"]);
                            drvInvPatBilling["NET"] = drvInvPatBilling["NET_AMOUNT"];
                            drvInvPatBilling["PATIENT_SHARE"] = 0;
                            drvInvPatBilling["SPONSOR"] = 0;
                        }
                        if (IfNullReturnZero(drvInvPatBilling["VERIFICATION_BTN_VISIBILITY"]) == 1 && IfNullReturnZero(drvInvPatBilling["IS_VERIFIED"]) == 0)
                        {
                            Executed_IsVerificationChecked(sender, e);
                        }
                    } 
                    if (BillData.Tables["PH_PAT_DTLS_ORDER"] != null && BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Count > 0
                    && BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + drvInvPatBilling["INV_MAST_SERVICE_ID"]).Count() > 0)
                    {
                        DataRow drPhPatDlsOrder = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + drvInvPatBilling["INV_MAST_SERVICE_ID"]).First();
                        drPhPatDlsOrder["QUANTITY_UNIT"] = drvInvPatBilling.Row["SALES_UNIT_NAME"];
                        if (drvInvPatBilling["EMR_PAT_DTLS_MEDICATION_ID"] != null)
                        {
                            drPhPatDlsOrder["TOBEDISPENSED"] = drvInvPatBilling.Row["SALES_ACTUAL_QTY"];
                        }
                    }
                    DataRow[] drTemp = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + drvInvPatBilling["INV_MAST_SERVICE_ID"]);
                    if (drTemp.Length > 0)
                    {
                        drTemp[0]["QUANTITY_UNIT"] = drvInvPatBilling["SALES_UNIT_NAME"];
                    }
                    DosageCalculation(drvInvPatBilling.Row);
                    if (Convert.ToBoolean(drvInvPatBilling["ISSALE"]) && IfNullReturnZero(drvInvPatBilling["CONSUMPTION_STATUS"]) == 0)
                    {
                        //stock checking
                        MainBilling objBIlling = new MainBilling();
                        DataTable dtCriteriatable = new DataTable();
                        dtCriteriatable.Columns.Add("PH_SUBLOCATION_ID", typeof(int));
                        dtCriteriatable.Columns.Add("MEDICINE_CODE", typeof(long));
                        dtCriteriatable.Columns.Add("BATCHNO", typeof(string));
                        dtCriteriatable.Columns.Add("INV_MAST_SERVICE_ID", typeof(long));
                        dtCriteriatable.Rows.Add(drvInvPatBilling["SUBLOCATION"], drvInvPatBilling["MEDICINE_CODE"], drvInvPatBilling["BATCHNO"], drvInvPatBilling["INV_MAST_SERVICE_ID"]);
                        DataTable dttable = objBIlling.GetMedicinesStockDetails(dtCriteriatable);
                        decimal sales_actual_qty = 0; IfNullReturnZero(drvInvPatBilling["SALES_ACTUAL_QTY"]);
                        decimal query = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                            .Where(x => x["INV_MAST_SERVICE_ID"] != DBNull.Value && x["BATCHNO"] != DBNull.Value &&
                          Convert.ToInt64(x["INV_MAST_SERVICE_ID"]) == Convert.ToInt64(drvInvPatBilling["INV_MAST_SERVICE_ID"]) &&
                          Convert.ToString(x["BATCHNO"]) == Convert.ToString(drvInvPatBilling["BATCHNO"]) && Convert.ToBoolean(x["ISSALE"]))
                          .Select(x => Convert.ToDecimal(x["SALES_ACTUAL_QTY"])).Sum();
                        sales_actual_qty += query;
                        if (dttable.KIIsNotNullAndRowCount())
                        {
                            if (sales_actual_qty > IfNullReturnZero(dttable.Rows[0]["QTY"]))
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                "No Stock Available for Item " + drvInvPatBilling["NAME"] + " With Batch No " + drvInvPatBilling["BATCHNO"], MessageBoxButtonType.OK, MessageBoxImages.Information);
                                drvInvPatBilling["ISSALE"] = false;
                                drvInvPatBilling["ISLABEL"] = false;
                                CalculateServiceTotal();
                            }
                        }
                        else if (drvInvPatBilling["BATCHNO"] != DBNull.Value)
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                            "No Stock Available for Item " + drvInvPatBilling["NAME"] + " With Batch No " + drvInvPatBilling["BATCHNO"], MessageBoxButtonType.OK, MessageBoxImages.Information);
                            drvInvPatBilling["ISSALE"] = false;
                            drvInvPatBilling["ISLABEL"] = false;
                            CalculateServiceTotal();
                        }
                    }
                    if (IsFromPharmacyPanel && EnableVerificationSettingBased)
                    {
                        if (IfNullReturnZero(drvInvPatBilling["IS_VERIFIED"]) == 1 && IfNullReturnZero(drvInvPatBilling["ISSALE"]) == 1 && IfNullReturnZero(drvInvPatBilling["VERIFICATION_BTN_VISIBILITY"]) == 1
                            && IfNullReturnZero(drvInvPatBilling["GRANULAR_UNIT"]) < IfNullReturnZero(drvInvPatBilling["SALES_ACTUAL_QTY"]))
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "Sale Quantity should not be greater than verified Quantity", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            drvInvPatBilling["ISSALE"] = false;
                            drvInvPatBilling["ISLABEL"] = false;
                        }
                    }
                }
                isBlockUnitSaleSelectionChange = false;
                TotalAmount = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                               where dr.RowState != DataRowState.Deleted && dr["NET"] != DBNull.Value &&
                               dr["ISSALE"] != DBNull.Value && Convert.ToBoolean(dr["ISSALE"]) == true
                               select Convert.ToDecimal(dr["NET"])).Sum();
                TotalNet = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                            where dr.RowState != DataRowState.Deleted && dr["NET_AMOUNT"] != DBNull.Value &&
                           dr["ISSALE"] != DBNull.Value && Convert.ToBoolean(dr["ISSALE"]) == true
                            select Convert.ToDecimal(dr["NET_AMOUNT"])).Sum();
                ToBeCollected = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                           .Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]))
                           .Select(x => Medilogics.General.Control.Common.MathRound(IfNullReturnZero(x["PATIENT_SHARE"]), CommonData.DecimalPlace)).Sum();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private DataTable FetchDispense()
        {
            DataTable dtTemp = new DataTable();
            if (BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
            {
                var Query = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                           .Where(x => x["IS_DISPENSE"] == DBNull.Value)
                           .Select(x => x);
                if (Query.Count() > 0)
                {
                    DataTable dtTempDispense = Query.CopyToDataTable();
                    investigationduplication = false;
                    BillData.Tables["INV_PAT_BILLING"].Rows.Clear();
                    BillData.Tables["INV_PAT_BILLING"].Merge(dtTempDispense.Copy());
                    investigationduplication = true;
                }
                else
                {
                    investigationduplication = false;
                    BillData.Tables["INV_PAT_BILLING"].Rows.Clear();
                    investigationduplication = true;
                }
            }
            DataTable dtCriteria = new DataTable();
            dtCriteria.Columns.Add("MRNO", typeof(string));
            dtCriteria.Columns.Add("MODE", typeof(int));
            dtCriteria.Columns.Add("PAT_FIN_ENCOUNTER_ID", typeof(int));
            if (SelectedServiceType == (int)ServiceType.Pharmacy)
            {
                dtCriteria.Rows.Add(PatientInformation.Rows[0]["MRNO"], 3, SelectedPatientFinEncounterID);
            }
            else
            {
                dtCriteria.Rows.Add(PatientInformation.Rows[0]["MRNO"], 4, SelectedPatientFinEncounterID);
            }
            MainBilling objMainBIlling = new MainBilling();
            dtTemp = objMainBIlling.FetchPhPatDispenseDetails(dtCriteria);
            return dtTemp;
        }

        private void AddDispenseDetails()
        {
            if (DisPenseDetails != null && DisPenseDetails.Rows.Count > 0)
            {
                foreach (DataRow drRow in DisPenseDetails.Rows)
                {
                    int count = BillData.Tables["INV_PAT_BILLING"].Rows.Count;
                    BillData.Tables["INV_PAT_BILLING"].Rows.Add();
                    BillData.Tables["INV_PAT_BILLING"].Rows[count]["NAME"] = drRow["NAME"];
                    BillData.Tables["INV_PAT_BILLING"].Rows[count]["QTY"] = drRow["QTY"];
                    BillData.Tables["INV_PAT_BILLING"].Rows[count]["BATCHNO"] = drRow["BATCHNO"];
                    BillData.Tables["INV_PAT_BILLING"].Rows[count]["SALES_UNIT_NAME"] = drRow["SALES_UNIT_NAME"];
                    BillData.Tables["INV_PAT_BILLING"].Rows[count]["BASE_CHARGE"] = IfNullReturnZero(drRow["SALES_RATE"]);// / IfNullReturnZero(drRow["SALES_ACTUAL_QTY"]);
                    BillData.Tables["INV_PAT_BILLING"].Rows[count]["NET_AMOUNT"] = IfNullReturnZero(drRow["NET_AMOUNT"]);
                    BillData.Tables["INV_PAT_BILLING"].Rows[count]["IS_DISPENSE"] = 1;
                }
            }
        }

        private void Executed_EMROrderSelectALL(object sender, ExecutedRoutedEventArgs e)
        {
            if (OrderItems != null)
            {
                foreach (DataRow item in OrderItems.Rows)
                {
                    item["ISSELECT"] = 1;
                }
            }
        }

        private void Executed_EMROrderUnSelectALL(object sender, ExecutedRoutedEventArgs e)
        {
            if (OrderItems != null)
            {
                foreach (DataRow item in OrderItems.Rows)
                {
                    item["ISSELECT"] = 0;
                }
            }
        }
        bool isfromCPOEorder = false;
        private void Executed_EMRRootChecked(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {

                Mouse.OverrideCursor = Cursors.Wait;
                DataRowView drvInvPatBilling = null;
                bool isEmergencyOrder = false;
                ConsumptionMessage = false;
                if (e != null)
                {
                    drvInvPatBilling = (DataRowView)e.Parameter;
                }
                isEmergencyOrder = (drvInvPatBilling != null && drvInvPatBilling.Row.Table.Columns.Contains("ISEMERGENCY")
                    && drvInvPatBilling.Row["ISEMERGENCY"] != DBNull.Value && Convert.ToInt16(drvInvPatBilling.Row["ISEMERGENCY"]) == 1) ? true : false;
                string ProviderID = string.Empty;
                if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("Order") && EMROrderRelation.Tables["Order"].KIIsNotNullAndRowCount()
                    && EMROrderRelation.Tables.Contains("OrderRelation") && EMROrderRelation.Tables["OrderRelation"].KIIsNotNullAndRowCount())
                {
                    isNormalTopUp = false; //bug id 39242
                    //If expired orders are selected then load deafult scheme 
                    ExpiredOrderSchemeSelectionChange();
                    isNormalTopUp = true;
                    if (SelectedServiceType == (int)ServiceType.Pharmacy)
                    {
                        if ((SelectedLabOrSubLocationValue != null && SelectedLabOrSubLocationValue != -1) || EnableVerificationSettingBased)
                        {
                            if (EMROrderRelation != null && EMROrderRelation.Tables["OrderRelation"].KIIsNotNullAndRowCount() && drvInvPatBilling != null && drvInvPatBilling["EMR_PAT_MAST_INV_ORDER_ID"] != DBNull.Value)
                            {
                                EMROrderRelation.Tables["OrderRelation"].DefaultView.RowFilter = "EMR_PAT_MAST_INV_ORDER_ID=" + Convert.ToInt64(drvInvPatBilling["EMR_PAT_MAST_INV_ORDER_ID"]);
                            }
                            else if (drvInvPatBilling == null && SelectedProvider != null && SelectedProvider["H_EMP_ID"] != DBNull.Value)
                            {
                                EMROrderRelation.Tables["Order"].DefaultView.RowFilter = "PROVIDER_ID<>" + Convert.ToDecimal(SelectedProvider["H_EMP_ID"]) + "AND ISSELECT=1";
                                foreach (DataRowView drv in EMROrderRelation.Tables["Order"].DefaultView)
                                {
                                    drv["ISSELECT"] = false;
                                }
                            }
                            //Outside loop
                            if (drvInvPatBilling != null && Convert.ToBoolean(drvInvPatBilling.Row["ISSELECT"])
                            && Convert.ToString(SelectedProvider["H_EMP_ID"]) != Convert.ToString(drvInvPatBilling["PROVIDER_ID"])
                               && BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0)
                            {

                                Mouse.OverrideCursor = null;
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                 " Selected provider is different from adding service provider.\n" +
                                   "Please change the provider",
                                 MessageBoxButtonType.OK, MessageBoxImages.Information);
                                drvInvPatBilling.Row["ISSELECT"] = false;
                                return;
                            }
                            //else if (drvInvPatBilling != null && Convert.ToBoolean(drvInvPatBilling.Row["ISSELECT"])
                            //&& Convert.ToString(SelectedProvider["H_EMP_ID"]) != Convert.ToString(drvInvPatBilling["PROVIDER_ID"])
                            //   && EnableVerificationSettingBased)
                            //{
                            //    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                            //     " Selected provider is different from adding service provider.\n" +
                            //       "Please change the provider",
                            //     MessageBoxButtonType.OK, MessageBoxImages.Information);
                            //    drvInvPatBilling.Row["ISSELECT"] = false;
                            //    return;
                            //}
                            //End
                            foreach (DataRowView drv in EMROrderRelation.Tables["OrderRelation"].DefaultView)
                            {
                                ProviderID = drv.Row["PROVIDER_ID"] != DBNull.Value ? Convert.ToString(drv.Row["PROVIDER_ID"]) : string.Empty;
                                if ((SelectedProvider == null
                                   || (SelectedProvider != null && Convert.ToDecimal(SelectedProvider["H_EMP_ID"]) == Convert.ToDecimal(drv.Row["PROVIDER_ID"]))
                                   || (drvInvPatBilling != null && drvInvPatBilling.Row.Table.Columns.Contains("PAT_FIN_ENCOUNTER_ID") && drvInvPatBilling.Row["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value && Convert.ToInt64(drvInvPatBilling.Row["PAT_FIN_ENCOUNTER_ID"]) == SelectedPatientFinEncounterID)
                                   || (drvInvPatBilling != null && drvInvPatBilling.Row.Table.Columns.Contains("ISEMERGENCY") && drvInvPatBilling.Row["ISEMERGENCY"] != DBNull.Value && Convert.ToInt16(drvInvPatBilling.Row["ISEMERGENCY"]) == 1))
                                   || (SelectedVisitModeNew == (int)VisitMode.IP
                                   || (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE") && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.IP)))//&& Convert.ToBoolean(drvInvPatBilling.Row["ISSELECT"])
                                {
                                    drv.Row["ISSELECT"] = drvInvPatBilling != null ? drvInvPatBilling.Row["ISSELECT"] : false;
                                    EditService = null;
                                    IsEditExecuted = false;
                                    if (SelectedService != null)
                                        SelectedService = null;
                                    //-----------added to handle bugid-26456 ------------------
                                    SelectedEMROrder = null;
                                    //-------------------------------------------------
                                    if (drvInvPatBilling != null
                           && Convert.ToString(SelectedProvider["H_EMP_ID"]) != Convert.ToString(drvInvPatBilling["PROVIDER_ID"])
                              && BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0)
                                    {
                                        break;
                                    }
                                    isfromCPOEorder = true;
                                    SelectedEMROrderedData(drv, true);
                                    isfromCPOEorder = false;
                                    if (drvInvPatBilling != null && drvInvPatBilling.Row["ISSELECT"] != DBNull.Value && Convert.ToBoolean(drvInvPatBilling.Row["ISSELECT"])
                                        && ((SelectedVisitMode != VisitMode.IP && string.IsNullOrEmpty(SelectedOpenEpisodeID)
                                        && SelectedEpisodeDetails != null && SelectedEpisodeDetails.Row.Table.Columns.Contains("ENCOUNTER_STATUS")
                                        && SelectedEpisodeDetails.Row["ENCOUNTER_STATUS"] != DBNull.Value && Convert.ToInt16(SelectedEpisodeDetails.Row["ENCOUNTER_STATUS"]) == 1)
                                       || (SelectedVisitMode != VisitMode.IP && isEmergencyOrder)
                                       || SelectedVisitModeNew == (int)VisitMode.IP
                                       || (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE") && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.IP)))//&& ClosedPatientFinEpisodeID==SelectedPatientFinEpisodeID--Changes done -On-going episode
                                    {
                                        OnLoadEncounterEpisodeNo(ProviderID, isEmergencyOrder, true);
                                    }
                                }
                                //else // Encounter selection change
                                //{
                                //    drv.Row["ISSELECT"] = false;
                                //    EditService = null;
                                //    IsEditExecuted = false;
                                //    SelectedService = null;
                                //    SelectedEMROrderedData(drv, true);
                                //    OnLoadEncounterEpisodeNo(ProviderID, true);
                                //}
                            }
                        }
                        else
                        {
                            if (drvInvPatBilling != null && Convert.ToBoolean(drvInvPatBilling.Row["ISSELECT"]))
                            {

                                Mouse.OverrideCursor = null;
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                        " Please select the location.",
                                        MessageBoxButtonType.OK, MessageBoxImages.Information);
                                drvInvPatBilling.Row["ISSELECT"] = false;
                                return;
                            }
                        }
                    }
                    else
                    {
                        if (EMROrderRelation != null && EMROrderRelation.Tables["OrderRelation"].KIIsNotNullAndRowCount() && drvInvPatBilling != null && drvInvPatBilling["EMR_PAT_MAST_INV_ORDER_ID"] != DBNull.Value)
                        {
                            EMROrderRelation.Tables["OrderRelation"].DefaultView.RowFilter = "EMR_PAT_MAST_INV_ORDER_ID=" + Convert.ToInt64(drvInvPatBilling["EMR_PAT_MAST_INV_ORDER_ID"]);
                        }
                        else if (drvInvPatBilling == null && EMROrderRelation != null && EMROrderRelation.Tables.Contains("Order")
                             && EMROrderRelation.Tables["Order"].KIIsNotNullAndRowCount() && SelectedProvider != null && SelectedProvider["H_EMP_ID"] != DBNull.Value)
                        {
                            EMROrderRelation.Tables["Order"].DefaultView.RowFilter = "PROVIDER_ID<>" + Convert.ToDecimal(SelectedProvider["H_EMP_ID"]) + "AND ISSELECT=1";
                            foreach (DataRowView drv in EMROrderRelation.Tables["Order"].DefaultView)
                            {
                                drv["ISSELECT"] = false;
                            }
                        }
                        //Outside loop
                        if (SelectedServiceType != (int)ServiceType.Cafeteria && drvInvPatBilling != null && Convert.ToBoolean(drvInvPatBilling.Row["ISSELECT"])
                            && Convert.ToString(SelectedProvider["H_EMP_ID"]) != Convert.ToString(drvInvPatBilling["PROVIDER_ID"])
                            && BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0)
                        {

                            Mouse.OverrideCursor = null;
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                             " Selected provider is different from adding service provider.\n" +
                               "Please change the provider",
                             MessageBoxButtonType.OK, MessageBoxImages.Information);
                            drvInvPatBilling.Row["ISSELECT"] = false;
                            return;
                        }
                        //else if (SelectedServiceType != (int)ServiceType.Cafeteria && drvInvPatBilling != null && Convert.ToBoolean(drvInvPatBilling.Row["ISSELECT"])
                        //    && Convert.ToString(SelectedProvider["H_EMP_ID"]) != Convert.ToString(drvInvPatBilling["EMP_ID"])
                        //    && BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0)
                        //{
                        //    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                        //     " Selected provider is different from adding service provider.\n" +
                        //       "Please change the provider",
                        //     MessageBoxButtonType.OK, MessageBoxImages.Information);
                        //    drvInvPatBilling.Row["ISSELECT"] = false;
                        //    return;
                        //}
                        //End
                        foreach (DataRowView drv in EMROrderRelation.Tables["OrderRelation"].DefaultView)
                        {
                            ProviderID = drv.Row["PROVIDER_ID"] != DBNull.Value ? Convert.ToString(drv.Row["PROVIDER_ID"]) : string.Empty;
                            if ((SelectedProvider == null
                                 || (SelectedProvider != null && Convert.ToDecimal(SelectedProvider["H_EMP_ID"]) == Convert.ToDecimal(drv.Row["PROVIDER_ID"]))
                                 || (drvInvPatBilling != null && drvInvPatBilling.Row.Table.Columns.Contains("PAT_FIN_ENCOUNTER_ID") && drvInvPatBilling.Row["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value && Convert.ToInt64(drvInvPatBilling.Row["PAT_FIN_ENCOUNTER_ID"]) == SelectedPatientFinEncounterID)
                                 || (drvInvPatBilling != null && drvInvPatBilling.Row.Table.Columns.Contains("ISEMERGENCY") && drvInvPatBilling.Row["ISEMERGENCY"] != DBNull.Value && Convert.ToInt16(drvInvPatBilling.Row["ISEMERGENCY"]) == 1))
                                 || (SelectedServiceType == (int)ServiceType.Cafeteria)
                                 || (SelectedVisitModeNew == (int)VisitMode.IP
                                 || (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE") && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.IP)))//&& Convert.ToBoolean(drvInvPatBilling.Row["ISSELECT"])
                            {
                                drv.Row["ISSELECT"] = drvInvPatBilling != null ? drvInvPatBilling.Row["ISSELECT"] : false;
                                EditService = null;
                                IsEditExecuted = false;
                                if (SelectedService != null)
                                    SelectedService = null;
                                isfromCPOEorder = true;
                                SelectedEMROrderedData(drv, true);
                                isfromCPOEorder = false;
                                if (drvInvPatBilling != null && drvInvPatBilling.Row["ISSELECT"] != DBNull.Value && Convert.ToBoolean(drvInvPatBilling.Row["ISSELECT"])
                                        && ((SelectedVisitMode != VisitMode.IP && string.IsNullOrEmpty(SelectedOpenEpisodeID)
                                        && SelectedEpisodeDetails != null && SelectedEpisodeDetails.Row.Table.Columns.Contains("ENCOUNTER_STATUS")
                                        && SelectedEpisodeDetails.Row["ENCOUNTER_STATUS"] != DBNull.Value && Convert.ToInt16(SelectedEpisodeDetails.Row["ENCOUNTER_STATUS"]) == 1)
                                       || (SelectedVisitMode != VisitMode.IP && isEmergencyOrder)
                                       || SelectedVisitModeNew == (int)VisitMode.IP
                                       || (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE") && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.IP)))//&& ClosedPatientFinEpisodeID==SelectedPatientFinEpisodeID--Changes done -On-going episode
                                {
                                    OnLoadEncounterEpisodeNo(ProviderID, isEmergencyOrder, true);
                                }
                            }
                            //else // Encounter selection change
                            //{
                            //    drv.Row["ISSELECT"] = false;
                            //    EditService = null;
                            //    IsEditExecuted = false;
                            //    SelectedService = null;
                            //    SelectedEMROrderedData(drv, true);
                            //    OnLoadEncounterEpisodeNo(ProviderID, true);
                            //}
                        }
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                Mouse.OverrideCursor = null;
            }
        }

        private void OnselectedRouteChanged()
        {
            if (SelectedRoute != null)
            {
                MainEMRShared objEMRShared = new MainEMRShared();
                DataTable dtMedicineCriteria = new DataTable("SEARCH_CRITERIA");
                dtMedicineCriteria.Columns.Add("EMR_PH_ROUTE_ID");
                dtMedicineCriteria.Rows.Add(SelectedRoute["EMR_PH_ROUTE_ID"]);
                Form = objEMRShared.GetEMRDrugForms(dtMedicineCriteria);
            }
        }

        //public void OnLoadEncounterEpisodeNo(string providerID, bool isDefault)
        //{
        //    Infologics.Medilogics.CommonSharedUI.BillingView.UcPatientEpisodeDetails objUcPatientEpisodeDetails = new Infologics.Medilogics.CommonSharedUI.BillingView.UcPatientEpisodeDetails();
        //    objUcPatientEpisodeDetails.MRNO = PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Columns.Contains("MRNO")
        //        && PatientInformation.Rows[0]["MRNO"] != DBNull.Value ? Convert.ToString(PatientInformation.Rows[0]["MRNO"]) : "";
        //    DataTable dtPatientEpisode = new DataTable();
        //    dtPatientEpisode = objUcPatientEpisodeDetails.PatientEpisode;
        //    objUcPatientEpisodeDetails.IsEpisode = ExistEpiodeEncounterChecking();
        //    objUcPatientEpisodeDetails.MRNO = PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Columns.Contains("MRNO")
        //    && PatientInformation.Rows[0]["MRNO"] != DBNull.Value ? Convert.ToString(PatientInformation.Rows[0]["MRNO"]) : "";
        //    dtPatientEpisode = objUcPatientEpisodeDetails.PatientEpisode;
        //    if (isDefault && dtPatientEpisode != null && dtPatientEpisode.Rows.Count == 1)
        //    {
        //        if (providerID == string.Empty)
        //        {
        //            providerID = Convert.ToString(dtPatientEpisode.Rows[0]["PROVIDER_ID"]);
        //        }
        //        if (Provider.Select("H_EMP_ID=" + providerID).Count() > 0)
        //        {
        //            DataRow dr = null;
        //            dr = Provider.Select("H_EMP_ID=" + providerID).First();
        //            int rowIndex = Provider.Rows.IndexOf(dr);
        //            SelectedProvider = Provider.DefaultView[rowIndex];
        //            SelectedProviderValue = dtPatientEpisode.Rows[0]["PROVIDER_ID"] != DBNull.Value ? Convert.ToString(dtPatientEpisode.Rows[0]["PROVIDER_ID"]) : "";
        //            SelectedProviderIDValue = dtPatientEpisode.Rows[0]["PROVIDER_ID"] != DBNull.Value ? Convert.ToString(dtPatientEpisode.Rows[0]["PROVIDER_ID"]) : "";
        //            SelectedPatientFinEncounterID = dtPatientEpisode.Rows[0].Table.Columns.Contains("PAT_FIN_ENCOUNTER_ID") &&
        //            dtPatientEpisode.Rows[0]["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value ? Convert.ToInt64(dtPatientEpisode.Rows[0]["PAT_FIN_ENCOUNTER_ID"]) : 0;
        //            SelectedIncoPatientSchemeID = dtPatientEpisode.Rows[0]["INCO_PATIENT_SCHEME_ID"] != DBNull.Value ?
        //                Convert.ToInt64(dtPatientEpisode.Rows[0]["INCO_PATIENT_SCHEME_ID"]) : 0;
        //            SelectedEncounterNo = dtPatientEpisode.Rows[0]["ENCOUNTER_NO"] != DBNull.Value ? Convert.ToString(dtPatientEpisode.Rows[0]["ENCOUNTER_NO"]) : "";
        //            SelectedSpecialityValue = dtPatientEpisode.Rows[0]["GEN_DEPARTMENT_ID"] != DBNull.Value ? Convert.ToString(dtPatientEpisode.Rows[0]["GEN_DEPARTMENT_ID"]) : "";
        //            SelectedOpenEpisodeID = dtPatientEpisode.Rows[0]["EPISODE_NO"] != DBNull.Value ? Convert.ToString(dtPatientEpisode.Rows[0]["EPISODE_NO"]) : "";
        //            FetchCopayAmountUsed();
        //        }
        //    }
        //    else if (!isDefault && providerID != string.Empty && dtPatientEpisode.KIIsNotNullAndRowCount())
        //    {
        //        DataRow[] drData = dtPatientEpisode.Select("PROVIDER_ID='" + providerID + "'");
        //        if (drData.Length > 0 && Provider.Select("H_EMP_ID=" + providerID).Count() > 0)
        //        {
        //            DataRow dr = null;
        //            dr = Provider.Select("H_EMP_ID=" + providerID).First();
        //            int rowIndex = Provider.Rows.IndexOf(dr);
        //            SelectedProvider = Provider.DefaultView[rowIndex];
        //            SelectedProviderValue = drData[0]["PROVIDER_ID"] != DBNull.Value ? Convert.ToString(drData[0]["PROVIDER_ID"]) : "";
        //            SelectedProviderIDValue = drData[0]["PROVIDER_ID"] != DBNull.Value ? Convert.ToString(drData[0]["PROVIDER_ID"]) : "";
        //            SelectedPatientFinEncounterID = drData[0].Table.Columns.Contains("PAT_FIN_ENCOUNTER_ID") &&
        //            drData[0]["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value ? Convert.ToInt64(drData[0]["PAT_FIN_ENCOUNTER_ID"]) : 0;
        //            SelectedIncoPatientSchemeID = drData[0]["INCO_PATIENT_SCHEME_ID"] != DBNull.Value ?
        //                Convert.ToInt64(drData[0]["INCO_PATIENT_SCHEME_ID"]) : 0;
        //            SelectedEncounterNo = drData[0]["ENCOUNTER_NO"] != DBNull.Value ? Convert.ToString(drData[0]["ENCOUNTER_NO"]) : "";
        //            SelectedSpecialityValue = drData[0]["GEN_DEPARTMENT_ID"] != DBNull.Value ? Convert.ToString(drData[0]["GEN_DEPARTMENT_ID"]) : "";
        //            SelectedOpenEpisodeID = drData[0]["EPISODE_NO"] != DBNull.Value ? Convert.ToString(drData[0]["EPISODE_NO"]) : "";
        //            FetchCopayAmountUsed();
        //        }
        //    }
        //    else
        //    {
        //        SelectedProvider = null;
        //        SelectedProviderValue = string.Empty;
        //        SelectedProviderIDValue = string.Empty;
        //        SelectedPatientFinEncounterID = 0;
        //        SelectedIncoPatientSchemeID = 0;
        //        SelectedOpenEpisodeID = string.Empty;
        //        SelectedEncounterNo = string.Empty;
        //    }
        //    OnSchemeSelectionChanged(SelectedPatientFinEncounterID);
        //}

        public DataTable filterPatientEpisode = null;
        public void OnLoadEncounterEpisodeNo(string providerID, bool isEmergencyOrder, bool isEMROrder)
        {
            try
            {
                bool IsSameEncounterID = false;
                IEnumerable<DataRow> filter1 = null;
                IEnumerable<DataRow> filter2 = null;
                IEnumerable<DataRow> filter = null;
                //Bug 
                ////////////if (BillData != null && BillData.Tables.Contains("BILL_COMMON_DETAILS") && BillData.Tables["BILL_COMMON_DETAILS"].Columns.Contains("IS_SAME_ENCOUNTER_ID") && BillData.Tables["BILL_COMMON_DETAILS"].KIIsNotNullAndRowCount())
                ////////////{
                ////////////    BillData.Tables["BILL_COMMON_DETAILS"].Rows[0]["IS_SAME_ENCOUNTER_ID"] = 0;
                ////////////}
                filterPatientEpisode = null;//doctor selection change
                DataTable dtCriteria = new DataTable("SEARCH_CRITERIA");
                dtCriteria.Columns.Add("MRNO", typeof(string));
                dtCriteria.Columns.Add("PROVIDER_ID", typeof(string));
                dtCriteria.Columns.Add("MODE", typeof(int));
                dtCriteria.Rows.Add();
                dtCriteria.Rows[0]["MRNO"] = PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Rows[0]["MRNO"] != DBNull.Value
                    ? PatientInformation.Rows[0]["MRNO"] : DBNull.Value;
                //dtCriteria.Rows[0]["PROVIDER_ID"] = providerID;//For emergency checking
                dtCriteria.Rows[0]["MODE"] = 15;
                MainCommon objCommon = new MainCommon();
                DataTable dtPtEpisode = new DataTable();
                if (IsPatient) // no need for outsider patients
                    dtPtEpisode = objCommon.SelectFinancialEncounter(dtCriteria);
                if (dtPtEpisode.KIIsNotNullAndRowCount())
                {
                    var Query = from row in dtPtEpisode.AsEnumerable()
                                where row["ENCOUNTER_MODE"] != DBNull.Value && Convert.ToInt32(row["ENCOUNTER_MODE"]) == 2 && row["ENCOUNTER_STATUS"] != DBNull.Value
                                && (Convert.ToInt32(row["ENCOUNTER_STATUS"]) == 1 || Convert.ToInt32(row["ENCOUNTER_STATUS"]) == 0)
                                select row;
                    if (Query.Any())
                    {
                        if (Convert.ToInt32(Query.First()["ENCOUNTER_STATUS"])==0 && PatientInformation != null && PatientInformation.Rows.Count > 0)
                        {
                            PatientInformation.Rows[0]["PAT_FIN_ENCOUNTER_ID"] = Query.First()["PAT_FIN_ENCOUNTER_ID"];
                        }
                    }
                    if (providerID == string.Empty || providerID == null || providerID == "")
                    {
                        //--- AA0907
                        if (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("PAT_FIN_ENCOUNTER_ID")
                            && SelectedEncounterDetails.Row["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value)
                        {
                            filter1 = from dr in dtPtEpisode.AsEnumerable()
                                      where dr.RowState != DataRowState.Deleted
                                      && ((dr["ISVALID"] != DBNull.Value && Convert.ToInt16(dr["ISVALID"]) == 1
                                      && dr["ENCOUNTER_STATUS"] == DBNull.Value || (dr["ENCOUNTER_STATUS"] != DBNull.Value && Convert.ToInt16(dr["ENCOUNTER_STATUS"]) == 1))
                                      || (dr["EPISODE_END_DATE"] != DBNull.Value && Convert.ToDateTime(dr["EPISODE_END_DATE"]) >= DateTime.Now))
                                      && dr["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value && Convert.ToInt64(dr["PAT_FIN_ENCOUNTER_ID"]) == Convert.ToInt64(SelectedEncounterDetails.Row["PAT_FIN_ENCOUNTER_ID"])
                                      select dr;
                        }
                        else
                        {
                            filter1 = from dr in dtPtEpisode.AsEnumerable()
                                      where dr.RowState != DataRowState.Deleted
                                      && ((dr["ISVALID"] != DBNull.Value && Convert.ToInt16(dr["ISVALID"]) == 1
                                      && dr["ENCOUNTER_STATUS"] == DBNull.Value || (dr["ENCOUNTER_STATUS"] != DBNull.Value && Convert.ToInt16(dr["ENCOUNTER_STATUS"]) == 1))
                                      || (dr["EPISODE_END_DATE"] != DBNull.Value && Convert.ToDateTime(dr["EPISODE_END_DATE"]) >= DateTime.Now))
                                      select dr;
                        }
                        if (filter1 != null && filter1.Count() > 0)
                        {
                            filterPatientEpisode = filter1.CopyToDataTable().Copy();
                            //For provider with -open Episode and pav encounter
                            DataRow[] dr = filterPatientEpisode.Select("PROVIDER_ID=" + filterPatientEpisode.Rows[0]["PROVIDER_ID"]);
                            if (dr.Length > 1 && filterPatientEpisode.KIIsNotNullAndRowCount())
                            {
                                filterPatientEpisode.DefaultView.RowFilter = "PAT_FIN_EPISODE_ID IS NULL";
                                filterPatientEpisode = filterPatientEpisode.DefaultView.ToTable().Copy();
                            }
                        }
                    }
                    else
                    {
                        //IsAllChecked Removed for Bug Correction-18729    
                        if (isEmergencyOrder
                            || (BillData.Tables["BILL_COMMON_DETAILS"].Rows[0]["IS_SAME_ENCOUNTER_ID"] != DBNull.Value && Convert.ToInt16(BillData.Tables["BILL_COMMON_DETAILS"].Rows[0]["IS_SAME_ENCOUNTER_ID"]) == 1))//ER order selection , not required doctor selection change
                        {

                        }
                        else
                        {
                            //--- AA0907
                            if (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("PAT_FIN_ENCOUNTER_ID")
                           && SelectedEncounterDetails.Row["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value)
                            {
                                filter2 = from dr in dtPtEpisode.AsEnumerable()
                                          where dr.RowState != DataRowState.Deleted
                                          && ((dr["ISVALID"] != DBNull.Value && Convert.ToInt16(dr["ISVALID"]) == 1
                                          && dr["ENCOUNTER_STATUS"] == DBNull.Value || (dr["ENCOUNTER_STATUS"] != DBNull.Value && Convert.ToInt16(dr["ENCOUNTER_STATUS"]) == 1))
                                          || (dr["EPISODE_END_DATE"] != DBNull.Value && Convert.ToDateTime(dr["EPISODE_END_DATE"]) >= DateTime.Now))
                                          && dr["PROVIDER_ID"] != DBNull.Value
                                          && Convert.ToString(dr["PROVIDER_ID"]) == providerID
                                          && dr["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value && Convert.ToInt64(dr["PAT_FIN_ENCOUNTER_ID"]) == Convert.ToInt64(SelectedEncounterDetails.Row["PAT_FIN_ENCOUNTER_ID"])
                                          select dr;
                            }
                            else if (isEmrOrder)
                            {
                                filter2 = from dr in dtPtEpisode.AsEnumerable()
                                          where dr.RowState != DataRowState.Deleted
                                          && ((dr["ISVALID"] != DBNull.Value && Convert.ToInt16(dr["ISVALID"]) == 1
                                          && dr["ENCOUNTER_STATUS"] == DBNull.Value || (dr["ENCOUNTER_STATUS"] != DBNull.Value && Convert.ToInt16(dr["ENCOUNTER_STATUS"]) == 1))
                                          || (dr["EPISODE_END_DATE"] != DBNull.Value && Convert.ToDateTime(dr["EPISODE_END_DATE"]) >= DateTime.Now))
                                          && dr["PROVIDER_ID"] != DBNull.Value
                                          && Convert.ToString(dr["PROVIDER_ID"]) == providerID
                                          select dr;

                            }
                            else
                            {
                                filter2 = from dr in dtPtEpisode.AsEnumerable()
                                          where dr.RowState != DataRowState.Deleted
                                          && dr["ISVALID"] != DBNull.Value && Convert.ToInt16(dr["ISVALID"]) == 1
                                          && dr["ENCOUNTER_STATUS"] == DBNull.Value || (dr["ENCOUNTER_STATUS"] != DBNull.Value && Convert.ToInt16(dr["ENCOUNTER_STATUS"]) == 1)
                                          && dr["PROVIDER_ID"] != DBNull.Value
                                          && Convert.ToString(dr["PROVIDER_ID"]) == providerID
                                          select dr;
                            }

                            //--- AA0907
                            if (filter2 != null && filter2.Count() > 0)
                            {

                                filterPatientEpisode = filter2.CopyToDataTable().Copy();
                            }
                        }
                    }
                }
                if ((filterPatientEpisode == null || filterPatientEpisode.Rows.Count == 0) && dtPtEpisode.KIIsNotNullAndRowCount())
                {
                    DataTable dtfilterTemp = null;
                    if (SelectedEncounterDetails != null && SelectedEncounterDetails.Row["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value
                       && SelectedEncounterDetails.Row.Table.Columns.Contains("EPISODE_STATUS")
                       && SelectedEncounterDetails.Row["EPISODE_STATUS"] != DBNull.Value
                       && (Convert.ToString(SelectedEncounterDetails.Row["EPISODE_STATUS"]) == "2" || Convert.ToString(SelectedEncounterDetails.Row["EPISODE_STATUS"]) == "IP"))
                    {
                        filter = from dr in dtPtEpisode.AsEnumerable()
                                 where dr.RowState != DataRowState.Deleted && dr["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value
                                 && Convert.ToInt64(dr["PAT_FIN_ENCOUNTER_ID"]) == Convert.ToInt64(SelectedEncounterDetails.Row["PAT_FIN_ENCOUNTER_ID"])
                                 && dtPtEpisode.Columns.Contains("EPISODE_STATUS") && dr["EPISODE_STATUS"] != DBNull.Value
                                 && Convert.ToInt16(dr["EPISODE_STATUS"]) == (int)VisitMode.IP
                                 select dr;
                    }
                    else
                    {
                        filter = from dr in dtPtEpisode.AsEnumerable()
                                 where dr.RowState != DataRowState.Deleted && dr["ENCOUNTER_STATUS"] != DBNull.Value
                                 && dr["ISVALID"] != DBNull.Value && (Convert.ToInt16(dr["ENCOUNTER_STATUS"]) == 1 || Convert.ToInt16(dr["ENCOUNTER_STATUS"]) == 0)
                                 && Convert.ToInt16(dr["ISVALID"]) == 1 && ((dr["EPISODE_STATUS"] != DBNull.Value && Convert.ToInt16(dr["EPISODE_STATUS"]) == 1)
                                 || (dr["ISHANDOVER"] != DBNull.Value && Convert.ToInt16(dr["ISHANDOVER"]) == 1))
                                 select dr;
                    }
                    if (filter != null && filter.Count() > 1)
                    {
                        DataRow[] drFilter = null;
                        if (SelectedPatientFinEncounterID > 0)
                        {
                            drFilter = filter.CopyToDataTable().Select("PAT_FIN_ENCOUNTER_ID=" + SelectedPatientFinEncounterID);
                            if (drFilter.Length > 0)
                            {
                                dtfilterTemp = drFilter.CopyToDataTable().Copy();
                            }
                        }
                        else if (SelectedEMROrder != null && SelectedEMROrder["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value)
                        {
                            drFilter = filter.CopyToDataTable().Select("PAT_FIN_ENCOUNTER_ID=" + Convert.ToInt64(SelectedEMROrder["PAT_FIN_ENCOUNTER_ID"]));
                            if (drFilter.Length > 0)
                            {
                                dtfilterTemp = drFilter.CopyToDataTable().Copy();
                            }
                        }
                    }
                    else if (filter != null && filter.Count() > 0)
                    {
                        dtfilterTemp = filter.CopyToDataTable().Copy(); ;
                    }

                    if (dtfilterTemp.KIIsNotNullAndRowCount())
                    {
                        DataTable DtCriteria = new DataTable("SEARCH_CRITERIA");
                        DtCriteria.Columns.Add("EMP_ID");
                        DtCriteria.Columns.Add("PAT_FIN_ENCOUNTER_ID");
                        DtCriteria.Rows.Add();
                        DtCriteria.Rows[0]["EMP_ID"] = providerID;
                        DtCriteria.Rows[0]["PAT_FIN_ENCOUNTER_ID"] = dtfilterTemp.Rows[0]["PAT_FIN_ENCOUNTER_ID"];
                        MainEMRShared objShared = new MainEMRShared();
                        DataTable dtDtlsOrder = objShared.FetchInvOrderDtls(DtCriteria, 15);
                        if (dtDtlsOrder.KIIsNotNullAndRowCount())
                        {
                            filterPatientEpisode = dtfilterTemp.Copy();
                            IsSameEncounterID = true;
                            if (BillData != null && BillData.Tables.Contains("BILL_COMMON_DETAILS") && BillData.Tables["BILL_COMMON_DETAILS"].Columns.Contains("IS_SAME_ENCOUNTER_ID") && BillData.Tables["BILL_COMMON_DETAILS"].KIIsNotNullAndRowCount())
                            {
                                BillData.Tables["BILL_COMMON_DETAILS"].Rows[0]["IS_SAME_ENCOUNTER_ID"] = 1;
                            }
                        }
                        else if (SelectedServiceType == (int)ServiceType.Pharmacy && OrderItems.KIIsNotNullAndRowCount() && dtfilterTemp.Rows[0]["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value && OrderItems.Columns.Contains("PAT_FIN_ENCOUNTER_ID")
                            && OrderItems.Select("PAT_FIN_ENCOUNTER_ID IS NOT NULL AND PAT_FIN_ENCOUNTER_ID =" + Convert.ToInt64(dtfilterTemp.Rows[0]["PAT_FIN_ENCOUNTER_ID"])).Length > 0)
                        {
                            filterPatientEpisode = dtfilterTemp.Copy();
                            IsSameEncounterID = true;
                            if (BillData != null && BillData.Tables.Contains("BILL_COMMON_DETAILS") && BillData.Tables["BILL_COMMON_DETAILS"].Columns.Contains("IS_SAME_ENCOUNTER_ID") && BillData.Tables["BILL_COMMON_DETAILS"].KIIsNotNullAndRowCount())
                            {
                                BillData.Tables["BILL_COMMON_DETAILS"].Rows[0]["IS_SAME_ENCOUNTER_ID"] = 1;
                            }
                        }
                        //--  BB-09072014
                        else
                        {
                            IsSameEncounterID = false;
                            if (BillData != null && BillData.Tables.Contains("BILL_COMMON_DETAILS") && BillData.Tables["BILL_COMMON_DETAILS"].Columns.Contains("IS_SAME_ENCOUNTER_ID") && BillData.Tables["BILL_COMMON_DETAILS"].KIIsNotNullAndRowCount())
                            {
                                BillData.Tables["BILL_COMMON_DETAILS"].Rows[0]["IS_SAME_ENCOUNTER_ID"] = 0;
                            }
                        }
                        //--  BB-09072014 END
                    }
                }

                if (filterPatientEpisode != null && filterPatientEpisode.Rows.Count == 1)
                {
                    if (!isEncounterPopUpSelected)
                    {
                        SelectedEncounterDetails = filterPatientEpisode.DefaultView[filterPatientEpisode.Rows.IndexOf(filterPatientEpisode.Rows[0])];
                    }
                    if (providerID == string.Empty || providerID == null || providerID == "")
                    {
                        providerID = Convert.ToString(filterPatientEpisode.Rows[0]["PROVIDER_ID"]);
                    }
                    if (SelectedEncounterDetails != null && ProviderTemp.KIIsNotNullAndRowCount() && ProviderTemp.Select("H_EMP_ID=" + providerID).Count() > 0)
                    {
                        DataRow dr = null;
                        dr = ProviderTemp.Select("H_EMP_ID=" + providerID).First();
                        int rowIndex = ProviderTemp.Rows.IndexOf(dr);
                        //Avoid Repeat calling
                        SelectedPatientFinEpisodeID = SelectedEncounterDetails.Row["PAT_FIN_EPISODE_ID"] != DBNull.Value ? Convert.ToInt64(SelectedEncounterDetails.Row["PAT_FIN_EPISODE_ID"]) : 0;
                        if (!IsSameEncounterID && SelectedProvider == null)
                        {
                            SelectedSpecialityValue = SelectedEncounterDetails.Row["GEN_DEPARTMENT_ID"] != DBNull.Value ? Convert.ToString(SelectedEncounterDetails.Row["GEN_DEPARTMENT_ID"]) : "";
                            if (Speciality.KIIsNotNullAndRowCount())
                            {
                                DataRow drSpeciality = Speciality.Select("H_ADMIN_DEPT_DEPTID=" + SelectedSpecialityValue).First();
                                int row = Speciality.Rows.IndexOf(drSpeciality);
                                if (drSpeciality != null)
                                {
                                    DataTable SpecialityTemp = Speciality.Copy();
                                    SelectedSpeciality = SpecialityTemp.DefaultView[row];
                                }
                            }
                            SelectedProvider = ProviderTemp.DefaultView[rowIndex];
                            SelectedProviderID = ProviderTemp.DefaultView[rowIndex];
                            SelectedProviderValue = SelectedEncounterDetails.Row["PROVIDER_ID"] != DBNull.Value ? Convert.ToString(SelectedEncounterDetails.Row["PROVIDER_ID"]) : "";
                            SelectedProviderIDValue = SelectedEncounterDetails.Row["PROVIDER_ID"] != DBNull.Value ? Convert.ToString(SelectedEncounterDetails.Row["PROVIDER_ID"]) : "";

                        }
                        if (!IsSameEncounterID && SelectedProvider.Row["H_EMP_ID"] != DBNull.Value && Convert.ToString(SelectedProvider.Row["H_EMP_ID"]) != providerID)
                        {
                            SelectedSpecialityValue = SelectedEncounterDetails.Row["GEN_DEPARTMENT_ID"] != DBNull.Value ? Convert.ToString(SelectedEncounterDetails.Row["GEN_DEPARTMENT_ID"]) : "";
                            if (Speciality.KIIsNotNullAndRowCount())
                            {
                                DataRow drSpeciality = Speciality.Select("H_ADMIN_DEPT_DEPTID=" + SelectedSpecialityValue).First();
                                int row = Speciality.Rows.IndexOf(drSpeciality);
                                if (drSpeciality != null)
                                {
                                    DataTable SpecialityTemp = Speciality.Copy();
                                    SelectedSpeciality = SpecialityTemp.DefaultView[row];
                                }
                            }
                            SelectedProvider = ProviderTemp.DefaultView[rowIndex];
                            SelectedProviderID = ProviderTemp.DefaultView[rowIndex];
                            SelectedProviderValue = SelectedEncounterDetails.Row["PROVIDER_ID"] != DBNull.Value ? Convert.ToString(SelectedEncounterDetails.Row["PROVIDER_ID"]) : "";
                            SelectedProviderIDValue = SelectedEncounterDetails.Row["PROVIDER_ID"] != DBNull.Value ? Convert.ToString(SelectedEncounterDetails.Row["PROVIDER_ID"]) : "";
                        }
                        ERPatientFinEncounterID = 0;//Commented and add code for bug ID-19305     
                        //ERPatientFinEncounterID = filterPatientEpisode.Rows[0].Table.Columns.Contains("PAT_FIN_ENCOUNTER_ID") &&
                        //filterPatientEpisode.Rows[0]["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value ? Convert.ToInt64(filterPatientEpisode.Rows[0]["PAT_FIN_ENCOUNTER_ID"]) : 0;

                        //AA0907
                        //SelectedPatientFinEncounterID = filterPatientEpisode.Rows[0].Table.Columns.Contains("PAT_FIN_ENCOUNTER_ID") &&
                        //filterPatientEpisode.Rows[0]["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value ? Convert.ToInt64(filterPatientEpisode.Rows[0]["PAT_FIN_ENCOUNTER_ID"]) : 0;

                        SelectedPatientFinEncounterID = SelectedEncounterDetails.Row.Table.Columns.Contains("PAT_FIN_ENCOUNTER_ID") &&
                        SelectedEncounterDetails.Row["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value ? Convert.ToInt64(SelectedEncounterDetails.Row["PAT_FIN_ENCOUNTER_ID"]) : 0;
                        //AA0907

                        //AA0907
                        //For fetching advance for active encounter ID
                        //SelectedPatientFinEncounterIDActive = filterPatientEpisode.Rows[0].Table.Columns.Contains("PAT_FIN_ENCOUNTER_ID") &&
                        //filterPatientEpisode.Rows[0]["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value ? Convert.ToInt64(filterPatientEpisode.Rows[0]["PAT_FIN_ENCOUNTER_ID"]) : 0;
                        SelectedPatientFinEncounterIDActive = SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_STATUS") &&
                           SelectedEncounterDetails.Row["ENCOUNTER_STATUS"] != DBNull.Value && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_STATUS"]) == 0 ? 0
                           : SelectedEncounterDetails.Row.Table.Columns.Contains("PAT_FIN_ENCOUNTER_ID") &&
                       SelectedEncounterDetails.Row["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value ? Convert.ToInt64(SelectedEncounterDetails.Row["PAT_FIN_ENCOUNTER_ID"]) : 0;
                        //AA0907

                        //ClosedPatientFinEncounterID = 0;//Doctor selection change, there is no Closed Encounter ID--Bug ID--
                        SelectedIncoPatientSchemeID = SelectedEncounterDetails.Row["INCO_PATIENT_SCHEME_ID"] != DBNull.Value ?
                            Convert.ToInt64(SelectedEncounterDetails.Row["INCO_PATIENT_SCHEME_ID"]) : 0;
                        SelectedEncounterNo = SelectedEncounterDetails.Row["ENCOUNTER_NO"] != DBNull.Value ? Convert.ToString(SelectedEncounterDetails.Row["ENCOUNTER_NO"]) : "";
                        SelectedOpenEpisodeID = SelectedEncounterDetails.Row["EPISODE_NO"] != DBNull.Value ? Convert.ToString(SelectedEncounterDetails.Row["EPISODE_NO"]) : "";
                        IsEmergencyEncounter = SelectedEncounterDetails.Row["ISEMERGENCY"] != DBNull.Value ? Convert.ToBoolean(SelectedEncounterDetails.Row["ISEMERGENCY"]) : false;
                        IsHandOverEncounter = (SelectedEncounterDetails.Row.Table.Columns.Contains("ISHANDOVER") && SelectedEncounterDetails.Row["ISHANDOVER"] != DBNull.Value
                             && Convert.ToBoolean(SelectedEncounterDetails.Row["ISHANDOVER"])) ? true : false;
                        //SelectedPatientFinEpisodeID = filterPatientEpisode.Rows[0]["PAT_FIN_EPISODE_ID"] != DBNull.Value ? Convert.ToInt64(filterPatientEpisode.Rows[0]["PAT_FIN_EPISODE_ID"]) : 0;
                        FetchCopayAmountUsed();
                    }
                }

                else if (providerID != string.Empty && filterPatientEpisode.KIIsNotNullAndRowCount())
                {
                    DataTable dtfilteredPatEpisode = null;
                    //DataRow[] drData = filterPatientEpisode.Select("PROVIDER_ID='" + providerID + "'");
                    var filter3 = from dr in filterPatientEpisode.AsEnumerable()
                                  where dr.RowState != DataRowState.Deleted && dr["ENCOUNTER_STATUS"] != DBNull.Value
                                  && dr["ISVALID"] != DBNull.Value && Convert.ToInt16(dr["ENCOUNTER_STATUS"]) == 1
                                  && Convert.ToInt16(dr["ISVALID"]) == 1
                                  && dr["PROVIDER_ID"] != DBNull.Value && Convert.ToString(dr["PROVIDER_ID"]) == providerID
                                  select dr;

                    if (filter3.Count() > 0)
                    {
                        dtfilteredPatEpisode = filter3.CopyToDataTable().Copy();
                        if (!isEncounterPopUpSelected)
                        {
                            SelectedEncounterDetails = dtfilteredPatEpisode.DefaultView[dtfilteredPatEpisode.Rows.IndexOf(dtfilteredPatEpisode.Rows[0])];
                        }
                    }
                    if (SelectedEncounterDetails != null && dtfilteredPatEpisode != null && dtfilteredPatEpisode.Rows.Count > 0 && ProviderTemp.KIIsNotNullAndRowCount() && ProviderTemp.Select("H_EMP_ID=" + providerID).Count() > 0)
                    {
                        ////if (dtfilteredPatEpisode.Rows.Count > 1)
                        ////{
                        ////    dtfilteredPatEpisode.Rows.Clear();
                        ////    dtfilteredPatEpisode.Rows.Add(SelectedEncounterDetails.Row);
                        ////}

                        DataRow dr = null;
                        dr = ProviderTemp.Select("H_EMP_ID=" + providerID).First();
                        int rowIndex = ProviderTemp.Rows.IndexOf(dr);
                        //Avoid Repeat calling
                        SelectedPatientFinEpisodeID = SelectedEncounterDetails.Row["PAT_FIN_EPISODE_ID"] != DBNull.Value ? Convert.ToInt64(SelectedEncounterDetails.Row["PAT_FIN_EPISODE_ID"]) : 0;
                        if (SelectedProvider == null)
                        {
                            SelectedSpecialityValue = SelectedEncounterDetails.Row["GEN_DEPARTMENT_ID"] != DBNull.Value ? Convert.ToString(SelectedEncounterDetails.Row["GEN_DEPARTMENT_ID"]) : "";
                            if (Speciality.KIIsNotNullAndRowCount())
                            {
                                DataRow drSpeciality = Speciality.Select("H_ADMIN_DEPT_DEPTID=" + SelectedSpecialityValue).First();
                                int row = Speciality.Rows.IndexOf(drSpeciality);
                                if (drSpeciality != null)
                                {
                                    DataTable SpecialityTemp = Speciality.Copy();
                                    SelectedSpeciality = SpecialityTemp.DefaultView[row];
                                }
                            }
                            SelectedProvider = ProviderTemp.DefaultView[rowIndex];
                            SelectedProviderValue = SelectedEncounterDetails.Row["PROVIDER_ID"] != DBNull.Value ? Convert.ToString(SelectedEncounterDetails["PROVIDER_ID"]) : "";
                            SelectedProviderIDValue = SelectedEncounterDetails.Row["PROVIDER_ID"] != DBNull.Value ? Convert.ToString(SelectedEncounterDetails.Row["PROVIDER_ID"]) : "";
                        }
                        if (SelectedProvider.Row["H_EMP_ID"] != DBNull.Value && Convert.ToString(SelectedProvider.Row["H_EMP_ID"]) != providerID)
                        {
                            SelectedSpecialityValue = SelectedEncounterDetails.Row["GEN_DEPARTMENT_ID"] != DBNull.Value ? Convert.ToString(SelectedEncounterDetails.Row["GEN_DEPARTMENT_ID"]) : "";
                            if (Speciality.KIIsNotNullAndRowCount())
                            {
                                DataRow drSpeciality = Speciality.Select("H_ADMIN_DEPT_DEPTID=" + SelectedSpecialityValue).First();
                                int row = Speciality.Rows.IndexOf(drSpeciality);
                                if (drSpeciality != null)
                                {
                                    DataTable SpecialityTemp = Speciality.Copy();
                                    SelectedSpeciality = SpecialityTemp.DefaultView[row];
                                }
                            }
                            SelectedProvider = ProviderTemp.DefaultView[rowIndex];
                            SelectedProviderValue = SelectedEncounterDetails.Row["PROVIDER_ID"] != DBNull.Value ? Convert.ToString(SelectedEncounterDetails.Row["PROVIDER_ID"]) : "";
                            SelectedProviderIDValue = SelectedEncounterDetails.Row["PROVIDER_ID"] != DBNull.Value ? Convert.ToString(SelectedEncounterDetails.Row["PROVIDER_ID"]) : "";
                        }

                        //AA0907
                        //SelectedPatientFinEncounterID = dtfilteredPatEpisode.Rows[0].Table.Columns.Contains("PAT_FIN_ENCOUNTER_ID") &&
                        // dtfilteredPatEpisode.Rows[0]["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value ? Convert.ToInt64(dtfilteredPatEpisode.Rows[0]["PAT_FIN_ENCOUNTER_ID"]) : 0;
                        SelectedPatientFinEncounterID = SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_STATUS") &&
                            SelectedEncounterDetails.Row["ENCOUNTER_STATUS"] != DBNull.Value && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_STATUS"]) == 0 ? 0
                            : SelectedEncounterDetails.Row.Table.Columns.Contains("PAT_FIN_ENCOUNTER_ID") &&
                        SelectedEncounterDetails.Row["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value ? Convert.ToInt64(SelectedEncounterDetails.Row["PAT_FIN_ENCOUNTER_ID"]) : 0;
                        //AA0907

                        //AA0907
                        //For fetching advance for active encounter ID
                        //SelectedPatientFinEncounterIDActive = dtfilteredPatEpisode.Rows[0].Table.Columns.Contains("PAT_FIN_ENCOUNTER_ID") &&
                        // dtfilteredPatEpisode.Rows[0]["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value ? Convert.ToInt64(dtfilteredPatEpisode.Rows[0]["PAT_FIN_ENCOUNTER_ID"]) : 0;
                        SelectedPatientFinEncounterIDActive = SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_STATUS") &&
                           SelectedEncounterDetails.Row["ENCOUNTER_STATUS"] != DBNull.Value && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_STATUS"]) == 0 ? 0
                           : SelectedEncounterDetails.Row.Table.Columns.Contains("PAT_FIN_ENCOUNTER_ID") &&
                       SelectedEncounterDetails.Row["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value ? Convert.ToInt64(SelectedEncounterDetails.Row["PAT_FIN_ENCOUNTER_ID"]) : 0;
                        //AA0907

                        SelectedIncoPatientSchemeID = SelectedEncounterDetails.Row["INCO_PATIENT_SCHEME_ID"] != DBNull.Value ?
                            Convert.ToInt64(SelectedEncounterDetails.Row["INCO_PATIENT_SCHEME_ID"]) : 0;
                        //ClosedPatientFinEncounterID = 0;//Doctor selection change, there is no Closed Encounter ID--Bug ID--
                        SelectedEncounterNo = SelectedEncounterDetails.Row["ENCOUNTER_NO"] != DBNull.Value ? Convert.ToString(SelectedEncounterDetails.Row["ENCOUNTER_NO"]) : "";
                        SelectedOpenEpisodeID = SelectedEncounterDetails.Row["EPISODE_NO"] != DBNull.Value ? Convert.ToString(SelectedEncounterDetails.Row["EPISODE_NO"]) : "";
                        IsEmergencyEncounter = SelectedEncounterDetails.Row["ISEMERGENCY"] != DBNull.Value ? Convert.ToBoolean(SelectedEncounterDetails.Row["ISEMERGENCY"]) : false;
                        IsHandOverEncounter = (SelectedEncounterDetails.Row.Table.Columns.Contains("ISHANDOVER") && SelectedEncounterDetails.Row["ISHANDOVER"] != DBNull.Value
                             && Convert.ToBoolean(SelectedEncounterDetails.Row["ISHANDOVER"])) ? true : false;
                        //SelectedPatientFinEpisodeID = filterPatientEpisode.Rows[0]["PAT_FIN_EPISODE_ID"] != DBNull.Value ? Convert.ToInt64(filterPatientEpisode.Rows[0]["PAT_FIN_EPISODE_ID"]) : 0;
                        FetchCopayAmountUsed();
                    }
                }
                //else if (!IsHandOverEncounter &&!IsEmergencyEncounter && !isEmergencyOrder && (dtPatientVisit.KIIsNotNullAndRowCount() && dtPatientVisit.Rows[0]["VISIT_TYPE"] != DBNull.Value && Convert.ToInt16(dtPatientVisit.Rows[0]["VISIT_TYPE"]) != (int)VisitMode.IP))
                else if (!IsHandOverEncounter && !IsEmergencyEncounter && !isEmergencyOrder
                   && (SelectedEncounterDetails == null || (SelectedEncounterDetails != null && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value
                     && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) != (int)VisitMode.IP)) && !IsFromCoderReview)
                //|| (dtPatientVisit.KIIsNotNullAndRowCount() && dtPatientVisit.Rows[0]["VISIT_TYPE"] != DBNull.Value
                //&& Convert.ToInt16(dtPatientVisit.Rows[0]["VISIT_TYPE"]) != (int)VisitMode.IP)))
                {
                    SelectedPatientFinEpisodeID = 0;
                    ClosedPatientFinEpisodeID = 0;
                    SelectedPatientFinEncounterID = 0;
                    ClosedPatientFinEncounterID = 0;//Doctor selection change, there is no Closed Encounter ID--Bug ID--
                    SelectedIncoPatientSchemeID = 0;
                    SelectedOpenEpisodeID = string.Empty;
                    SelectedEncounterNo = string.Empty;
                    SelectedPatientFinEpisodeID = 0;
                    SelectedPatientFinEncounterIDActive = 0;
                    IsEmergencyEncounter = false;
                    IsHandOverEncounter = false;
                }
                //if (isEmergencyOrder
                //    || (isEMROrder && SelectedVisitModeNew == (int)VisitMode.IP)
                //    || (isEMROrder && dtPatientVisit.KIIsNotNullAndRowCount() && dtPatientVisit.Rows[0]["VISIT_TYPE"] != DBNull.Value && Convert.ToInt16(dtPatientVisit.Rows[0]["VISIT_TYPE"]) == (int)VisitMode.IP))// For ER billing, click on order.. selected provide, value and speciality will be change..No need to change episode and encounter
                //    SelectedEncounterDetails != null && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.IP
                if (SelectedServiceType!=(int)ServiceType.Cafeteria && isEmergencyOrder
                    || (isEMROrder && SelectedVisitModeNew == (int)VisitMode.IP)
                    || (isEMROrder && SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE") && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.IP))// For ER billing, click on order.. selected provide, value and speciality will be change..No need to change episode and encounter
                {
                    DataRow[] dr = null; //Speed Improve
                    dr = ProviderTemp.Select("H_EMP_ID=" + providerID); //Speed Improve
                    if (dr != null && dr.Length>0)
                    {
                        int rowIndex = ProviderTemp.Rows.IndexOf(dr[0]);
                        SelectedSpecialityValue = dr[0]["H_EMP_DEPNAME"] != DBNull.Value ? Convert.ToString(dr[0]["H_EMP_DEPNAME"]) : "";
                        if (Speciality.KIIsNotNullAndRowCount())
                        {
                            DataRow drSpeciality = Speciality.Select("H_ADMIN_DEPT_DEPTID=" + SelectedSpecialityValue).First();
                            int row = Speciality.Rows.IndexOf(drSpeciality);
                            if (drSpeciality != null)
                            {
                                DataTable SpecialityTemp = Speciality.Copy();
                                SelectedSpeciality = SpecialityTemp.DefaultView[row];
                            }
                        }
                        SelectedProvider = ProviderTemp.DefaultView[rowIndex];
                        SelectedProviderID = ProviderTemp.DefaultView[rowIndex];
                        SelectedProviderValue = dr[0]["H_EMP_ID"] != DBNull.Value ? Convert.ToString(dr[0]["H_EMP_ID"]) : "";
                        SelectedProviderIDValue = dr[0]["H_EMP_ID"] != DBNull.Value ? Convert.ToString(dr[0]["H_EMP_ID"]) : "";
                    }
                }
                if (IsFromPharmacyPanel)
                {
                    isEncounterPopUpSelected = true;
                }
                OnSchemeSelectionChanged(SelectedPatientFinEncounterID);
                if (SelectedEncounterDetails != null && SelectedEncounterDetails["ISNONCONSULTENCOUNTER"] != DBNull.Value
                  && Convert.ToInt16(SelectedEncounterDetails["ISNONCONSULTENCOUNTER"]) == 0)
                    IsNonConsultEncounter = true;
                else
                    IsNonConsultEncounter = false;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void SetPrivilege()
        {
            if (ConsumerType != null)
            {
                HasServicePrivilege = false;
                HasPharmacyPrivilege = false;
                HasCafeteriaPrivilege = true;//CommonData.CheckPrivilege("FO_CAFETERIA_BILLING");
                tabCafeteriaOrder.IsSelected = true;
            }
        }

        private void OnLoadEncounterEpisodeNoForIP(string providerID)
        {
            try
            {
                filterPatientEpisode = null;//doctor selection change
                DataTable dtCriteria = new DataTable("SEARCH_CRITERIA");
                dtCriteria.Columns.Add("MRNO", typeof(string));
                dtCriteria.Columns.Add("PROVIDER_ID", typeof(string));
                dtCriteria.Columns.Add("MODE", typeof(int));
                dtCriteria.Rows.Add();
                dtCriteria.Rows[0]["MRNO"] = PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Rows[0]["MRNO"] != DBNull.Value
                    ? PatientInformation.Rows[0]["MRNO"] : DBNull.Value;
                dtCriteria.Rows[0]["MODE"] = 15;
                MainCommon objCommon = new MainCommon();
                DataTable dtPatientEpisode = objCommon.SelectFinancialEncounter(dtCriteria);
                dtBedDetails = GetPatientBedID();
                if (!IsFromCoderReview && dtPatientEpisode.KIIsNotNullAndRowCount())
                {
                    //--- AA0907
                    //var filter = from dr in dtPatientEpisode.AsEnumerable()
                    //             where dr.RowState != DataRowState.Deleted
                    //             && ((dr["ISVALID"] != DBNull.Value && Convert.ToInt16(dr["ISVALID"]) == 1
                    //             && dr["ENCOUNTER_STATUS"] == DBNull.Value || (dr["ENCOUNTER_STATUS"] != DBNull.Value && Convert.ToInt16(dr["ENCOUNTER_STATUS"]) == 1))
                    //             || (dr["EPISODE_END_DATE"] != DBNull.Value && Convert.ToDateTime(dr["EPISODE_END_DATE"]) >= DateTime.Now))
                    //             && dr["EPISODE_STATUS"] != DBNull.Value
                    //             && Convert.ToInt16(dr["EPISODE_STATUS"]) == 2
                    //             select dr;
                    var filter = from dr in dtPatientEpisode.AsEnumerable()
                                 where dr.RowState != DataRowState.Deleted
                                 && (dr["ISVALID"] != DBNull.Value && Convert.ToInt16(dr["ISVALID"]) == 1
                                 && dr["ENCOUNTER_STATUS"] == DBNull.Value || (dr["ENCOUNTER_STATUS"] != DBNull.Value && Convert.ToInt16(dr["ENCOUNTER_STATUS"]) == 1))
                                 && dr["EPISODE_STATUS"] != DBNull.Value
                                 && Convert.ToInt16(dr["EPISODE_STATUS"]) == 2
                                 select dr;
                    //--- AA0907
                    if (filter.Count() > 0)
                    {
                        filter.CopyToDataTable().DefaultView.Sort = "PAT_FIN_ENCOUNTER_ID DESC";
                        filterPatientEpisode = filter.CopyToDataTable().DefaultView.ToTable().Copy();
                    }
                }
                if (IsFromCoderReview && filterPatientEpisode ==null) // Coder review , IP Closed Encounter
                {
                    var filter = from dr in dtPatientEpisode.AsEnumerable()
                                 where dr.RowState != DataRowState.Deleted
                                 && dr["ISVALID"] != DBNull.Value && Convert.ToInt16(dr["ISVALID"]) == 1                                 
                                 && dr["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value && Convert.ToInt64(dr["PAT_FIN_ENCOUNTER_ID"]) == Convert.ToInt64(SelectedEncounterDetails["PAT_FIN_ENCOUNTER_ID"])
                                 && Convert.ToInt16(dr["EPISODE_STATUS"]) == 2
                                 select dr;
                    //--- AA0907
                    if (filter.Count() > 0)
                    {
                        filter.CopyToDataTable().DefaultView.Sort = "PAT_FIN_ENCOUNTER_ID DESC";
                        filterPatientEpisode = filter.CopyToDataTable().DefaultView.ToTable().Copy();
                    }

                }
                if (filterPatientEpisode.KIIsNotNullAndRowCount())
                {
                    if (!isEncounterPopUpSelected)
                    {
                        SelectedEncounterDetails = filterPatientEpisode.DefaultView[filterPatientEpisode.Rows.IndexOf(filterPatientEpisode.Rows[0])];
                        if (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE")
                            && Convert.ToInt16(SelectedEncounterDetails["ENCOUNTER_MODE"]) == (int)VisitMode.IP)
                        {
                            IsIPEncounterSelected = true;
                            //IsEncounterBilled = true;
                        }
                        else
                        {
                            IsIPEncounterSelected = false;
                            // IsEncounterBilled = false;
                        }
                    }
                    if (providerID == string.Empty || providerID == null || providerID == "")
                    {
                        providerID = Convert.ToString(filterPatientEpisode.Rows[0]["PROVIDER_ID"]);
                    }
                    if (!string.IsNullOrEmpty(providerID) && ProviderTemp.KIIsNotNullAndRowCount() && ProviderTemp.Select("H_EMP_ID='" + providerID+"'").Count() > 0)
                    {
                        DataRow dr = null;
                        dr = ProviderTemp.Select("H_EMP_ID='" + providerID+"'").First();
                        int rowIndex = ProviderTemp.Rows.IndexOf(dr);
                        //Avoid Repeat calling
                        SelectedPatientFinEpisodeID = filterPatientEpisode.Rows[0]["PAT_FIN_EPISODE_ID"] != DBNull.Value ? Convert.ToInt64(filterPatientEpisode.Rows[0]["PAT_FIN_EPISODE_ID"]) : 0;
                        SelectedPatientFinEncounterID = filterPatientEpisode.Rows[0].Table.Columns.Contains("PAT_FIN_ENCOUNTER_ID") &&
                                                        filterPatientEpisode.Rows[0]["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value ? Convert.ToInt64(filterPatientEpisode.Rows[0]["PAT_FIN_ENCOUNTER_ID"]) : 0;
                        //Doctor selection change
                        SelectedProvider = ProviderTemp.DefaultView[rowIndex];
                        SelectedProviderValue = SelectedProvider.Row["H_EMP_ID"] != DBNull.Value ? Convert.ToString(SelectedProvider.Row["H_EMP_ID"]) : "";
                        SelectedProviderIDValue = SelectedProvider.Row["H_EMP_ID"] != DBNull.Value ? Convert.ToString(SelectedProvider.Row["H_EMP_ID"]) : "";
                        SelectedSpecialityValue = SelectedProvider.Row["H_EMP_DEPNAME"] != DBNull.Value ? Convert.ToString(SelectedProvider.Row["H_EMP_DEPNAME"]) : "";
                        //End
                        SelectedIncoPatientSchemeID = filterPatientEpisode.Rows[0]["INCO_PATIENT_SCHEME_ID"] != DBNull.Value ?
                            Convert.ToInt64(filterPatientEpisode.Rows[0]["INCO_PATIENT_SCHEME_ID"]) : 0;
                        SelectedEncounterNo = filterPatientEpisode.Rows[0]["ENCOUNTER_NO"] != DBNull.Value ? Convert.ToString(filterPatientEpisode.Rows[0]["ENCOUNTER_NO"]) : "";
                        SelectedOpenEpisodeID = filterPatientEpisode.Rows[0]["EPISODE_NO"] != DBNull.Value ? Convert.ToString(filterPatientEpisode.Rows[0]["EPISODE_NO"]) : "";                        
                        FetchCopayAmountUsed();
                    }
                    if (filterPatientEpisode.Columns.Contains("PH_SUBLOCATION_ID")
                   && filterPatientEpisode.Rows[0]["PH_SUBLOCATION_ID"] != DBNull.Value)
                    {
                        IPVerificationLocation = Convert.ToInt16(filterPatientEpisode.Rows[0]["PH_SUBLOCATION_ID"]);
                    }
                }
                OnSchemeSelectionChanged(SelectedPatientFinEncounterID);
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void OnLoadEncounterEpisodeforPharmacy(long patFinEncounterID)
        {
            try
            {
                filterPatientEpisode = null;
                DataTable dtCriteria = new DataTable("SEARCH_CRITERIA");
                dtCriteria.Columns.Add("MRNO", typeof(string));
                dtCriteria.Columns.Add("PROVIDER_ID", typeof(string));
                dtCriteria.Columns.Add("MODE", typeof(int));
                dtCriteria.Rows.Add();
                dtCriteria.Rows[0]["MRNO"] = PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Rows[0]["MRNO"] != DBNull.Value
                    ? PatientInformation.Rows[0]["MRNO"] : DBNull.Value;
                dtCriteria.Rows[0]["MODE"] = 15;
                MainCommon objCommon = new MainCommon();
                DataTable dtPatientEpisode = objCommon.SelectFinancialEncounter(dtCriteria);
                DataTable dtTempFilter = new DataTable();
                if (dtPatientEpisode.KIIsNotNullAndRowCount())
                {
                    var filter = from dr in dtPatientEpisode.AsEnumerable()
                                 where dr.RowState != DataRowState.Deleted
                                 && (dr["ISVALID"] != DBNull.Value && Convert.ToInt16(dr["ISVALID"]) == 1
                                   && ((IfNullReturnZero(dr["ENCOUNTER_STATUS"]) == 1
                                 && IfNullReturnZero(dr["EPISODE_STATUS"]) == 2) || IfNullReturnZero(dr["EPISODE_STATUS"]) != 2)
                                 && dr["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value && Convert.ToInt64(dr["PAT_FIN_ENCOUNTER_ID"]) == SelectedPatFinEncounterIDFromPHModule)
                                 select dr;
                    if (filter.Count() > 0)
                    {
                        filter.CopyToDataTable().DefaultView.Sort = "PAT_FIN_ENCOUNTER_ID DESC";
                        filterPatientEpisode = filter.CopyToDataTable().DefaultView.ToTable().Copy();
                        dtTempFilter = filter.CopyToDataTable().DefaultView.ToTable().Copy();
                    }
                }
                if (filterPatientEpisode.KIIsNotNullAndRowCount())
                {
                    //if (!isEncounterPopUpSelected)
                    //{
                        SelectedEncounterDetails = filterPatientEpisode.DefaultView[filterPatientEpisode.Rows.IndexOf(filterPatientEpisode.Rows[0])];
                        if (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE")
                            && Convert.ToInt16(SelectedEncounterDetails["ENCOUNTER_MODE"]) == (int)VisitMode.IP)
                            IsIPEncounterSelected = true;
                        else
                            IsIPEncounterSelected = false;
                        //Bug ID 40699
                        if (Convert.ToInt16(SelectedEncounterDetails["ENCOUNTER_STATUS"]) == 0)
                        {
                            IsClosedEncounterSelected = true;
                            ////EncounterEndDate = Convert.ToDateTime(SelectedEncounterDetails["END_DATE"]).AddMinutes(-1);
                            if (SelectedEncounterDetails.Row.Table.Columns.Contains("END_DATE") && SelectedEncounterDetails["END_DATE"] != DBNull.Value)
                                EncounterEndDate = Convert.ToDateTime(SelectedEncounterDetails["END_DATE"]);
                            EncounterEndDateTemp = EncounterEndDate;
                            EncounterStartDate = Convert.ToDateTime(SelectedEncounterDetails["START_DATE"]);
                        }
                        else
                        {
                            IsClosedEncounterSelected = false;
                            EncounterEndDate = System.DateTime.Now;
                            EncounterEndDateTemp = System.DateTime.Now;
                            EncounterStartDate = System.DateTime.Now;
                            if (SelectedEncounterDetails != null && SelectedEncounterDetails["START_DATE"] != DBNull.Value)
                                EncounterStartDate = Convert.ToDateTime(SelectedEncounterDetails["START_DATE"]);
                        }
                        //Bug ID 40699

                    //}

                    {
                        DataRow dr = null;
                        dr = ProviderTemp.Select("H_EMP_ID=" + Convert.ToString(filterPatientEpisode.Rows[0]["PROVIDER_ID"])).First();
                        int rowIndex = ProviderTemp.Rows.IndexOf(dr);
                        //Avoid Repeat calling
                        SelectedPatientFinEpisodeID = filterPatientEpisode.Rows[0]["PAT_FIN_EPISODE_ID"] != DBNull.Value ? Convert.ToInt64(filterPatientEpisode.Rows[0]["PAT_FIN_EPISODE_ID"]) : 0;
                        SelectedPatientFinEncounterID = filterPatientEpisode.Rows[0].Table.Columns.Contains("PAT_FIN_ENCOUNTER_ID") &&
                                                        filterPatientEpisode.Rows[0]["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value ? Convert.ToInt64(filterPatientEpisode.Rows[0]["PAT_FIN_ENCOUNTER_ID"]) : 0;
                        //Doctor selection change
                        SelectedProvider = ProviderTemp.DefaultView[rowIndex];
                        SelectedProviderValue = SelectedProvider.Row["H_EMP_ID"] != DBNull.Value ? Convert.ToString(SelectedProvider.Row["H_EMP_ID"]) : "";
                        SelectedProviderIDValue = SelectedProvider.Row["H_EMP_ID"] != DBNull.Value ? Convert.ToString(SelectedProvider.Row["H_EMP_ID"]) : "";
                        if (SelectedProviderID == null)
                        {
                            SelectedProviderID = ProviderTemp.DefaultView[rowIndex];
                        }
                        SelectedSpecialityValue = SelectedProvider.Row["H_EMP_DEPNAME"] != DBNull.Value ? Convert.ToString(SelectedProvider.Row["H_EMP_DEPNAME"]) : "";
                        //End
                        if (filterPatientEpisode == null && dtTempFilter != null)
                        {
                            filterPatientEpisode = dtTempFilter.Copy();
                        }
                        SelectedPatientFinEpisodeID = filterPatientEpisode.Rows[0]["PAT_FIN_EPISODE_ID"] != DBNull.Value ? Convert.ToInt64(filterPatientEpisode.Rows[0]["PAT_FIN_EPISODE_ID"]) : 0;
                        SelectedPatientFinEncounterID = filterPatientEpisode.Rows[0].Table.Columns.Contains("PAT_FIN_ENCOUNTER_ID") &&
                                                        filterPatientEpisode.Rows[0]["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value ? Convert.ToInt64(filterPatientEpisode.Rows[0]["PAT_FIN_ENCOUNTER_ID"]) : 0;
                        SelectedIncoPatientSchemeID = filterPatientEpisode.Rows[0]["INCO_PATIENT_SCHEME_ID"] != DBNull.Value ?
                            Convert.ToInt64(filterPatientEpisode.Rows[0]["INCO_PATIENT_SCHEME_ID"]) : 0;
                        SelectedEncounterNo = filterPatientEpisode.Rows[0]["ENCOUNTER_NO"] != DBNull.Value ? Convert.ToString(filterPatientEpisode.Rows[0]["ENCOUNTER_NO"]) : "";
                        SelectedOpenEpisodeID = filterPatientEpisode.Rows[0]["EPISODE_NO"] != DBNull.Value ? Convert.ToString(filterPatientEpisode.Rows[0]["EPISODE_NO"]) : "";
                        ERXNo = Convert.ToString(filterPatientEpisode.Rows[0]["ERX_REFERENCENO"]);
                        ClaimFormNo = Convert.ToString(filterPatientEpisode.Rows[0]["CLAIM_FORM_NO"]);

                        if (Convert.ToString(filterPatientEpisode.Rows[0]["ERX_REFERENCENO"]) != string.Empty)
                        {
                            ERXEnableCheck = true;
                        }
                        ERXNoBlack = false;
                        ERXNoRed = true;
                        if (IsFromPharmacyPanel && IsFromPharmacy && Convert.ToInt16(SelectedVisitModeNew) == (int)VisitMode.OPCREDIT
                                          && filterPatientEpisode.Columns.Contains("IS_INSURANCE") && IfNullReturnZero(filterPatientEpisode.Rows[0]["IS_INSURANCE"]) == 1)
                        {
                            ERxVisibility = Visibility.Visible;
                        }
                        else
                        {
                            ERxVisibility = Visibility.Collapsed;
                        }
                        if (IsFromPharmacyPanel && (Convert.ToInt16(SelectedVisitModeNew) == (int)VisitMode.OPCREDIT || Convert.ToInt16(SelectedVisitModeNew) == (int)VisitMode.OPCASH) && IS_TOPUP_REQUIRED)
                        {
                            IS_TOPUP_VISIBILE = true;
                        }
                        else
                        {
                            IS_TOPUP_VISIBILE = false;
                        }
                        if (filterPatientEpisode.Columns.Contains("CLINICIAN_ID"))
                        {
                            ClinicianID = Convert.ToString(filterPatientEpisode.Rows[0]["CLINICIAN_ID"]);
                        }
                        if (filterPatientEpisode.Columns.Contains("IS_PBM")
                            && filterPatientEpisode.Rows[0]["IS_PBM"] != DBNull.Value)
                        {
                            Is_PBM = Convert.ToInt16(filterPatientEpisode.Rows[0]["IS_PBM"]);
                        }
                        if (filterPatientEpisode.Columns.Contains("ISNONCONSULTENCOUNTER")
                            && filterPatientEpisode.Rows[0]["ISNONCONSULTENCOUNTER"] != DBNull.Value)
                        {
                            IsNonConsultantEncounter = !Convert.ToBoolean(IfNullReturnZero(filterPatientEpisode.Rows[0]["ISNONCONSULTENCOUNTER"]));
                        }
                        FetchCopayAmountUsed();
                    }
                    EnableVerificationSettingBased = false;
                    //if (IsIPEncounterSelected)
                    //{                       
                    //    DataTable dtGenSetting = CommonData.GetDefaultSettings(0, "IS_VERIFICATION_REQUIRED");
                    //    if (dtGenSetting.KIIsNotNullAndRowCount() && Convert.ToInt16(dtGenSetting.Rows[0]["VALUE"]) == 1 && IsFromPharmacyPanel)
                    //    {
                    //        EnableVerificationSettingBased = true;
                    //    }
                    //    VerificationFetch();
                    //}
                    if (IsIPEncounterSelected)
                    {
                        if (filterPatientEpisode.Columns.Contains("PH_SUBLOCATION_ID")
                    && filterPatientEpisode.Rows[0]["PH_SUBLOCATION_ID"] != DBNull.Value)
                        {
                            IPVerificationLocation = Convert.ToInt16(filterPatientEpisode.Rows[0]["PH_SUBLOCATION_ID"]);
                        }
                    }
                }
                isEncounterPopUpSelected = true;
                OnSchemeSelectionChanged(SelectedPatientFinEncounterID);
                //if ((IsLoadEMRCPOE
                //   || ((SelectedVisitModeNew == (int)VisitMode.IP
                //   || (dtPatientVisit.KIIsNotNullAndRowCount() && dtPatientVisit.Rows[0]["VISIT_TYPE"] != DBNull.Value && Convert.ToInt16(dtPatientVisit.Rows[0]["VISIT_TYPE"]) == (int)VisitMode.IP))
                //   && SelectedEncounterDetails != null))
                //   && SelectedProvider != null)
                if (IsFromPharmacyPanel && ERxVisibility == Visibility.Visible)
                {
                    erxEnable();
                }
                if (DefaultSettings.Values.IS_VERIFICATION_REQUIRED && IsFromPharmacyPanel
                            && Convert.ToInt16(SelectedVisitModeNew) == (int)VisitMode.IP)
                {
                    EnableVerificationSettingBased = true;
                }
                if (IsFromPharmacyPanel && EnableVerificationSettingBased && SelectedVisitModeNew == (int)VisitMode.IP)
                {
                    //skiping by mohd adil for new requiremnt of verification
                    EMROrderRelation = null;
                }
                else
                {
                    SetInitalData_EMRCPOE();
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Executed_EpisodeMousebtnClick(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                if (SelectedProvider != null)
                {
                    ProviderChangeValidation();
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool AdjustmentValidation()
        {
            bool IsCheckAllow = false;
            if (BillData.Tables["GEN_BILL_DISCOUNT"].Rows.Count > 0)
            {
                if (giMessageBox.Show(CommonData.MESSAGEHEADER, "Adjustment has already given. If you add or remove an item adjustment will be reseted.\n" +
                    "Do you want to proceed?",
                     MessageBoxButtonType.OKCancel, MessageBoxImages.Question) == MessageBoxDialogueResult.OK)
                {
                    IsCheckAllow = true;
                }
            }
            else
            {
                IsCheckAllow = true;
            }
            if (IsCheckAllow)
            {
                if (BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0)
                {
                    foreach (DataRow dr in BillData.Tables["INV_PAT_BILLING"].Rows)
                    {
                        if ((SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE")
                        && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value
                        && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.OPCASH)
                        || SelectedVisitMode == (int)VisitMode.OPCASH)
                        {
                            CalculateTotalAdjustment();
                        }
                        else
                        {
                            TotalAdjustment = 0;
                        }
                        tempAdjustmentAmount = 0;
                        if (IfNullReturnZero(dr["DISCOUNT"]) < 0)
                        {
                            //   dr["NET_AMOUNT"] = (IfNullReturnZero(dr["PATIENT_SHARE"]) - IfNullReturnZero(dr["OTHER_CHARGE"])) + (-1 * (IfNullReturnZero(dr["DISCOUNT"])));
                            dr["NET_AMOUNT"] = IfNullReturnZero(dr["PATIENT_SHARE"]) + (-1 * (IfNullReturnZero(dr["DISCOUNT"])));
                            dr["PATIENT_SHARE"] = dr["NET_AMOUNT"];
                            dr["DISCOUNT"] = 0;
                        }
                        else if (IfNullReturnZero(dr["MARKUP"]) < 0)
                        {
                            //   dr["NET_AMOUNT"] = (IfNullReturnZero(dr["PATIENT_SHARE"]) - IfNullReturnZero(dr["OTHER_CHARGE"]))
                            //     + (-1 * IfNullReturnZero(dr["MARKUP"]));
                            dr["NET_AMOUNT"] = IfNullReturnZero(dr["PATIENT_SHARE"]) + (-1 * IfNullReturnZero(dr["MARKUP"]));
                            dr["PATIENT_SHARE"] = dr["NET_AMOUNT"];
                            dr["MARKUP"] = 0;
                        }
                        dr["ADJUSTMENT"] = 0;
                    }
                }
                if (BillData.Tables["GEN_BILL_DISCOUNT"].Rows.Count > 0)
                {
                    BillData.Tables["GEN_BILL_DISCOUNT"].Rows.Clear();
                }
                if ((SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE")
                        && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value
                        && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.OPCASH)
                        || SelectedVisitMode == (int)VisitMode.OPCASH)
                {
                    CalculateTotalAdjustment();
                }
                else
                {
                    TotalAdjustment = 0;
                }
                if (!isERCredit)
                {
                    ToBeCollected = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                       .Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]))
                       .Select(x => IfNullReturnZero(x["PATIENT_SHARE"])).Sum();
                }
            }
            return IsCheckAllow;
        }


        private bool ProviderChangeValidation()
        {
            try
            {
                //commented on 05/June/2104 , as said by shamsu sir
                //bool isContinue = false;
                //if (BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0)
                //{
                //    if (SelectedProvider != null && SelectedProvider["EMPLOYEE_NAME"] != DBNull.Value)
                //    {
                //        if (giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                //          " Service(s) added against " + SelectedProvider["EMPLOYEE_NAME"] + ".\n" +
                //            "Do you want to clear the service(s)?",
                //          MessageBoxButtonType.OKCancel, MessageBoxImages.Question) == MessageBoxDialogueResult.OK)
                //        {
                //            BillData.Tables["INV_PAT_BILLING"].Rows.Clear();
                //            IsDispenseChecked = false;
                //            SelectedService = null;
                //            isContinue = true;

                //            //Commented by Bug Correction-17679     
                //            //if (EMROrderRelation != null && EMROrderRelation.Tables["Order"].KIIsNotNullAndRowCount())
                //            //{
                //            //    foreach (DataRow dr in EMROrderRelation.Tables["Order"].Rows)
                //            //    {
                //            //        dr["ISSELECT"] = false;
                //            //    }
                //            //}
                //            if (EMROrderRelation != null && EMROrderRelation.Tables["OrderRelation"].KIIsNotNullAndRowCount())
                //            {
                //                foreach (DataRow dr in EMROrderRelation.Tables["OrderRelation"].Rows)
                //                {
                //                    dr["ISSELECT"] = false;
                //                }
                //            }
                //        }
                //    }
                //    else
                //    {
                //        isContinue = true;
                //    }
                //}
                //else
                //{
                //    isContinue = true;
                //}
                return true;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Assigns the pharmacy order.
        /// </summary>
        /// <param name="drTemp">The dr temp.</param>
        private void AssignPharmacyOrder(DataRow drTemp)
        {
            if (EMRItemSelected != null)
            {
                if (EMRItemSelected.Table.Columns.Contains("MEDICINE_CODE") && EMRItemSelected.Table.Columns.Contains("EMR_PAT_MAST_INV_ORDER_ID"))
                {
                    drTemp["SUBST_MED_CODE"] = EMRItemSelected["MEDICINE_CODE"];

                }
                EMRItemSelected["ISSUED_QTY"] = IssuedQtyTotal;
                drTemp["IS_INDENT"] = 1;
                drTemp["REF_INDENT_NO"] = EMRItemSelected["EMR_PAT_MAST_INV_ORDER_ID"];//INDENT_NO=EMR_PAT_MAST_INV_ORDER_ID

            }
        }

        private bool ValidateServiceCharge(DataRow dr)
        {
            try
            {
                if (EditService == null && dr["VALIDATION_STATUS"] != DBNull.Value
                    && Convert.ToInt16(dr["VALIDATION_STATUS"]) == (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.BaseRateNotDefined)
                {
                    if (fromAddBtn || fromEMR)
                    {
                        return false;

                    }
                    if (isThrowMessage)
                    {
                        Mouse.OverrideCursor = null;
                        //giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                        //     "Base charge not defined for the selected scheme", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                             "Base charge not defined for '"+ dr["NAME"]+"'", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    }
                    return false;
                }
                //bug id 40811
                else if (EditService != null && dr["VALIDATION_STATUS"] != DBNull.Value && Convert.ToInt16(dr["VALIDATION_STATUS"]) == (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.BaseRateNotDefined)
                {
                    return false;
                }
                //bug id 40811 end

                //if (EditService == null && dr["INCEXLCSTATUS"] != DBNull.Value && SelectedVisitModeNew != (int)VisitMode.OPCASH
                //    && Convert.ToInt16(dr["INCEXLCSTATUS"]) == (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion)
                //{
                //    bool isProceed = true;
                //    isProceed = (giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                //                                 "Selected service excluded in the scheme" + "\n" + "do you want to continue?", MessageBoxButtonType.YesNo, MessageBoxImages.Question) == MessageBoxDialogueResult.Yes) ? true : false;
                //    if (!isProceed)
                //    {
                //        return isProceed;
                //    }
                //}
                if (!IsPackage && !IsApplyPriceByUser && !IsApplyPriceByUserEdit && SelectedServiceType == (int)ServiceType.Investigation
                       && (dr["AMOUNT"] == DBNull.Value ||
                    (dr["AMOUNT"] != DBNull.Value &&
                    Convert.ToDecimal(dr["AMOUNT"]) == 0)) && !ISAssociatedService)
                {
                    decimal GrossAmt = dr["AMOUNT"] == DBNull.Value
                        ? 0 : Convert.ToDecimal(dr["AMOUNT"]);
                    decimal ScheMArkup = dr["SCHEME_MARKUP"] == DBNull.Value
                        ? 0 : Convert.ToDecimal(dr["SCHEME_MARKUP"]);
                    if (GrossAmt + ScheMArkup < 0)
                    {
                        if (fromAddBtn || fromEMR)
                        {
                            return false;

                        }
                        if (isThrowMessage)
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                "Service amount is invalid", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        }
                        return false;
                    }
                }
                if (Convert.ToDecimal(dr["NET_AMOUNT"]) < 0)
                {
                    if (fromAddBtn || fromEMR)
                    {
                        return false;

                    }
                    if (isThrowMessage)
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                            "Invalid amount.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    }
                    return false;
                }

                //Commented Bug ID-22427
                ////if (!IsPackage && dr["CO_PAY_AMOUNT"] != DBNull.Value &&
                ////                  Convert.ToDecimal(dr["CO_PAY_AMOUNT"]) >
                ////                  Convert.ToDecimal(dr["NET_AMOUNT"])
                ////   && (dr["INCEXLCSTATUS"] == DBNull.Value ||
                ////   (dr["INCEXLCSTATUS"] != DBNull.Value &&
                ////    Convert.ToInt16(dr["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion)))
                ////{
                ////    if (fromAddBtn || fromEMR)
                ////    {
                ////        return false;

                ////    }
                ////    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                ////        "Invalid charge settings.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                ////    return false;
                ////}
                if (!IsPackage && dr != null && dr["NET_AMOUNT"] != DBNull.Value
                                      && dr["EXTERNAL_lAB_SHARE"] != DBNull.Value
                                      && Convert.ToDecimal(dr["NET_AMOUNT"])
                                      < Convert.ToDecimal(dr["EXTERNAL_lAB_SHARE"]))
                {
                    if (fromAddBtn || fromEMR)
                    {
                        return false;

                    }
                    if (isThrowMessage)
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                            "Billed amount should not be less than lab share amount", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    }
                    return false;
                }

                if (dr["VALIDATION_STATUS"] != DBNull.Value && Convert.ToInt16(dr["VALIDATION_STATUS"]) == -1 && dr["INV_MAST_SERVICE_ID"] != DBNull.Value)
                {
                    if (fromAddBtn || fromEMR)
                    {
                        return false;

                    }
                    if (giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                             "Approved service validity days over. So service is excluded in this scheme. Do you want to continue?",
                                             MessageBoxButtonType.YesNo, MessageBoxImages.Question) == MessageBoxDialogueResult.Yes)
                    {
                        //ExclusionToInclusionStatusChange(dr, Convert.ToInt64(dr["INV_MAST_SERVICE_ID"]));
                        dr["ISSALE"] = true;
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }

                return true;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void SerialNoCount()
        {
            if (BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
            {

                if (BillData.Tables["INV_PAT_BILLING"].Columns.Contains("IS_ADDITIVE") && BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(r => IfNullReturnZero(r["IS_ADDITIVE"]) == 1).Count() > 0)
                {
                    DataTable DTTEMP = new DataTable();
                    DTTEMP = BillData.Tables["INV_PAT_BILLING"].Copy();
                    DTTEMP.Columns.Add("SORTING_ORDER");
                    string[] str = DTTEMP.AsEnumerable().Where(x => IfNullReturnZero(x["REF_DTLS_PH_ORDER_ID"]) > 0).Select(x => Convert.ToString(x["REF_DTLS_PH_ORDER_ID"])).Distinct().ToArray();
                    int sort = 1;
                    if (str.Any())
                    {                        
                        foreach (string ID in str)
                        {
                            var query = DTTEMP.AsEnumerable().Where(x => Convert.ToString(x["REF_DTLS_PH_ORDER_ID"]) == ID || Convert.ToString(x["EMR_PAT_DTLS_INV_ORDER_ID"]) == ID).Select(x => x).OrderBy(x => IfNullReturnZero(x["REF_DTLS_PH_ORDER_ID"]));
                            if (query.Any())
                            {
                                foreach (DataRow drr in query)
                                {
                                    drr["SORTING_ORDER"] = sort;
                                    sort++;
                                }
                            }                            
                        }
                        DTTEMP.AsEnumerable().Where(x => IfNullReturnZero(x["IS_ADDITIVE"]) == 0).ForEach(x => x["SORTING_ORDER"] = sort);
                        DTTEMP.DefaultView.Sort = "SORTING_ORDER";
                        DTTEMP.Columns.Remove("SORTING_ORDER");
                        BillData.Tables["INV_PAT_BILLING"].Rows.Clear();
                        BillData.Tables["INV_PAT_BILLING"].Merge(DTTEMP.DefaultView.ToTable());
                    }
                }
              
                int count = 1;
                //foreach (DataRow dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(X => X["INV_MAST_SERVICE_ID"] != DBNull.Value).Select(x => x))
                foreach (DataRow dr in BillData.Tables["INV_PAT_BILLING"].Rows)
                {
                    dr["SL_NO"] = count;
                    //Bug Id 33365 (Riyas Start)
                    if (BillData.Tables["PH_PAT_DTLS_ORDER"].KIIsNotNullAndRowCount() && dr["PH_PAT_DTLS_ORDER_ID"] != DBNull.Value)
                    {
                        var resCount = BillData.Tables["PH_PAT_DTLS_ORDER"].AsEnumerable().
                                        Where(w => IfNullReturnZero(w["PH_PAT_DTLS_ORDER_ID"]) == IfNullReturnZero(dr["PH_PAT_DTLS_ORDER_ID"]));
                        if (resCount.Any())
                        {
                            resCount.First()["SL_NO"] = count;
                        }
                    }
                    //Bug Id 33365 (Riyas End)
                    count++;
                }
            }
            //Bug Id 33365 (Riyas Start)
            //if (BillData.Tables["PH_PAT_DTLS_ORDER"].KIIsNotNullAndRowCount())
            //{
            //    int count = 1;
            //    if (!BillData.Tables["PH_PAT_DTLS_ORDER"].Columns.Contains("SL_NO"))
            //    {
            //        BillData.Tables["PH_PAT_DTLS_ORDER"].Columns.Add("SL_NO", typeof(int));
            //    }
            //    BillData.Tables["PH_PAT_DTLS_ORDER"].AsEnumerable()
            //        .ForEach(x => x["SL_NO"] = count++);
            //}
            //Bug Id 33365 (Riyas End)
        }

        /// <summary>
        /// Get Inco dtls scheme ID corresponding Inco mast scheme ID
        /// </summary>
        /// <param name="dtPatientSheme"></param>
        /// <param name="incoMastSchemeID"></param>
        /// <returns></returns>
        private long GetIncoDtlsSchemeID(DataTable dtPatientSheme, long incoMastSchemeID)
        {
            long IncoDtlsSchemeID = 0;
            if (dtPatientSheme.KIIsNotNullAndRowCount())
            {
                DataRow[] drScheme = dtPatientSheme.Select("INCO_MAST_SCHEME_ID=" + incoMastSchemeID);
                if (drScheme.Length > 0)
                {
                    IncoDtlsSchemeID = drScheme[0]["INCO_DTLS_SCHEME_ID"] != DBNull.Value ? Convert.ToInt64(drScheme[0]["INCO_DTLS_SCHEME_ID"]) : 0;
                }
            }
            return IncoDtlsSchemeID;
        }

        private void Executed_OrderView(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                if (SelectedServiceType == (int)ServiceType.Pharmacy)
                {
                    DataRowView dr = (DataRowView)e.Parameter;
                    if (DsEMROrderData != null && DsEMROrderData.Tables.Contains("Detail") &&
                        DsEMROrderData.Tables["Detail"].KIIsNotNullAndRowCount() && dr["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value
                        && IfNullReturnZero(dr["IS_DISPENSE"]) == 0)
                    {
                        DataTable dtTemp = new DataTable();
                        var Query = DsEMROrderData.Tables["Detail"].AsEnumerable()
                            .Where(x => x["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value && Convert.ToDecimal(x["EMR_PAT_DTLS_INV_ORDER_ID"]) ==
                                Convert.ToDecimal(dr["EMR_PAT_DTLS_INV_ORDER_ID"])).Select(x => x);
                        if (Query.Count() > 0)
                        {
                            dtTemp = Query.CopyToDataTable();
                            DataTable dtCriteria = new DataTable();
                            dtCriteria.Columns.Add("MODE");
                            dtCriteria.Columns.Add("EMR_PAT_DTLS_PH_ORDER_ID");
                            dtCriteria.Rows.Add();
                            dtCriteria.Rows[0]["MODE"] = 6;
                            dtCriteria.Rows[0]["EMR_PAT_DTLS_PH_ORDER_ID"] = dtTemp.Rows[0]["EMR_PAT_MAST_INV_ORDER_ID"];
                            DataTable dtname = new DataTable();
                            MainEMRShared objMainEMRShared = new MainEMRShared();
                            dtname = objMainEMRShared.FetchMedicineReconcillation(dtCriteria);
                            if (dtname.KIIsNotNullAndRowCount())
                            {
                                DrugDetails = GetDrugDetails(dr.Row, dtname);
                            }
                        }
                    }
                    else if (IfNullReturnZero(dr["IS_DISPENSE"]) == 0)
                    {
                        DrugDetails = GetDrugDetails(dr.Row, null);
                    }
                    else
                    {
                        DrugDetails = null;
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        private String GetDrugDetails(DataRow dr, DataTable dt)
        {
            try
            {
                StringBuilder drugDetails = new StringBuilder();
                StringBuilder doseDetails = new StringBuilder();
                if (dt.KIIsNotNullAndRowCount())
                {
                    DataTable DtReconcillation = new DataTable();
                    var query = from sel in dt.AsEnumerable()
                                where (Convert.ToInt64(sel["EMR_PAT_DTLS_PH_ORDER_ID"]) == Convert.ToInt64(dr["EMR_PAT_DTLS_INV_ORDER_ID"]))
                                select sel;

                    if (query.Count() > 0)
                    {
                        DtReconcillation = query.CopyToDataTable();
                    }

                    if (dr["NAME"] != DBNull.Value && !string.IsNullOrEmpty(Convert.ToString(dr["NAME"])))
                    {
                        drugDetails.Append(dr["NAME"].ToString());
                    }

                    foreach (DataRow drr in DtReconcillation.Rows)
                    {
                        if (drr["GENERIC_NAME"] != DBNull.Value)
                        {
                            if (doseDetails.Length > 0)
                            {
                                doseDetails.Append(" ");
                            }
                            doseDetails.Append(drr["GENERIC_NAME"].ToString());
                        }
                        if (drr["DOSE"] != DBNull.Value)
                        {
                            if (doseDetails.Length > 0)
                            {
                                doseDetails.Append(" ");
                            }
                            doseDetails.Append(drr["DOSE"].ToString());
                        }
                        if (drr["DOSE_UNIT"] != DBNull.Value)
                        {
                            doseDetails.Append(drr["DOSE_UNIT"].ToString());
                        }
                        doseDetails.Append(",");
                        if (doseDetails.Length > 0)
                        {
                            if (doseDetails.Length > 2)
                            {
                                doseDetails.Insert(0, "(");
                            }
                            doseDetails.Remove(doseDetails.Length - 1, 1);
                            if (doseDetails.Length > 2)
                            {
                                doseDetails.Insert(doseDetails.Length, ")");
                            }
                            if (drugDetails.Length > 0)
                            {
                                if (doseDetails.Length > 2)
                                {
                                    drugDetails.Append(" - ");
                                }
                            }
                            drugDetails.Append(doseDetails.ToString());
                        }
                        if (drr["QUANTITY"] != DBNull.Value && !string.IsNullOrEmpty(Convert.ToString(drr["QUANTITY"])))
                        {
                            if (drugDetails.Length > 0)
                            {
                                drugDetails.Append("-");
                            }
                            drugDetails.Append(drr["QUANTITY"].ToString());
                        }
                        if (drr["QUANTITY_UNIT"] != DBNull.Value && !string.IsNullOrEmpty(Convert.ToString(drr["QUANTITY_UNIT"])))
                        {
                            drugDetails.Append(" " + drr["QUANTITY_UNIT"].ToString() + ".");
                        }
                        if (drr["FORM"] != DBNull.Value && !string.IsNullOrEmpty(Convert.ToString(drr["FORM"])) && Convert.ToString(drr["FORM"]) != "NA")
                        {
                            if (drugDetails.Length > 0)
                            {
                                drugDetails.Append("-");
                            }
                            drugDetails.Append(drr["FORM"].ToString());
                        }
                        if (drr["ROUTE"] != DBNull.Value && !string.IsNullOrEmpty(Convert.ToString(drr["ROUTE"])) && Convert.ToString(drr["ROUTE"]) != "NA")
                        {
                            if (drugDetails.Length > 0)
                            {
                                drugDetails.Append("-");
                            }
                            drugDetails.Append(drr["ROUTE"].ToString());

                        }
                        if (drr["FREQUENCY"] != DBNull.Value && !string.IsNullOrEmpty(Convert.ToString(drr["FREQUENCY"])) && Convert.ToString(drr["FREQUENCY"]) != "0")
                        {

                            if (drugDetails.Length > 0)
                            {
                                drugDetails.Append("-(");
                            }
                            drugDetails.Append(drr["FREQUENCY"].ToString() + ")");

                        }


                        if (drr["FREQUENCY_VALUE"] != DBNull.Value && !string.IsNullOrEmpty(Convert.ToString(drr["FREQUENCY_VALUE"])))
                        {
                            if (drugDetails.Length > 0)
                            {
                                drugDetails.Append("-");
                            }

                            drugDetails.Append("(" + drr["FREQUENCY_VALUE"].ToString());

                        }
                        if (drr["ADMIN_TIME"] != DBNull.Value && !string.IsNullOrEmpty(Convert.ToString(drr["ADMIN_TIME"])))
                        {
                            if (drugDetails.Length > 0)
                            {
                                drugDetails.Append(" at ");
                            }
                            drugDetails.Append(drr["ADMIN_TIME"].ToString());

                        }
                        if (drr["REFILL_COUNT"] != DBNull.Value && !string.IsNullOrEmpty(Convert.ToString(drr["REFILL_COUNT"])))
                        {
                            if (drugDetails.Length > 0)
                            {
                                drugDetails.Append("-");
                            }
                            drugDetails.Append("Refill:");
                            drugDetails.Append(drr["REFILL_COUNT"].ToString());

                        }
                        if (drr["DISPENSE_QUANTITY"] != DBNull.Value && !string.IsNullOrEmpty(Convert.ToString(drr["DISPENSE_QUANTITY"])))
                        {
                            if (drugDetails.Length > 0)
                            {
                                drugDetails.Append("-");
                            }
                            drugDetails.Append("Disp#:");
                            drugDetails.Append(drr["DISPENSE_QUANTITY"].ToString());
                            if (drr["DISPENSE_QUANTITY_UNIT"] != DBNull.Value && !string.IsNullOrEmpty(Convert.ToString(drr["DISPENSE_QUANTITY_UNIT"])))
                            {
                                drugDetails.Append(" " + drr["DISPENSE_QUANTITY_UNIT"].ToString() + ".");
                            }
                        }
                        if (drr["CONDITIONAL_FREQUENCY"] != DBNull.Value && !string.IsNullOrEmpty(Convert.ToString(drr["CONDITIONAL_FREQUENCY"])))
                        {
                            if (drugDetails.Length > 0)
                            {
                                drugDetails.Append("-");
                            }
                            drugDetails.Append(drr["CONDITIONAL_FREQUENCY"].ToString());
                        }
                        if (drr["ADMINISTRATION_INSTRUCTION"] != DBNull.Value && !string.IsNullOrEmpty(Convert.ToString(drr["ADMINISTRATION_INSTRUCTION"])))
                        {
                            if (drugDetails.Length > 0)
                            {
                                drugDetails.Append("-");
                            }
                            drugDetails.Append(drr["ADMINISTRATION_INSTRUCTION"].ToString());
                        }
                        if (drr["REMARKS"] != DBNull.Value && !string.IsNullOrEmpty(Convert.ToString(drr["REMARKS"])))
                        {
                            if (drugDetails.Length > 0)
                            {
                                drugDetails.Append("-");
                            }
                            drugDetails.Append(drr["REMARKS"].ToString());
                        }
                        if (drr["START_DATE"] != DBNull.Value && !string.IsNullOrEmpty(Convert.ToString(drr["START_DATE"])))
                        {
                            drugDetails.Append("  Start Date : ");
                            drugDetails.Append(Convert.ToDateTime(drr["START_DATE"]).ToString("dd-MMM-yyyy HH:mm"));
                        }
                        if (drr["STOP_DATE"] != DBNull.Value && !string.IsNullOrEmpty(Convert.ToString(drr["STOP_DATE"])))
                        {
                            if (drugDetails.Length > 0)
                            {
                                drugDetails.Append(" - ");
                            }
                            drugDetails.Append("End Date : ");
                            drugDetails.Append(Convert.ToDateTime(drr["STOP_DATE"]).ToString("dd-MMM-yyyy HH:mm"));
                        }
                        else
                        {
                            if (drugDetails.Length > 0)
                            {
                                drugDetails.Append(" - ");
                            }
                            drugDetails.Append("End Date : ");
                            drugDetails.Append(Convert.ToDateTime(drr["END_DATE"]).ToString("dd-MMM-yyyy HH:mm"));
                        }
                    }
                }
                else if (dr != null)
                {
                    if (dr["NAME"] != DBNull.Value && !string.IsNullOrEmpty(Convert.ToString(dr["NAME"])))
                    {
                        drugDetails.Append(dr["NAME"].ToString());
                    }
                    if (BillData.Tables["PH_PAT_DTLS_ORDER"].KIIsNotNullAndRowCount() && dr["SL_NO"] != DBNull.Value)
                    {
                        DataRow[] drr = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + IfNullReturnZero(dr["INV_MAST_SERVICE_ID"]) + "AND SL_NO IS NOT NULL AND SL_NO=" + Convert.ToInt16(dr["SL_NO"]));
                        if (drr.Length > 0)
                        {
                            if (Generic.KIIsNotNullAndRowCount())
                            {
                                DataRow[] drGeneric = Generic.Select("EMR_LOOKUP_ID=" + IfNullReturnZero(drr[0]["GENERIC_ID"]));
                                if (drGeneric.Length > 0)
                                {
                                    if (drGeneric[0]["LOOKUP_VALUE"] != DBNull.Value)
                                    {
                                        if (doseDetails.Length > 0)
                                        {
                                            doseDetails.Append(" ");
                                        }
                                        doseDetails.Append(drGeneric[0]["LOOKUP_VALUE"].ToString());
                                    }
                                }
                            }
                            if (dr["DOSE_VALUE"] != DBNull.Value)
                            {
                                if (doseDetails.Length > 0)
                                {
                                    doseDetails.Append(" ");
                                }
                                doseDetails.Append(dr["DOSE_VALUE"].ToString());
                            }
                            if (dr["DOSE_UNIT"] != DBNull.Value)
                            {
                                doseDetails.Append(dr["DOSE_UNIT"].ToString());
                            }
                            doseDetails.Append(",");
                            if (doseDetails.Length > 0)
                            {
                                if (doseDetails.Length > 2)
                                {
                                    doseDetails.Insert(0, "(");
                                }
                                doseDetails.Remove(doseDetails.Length - 1, 1);
                                if (doseDetails.Length > 2)
                                {
                                    doseDetails.Insert(doseDetails.Length, ")");
                                }
                                if (drugDetails.Length > 0)
                                {
                                    if (doseDetails.Length > 2)
                                    {
                                        drugDetails.Append(" - ");
                                    }
                                }
                                drugDetails.Append(doseDetails.ToString());
                            }
                            if (drr[0]["QUANTITY"] != DBNull.Value && !string.IsNullOrEmpty(Convert.ToString(drr[0]["QUANTITY"])))
                            {
                                if (drugDetails.Length > 0)
                                {
                                    drugDetails.Append("-");
                                }
                                drugDetails.Append(drr[0]["QUANTITY"].ToString());
                            }
                            if (drr[0]["QUANTITY_UNIT"] != DBNull.Value && !string.IsNullOrEmpty(Convert.ToString(drr[0]["QUANTITY_UNIT"])))
                            {
                                drugDetails.Append(" " + drr[0]["QUANTITY_UNIT"].ToString() + ".");
                            }
                            if (drr[0]["FORM"] != DBNull.Value && !string.IsNullOrEmpty(Convert.ToString(drr[0]["FORM"])) && Convert.ToString(drr[0]["FORM"]) != "NA")
                            {
                                if (drugDetails.Length > 0)
                                {
                                    drugDetails.Append("-");
                                }
                                drugDetails.Append(drr[0]["FORM"].ToString());
                            }
                            if (drr[0]["ROUTE"] != DBNull.Value && !string.IsNullOrEmpty(Convert.ToString(drr[0]["ROUTE"])) && Convert.ToString(drr[0]["ROUTE"]) != "NA")
                            {
                                if (drugDetails.Length > 0)
                                {
                                    drugDetails.Append("-");
                                }
                                drugDetails.Append(drr[0]["ROUTE"].ToString());

                            }
                            if (drr[0]["FREQUENCY"] != DBNull.Value && !string.IsNullOrEmpty(Convert.ToString(drr[0]["FREQUENCY"])) && Convert.ToString(drr[0]["FREQUENCY"]) != "0")
                            {
                                //DataTable dtCriteria = new DataTable();
                                //dtCriteria.Columns.Add("LOOKUP_TYPE");
                                //dtCriteria.Rows.Add("FREQUENCY");
                                Frequency = FrequencyTemp;// getValidEmrData(dtCriteria); 
                                if (Frequency.KIIsNotNullAndRowCount() &&
                                    Frequency.Select("EMR_LOOKUP_ID=" + drr[0]["FREQUENCY"]).Length > 0)
                                {
                                    DataRow drFreq = Frequency.Select("EMR_LOOKUP_ID=" + drr[0]["FREQUENCY"]).First();
                                    if (drugDetails.Length > 0)
                                    {
                                        drugDetails.Append("-(");
                                    }
                                    drugDetails.Append(drFreq["LOOKUP_VALUE"].ToString() + ")");
                                }
                            }
                            if (drr[0]["ADMINISTRATION_INSTRUCTION"] != DBNull.Value && !string.IsNullOrEmpty(Convert.ToString(drr[0]["ADMINISTRATION_INSTRUCTION"])))
                            {
                                if (drugDetails.Length > 0)
                                {
                                    drugDetails.Append("-");
                                }
                                drugDetails.Append(drr[0]["ADMINISTRATION_INSTRUCTION"].ToString());
                            }
                            if (drr[0]["REMARKS"] != DBNull.Value && !string.IsNullOrEmpty(Convert.ToString(drr[0]["REMARKS"])))
                            {
                                if (drugDetails.Length > 0)
                                {
                                    drugDetails.Append("-");
                                }
                                drugDetails.Append(drr[0]["REMARKS"].ToString());
                            }
                            if (drr[0]["START_DATE"] != DBNull.Value && !string.IsNullOrEmpty(Convert.ToString(drr[0]["START_DATE"])))
                            {
                                drugDetails.Append("  Start Date : ");
                                drugDetails.Append(Convert.ToDateTime(drr[0]["START_DATE"]).ToString("dd-MMM-yyyy HH:mm"));
                            }
                            if (drr[0]["END_DATE"] != DBNull.Value && !string.IsNullOrEmpty(Convert.ToString(drr[0]["END_DATE"])))
                            {
                                if (drugDetails.Length > 0)
                                {
                                    drugDetails.Append(" - ");
                                }
                                drugDetails.Append("End Date : ");
                                drugDetails.Append(Convert.ToDateTime(drr[0]["END_DATE"]).ToString("dd-MMM-yyyy HH:mm"));

                            }
                        }
                    }
                }
                else
                {
                    drugDetails = null;
                }
                return drugDetails.ToString();
            }
            catch (Exception)
            {
                throw;
            }
        }
        private void LoadProviderFromPharmacyPanel()
        {
            Infologics.Medilogics.CommonSharedUI.BillingView.UcPatientEpisodeDetails objUcPatientEpisodeDetails = new Infologics.Medilogics.CommonSharedUI.BillingView.UcPatientEpisodeDetails();
            objUcPatientEpisodeDetails.MRNO = PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Columns.Contains("MRNO")
                && PatientInformation.Rows[0]["MRNO"] != DBNull.Value ? Convert.ToString(PatientInformation.Rows[0]["MRNO"]) : "";
            DataTable dtPatientEpisode = new DataTable();
            dtPatientEpisode = objUcPatientEpisodeDetails.PatientEpisode;
            if (dtPatientEpisode != null && dtPatientEpisode.Rows.Count > 0)
            {
                DataRow[] drRow = dtPatientEpisode.Select("EPISODE_NO=" + SelectedEpisodefromPanel);
                if (drRow.Count() > 0)
                {
                    SelectedOpenEpisodeID = drRow[0]["EPISODE_NO"] != DBNull.Value ? Convert.ToString(drRow[0]["EPISODE_NO"]) : "";
                    SelectedEncounterNo = drRow[0]["ENCOUNTER_NO"] != DBNull.Value ? Convert.ToString(drRow[0]["ENCOUNTER_NO"]) : "";
                    SelectedSpecialityValue = drRow[0]["GEN_DEPARTMENT_ID"] != DBNull.Value ? Convert.ToString(drRow[0]["GEN_DEPARTMENT_ID"]) : "";
                    if (Provider.KIIsNotNullAndRowCount() && Provider.Select("H_EMP_ID=" + drRow[0]["PROVIDER_ID"]).Count() > 0)
                    {
                        DataRow dr = null;
                        dr = Provider.Select("H_EMP_ID=" + drRow[0]["PROVIDER_ID"]).First();
                        SelectedProvider = Provider.DefaultView[Provider.Rows.IndexOf(dr)];
                        SelectedProviderID = Provider.DefaultView[Provider.Rows.IndexOf(dr)];
                        SelectedProviderValue = drRow[0]["PROVIDER_ID"] != DBNull.Value ? Convert.ToString(drRow[0]["PROVIDER_ID"]) : "";
                        //SelectedProviderIDValue = drRow[0]["PROVIDER_ID"] != DBNull.Value ? Convert.ToString(drRow[0]["PROVIDER_ID"]) : "";
                        SelectedPatientFinEncounterID = drRow[0].Table.Columns.Contains("PAT_FIN_ENCOUNTER_ID") &&
                        drRow[0]["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value ? Convert.ToInt64(drRow[0]["PAT_FIN_ENCOUNTER_ID"]) : 0;
                    }
                }
            }
        }

        private void Executed_AllergyReason(object sender, ExecutedRoutedEventArgs e)
        {
            DataRowView dr = (DataRowView)e.Parameter;
            if (dr != null && dr["ALLERGY_REASON"] != DBNull.Value)
            {
                AllergyRemarks = Convert.ToString(dr["ALLERGY_REASON"]);
                ReasonforOverRiding();
                dr["ALLERGY_REASON"] = AllergyRemarks;
            }
        }

        private bool basicValidation()
        {
            try
            {
                long ServiceId = 0;
                if (EditService == null || EditService != null)
                {
                    if ((Service.Table.Columns.Contains("PRIMARY_ID") &&
                        Service["PRIMARY_ID"] != DBNull.Value) || (Service.Table.Columns.Contains("INV_MAST_SERVICE_ID") && Service["INV_MAST_SERVICE_ID"] != DBNull.Value))
                    {
                        if (EditService == null && Service != null && Service.Table.Columns.Contains("PRIMARY_ID"))
                        {
                            ServiceId = Convert.ToInt64(Service["PRIMARY_ID"]);
                        }
                        else if (IsGeneric && EditService != null && Service != null && Service.Table.Columns.Contains("PRIMARY_ID"))
                        {
                            ServiceId = Convert.ToInt64(Service["PRIMARY_ID"]);
                        }
                        else if (Service != null && Service.Table.Columns.Contains("INV_MAST_SERVICE_ID"))
                        {
                            ServiceId = Convert.ToInt64(Service["INV_MAST_SERVICE_ID"]);
                        }
                        else if (Service != null)
                        {
                            ServiceId = Convert.ToInt64(Service["PRIMARY_ID"]);
                        }
                        if (EnableVerificationSettingBased && EditService != null && EditService.Table.Rows.Count>0 && EditService.Table.Columns.Contains("PRIMARY_ID"))
                        {
                            ServiceId = Convert.ToInt64(EditService["PRIMARY_ID"]);
                        }
                        else if (EnableVerificationSettingBased && EditService != null && EditService.Table.Rows.Count > 0 && EditService.Table.Columns.Contains("INV_MAST_SERVICE_ID")
                            && IfNullReturnZero(EditService["INV_MAST_SERVICE_ID"]) > 0)
                        {
                            ServiceId = Convert.ToInt64(EditService["INV_MAST_SERVICE_ID"]);
                        }
                    }
                    else
                    {
                        ServiceId = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INV_MAST_SERVICE_ID"] != DBNull.Value ?
                            Convert.ToInt64(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INV_MAST_SERVICE_ID"]) : 0;
                    }
                    if (SelectedServiceType == (int)ServiceType.Pharmacy && !isEmrOrder)
                    {
                        if (StrUnit == string.Empty)
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "Invalid quantity.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            IsNotClearBasedOnValidation = true;
                            return false;
                        }
                        if (StrDuration == string.Empty && IsConsumable && SelectedVisitModeNew != 0)
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "Select duration", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            IsNotClearBasedOnValidation = true;
                            return false;
                        }
                        if (SelectedPharamacyUnitSales == null && !isEmrOrder)
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "Select Unit of Quantity", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            IsNotClearBasedOnValidation = true;
                            return false;
                        }
                    }
                    IsAddedService = FindServiceAdded(ServiceId, string.Empty);
                    if (SelectedEMROrder == null && SelectedServiceType == (int)ServiceType.Investigation)
                    {
                        //if (EditService == null && IsAddedService && !IsQtyEditable)
                        //{
                        //    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                        //        "Service already added", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        //}

                        if (SelectedLocation == null && (SelectedItemServiceType == (int)ServiceType.Investigation || SelectedItemServiceType == (int)ServiceType.IncomingService) && SelectedItemServiceType != (int)ServiceType.Pharmacy ) 
                        
                        {
                            if (SelectedService.Row.Table.Columns.Contains("INV_PARENT_CATEGORY_ID")
                                && Convert.ToInt16(SelectedService["INV_PARENT_CATEGORY_ID"]) != Convert.ToInt64(CommonData.GetLookupData("BASE CATEGORY").Select("FIELD2 ='" + Convert.ToInt16(BaseCategory.Pharmacy) + "'")[0]["LOOKUP_VALUE"])) // Bug Id : 34221 ,Vinu
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                    "Location missing", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                return false;
                            }
                        }
                        else if (!IsPackage && (SelectedServiceType == (int)ServiceType.Investigation || SelectedServiceType == (int)ServiceType.IncomingService) &&
                            BillData.Tables["INV_PAT_BILLING"] != null && BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0 && SelectedItemServiceType != (int)ServiceType.Pharmacy)
                        {
                            //DataTable dt = CommonData.GetDefaultSettings(0, "EXTERNAL_LAB_OUTGOING_ONE_PER_BILL");
                            if (DefaultSettings.Values.EXTERNAL_LAB_OUTGOING_ONE_PER_BILL)
                            {
                                if (EditService == null && BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCO_MAST_ID"] != DBNull.Value)
                                {
                                    DataRow[] drLoc = BillData.Tables["INV_PAT_BILLING"].Select("INCO_MAST_ID=" + BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCO_MAST_ID"]);
                                    if (drLoc == null || drLoc.Length == 0)
                                    {
                                        string LocationName = string.Empty;
                                        LocationName = GetLocationName(Convert.ToInt64(BillData.Tables["INV_PAT_BILLING"].Rows[0]["INCO_MAST_ID"]));
                                        if (LocationName != string.Empty)
                                        {
                                            giMessageBox.Show(CommonData.MESSAGEHEADER,
                                                "Location should be ( '" + LocationName + "' ) for all services.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                        }
                                        else
                                        {
                                            giMessageBox.Show(CommonData.MESSAGEHEADER,
                                                "Location should be same for all services.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                        }
                                        return false;
                                    }
                                }
                                else if (EditService != null && BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCO_MAST_ID"] != DBNull.Value)//edit
                                {
                                    if (BillData.Tables["INV_PAT_BILLING"] != null && BillData.Tables["INV_PAT_BILLING"].Rows.Count > 1)
                                    {
                                        DataRow[] drLoc = BillData.Tables["INV_PAT_BILLING"].Select("INCO_MAST_ID="
                                            + BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["INCO_MAST_ID"]);

                                        if ((drLoc == null || drLoc.Length == 0))
                                        {
                                            string LocationName = string.Empty;
                                            LocationName = GetLocationName(Convert.ToInt64(BillData.Tables["INV_PAT_BILLING"].Rows[0]["INCO_MAST_ID"]));
                                            if (LocationName != string.Empty)
                                            {
                                                giMessageBox.Show(CommonData.MESSAGEHEADER,
                                                    "Location should be ( '" + LocationName + "' ) for all services.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                            }
                                            else
                                            {
                                                giMessageBox.Show(CommonData.MESSAGEHEADER,
                                                    "Location should be same for all services.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                            }
                                            return false;
                                        }
                                    }
                                }
                            }
                        }
                        if (EditService == null)
                        {
                            bool ISFromEMR = false;
                            DataRow drTemp = null;
                            drTemp = SelectedService == null ? Service : SelectedService.Row;
                            if (drTemp != null && Convert.ToInt16(drTemp["ISPROFILE"]) == 1)
                            {
                                if (drTemp.Table.Columns.Contains("EMR_PROVIDER_VISIT_ID") &&
                                   drTemp["EMR_PROVIDER_VISIT_ID"] != DBNull.Value && drTemp["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value)
                                {
                                    ISFromEMR = true;

                                }
                            }
                            ////check the  service included in the profile
                            //if (IsProfileServiceAdded(ServiceId, ISFromEMR))
                            //{
                            //    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                            //        "Service already included in another profile", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            //    return false;
                            //}
                        }
                    }
                    if (SelectedServiceType == (int)ServiceType.Pharmacy)
                    {
                        if (SelectedPharamacyUnitSales == null && isEmrOrder && IsFromPharmacyPanel && EditService != null)
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "Select Unit of Quantity", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            IsNotClearBasedOnValidation = true;
                            return false;
                        }
                        if (SelectedFrequency != null && Convert.ToInt64(SelectedFrequency["EMR_LOOKUP_ID"]) == 2733 && StrFreqHours == null && !IsVerificationLoaded) //!IsVerificationLoaded for bug id 42294
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                        "Please give hour(s) value", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            return false;
                        }
                        else if (SelectedFrequency != null && Convert.ToInt64(SelectedFrequency["EMR_LOOKUP_ID"]) == 2733 && StrFreqHours == string.Empty && !IsVerificationLoaded) //!IsVerificationLoaded for bug id 42294
                        { 
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                        "Please give hour(s) value", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            return false;
                        }
                        if (SelectedBatchOrUnit == null && !isEmrOrder && !IsVerificationLoaded && !EnableVerificationSettingBased)
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                "Please select the batch", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            return false;
                        }
                        if (SelectedBatchOrUnit != null && !isEmrOrder)
                        {
                            if (Convert.ToDouble(SelectedBatchOrUnit.Row["QTY"]) <= 0)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                               "No Stock Available for the selected Batch No " + SelectedBatchOrUnit.Row["BATCHNO"], MessageBoxButtonType.OK, MessageBoxImages.Information);
                                return false;
                            }
                        }
                        if (Convert.ToDateTime(StartDate) < Convert.ToDateTime(DateTime.Today) && IsNormalOrder && IsConsumable)
                        {
                            //IsNormalOrder
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                        "Past date can not be applied", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            return false;
                        }
                        if (SelectedVisitModeNew != 0 )
                        {
                            if (SelectedFrequency == null && !isEmrOrder && IsConsumable && !IsVerificationLoaded)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                           "Please select the frequency", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                return false;
                            }
                            if (StrDrugUnit == string.Empty /* && !isEmrOrder*/ && IsConsumable && !IsVerificationLoaded)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                          "Please select dose value", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                return false;
                            }
                            if (StrDrugUnit != string.Empty /* && !isEmrOrder*/ && Convert.ToDecimal(StrDrugUnit) == 0 && IsConsumable && !IsVerificationLoaded)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                          "Dose value should be greater than 0", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                return false;
                            }
                            if (StrDuration != string.Empty && !isEmrOrder && Convert.ToDecimal(StrDuration) == 0 && IsConsumable && !IsVerificationLoaded)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                          "Duration value should be greater than 0", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                return false;
                            }
                            if (SelectedDose == null /* && !isEmrOrder*/ && IsConsumable && !IsVerificationLoaded)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                          "Please select dose value type", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                return false;
                            }
                            if (StrDuration == string.Empty && !isEmrOrder && IsConsumable && !IsVerificationLoaded)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                          "Please select duration value", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                return false;
                            }
                            if (SelectedDuratioin == null && !isEmrOrder && IsConsumable && !IsVerificationLoaded)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                          "Please select duration value type", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                return false;
                            }
                        }
                        if (EditService != null && EditService.Table.Rows.Count > 0 && IfNullReturnZero(EditService["EMR_PAT_DTLS_INV_ORDER_ID"]) == 0 && IfNullReturnZero(EditService["CONSUMPTION_STATUS"]) == 0 && !EnableVerificationSettingBased)
                        {
                            MainBilling objBIlling = new MainBilling();
                            DataTable dtCriteriatable = new DataTable();
                            dtCriteriatable.Columns.Add("PH_SUBLOCATION_ID", typeof(int));
                            dtCriteriatable.Columns.Add("MEDICINE_CODE", typeof(long));
                            dtCriteriatable.Columns.Add("BATCHNO", typeof(string));
                            dtCriteriatable.Columns.Add("INV_MAST_SERVICE_ID", typeof(long));
                            if (!IsGeneric)
                                if (SelectedBatchOrUnit != null && SelectedBatchOrUnit.Row["BATCHNO"] != DBNull.Value)
                                {
                                    //dtCriteriatable.Rows.Add(SelectedLabOrSubLocationValue, EditService["MEDICINE_CODE"], SelectedBatchOrUnit.Row["BATCHNO"], EditService["INV_MAST_SERVICE_ID"]);
                                    dtCriteriatable.Rows.Add(EditService["SUBLOCATION"], EditService["MEDICINE_CODE"], SelectedBatchOrUnit.Row["BATCHNO"], EditService["INV_MAST_SERVICE_ID"]);
                                }
                                else
                                {
                                    dtCriteriatable.Rows.Add(EditService["SUBLOCATION"], EditService["MEDICINE_CODE"], EditService["BATCHNO"], EditService["INV_MAST_SERVICE_ID"]);
                                }
                            else if (IsGeneric && SelectedService != null)
                                dtCriteriatable.Rows.Add(EditService["SUBLOCATION"], SelectedService["MEDICINE_CODE"], (SelectedBatchOrUnit != null && SelectedBatchOrUnit.Row["BATCHNO"] != DBNull.Value) ? SelectedBatchOrUnit.Row["BATCHNO"] : DBNull.Value, SelectedService["PRIMARY_ID"]);
                            DataTable dttable = objBIlling.GetMedicinesStockDetails(dtCriteriatable);
                            decimal sales_actual_qty = Quantity * IfNullReturnZero(SelectedPharamacyUnitSales["BASE_QTY"]);
                            decimal query = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                .Where(x => x["INV_MAST_SERVICE_ID"] != DBNull.Value && x["BATCHNO"] != DBNull.Value &&
                                    EditService["INV_MAST_SERVICE_ID"] != DBNull.Value && EditService["BATCHNO"] != DBNull.Value &&
                              Convert.ToInt64(x["INV_MAST_SERVICE_ID"]) == Convert.ToInt64(EditService["INV_MAST_SERVICE_ID"]) &&
                              Convert.ToString(x["BATCHNO"]) == Convert.ToString(EditService["BATCHNO"]) && Convert.ToBoolean(x["ISSALE"]))
                              .Select(x => Convert.ToDecimal(x["SALES_ACTUAL_QTY"])).Sum();
                            if (!IsEditExecuted)
                                sales_actual_qty += query;
                            if (dttable.KIIsNotNullAndRowCount())
                            {
                                if (sales_actual_qty > IfNullReturnZero(dttable.Rows[0]["QTY"]))
                                {
                                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                    "No Stock Available for Item " + EditService["NAME"] + " With Batch No " + EditService["BATCHNO"], MessageBoxButtonType.OK, MessageBoxImages.Information);
                                    EditService["ISSALE"] = false;
                                    EditService["ISLABEL"] = false;
                                    return false;
                                }
                            }
                            else if (EditService["BATCHNO"] != DBNull.Value)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                "No Stock Available for Item " + EditService["NAME"] + " With Batch No " + EditService["BATCHNO"], MessageBoxButtonType.OK, MessageBoxImages.Information);
                                EditService["ISSALE"] = false;
                                EditService["ISLABEL"] = false;
                                return false;
                            }
                        }
                    }
                    else if (!IsFromPharmacy && SelectedServiceType != (int)ServiceType.Pharmacy
                        && SelectedService != null && (SelectedService.Row.Table.Columns.Contains("PARENT_INV_CATEGORY_ID")
                        && Convert.ToInt16(SelectedService["PARENT_INV_CATEGORY_ID"])==Convert.ToInt64(CommonData.GetLookupData("BASE CATEGORY").Select("FIELD2 ='" + Convert.ToInt16(BaseCategory.Pharmacy) + "'")[0]["LOOKUP_VALUE"]))
                        ||(SelectedService.Row.Table.Columns.Contains("INV_PARENT_CATEGORY_ID")
                        && Convert.ToInt16(SelectedService["INV_PARENT_CATEGORY_ID"])==Convert.ToInt64(CommonData.GetLookupData("BASE CATEGORY").Select("FIELD2 ='" + Convert.ToInt16(BaseCategory.Pharmacy) + "'")[0]["LOOKUP_VALUE"])))
                    {
                        if (SelectedPharamacyUnitSales == null && !isEmrOrder)
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER, "Select Unit of Quantity", MessageBoxButtonType.OK, MessageBoxImages.Information);                            
                            return false;
                        }
                        if (SelectedBatchOrUnit == null && !isEmrOrder)
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                        "Please select the batch", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            return false;
                        }
                        if (SelectedBatchOrUnit != null && !isEmrOrder)
                        {
                            if (Convert.ToDouble(SelectedBatchOrUnit.Row["QTY"]) <= 0)
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                               "No Stock Available for the selected Batch No " + SelectedBatchOrUnit.Row["BATCHNO"], MessageBoxButtonType.OK, MessageBoxImages.Information);
                                return false;
                            }
                        }
                    }
                    ////if (string.IsNullOrEmpty(SelectedOpenEpisodeID) && string.IsNullOrEmpty(SelectedEncounterNo))
                    ////{
                    ////    DataTable dtData = new DataTable();
                    ////    dtData.Columns.Add("MRNO");
                    ////    dtData.Columns.Add("MODE");
                    ////    dtData.Columns.Add("EPISODE_MODE");
                    ////    dtData.Rows.Add();
                    ////    dtData.Rows[0]["MRNO"]=PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Rows[0]["MRNO"]!=DBNull.Value ?
                    ////    Convert.ToString(PatientInformation.Rows[0]["MRNO"]):"";
                    ////    dtData.Rows[0]["MODE"] = 3;
                    ////    dtData.Rows[0]["EPISODE_MODE"] = 1;
                    ////    MainCommon objCommon = new MainCommon();
                    ////    DataTable dtEpisodeFetch = objCommon.FetchFinancialEpisodes(dtData);
                    ////    if (dtEpisodeFetch.KIIsNotNullAndRowCount())
                    ////    {
                    ////        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                    ////                "Please select active episode", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    ////        return false;
                    ////    }
                    ////}
                    if (SelectedService.Row.Table.Columns.Contains("SERVICE_TYPE"))
                    {
                        //if (Convert.ToInt64(SelectedService["SERVICE_TYPE"]) == (int)ServiceType.ADT)
                        //{
                        //    DataTable dtCriteriaTableTemp = new DataTable();
                        //    dtCriteriaTableTemp.Columns.Add("MRNO");
                        //    dtCriteriaTableTemp.Columns.Add("MODE", typeof(int));
                        //    dtCriteriaTableTemp.Columns.Add("VISIT_NO", typeof(Int64));
                        //    dtCriteriaTableTemp.Columns.Add("BILL_DATE", typeof(DateTime));
                        //    dtCriteriaTableTemp.Rows.Add();
                        //    dtCriteriaTableTemp.Rows[0]["MODE"] = 34;
                        //    dtCriteriaTableTemp.Rows[0]["MRNO"] = PatientInformation != null && PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Rows[0]["MRNO"] != DBNull.Value ? PatientInformation.Rows[0]["MRNO"] : 0;
                        //    dtCriteriaTableTemp.Rows[0]["VISIT_NO"] = itemMain["VISIT_NO"];
                        //    dtCriteriaTableTemp.Rows[0]["BILL_DATE"] = System.DateTime.Now;                           
                        //    CommonShared.FOMain.MainFOShared objMainFOShared = new MainFOShared();
                        //    DataTable dtGenTableTemp = objMainFOShared.FetchGenBillDetails(dtCriteriaTableTemp);
                        //    if (dtGenTableTemp != null && dtGenTableTemp.Rows.Count > 0)
                        //    {
                        //        return false;
                        //    }
                        //}
                        if (BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0 && BillData.Tables["INV_PAT_BILLING"].Columns.Contains("SERVICE_TYPE") && SelectedService.Row.Table.Columns.Contains("SERVICE_TYPE"))
                    {
                        var drservicetype = from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                            where dr["SERVICE_TYPE"] != DBNull.Value &&
                                            ((Convert.ToInt16(dr["SERVICE_TYPE"]) != (int)ServiceType.ADT &&
                                             Convert.ToInt64(SelectedService["SERVICE_TYPE"]) == (int)ServiceType.ADT) ||
                                             (Convert.ToInt16(dr["SERVICE_TYPE"]) == (int)ServiceType.ADT &&
                                             Convert.ToInt64(SelectedService["SERVICE_TYPE"]) != (int)ServiceType.ADT))
                                            select dr;

                        if (drservicetype.Count() > 0)
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                       "Not possible to bill room type and service together.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            return false;
                        }
                    }
                    }
                    //if (BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0 )
                    //{
                    //    if (Convert.ToInt64(BillData.Tables["INV_PAT_BILLING"].Rows[0]["SERVICE_TYPE"])!= Convert.ToInt64(SelectedService["SERVICE_TYPE"]))
                    //    {
                    //        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                    //                    "Not possible to bill room type and service together.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    //        return false;
                    //    }

                    //}

                }
                return true;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void GetRecommendedDose()
        {
            DataTable dtCriteria = new DataTable();
            dtCriteria.Columns.Add("MEDICINE_TYPE", typeof(int));
            dtCriteria.Columns.Add("PROVIDER_ID");
            dtCriteria.Columns.Add("AGE", typeof(decimal));
            dtCriteria.Columns.Add("GENDER", typeof(int));
            dtCriteria.Columns.Add("DRUG_ID", typeof(Int64));
            dtCriteria.Columns.Add("MODE", typeof(int));
            dtCriteria.Rows.Add();
            if (SelectedService.Row.Table.Columns.Contains("PRIMARY_ID") &&
                SelectedService["PRIMARY_ID"] != DBNull.Value)
            {
                dtCriteria.Rows[0]["DRUG_ID"] = SelectedService["PRIMARY_ID"];
            }
            else
            {
                dtCriteria.Rows[0]["DRUG_ID"] = SelectedService["INV_MAST_SERVICE_ID"];
            }
            if (SelectedProviderIDValue != string.Empty && SelectedProviderIDValue != null)
            {
                dtCriteria.Rows[0]["PROVIDER_ID"] = SelectedProviderIDValue;
            }
            else
            {
                dtCriteria.Rows[0]["PROVIDER_ID"] = null;
            }
            dtCriteria.Rows[0]["MEDICINE_TYPE"] = 0;
            dtCriteria.Rows[0]["MODE"] = 1;
            dtCriteria.Rows[0]["AGE"] = PatientInformation.Rows[0]["AGE"];
            dtCriteria.Rows[0]["GENDER"] = PatientInformation.Rows[0]["GENDER"];
            DataTable dtRecommendedDose = new DataTable();
            if (objEmrShared == null)
            {
                objEmrShared = new MainEMRShared();
            }
            dtRecommendedDose = objEmrShared.GetEMRRecommendDose(dtCriteria);
            DataRow drrow = null;
            if (dtRecommendedDose.KIIsNotNullAndRowCount())
            {
                StrDrugUnit = dtRecommendedDose.Rows[0]["QUANTITY"] != DBNull.Value ? Convert.ToString(dtRecommendedDose.Rows[0]["QUANTITY"]) : string.Empty;
                if (DrugUnit != null && DrugUnit.Rows.Count > 0)
                {
                    if (dtRecommendedDose.Rows[0]["QUANTITY_UNIT"] != DBNull.Value &&
                        (DrugUnit.Select("LOOKUP_VALUE='" + dtRecommendedDose.Rows[0]["QUANTITY_UNIT"] + "'").Count() > 0))
                    {
                        drrow = DrugUnit.Select("LOOKUP_VALUE='" + dtRecommendedDose.Rows[0]["QUANTITY_UNIT"] + "'").First();
                        SelectedDose = DrugUnit.DefaultView[DrugUnit.Rows.IndexOf(drrow)];
                    }
                    if (Frequency.KIIsNotNullAndRowCount())
                    {
                        if (dtRecommendedDose.Rows[0]["FREQUENCY"] != DBNull.Value &&
                        (Frequency.Select("EMR_LOOKUP_ID=" + dtRecommendedDose.Rows[0]["FREQUENCY"]).Count() > 0))
                        {
                            //SelectedFrequencyvalue = IfNullReturnZero(dtRecommendedDose.Rows[0]["FREQUENCY"]);
                            drrow = Frequency.Select("EMR_LOOKUP_ID=" + dtRecommendedDose.Rows[0]["FREQUENCY"]).First();
                            SelectedFrequency = Frequency.DefaultView[Frequency.Rows.IndexOf(drrow)];
                        }
                    }
                    if (Duratioin.KIIsNotNullAndRowCount())
                    {
                        if (dtRecommendedDose.Rows[0]["DURATION_TYPE"] != DBNull.Value &&
                       (Duratioin.Select("KEY=" + dtRecommendedDose.Rows[0]["DURATION_TYPE"]).Count() > 0))
                        {
                            drrow = Duratioin.Select("KEY=" + dtRecommendedDose.Rows[0]["DURATION_TYPE"]).First();
                            SelectedDuratioin = Duratioin.DefaultView[Duratioin.Rows.IndexOf(drrow)];
                        }
                    }
                    StrDuration = dtRecommendedDose.Rows[0]["DURATION"] != DBNull.Value ? Convert.ToString(dtRecommendedDose.Rows[0]["DURATION"]) : string.Empty;
                }
                DataTable dtRecommendedRoute = new DataTable();
                dtRecommendedRoute.Columns.Add("RECOMMEND_DOSE_ID", typeof(long));
                dtRecommendedRoute.Rows.Add(Convert.ToInt64(dtRecommendedDose.Rows[0]["EMR_PH_RECOMMEND_DOSE_ID"]));
                if (objEmrShared == null)
                {
                    objEmrShared = new MainEMRShared();
                }
                DataTable dtRecomendedDoseRoute = objEmrShared.GetEMRDrugRoutes(dtRecommendedRoute);
                if (dtRecomendedDoseRoute.Rows.Count > 0)
                {
                    DataRow[] drRouteIsDefault = dtRecomendedDoseRoute.Select("ISDEFAULT=1");
                    if (drRouteIsDefault.Length > 0)
                    {
                        if (drRouteIsDefault[0]["ROUTE"] != DBNull.Value && Route.Select("ROUTE='" + drRouteIsDefault[0]["ROUTE"] + "'").Count() > 0)
                        {
                            drrow = Route.Select("ROUTE='" + drRouteIsDefault[0]["ROUTE"] + "'").First();
                            SelectedRoute = Route.DefaultView[Route.Rows.IndexOf(drrow)];
                        }
                        DataTable dtRecommendedForm = new DataTable();
                        dtRecommendedForm.Columns.Add("EMR_PH_ROUTE_ID", typeof(long));
                        dtRecommendedForm.Rows.Add(drRouteIsDefault[0]["EMR_PH_ROUTE_ID"]);
                        if (objEmrShared == null)
                        {
                            objEmrShared = new MainEMRShared();
                        }
                        DataTable dtRecomendedDoseForm = objEmrShared.GetEMRDrugForms(dtRecommendedForm);
                        if (dtRecomendedDoseForm != null && dtRecomendedDoseForm.Rows.Count > 0)
                        {
                            DataRow[] drRecoMedFormIsDefault = dtRecomendedDoseForm.Select("ISDEFAULT=1");
                            if (drRecoMedFormIsDefault.Length > 0)
                            {
                                if (drRecoMedFormIsDefault[0]["FORM"] != DBNull.Value && Form.Select("FORM='" + drRecoMedFormIsDefault[0]["FORM"] + "'").Count() > 0)
                                {
                                    drrow = Form.Select("FORM='" + drRecoMedFormIsDefault[0]["FORM"] + "'").First();
                                    SelectedForm = Form.DefaultView[Form.Rows.IndexOf(drrow)];
                                }
                            }
                            DataTable dtCriteriaTemp = new DataTable();
                            dtCriteriaTemp.Columns.Add("EMR_PH_FORMS_ID", typeof(Int64));
                            dtCriteriaTemp.Rows.Add(drRecoMedFormIsDefault[0]["EMR_PH_FORMS_ID"]);
                            if (objEmrShared == null)
                            {
                                objEmrShared = new MainEMRShared();
                            }
                            DataTable dtTable = objEmrShared.GetEMRDrugUnits(dtCriteriaTemp);
                            if (dtTable.KIIsNotNullAndRowCount() && dtTable.Rows[0]["DOSE"] != DBNull.Value
                                && dtTable.Rows[0]["UNIT"] != DBNull.Value)
                            {
                                DoseValue = Convert.ToInt64(dtTable.Rows[0]["DOSE"]);
                                DoseUnit = Convert.ToString(dtTable.Rows[0]["UNIT"]);
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Executed_CloseAllergyRemarkPopup(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                bool isSuccess = true;
                if (AllergyRemarks.Trim() == String.Empty && IsAllergyReasonMandatory && (isEdited || isChangetoZeroChargeMenuClick))
                {
                    giMessageBox.Show(CommonData.MESSAGEHEADER, "Enter overriding reason", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    isSuccess = false;
                }
                else if (AllergyRemarks.Trim() == String.Empty && IsAllergyReasonMandatory && !isEdited)
                {
                    giMessageBox.Show(CommonData.MESSAGEHEADER, "Enter allergy reason", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    isSuccess = false;
                }
                else if (Controlvisible && ApprovalNo.Trim() == String.Empty && (isEdited || isChangetoZeroChargeMenuClick))
                {
                    giMessageBox.Show(CommonData.MESSAGEHEADER, "Enter Approval No.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    isSuccess = false;
                }
                //else if (SelectedDate > DateTime.Now)
                //{
                //    giMessageBox.Show(CommonData.MESSAGEHEADER, "Approval date should not be greater than current date", MessageBoxButtonType.OK, MessageBoxImages.Information);
                //    isSuccess = false;
                //}
                if (isSuccess)
                {
                    Window obj = sender as Window;
                    obj.Close();
                }

            }
            catch (Exception Ex)
            {
                throw;
               // ExceptionHandler.WriteErrorLog(Ex);
            }
        }

        /// <summary>
        /// Creates the dynamic bill common data.
        /// </summary>
        private void CreateConsultationBillData(DataSet XSD)
        {
            try
            {
                if (!Is_EM_SettingsEnabled) // PAV Settings but not E/M
                {
                    DataRow[] drConsulationServices = XSD.Tables["INV_PAT_BILLING"].Select("SERVICE_TYPE IS NOT NULL AND SERVICE_TYPE=" + (int)ServiceType.Consultation);
                    if (drConsulationServices.Length > 0)
                    {
                        DataRow drDetails = XSD.Tables["BILL_COMMON_DETAILS"].Rows[0];
                        if (SelectedProvider != null)
                        {
                            drDetails["PROVIDER_ID"] = SelectedProvider.Row["H_EMP_ID"];             //providerID;
                            drDetails["GEN_MAST_DEPARTMENT_ID"] = SelectedProvider.Row["H_EMP_DEPNAME"];
                            drDetails["DEPARTMENT_NAME"] = SelectedProvider.Row["DEPARTMENT_NAME"];
                            drDetails["PROVIDER_NAME"] = SelectedProvider.Row["EMPLOYEE_NAME"];
                            drDetails["CON_TYPE_NAME"] = ServiceName;
                            drDetails["MRNO"] = PatientInformation != null && PatientInformation.Rows[0]["MRNO"] != DBNull.Value ? PatientInformation.Rows[0]["MRNO"] : Patient != null ? Patient.MRNO : string.Empty;
                        }
                        drDetails["ISREFERAL_APPOINTMENT"] = 0;
                        drDetails["FREE_CONSULTATION"] = 0;
                        drDetails["IS_FIRST"] = drConsulationServices[0]["ISNEWCASE"] != DBNull.Value && Convert.ToInt16(drConsulationServices[0]["ISNEWCASE"]) == 0 ? true : false;
                        drDetails["IS_FREE"] = drConsulationServices[0]["ISNEWCASE"] != DBNull.Value && Convert.ToInt16(drConsulationServices[0]["ISNEWCASE"]) == 3 ? true : false;
                        DataRow drConPatBill = XSD.Tables["CON_PAT_BILLING"].Rows[0];
                        drConPatBill["CON_PAT_BILLING_ID"] = DBNull.Value;         //Data gets updated from main control
                        drConPatBill["GEN_PAT_BILLING_ID"] = ReadNullableValue(drConsulationServices[0]["GEN_PAT_BILLING_ID"]);
                        drConPatBill["GEN_PATIENT_SHARE"] = ReadNullableValue(drConsulationServices[0]["GEN_PATIENT_SHARE"]);
                        drConPatBill["PKG_DTLS_PATIENT_SERVICE_ID"] = DBNull.Value;
                        DataTable criteria = new DataTable();
                        criteria.Columns.Add("PROVIDER_ID");
                        criteria.Columns.Add("INV_MAST_SERVICE_ID");
                        criteria.Columns.Add("DEPT_ID");
                        criteria.Columns.Add("MODE");
                        if (!Is_EM_SettingsEnabled)
                            criteria.Rows.Add(drDetails["PROVIDER_ID"], ReadNullableValue(drConsulationServices[0]["INV_MAST_SERVICE_ID"]), drDetails["GEN_MAST_DEPARTMENT_ID"], 4);
                        else
                            criteria.Rows.Add(drDetails["PROVIDER_ID"], ReadNullableValue(drConsulationServices[0]["INV_MAST_SERVICE_ID"]), drDetails["GEN_MAST_DEPARTMENT_ID"], 5);
                        MainBilling objBilling = new MainBilling();
                        DataTable dtEncounter = objBilling.FetchConsulationServices(criteria);
                        if (dtEncounter.KIIsNotNullAndRowCount())
                        {
                            drConPatBill["CON_TYPE_ID"] = dtEncounter.Rows[0]["CON_TYPE_ID"];
                        }
                        if (drDetails["IS_FREE"] != DBNull.Value && Convert.ToInt16(drDetails["IS_FREE"]) == 1 && !Is_EM_SettingsEnabled)
                        {
                            drConPatBill["CON_TYPE_ID"] = DBNull.Value;
                        }
                        drConPatBill["CON_MAST_TYPE_RULE_ID"] = DBNull.Value;
                        drConPatBill["CHARGE_CATEGORY"] = 11;
                        drConPatBill["AMOUNT"] = ReadNullableValue(drConsulationServices[0]["AMOUNT"]);
                        drConPatBill["DISCOUNT"] = Math.Abs(ReadNullableValue(drConsulationServices[0]["DISCOUNT"]));
                        drConPatBill["DISCOUNT_IN_PERC"] = ReadNullableValue(drConsulationServices[0]["DISCOUNT_IN_PERC"]);
                        drConPatBill["MARKUP"] = ReadNullableValue(drConsulationServices[0]["MARKUP"]);
                        drConPatBill["MARKUP_IN_PERC"] = ReadNullableValue(drConsulationServices[0]["MARKUP_IN_PERC"]);
                        drConPatBill["PKG_MARKUP"] = ReadNullableValue(drConsulationServices[0]["PKG_MARKUP"]);
                        drConPatBill["PKG_DISCOUNT"] = ReadNullableValue(drConsulationServices[0]["PKG_DISCOUNT"]);
                        //New(If any pbl related to below coding, take corresponding values from drRegConDetails)
                        drConPatBill["SCHEME_MARKUP"] = ReadNullableValue(drConsulationServices[0]["SCHEME_MARKUP"]);
                        drConPatBill["SCHEME_DISCOUNT"] = Math.Abs(ReadNullableValue(drConsulationServices[0]["SCHEME_DISCOUNT"]));
                        drConPatBill["SCHEME_DISCOUNT_IN_PERC"] = ReadNullableValue(drConsulationServices[0]["SCHEME_DISCOUNT_IN_PERC"]);
                        drConPatBill["CO_PAY_AMOUNT"] = drConsulationServices[0]["ISNEWCASE"] != DBNull.Value && Convert.ToInt16(drConsulationServices[0]["ISNEWCASE"]) == 3 ? 0 : ReadNullableValue(drConsulationServices[0]["CO_PAY_AMOUNT"]);
                        drConPatBill["CO_PAY_IN_PER"] = drConsulationServices[0]["ISNEWCASE"] != DBNull.Value && Convert.ToInt16(drConsulationServices[0]["ISNEWCASE"]) == 3 ? 0 : ReadNullableValue(drConsulationServices[0]["CO_PAY_IN_PER"]);
                        drConPatBill["NET_AMOUNT"] = ReadNullableValue(drConsulationServices[0]["NET_AMOUNT"]);
                        //}
                        drConPatBill["GEN_AUDIT_ID"] = -1;
                        drConPatBill["PAID_CON_PAT_BILLING_ID"] = DBNull.Value;
                        drConPatBill["GEN_MAST_DEPARTMENT_ID"] = drDetails["GEN_MAST_DEPARTMENT_ID"];
                        drConPatBill["CON_TYPE_NAME"] = drDetails["CON_TYPE_NAME"].ToString();
                        drConPatBill["PATIENT_NAME"] = this.GetPatientName(XSD.Tables["PAT_PATIENT_NAME"]);
                        drConPatBill["PROVIDER_NAME"] = drDetails["PROVIDER_NAME"].ToString();
                        drConPatBill["DEPARTMENT_NAME"] = drDetails["DEPARTMENT_NAME"].ToString();
                        drConPatBill["PROVIDER_ID"] = drDetails["PROVIDER_ID"];
                        drConPatBill["BILL_DATE"] = DateTime.Now;
                        drConPatBill["MRNO"] = drDetails["MRNO"];
                        drConPatBill["VISIT_MODE"] = SelectedVisitMode;
                        drConPatBill["INCO_DTLS_SCHEME_ID"] = SelectedSchemeValue;
                        drConPatBill["GEN_OUTSIDE_PROVIDER_ID"] = DBNull.Value;
                        drConPatBill["GEN_OUTSIDE_HOSPITAL_ID"] = DBNull.Value;
                        drConPatBill["IS_REFERRAL"] = 0;
                        drConPatBill["EMR_PAT_REFERENCE_ID"] = DBNull.Value;
                        drConPatBill["REFERRED_PROVIDER"] = DBNull.Value;
                        drConPatBill["HOSPITAL_SITE_ID"] = CommonData.LoginHospitalSiteID;
                        drConPatBill["ISNEWCASE"] = drConsulationServices[0]["ISNEWCASE"];
                        drConPatBill["EMR_PAT_DTLS_INV_ORDER_ID"] = ReadNullableValue(drConsulationServices[0]["EMR_PAT_DTLS_INV_ORDER_ID"]);
                        // CHECKING BUG ID 19311     
                        drConPatBill["DEDUCTIBLE"] = drConsulationServices[0]["ISNEWCASE"] != DBNull.Value && Convert.ToInt16(drConsulationServices[0]["ISNEWCASE"]) == 3 ? 0 : ReadNullableValue(drConsulationServices[0]["DEDUCTIBLE"]);
                        drConPatBill["EDITED_STATUS"] = drConsulationServices[0]["EDITED_STATUS"];
                        drConPatBill["OVER_RIDING_REASON"] = drConsulationServices[0]["OVER_RIDING_REASON"];
                        drConPatBill["APPROVAL_NO"] = drConsulationServices[0]["APPROVAL_NO"];
                        drConPatBill["APPROVAL_DATE"] = drConsulationServices[0]["APPROVAL_DATE"];
                        drConPatBill["PATIENT_SHARE"] = drConsulationServices[0]["PATIENT_SHARE"];
                        if (drConPatBill["DEDUCTIBLE"] != DBNull.Value && Convert.ToDecimal(drConPatBill["DEDUCTIBLE"]) > 0)
                        {
                            drConPatBill["CO_PAY_AMOUNT"] = DBNull.Value;
                            drConPatBill["CO_PAY_IN_PER"] = DBNull.Value;
                        }
                        drConPatBill["INV_MAST_SERVICE_ID"] = drConsulationServices[0]["INV_MAST_SERVICE_ID"];
                        drConPatBill["INCO_DTLS_PAT_APPROVAL_ID"] = drConsulationServices[0]["INCO_DTLS_PAT_APPROVAL_ID"];
                        //// if (Convert.ToInt16(drConPatBill["ISNEWCASE"]) != (int)ConsultCategory.FreeEncounter)  //--  BB-09072014 
                        {
                            LoadFreedaysFreevisits(drConPatBill, XSD.Tables["BILL_COMMON_DETAILS"]);
                        }
                        XSD.Tables["INV_PAT_BILLING"].Rows.Remove(drConsulationServices[0]);
                    }
                    else
                    {
                        //DataTable dtSetting = CommonData.GetDefaultSettings(0, "FO_EPISODE_OPEN_PHARMACY_ORDER"); // This Settings is for Opening Episode during Pharmacy Billing.
                        //if (dtSetting != null && dtSetting.Rows.Count > 0 && Convert.ToInt16(dtSetting.Rows[0]["VALUE"]) == 1
                        if(DefaultSettings.Values.FO_EPISODE_OPEN_PHARMACY_ORDER
                           && SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE")
                           && SelectedEncounterDetails["ENCOUNTER_MODE"] != DBNull.Value && Convert.ToInt32(SelectedEncounterDetails["ENCOUNTER_MODE"]) != 2)
                        {
                            DataRow[] drPharmacyServices = XSD.Tables["INV_PAT_BILLING"].Select("SERVICE_TYPE IS NOT NULL AND SERVICE_TYPE=" + (int)ServiceType.Pharmacy);
                            if (drPharmacyServices.Length > 0)
                            {
                                DataRow drDetails = XSD.Tables["BILL_COMMON_DETAILS"].Rows[0];
                                if (SelectedProvider != null)
                                {
                                    drDetails["PROVIDER_ID"] = SelectedProvider.Row["H_EMP_ID"];             //providerID;
                                    drDetails["GEN_MAST_DEPARTMENT_ID"] = SelectedProvider.Row["H_EMP_DEPNAME"];
                                    drDetails["DEPARTMENT_NAME"] = SelectedProvider.Row["DEPARTMENT_NAME"];
                                    drDetails["PROVIDER_NAME"] = SelectedProvider.Row["EMPLOYEE_NAME"];
                                    drDetails["CON_TYPE_NAME"] = ServiceName;
                                    drDetails["MRNO"] = PatientInformation != null && PatientInformation.Rows[0]["MRNO"] != DBNull.Value ? PatientInformation.Rows[0]["MRNO"] : Patient != null ? Patient.MRNO : string.Empty;
                                }
                                drDetails["ISREFERAL_APPOINTMENT"] = 0;
                                drDetails["FREE_CONSULTATION"] = 0;
                                DataTable dtCriteria = new DataTable();
                                dtCriteria.Columns.Add("PAT_FIN_ENCOUNTER_ID");
                                dtCriteria.Rows.Add(SelectedEncounterDetails["PAT_FIN_ENCOUNTER_ID"]);
                                if (objEmrShared == null)
                                {
                                    objEmrShared = new MainEMRShared();
                                }
                                DataTable DtEncounterDtls = objEmrShared.GetEMROrdersDetails(dtCriteria, 20); // Fetch EMR_PAT_DTLS_INV_ORDER
                                if (DtEncounterDtls != null && DtEncounterDtls.Rows.Count > 0)
                                {
                                    drDetails["IS_FIRST"] = DtEncounterDtls.Rows[0]["ISNEWCASE"] != DBNull.Value && Convert.ToInt16(DtEncounterDtls.Rows[0]["ISNEWCASE"]) == 0 ? true : false;
                                    drDetails["IS_FREE"] = DtEncounterDtls.Rows[0]["ISNEWCASE"] != DBNull.Value && Convert.ToInt16(DtEncounterDtls.Rows[0]["ISNEWCASE"]) == 3 ? true : false;
                                    dtCriteria.Columns.Add("PROVIDER_ID");
                                    dtCriteria.Columns.Add("INV_MAST_SERVICE_ID");
                                    dtCriteria.Columns.Add("DEPT_ID");
                                    dtCriteria.Columns.Add("MODE");
                                    dtCriteria.Rows[0]["PROVIDER_ID"] = SelectedEncounterDetails["PROVIDER_ID"];
                                    dtCriteria.Rows[0]["INV_MAST_SERVICE_ID"] = DtEncounterDtls.Rows[0]["INV_MAST_SERVICE_ID"];
                                    dtCriteria.Rows[0]["DEPT_ID"] = SelectedEncounterDetails["GEN_DEPARTMENT_ID"];
                                    dtCriteria.Rows[0]["MODE"] = 1;
                                    MainBilling objBilling = new MainBilling();
                                    DataTable dtCONTYPE = objBilling.FetchConsulationServices(dtCriteria);
                                    dtCriteria.Columns.Add("CON_TYPE_ID");
                                    if (dtCONTYPE != null && dtCONTYPE.Rows.Count > 0) // Count will be 0 for FREE
                                        dtCriteria.Rows[0]["CON_TYPE_ID"] = dtCONTYPE.Rows[0]["CON_TYPE_ID"];
                                    DataRow DrEncounterDtls = dtCriteria.Rows[0];
                                    LoadFreedaysFreevisits(DrEncounterDtls, XSD.Tables["BILL_COMMON_DETAILS"]);
                                }
                            }
                        }
                    }
                }
                else // Is_EM_SettingsEnabled is true and 
                {
                    DataRow drDetails = XSD.Tables["BILL_COMMON_DETAILS"].Rows[0];

                    drDetails["ISREFERAL_APPOINTMENT"] = 0;
                    drDetails["FREE_CONSULTATION"] = 0;
                    //drDetails["IS_FIRST"] = drConsulationServices[0]["ISNEWCASE"] != DBNull.Value && Convert.ToInt16(drConsulationServices[0]["ISNEWCASE"]) == 0 ? true : false;
                    //drDetails["IS_FREE"] = drConsulationServices[0]["ISNEWCASE"] != DBNull.Value && Convert.ToInt16(drConsulationServices[0]["ISNEWCASE"]) == 3 ? true : false;
                    var drConsulationServices = from dr in XSD.Tables["INV_PAT_BILLING"].AsEnumerable()
                                                where dr["SERVICE_TYPE"] != DBNull.Value && Convert.ToInt16(dr["SERVICE_TYPE"]) == (int)ServiceType.Consultation
                                                select dr;
                    if (drConsulationServices.Any())
                    {
                        DataRow drConPat;
                        for (int i = 0; i < (drConsulationServices.CopyToDataTable().Rows.Count) - 1; i++)
                        {
                            drConPat = XSD.Tables["CON_PAT_BILLING"].NewRow();
                            XSD.Tables["CON_PAT_BILLING"].Rows.InsertAt(drConPat, i);
                        }
                    }
                    if (drConsulationServices.Any())
                    {
                        int j = 0;
                        int x = -1;
                        if (SelectedProvider != null)
                        {
                            drDetails["PROVIDER_ID"] = SelectedProvider.Row["H_EMP_ID"];             //providerID;
                            drDetails["GEN_MAST_DEPARTMENT_ID"] = SelectedProvider.Row["H_EMP_DEPNAME"];
                            drDetails["DEPARTMENT_NAME"] = SelectedProvider.Row["DEPARTMENT_NAME"];
                            drDetails["PROVIDER_NAME"] = SelectedProvider.Row["EMPLOYEE_NAME"];
                            drDetails["CON_TYPE_NAME"] = ServiceName;
                            drDetails["MRNO"] = PatientInformation != null && PatientInformation.Rows[0]["MRNO"] != DBNull.Value ? PatientInformation.Rows[0]["MRNO"] : Patient != null ? Patient.MRNO : string.Empty;
                        }
                        DataTable DtSelectedEncounterType = drConsulationServices.CopyToDataTable();
                        foreach (DataRow drRow in XSD.Tables["CON_PAT_BILLING"].Rows)
                        {
                            drRow["CON_PAT_BILLING_ID"] = x;
                            drRow["CON_PAT_BILLING_ID_TEMP"] = x;   //Data gets updated from main control
                            drRow["GEN_PAT_BILLING_ID"] = ReadNullableValue(DtSelectedEncounterType.Rows[j]["GEN_PAT_BILLING_ID"]);
                            drRow["GEN_PATIENT_SHARE"] = ReadNullableValue(DtSelectedEncounterType.Rows[j]["GEN_PATIENT_SHARE"]);
                            drRow["PKG_DTLS_PATIENT_SERVICE_ID"] = DBNull.Value;
                            DataTable criteria = new DataTable();
                            criteria.Columns.Add("PROVIDER_ID");
                            criteria.Columns.Add("INV_MAST_SERVICE_ID");
                            criteria.Columns.Add("DEPT_ID");
                            criteria.Columns.Add("MODE");
                            criteria.Rows.Add(drDetails["PROVIDER_ID"], ReadNullableValue(DtSelectedEncounterType.Rows[j]["INV_MAST_SERVICE_ID"]), drDetails["GEN_MAST_DEPARTMENT_ID"], 5);
                            MainBilling objBilling = new MainBilling();
                            DataTable dtEncounter = objBilling.FetchConsulationServices(criteria);
                            if (dtEncounter.KIIsNotNullAndRowCount())
                            {
                                drRow["CON_TYPE_ID"] = dtEncounter.Rows[0]["CON_TYPE_ID"];
                            }
                            drRow["CON_MAST_TYPE_RULE_ID"] = DBNull.Value;
                            drRow["CHARGE_CATEGORY"] = 11;
                            drRow["AMOUNT"] = ReadNullableValue(DtSelectedEncounterType.Rows[j]["AMOUNT"]);
                            drRow["DISCOUNT"] = Math.Abs(ReadNullableValue(DtSelectedEncounterType.Rows[j]["DISCOUNT"]));
                            drRow["DISCOUNT_IN_PERC"] = ReadNullableValue(DtSelectedEncounterType.Rows[j]["DISCOUNT_IN_PERC"]);
                            drRow["MARKUP"] = ReadNullableValue(DtSelectedEncounterType.Rows[j]["MARKUP"]);
                            drRow["MARKUP_IN_PERC"] = ReadNullableValue(DtSelectedEncounterType.Rows[j]["MARKUP_IN_PERC"]);
                            drRow["PKG_MARKUP"] = ReadNullableValue(DtSelectedEncounterType.Rows[j]["PKG_MARKUP"]);
                            drRow["PKG_DISCOUNT"] = ReadNullableValue(DtSelectedEncounterType.Rows[j]["PKG_DISCOUNT"]);
                            //New(If any pbl related to below coding, take corresponding values from drRegConDetails)
                            drRow["SCHEME_MARKUP"] = ReadNullableValue(DtSelectedEncounterType.Rows[j]["SCHEME_MARKUP"]);
                            drRow["SCHEME_DISCOUNT"] = Math.Abs(ReadNullableValue(DtSelectedEncounterType.Rows[j]["SCHEME_DISCOUNT"]));
                            drRow["SCHEME_DISCOUNT_IN_PERC"] = ReadNullableValue(DtSelectedEncounterType.Rows[j]["SCHEME_DISCOUNT_IN_PERC"]);
                            drRow["CO_PAY_AMOUNT"] = DtSelectedEncounterType.Rows[j]["ISNEWCASE"] != DBNull.Value && Convert.ToInt16(DtSelectedEncounterType.Rows[j]["ISNEWCASE"]) == 3 ? 0 : ReadNullableValue(DtSelectedEncounterType.Rows[j]["CO_PAY_AMOUNT"]);
                            drRow["CO_PAY_IN_PER"] = DtSelectedEncounterType.Rows[j]["ISNEWCASE"] != DBNull.Value && Convert.ToInt16(DtSelectedEncounterType.Rows[j]["ISNEWCASE"]) == 3 ? 0 : ReadNullableValue(DtSelectedEncounterType.Rows[j]["CO_PAY_IN_PER"]);
                            drRow["NET_AMOUNT"] = ReadNullableValue(DtSelectedEncounterType.Rows[j]["NET_AMOUNT"]);
                            //}
                            drRow["GEN_AUDIT_ID"] = -1;
                            drRow["PAID_CON_PAT_BILLING_ID"] = DBNull.Value;
                            drRow["GEN_MAST_DEPARTMENT_ID"] = drDetails["GEN_MAST_DEPARTMENT_ID"];
                            drRow["CON_TYPE_NAME"] = drDetails["CON_TYPE_NAME"].ToString();
                            drRow["PATIENT_NAME"] = this.GetPatientName(XSD.Tables["PAT_PATIENT_NAME"]);
                            drRow["PROVIDER_NAME"] = drDetails["PROVIDER_NAME"].ToString();
                            drRow["DEPARTMENT_NAME"] = drDetails["DEPARTMENT_NAME"].ToString();
                            drRow["PROVIDER_ID"] = drDetails["PROVIDER_ID"];
                            drRow["BILL_DATE"] = DateTime.Now;
                            drRow["MRNO"] = drDetails["MRNO"];
                            drRow["VISIT_MODE"] = SelectedVisitMode;
                            drRow["INCO_DTLS_SCHEME_ID"] = SelectedSchemeValue;
                            drRow["GEN_OUTSIDE_PROVIDER_ID"] = DBNull.Value;
                            drRow["GEN_OUTSIDE_HOSPITAL_ID"] = DBNull.Value;
                            drRow["IS_REFERRAL"] = 0;
                            drRow["EMR_PAT_REFERENCE_ID"] = DBNull.Value;
                            drRow["REFERRED_PROVIDER"] = DBNull.Value;
                            drRow["HOSPITAL_SITE_ID"] = CommonData.LoginHospitalSiteID;
                            drRow["ISNEWCASE"] = DtSelectedEncounterType.Rows[j]["ISNEWCASE"];
                            drRow["EMR_PAT_DTLS_INV_ORDER_ID"] = ReadNullableValue(DtSelectedEncounterType.Rows[j]["EMR_PAT_DTLS_INV_ORDER_ID"]);
                            // CHECKING BUG ID 19311     
                            drRow["DEDUCTIBLE"] = DtSelectedEncounterType.Rows[j]["ISNEWCASE"] != DBNull.Value && Convert.ToInt16(DtSelectedEncounterType.Rows[j]["ISNEWCASE"]) == 3 ? 0 : ReadNullableValue(DtSelectedEncounterType.Rows[j]["DEDUCTIBLE"]);
                            drRow["EDITED_STATUS"] = DtSelectedEncounterType.Rows[j]["EDITED_STATUS"];
                            drRow["OVER_RIDING_REASON"] = DtSelectedEncounterType.Rows[j]["OVER_RIDING_REASON"];
                            drRow["APPROVAL_NO"] = DtSelectedEncounterType.Rows[j]["APPROVAL_NO"];
                            drRow["APPROVAL_DATE"] = DtSelectedEncounterType.Rows[j]["APPROVAL_DATE"];
                            drRow["PATIENT_SHARE"] = DtSelectedEncounterType.Rows[j]["PATIENT_SHARE"];
                            if (drRow["DEDUCTIBLE"] != DBNull.Value && Convert.ToDecimal(drRow["DEDUCTIBLE"]) > 0)
                            {
                                drRow["CO_PAY_AMOUNT"] = DBNull.Value;
                                drRow["CO_PAY_IN_PER"] = DBNull.Value;
                            }
                            drRow["INV_MAST_SERVICE_ID"] = DtSelectedEncounterType.Rows[j]["INV_MAST_SERVICE_ID"];
                            drRow["INCO_DTLS_PAT_APPROVAL_ID"] = DtSelectedEncounterType.Rows[j]["INCO_DTLS_PAT_APPROVAL_ID"];
                            //// if (Convert.ToInt16(drConPatBill["ISNEWCASE"]) != (int)ConsultCategory.FreeEncounter)  //--  BB-09072014 
                            if (Convert.ToInt16(SelectedEncounterDetails["ENCOUNTER_MODE"]) != (Int16)VisitMode.IP)
                            {
                                LoadFreedaysFreevisits(drRow, XSD.Tables["BILL_COMMON_DETAILS"]);
                            }
                            if (XSD.Tables["CON_PAT_BILLING"].Columns.Contains("COST_CENTER_ID") && DtSelectedEncounterType.Columns.Contains("COST_CENTER_ID"))
                            {
                                drRow["COST_CENTER_ID"] = DtSelectedEncounterType.Rows[j]["COST_CENTER_ID"];
                            }
                            j++;
                            x--;
                        }
                        DataRow[] drConsulationService = XSD.Tables["INV_PAT_BILLING"].Select("SERVICE_TYPE IS NOT NULL AND SERVICE_TYPE=" + (int)ServiceType.Consultation);
                        for (int i = 0; i < drConsulationService.Length; i++)
                            XSD.Tables["INV_PAT_BILLING"].Rows.Remove(drConsulationService[i]);
                    }
                    else
                    {
                        //DataTable dtSetting = CommonData.GetDefaultSettings(0, "FO_EPISODE_OPEN_PHARMACY_ORDER"); // This Settings is for Opening Episode during Pharmacy Billing.
                        //if (dtSetting != null && dtSetting.Rows.Count > 0 && Convert.ToInt16(dtSetting.Rows[0]["VALUE"]) == 1
                        if (DefaultSettings.Values.FO_EPISODE_OPEN_PHARMACY_ORDER
                           && SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE")
                           && SelectedEncounterDetails["ENCOUNTER_MODE"] != DBNull.Value && Convert.ToInt32(SelectedEncounterDetails["ENCOUNTER_MODE"]) != 2)
                        {
                            DataRow[] drPharmacyServices = XSD.Tables["INV_PAT_BILLING"].Select("SERVICE_TYPE IS NOT NULL AND SERVICE_TYPE=" + (int)ServiceType.Pharmacy);
                            if (drPharmacyServices.Length > 0)
                            {
                                DataRow drBillDetails = XSD.Tables["BILL_COMMON_DETAILS"].Rows[0];
                                if (SelectedProvider != null)
                                {
                                    drBillDetails["PROVIDER_ID"] = SelectedProvider.Row["H_EMP_ID"];             //providerID;
                                    drBillDetails["GEN_MAST_DEPARTMENT_ID"] = SelectedProvider.Row["H_EMP_DEPNAME"];
                                    drBillDetails["DEPARTMENT_NAME"] = SelectedProvider.Row["DEPARTMENT_NAME"];
                                    drBillDetails["PROVIDER_NAME"] = SelectedProvider.Row["EMPLOYEE_NAME"];
                                    drBillDetails["CON_TYPE_NAME"] = ServiceName;
                                    drBillDetails["MRNO"] = PatientInformation != null && PatientInformation.Rows[0]["MRNO"] != DBNull.Value ? PatientInformation.Rows[0]["MRNO"] : Patient != null ? Patient.MRNO : string.Empty;
                                }
                                drBillDetails["ISREFERAL_APPOINTMENT"] = 0;
                                drBillDetails["FREE_CONSULTATION"] = 0;
                                DataTable dtCriteria = new DataTable();
                                dtCriteria.Columns.Add("PAT_FIN_ENCOUNTER_ID");
                                dtCriteria.Rows.Add(SelectedEncounterDetails["PAT_FIN_ENCOUNTER_ID"]);
                                if (objEmrShared == null)
                                {
                                    objEmrShared = new MainEMRShared();
                                }
                                DataTable DtEncounterDtls = objEmrShared.GetEMROrdersDetails(dtCriteria, 20); // Fetch EMR_PAT_DTLS_INV_ORDER
                                if (DtEncounterDtls != null && DtEncounterDtls.Rows.Count > 0)
                                {
                                    drDetails["IS_FIRST"] = DtEncounterDtls.Rows[0]["ISNEWCASE"] != DBNull.Value && Convert.ToInt16(DtEncounterDtls.Rows[0]["ISNEWCASE"]) == 0 ? true : false;
                                    drDetails["IS_FREE"] = DtEncounterDtls.Rows[0]["ISNEWCASE"] != DBNull.Value && Convert.ToInt16(DtEncounterDtls.Rows[0]["ISNEWCASE"]) == 3 ? true : false;
                                    dtCriteria.Columns.Add("PROVIDER_ID");
                                    dtCriteria.Columns.Add("INV_MAST_SERVICE_ID");
                                    dtCriteria.Columns.Add("DEPT_ID");
                                    dtCriteria.Columns.Add("MODE");
                                    dtCriteria.Rows[0]["PROVIDER_ID"] = SelectedEncounterDetails["PROVIDER_ID"];
                                    dtCriteria.Rows[0]["INV_MAST_SERVICE_ID"] = DtEncounterDtls.Rows[0]["INV_MAST_SERVICE_ID"];
                                    dtCriteria.Rows[0]["DEPT_ID"] = SelectedEncounterDetails["GEN_DEPARTMENT_ID"];
                                    dtCriteria.Rows[0]["MODE"] = 1;
                                    MainBilling objBilling = new MainBilling();
                                    DataTable dtCONTYPE = objBilling.FetchConsulationServices(dtCriteria);
                                    dtCriteria.Columns.Add("CON_TYPE_ID");
                                    if (dtCONTYPE != null && dtCONTYPE.Rows.Count > 0) // Count will be 0 for FREE
                                        dtCriteria.Rows[0]["CON_TYPE_ID"] = dtCONTYPE.Rows[0]["CON_TYPE_ID"];
                                    DataRow DrEncounterDtls = dtCriteria.Rows[0];
                                    LoadFreedaysFreevisits(DrEncounterDtls, XSD.Tables["BILL_COMMON_DETAILS"]);
                                }
                            }
                        }


                    }

                    ////
                }
                if (XSD.Tables.Contains("APPT_ALLOCATION") && XSD.Tables["APPT_ALLOCATION"].Rows.Count > 0 && XSD.Tables["APPT_ALLOCATION"].Rows[0]["TOKEN_NO"] != DBNull.Value
                           && XSD.Tables["APPT_ALLOCATION"].Rows[0]["APPT_ALLOCATION_ID"] != DBNull.Value)
                {
                    XSD.Tables["APPT_ALLOCATION"].Rows[0]["TOKEN_NO"] = DBNull.Value;
                    XSD.Tables["APPT_ALLOCATION"].Rows[0]["APPT_ALLOCATION_ID"] = DBNull.Value;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Creates the gen bill discount data.
        /// </summary>
        private void CreateGenBillDiscount(DataSet XSD)
        {
            try
            {
                if (XSD.Tables.Contains("GEN_BILL_DISCOUNT") && XSD.Tables["GEN_BILL_DISCOUNT"].Rows.Count > 0)
                {
                    DataRow drBillDisountNew = XSD.Tables["GEN_BILL_DISCOUNT"].Copy().Rows[0];
                    XSD.Tables["GEN_BILL_DISCOUNT"].Rows.Clear();
                    foreach (DataRow dr in XSD.Tables["GEN_PAT_BILLING"].Rows)
                    {
                        //drBillDisountNew = XSD.Tables["GEN_BILL_DISCOUNT"].NewRow();
                        drBillDisountNew["GEN_PAT_BILLING_ID"] = dr["GEN_PAT_BILLING_ID"];
                        if (dr["SERVICE_TYPE"] != DBNull.Value && Convert.ToInt16(dr["SERVICE_TYPE"]) == (int)ServiceType.Consultation)
                        {
                            decimal discount = (from drCon in XSD.Tables["CON_PAT_BILLING"].AsEnumerable()
                                                where drCon.RowState != DataRowState.Deleted && drCon["DISCOUNT"] != DBNull.Value
                                                select Convert.ToDecimal(drCon["DISCOUNT"])).Sum();
                            drBillDisountNew["DISCOUNT"] = discount < 0 ? discount : discount > 0 ? -discount : 0;
                            decimal markUP = (from drCon in XSD.Tables["CON_PAT_BILLING"].AsEnumerable()
                                              where drCon.RowState != DataRowState.Deleted && drCon["MARKUP"] != DBNull.Value
                                              select Convert.ToDecimal(drCon["MARKUP"])).Sum();
                            drBillDisountNew["MARKUP"] = markUP;
                        }
                        else if (dr["SERVICE_TYPE"] != DBNull.Value && Convert.ToInt16(dr["SERVICE_TYPE"]) == (int)ServiceType.Investigation)
                        {
                            decimal discount = (from drInv in XSD.Tables["INV_PAT_BILLING"].AsEnumerable()
                                                where drInv.RowState != DataRowState.Deleted
                                                && drInv["SERVICE_TYPE"] != DBNull.Value && Convert.ToInt16(drInv["SERVICE_TYPE"]) == (int)ServiceType.Investigation
                                                && drInv["DISCOUNT"] != DBNull.Value
                                                select Convert.ToDecimal(drInv["DISCOUNT"])).Sum();
                            drBillDisountNew["DISCOUNT"] = discount;
                            decimal markUP = (from drInv in XSD.Tables["INV_PAT_BILLING"].AsEnumerable()
                                              where drInv.RowState != DataRowState.Deleted
                                              && drInv["SERVICE_TYPE"] != DBNull.Value && Convert.ToInt16(drInv["SERVICE_TYPE"]) == (int)ServiceType.Investigation
                                              && drInv["MARKUP"] != DBNull.Value
                                              select Convert.ToDecimal(drInv["MARKUP"])).Sum();
                            drBillDisountNew["MARKUP"] = markUP;
                        }
                        else if (dr["SERVICE_TYPE"] != DBNull.Value && Convert.ToInt16(dr["SERVICE_TYPE"]) == (int)ServiceType.Pharmacy)
                        {
                            decimal discount = (from drInv in XSD.Tables["INV_PAT_BILLING"].AsEnumerable()
                                                where drInv.RowState != DataRowState.Deleted
                                                && drInv["SERVICE_TYPE"] != DBNull.Value && Convert.ToInt16(drInv["SERVICE_TYPE"]) == (int)ServiceType.Pharmacy
                                                && drInv["DISCOUNT"] != DBNull.Value
                                                select Convert.ToDecimal(drInv["DISCOUNT"])).Sum();
                            drBillDisountNew["DISCOUNT"] = discount;
                            decimal markUP = (from drInv in XSD.Tables["INV_PAT_BILLING"].AsEnumerable()
                                              where drInv.RowState != DataRowState.Deleted
                                              && drInv["SERVICE_TYPE"] != DBNull.Value && Convert.ToInt16(drInv["SERVICE_TYPE"]) == (int)ServiceType.Pharmacy
                                              && drInv["MARKUP"] != DBNull.Value
                                              select Convert.ToDecimal(drInv["MARKUP"])).Sum();
                            drBillDisountNew["MARKUP"] = markUP;
                        }
                        XSD.Tables["GEN_BILL_DISCOUNT"].Rows.Add(drBillDisountNew.ItemArray);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void CalculateDeductable(int SelectedSpecialityId, string ProviderId, string MRNO)
        {
            long inv_mast_service_id = 0;
            Infologics.Medilogics.CommonShared.BillingMain.MainBillingShared objMainBillingShared = new MainBillingShared();
            DataTable dtCriteria = new DataTable();
            dtCriteria.Columns.Add("ISFROMENCOUNTER", typeof(int));
            dtCriteria.Columns.Add("DEPARTMENT_ID", typeof(Int64));
            dtCriteria.Columns.Add("PROVIDER_ID", typeof(string));
            dtCriteria.Columns.Add("INV_MAST_SERVICE_ID", typeof(Int64));
            dtCriteria.Columns.Add("VISIT_TYPE", typeof(Int32));
            dtCriteria.Columns.Add("INCO_MAST_SCHEME_ID", typeof(Int64));
            dtCriteria.Columns.Add("MODE", typeof(Int32));
            dtCriteria.Rows.Add(1, SelectedSpecialityId, ProviderId, inv_mast_service_id, (int)SelectedVisitMode, SelectedSchemeValue, 0);
            DsDeductCopay = objMainBillingShared.SchemeChargeRuleLimit(dtCriteria);
        }

        private void LoadFreedaysFreevisits(DataRow drConsultationService, DataTable DtBillCommonDetails)
        {
            try
            {
                MainMasterSettings obj = new MainMasterSettings();
                if (SelectedProvider != null)
                {
                    // if (!IsFree && SelectedService != null)
                    {
                        DateTime episodestartdate = System.DateTime.Now;
                        if (Convert.ToInt16(DtBillCommonDetails.Rows[0]["EPISODEBASEDBILLING"]) == 5 && DtBillCommonDetails.Rows[0]["EPISODE_START_DATE"] != DBNull.Value)
                        {
                            episodestartdate = Convert.ToDateTime(DtBillCommonDetails.Rows[0]["EPISODE_START_DATE"]);
                        }
                        DataTable DTCriteria = new DataTable();
                        DTCriteria.Columns.Add("MODE", typeof(Int32));
                        DTCriteria.Columns.Add("INCO_MAST_SCHEME_ID", typeof(Int64));
                        DTCriteria.Columns.Add("INV_MAST_SERVICE_ID", typeof(Int64));
                        DTCriteria.Columns.Add("PROVIDER_ID");
                        DTCriteria.Rows.Add(1, SelectedMastSchemeValue, ReadNullableValue(drConsultationService["INV_MAST_SERVICE_ID"]), SelectedEncounterDetails.Row["PROVIDER_ID"]);
                        DataTable dtEpisodeDuration = obj.FetchEpisodeDuration(DTCriteria);
                        if (dtEpisodeDuration != null && dtEpisodeDuration.Rows.Count > 0)
                        {
                            DtBillCommonDetails.Rows[0]["FREE_DAYS"] = dtEpisodeDuration.Rows[0]["FREE_DAYS"] != DBNull.Value ? Convert.ToInt32(dtEpisodeDuration.Rows[0]["FREE_DAYS"]) : 0;
                            DtBillCommonDetails.Rows[0]["FREE_VISIT_ELIGIBLE"] = dtEpisodeDuration.Rows[0]["FREE_VISIT"] != DBNull.Value ? Convert.ToInt32(dtEpisodeDuration.Rows[0]["FREE_VISIT"]) : 0;
                            if (dtEpisodeDuration.Rows[0]["EPISODE_DAYS"] != DBNull.Value)
                            {
                                DtBillCommonDetails.Rows[0]["EPISODE_END_DATE"] = episodestartdate.AddDays(Convert.ToInt32(dtEpisodeDuration.Rows[0]["EPISODE_DAYS"]) - 1).ToString("dd-MMM-yyy ") + Convert.ToDateTime("23:59").ToString("HH:mm");
                                GetEncounterEndDateBasedOnVisitDays(DtBillCommonDetails, episodestartdate);
                            }
                            else
                            {
                                if (SelectedProviderIDValue != null)
                                {
                                    DataSet DsConTypes = obj.FetchProviderConTypes(Convert.ToString(SelectedEncounterDetails.Row["PROVIDER_ID"]));
                                    if (DsConTypes.Tables.Contains("FETCH_CON_MAST_TYPE_RULE"))
                                    {
                                        //int ConTypeId = Convert.ToInt32(drConsultationService["CON_TYPE_ID"]);
                                        Int64 ConTypeId = drConsultationService["CON_TYPE_ID"] != DBNull.Value ? Convert.ToInt64(drConsultationService["CON_TYPE_ID"]) : -1;
                                        if (ConTypeId != -1)
                                        {
                                            DataTable DtConTypes = DsConTypes.Tables["FETCH_CON_MAST_TYPE_RULE"].Copy();
                                            var resPorvider = DtConTypes.AsEnumerable().Where(row => row["CON_TYPE_ID"] != DBNull.Value && Convert.ToInt64(row["CON_TYPE_ID"]) == ConTypeId);
                                            if (resPorvider.Count() > 0)
                                            {
                                                DataTable dt = resPorvider.CopyToDataTable();
                                                DtBillCommonDetails.Rows[0]["FREE_DAYS"] = Convert.ToInt32(dt.Rows[0]["FREE_DAYS"]);
                                                DtBillCommonDetails.Rows[0]["FREE_VISIT_ELIGIBLE"] = Convert.ToInt32(dt.Rows[0]["FREE_VISIT_NO"]);
                                            }
                                            MainBilling objMainBilling = new MainBilling();
                                            resetPeriod = objMainBilling.FetchResetPeriod(Convert.ToString(SelectedEncounterDetails.Row["PROVIDER_ID"]), 0);
                                            if (resetPeriod == 0)
                                                DtBillCommonDetails.Rows[0]["EPISODE_END_DATE"] = episodestartdate.ToString("dd-MMM-yyyy") + Convert.ToDateTime("23:59").ToString(" HH:mm");
                                            else
                                                DtBillCommonDetails.Rows[0]["EPISODE_END_DATE"] = episodestartdate.Date.AddDays(resetPeriod).AddTicks(-1);
                                            GetEncounterEndDateBasedOnVisitDays(DtBillCommonDetails, episodestartdate);
                                        }
                                        else   // FREE Consultation
                                        {
                                        }
                                    }
                                    else if (SelectedSpecialityValue != null)
                                    {
                                        // if (ProviderId != null)
                                        // {
                                        DataSet DsDeptConTypes = obj.FetchDepartmentConTypes(SelectedSpecialityValue, SelectedProviderIDValue);
                                        if (DsDeptConTypes.Tables.Contains("FETCH_CON_MAST_TYPE_RULE"))
                                        {
                                            // int ConTypeId = Convert.ToInt32(drConsultationService["CON_TYPE_ID"]);
                                            Int64 ConTypeId = drConsultationService["CON_TYPE_ID"] != DBNull.Value ? Convert.ToInt64(drConsultationService["CON_TYPE_ID"]) : -1;
                                            if (ConTypeId != -1)
                                            {
                                                DataTable DtConTypes = DsDeptConTypes.Tables["FETCH_CON_MAST_TYPE_RULE"].Copy();
                                                var resPorvider = DtConTypes.AsEnumerable().Where(row => row["CON_TYPE_ID"] != DBNull.Value && Convert.ToInt64(row["CON_TYPE_ID"]) == ConTypeId);
                                                if (resPorvider.Count() > 0)
                                                {
                                                    DataTable dt = resPorvider.CopyToDataTable();
                                                    DtBillCommonDetails.Rows[0]["FREE_DAYS"] = Convert.ToInt32(dt.Rows[0]["FREE_DAYS"]);
                                                    DtBillCommonDetails.Rows[0]["FREE_VISIT_ELIGIBLE"] = Convert.ToInt32(dt.Rows[0]["FREE_VISIT_NO"]);
                                                    //ServiceDetails = resPorvider.CopyToDataTable();
                                                    //FreeDays = Convert.ToInt32(ServiceDetails.Rows[0]["FREE_DAYS"]);
                                                    //FreeVisits = Convert.ToInt32(ServiceDetails.Rows[0]["FREE_VISIT_NO"]);
                                                    //ConEndDate = DateTime.Now.AddDays(Convert.ToInt32(ServiceDetails.Rows[0]["FREE_DAYS"]));
                                                }
                                                MainBilling objMainBilling = new MainBilling();
                                                // resetPeriod = objMainBilling.FetchResetPeriod(SelectedProviderIDValue, 0);
                                                string DepartmentID = Convert.ToString(SelectedSpecialityValue);
                                                if (!string.IsNullOrEmpty(DepartmentID))
                                                {
                                                    resetPeriod = objMainBilling.FetchResetPeriod(null, Convert.ToInt64(DepartmentID));
                                                }
                                                if (resetPeriod == 0)
                                                    DtBillCommonDetails.Rows[0]["EPISODE_END_DATE"] = episodestartdate.ToString("dd-MMM-yyyy") + Convert.ToDateTime("23:59").ToString(" HH:mm");
                                                else
                                                    DtBillCommonDetails.Rows[0]["EPISODE_END_DATE"] = episodestartdate.Date.AddDays(resetPeriod).AddTicks(-1);
                                                GetEncounterEndDateBasedOnVisitDays(DtBillCommonDetails, episodestartdate);
                                            }
                                            else   // FREE Consultation
                                            {

                                            }
                                        }
                                        // }                                       
                                    }
                                }
                                else
                                {
                                }
                            }
                        }
                    }
                }
                else
                {
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        private void GetEncounterEndDateBasedOnVisitDays(DataTable DtBillCommonDetails, DateTime episodestartdate)
        {
            if (DtBillCommonDetails.Rows[0]["FREE_DAYS"] != DBNull.Value)
            {
                if (Convert.ToInt32(DtBillCommonDetails.Rows[0]["FREE_DAYS"]) == 0)
                    DtBillCommonDetails.Rows[0]["ENCOUNTER_END_DATE"] = episodestartdate.ToString("dd-MMM-yyyy") + Convert.ToDateTime("23:59").ToString(" HH:mm");
                else if (SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_STATUS")
                         && SelectedEncounterDetails.Row["ENCOUNTER_STATUS"] != DBNull.Value && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_STATUS"]) == 1)
                {
                    DateTime EncounterEndDate = System.DateTime.Now;
                    if (SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("START_DATE")
                        && SelectedEncounterDetails.Row["START_DATE"] != DBNull.Value)
                    {
                        EncounterEndDate = Convert.ToDateTime(Convert.ToDateTime(SelectedEncounterDetails.Row["START_DATE"]).AddDays(Convert.ToInt32(DtBillCommonDetails.Rows[0]["FREE_DAYS"]) - 1).ToString("dd-MMM-yyyy") + Convert.ToDateTime("23:59").ToString(" HH:mm"));
                    }
                    else
                    {
                        EncounterEndDate = Convert.ToDateTime(DateTime.Now.AddDays(Convert.ToInt32(DtBillCommonDetails.Rows[0]["FREE_DAYS"]) - 1).ToString("dd-MMM-yyyy") + Convert.ToDateTime("23:59").ToString(" HH:mm"));
                    }
                    if (EncounterEndDate > Convert.ToDateTime(DtBillCommonDetails.Rows[0]["EPISODE_END_DATE"]))
                    {
                        DtBillCommonDetails.Rows[0]["ENCOUNTER_END_DATE"] = DtBillCommonDetails.Rows[0]["EPISODE_END_DATE"];
                    }
                    else
                    {
                        DtBillCommonDetails.Rows[0]["ENCOUNTER_END_DATE"] = EncounterEndDate;
                    }
                }
                else if (SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_STATUS") && SelectedEncounterDetails.Row.Table.Columns.Contains("END_DATE")
                        && SelectedEncounterDetails.Row["ENCOUNTER_STATUS"] != DBNull.Value && SelectedEncounterDetails.Row["END_DATE"] != DBNull.Value
                    && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_STATUS"]) == 0)
                {
                    DtBillCommonDetails.Rows[0]["ENCOUNTER_END_DATE"] = SelectedEncounterDetails.Row["END_DATE"];
                }
            }
        }

        ////private void LoadFreedaysFreevisits(DataRow drConsultationService, DataTable DtBillCommonDetails)
        ////{
        ////    try
        ////    {
        ////        MainMasterSettings obj = new MainMasterSettings();
        ////        if (SelectedProvider != null)
        ////        {
        ////            // if (!IsFree && SelectedService != null)
        ////            {
        ////                DataTable DTCriteria = new DataTable();
        ////                DTCriteria.Columns.Add("MODE", typeof(Int32));
        ////                DTCriteria.Columns.Add("INCO_MAST_SCHEME_ID", typeof(Int32));
        ////                DTCriteria.Columns.Add("INV_MAST_SERVICE_ID", typeof(Int32));
        ////                DTCriteria.Columns.Add("PROVIDER_ID");
        ////                DTCriteria.Rows.Add(1, SelectedMastSchemeValue, ReadNullableValue(drConsultationService["INV_MAST_SERVICE_ID"]), SelectedProvider["H_EMP_ID"]);
        ////                DataTable dtEpisodeDuration = obj.FetchEpisodeDuration(DTCriteria);
        ////                if (dtEpisodeDuration != null && dtEpisodeDuration.Rows.Count > 0)
        ////                {
        ////                    DtBillCommonDetails.Rows[0]["FREE_DAYS"] = dtEpisodeDuration.Rows[0]["FREE_DAYS"] != DBNull.Value ? Convert.ToInt32(dtEpisodeDuration.Rows[0]["FREE_DAYS"]) : 0;
        ////                    DtBillCommonDetails.Rows[0]["FREE_VISIT_ELIGIBLE"] = dtEpisodeDuration.Rows[0]["FREE_VISIT"] != DBNull.Value ? Convert.ToInt32(dtEpisodeDuration.Rows[0]["FREE_VISIT"]) : 0;
        ////                    if (dtEpisodeDuration.Rows[0]["EPISODE_DAYS"] != DBNull.Value)
        ////                    {
        ////                        DtBillCommonDetails.Rows[0]["EPISODE_END_DATE"] = DateTime.Now.AddDays(Convert.ToInt32(dtEpisodeDuration.Rows[0]["EPISODE_DAYS"]) - 1).ToString("dd-MMM-yyy ") + Convert.ToDateTime("23:59").ToString("HH:mm");
        ////                    }
        ////                    else
        ////                    {
        ////                        if (SelectedProviderIDValue != null)
        ////                        {
        ////                            DataSet DsConTypes = obj.FetchProviderConTypes(SelectedProviderIDValue);
        ////                            if (DsConTypes.Tables.Contains("FETCH_CON_MAST_TYPE_RULE"))
        ////                            {
        ////                                int ConTypeId = Convert.ToInt32(drConsultationService["CON_TYPE_ID"]);
        ////                                if (ConTypeId != -1)
        ////                                {
        ////                                    DataTable DtConTypes = DsConTypes.Tables["FETCH_CON_MAST_TYPE_RULE"].Copy();
        ////                                    var resPorvider = DtConTypes.AsEnumerable().Where(row => row["CON_TYPE_ID"] != DBNull.Value && Convert.ToInt32(row["CON_TYPE_ID"]) == ConTypeId);
        ////                                    if (resPorvider.Count() > 0)
        ////                                    {
        ////                                        DataTable dt = resPorvider.CopyToDataTable();
        ////                                        DtBillCommonDetails.Rows[0]["FREE_DAYS"] = Convert.ToInt32(dt.Rows[0]["FREE_DAYS"]);
        ////                                        DtBillCommonDetails.Rows[0]["FREE_VISIT_ELIGIBLE"] = Convert.ToInt32(dt.Rows[0]["FREE_VISIT_NO"]);
        ////                                    }
        ////                                    MainBilling objMainBilling = new MainBilling();
        ////                                    resetPeriod = objMainBilling.FetchResetPeriod(SelectedProviderIDValue, 0);
        ////                                    if (resetPeriod == 0)
        ////                                        DtBillCommonDetails.Rows[0]["EPISODE_END_DATE"] = DateTime.Now.ToString("dd-MMM-yyyy") + Convert.ToDateTime("23:59").ToString(" HH:mm");
        ////                                    else
        ////                                        DtBillCommonDetails.Rows[0]["EPISODE_END_DATE"] = DateTime.Now.Date.AddDays(resetPeriod).AddTicks(-1);
        ////                                }
        ////                                else   // FREE Consultation
        ////                                {
        ////                                }
        ////                            }
        ////                            else if (SelectedSpecialityValue != null)
        ////                            {
        ////                                // if (ProviderId != null)
        ////                                // {
        ////                                DataSet DsDeptConTypes = obj.FetchDepartmentConTypes(SelectedSpecialityValue, SelectedProviderIDValue);
        ////                                if (DsDeptConTypes.Tables.Contains("FETCH_CON_MAST_TYPE_RULE"))
        ////                                {
        ////                                    int ConTypeId = Convert.ToInt32(drConsultationService["CON_TYPE_ID"]);
        ////                                    if (ConTypeId != -1)
        ////                                    {
        ////                                        DataTable DtConTypes = DsDeptConTypes.Tables["FETCH_CON_MAST_TYPE_RULE"].Copy();
        ////                                        var resPorvider = DtConTypes.AsEnumerable().Where(row => row["CON_TYPE_ID"] != DBNull.Value && Convert.ToInt32(row["CON_TYPE_ID"]) == ConTypeId);
        ////                                        if (resPorvider.Count() > 0)
        ////                                        {
        ////                                            DataTable dt = resPorvider.CopyToDataTable();
        ////                                            DtBillCommonDetails.Rows[0]["FREE_DAYS"] = Convert.ToInt32(dt.Rows[0]["FREE_DAYS"]);
        ////                                            DtBillCommonDetails.Rows[0]["FREE_VISIT_ELIGIBLE"] = Convert.ToInt32(dt.Rows[0]["FREE_VISIT_NO"]);
        ////                                            //ServiceDetails = resPorvider.CopyToDataTable();
        ////                                            //FreeDays = Convert.ToInt32(ServiceDetails.Rows[0]["FREE_DAYS"]);
        ////                                            //FreeVisits = Convert.ToInt32(ServiceDetails.Rows[0]["FREE_VISIT_NO"]);
        ////                                            //ConEndDate = DateTime.Now.AddDays(Convert.ToInt32(ServiceDetails.Rows[0]["FREE_DAYS"]));
        ////                                        }
        ////                                        MainBilling objMainBilling = new MainBilling();
        ////                                        // resetPeriod = objMainBilling.FetchResetPeriod(SelectedProviderIDValue, 0);
        ////                                        string DepartmentID = Convert.ToString(SelectedSpecialityValue);
        ////                                        if (!string.IsNullOrEmpty(DepartmentID))
        ////                                        {
        ////                                            resetPeriod = objMainBilling.FetchResetPeriod(null, Convert.ToInt64(DepartmentID));
        ////                                        }
        ////                                        if (resetPeriod == 0)
        ////                                            DtBillCommonDetails.Rows[0]["EPISODE_END_DATE"] = DateTime.Now.ToString("dd-MMM-yyyy") + Convert.ToDateTime("23:59").ToString(" HH:mm");
        ////                                        else
        ////                                            DtBillCommonDetails.Rows[0]["EPISODE_END_DATE"] = DateTime.Now.Date.AddDays(resetPeriod).AddTicks(-1);
        ////                                    }
        ////                                    else   // FREE Consultation
        ////                                    {

        ////                                    }
        ////                                }
        ////                                // }                                       
        ////                            }
        ////                        }
        ////                        else
        ////                        {
        ////                        }
        ////                    }
        ////                }
        ////            }
        ////        }
        ////        else
        ////        {
        ////        }
        ////    }
        ////    catch (Exception)
        ////    {

        ////        throw;
        ////    }

        ////    ////try
        ////    ////{
        ////    ////    MainMasterSettings obj = new MainMasterSettings();
        ////    ////    if (SelectedProvider != null)
        ////    ////    {
        ////    ////        // if (!IsFree && SelectedService != null)
        ////    ////        {
        ////    ////            DataTable DTCriteria = new DataTable();
        ////    ////            DTCriteria.Columns.Add("MODE", typeof(Int32));
        ////    ////            DTCriteria.Columns.Add("INCO_MAST_SCHEME_ID", typeof(Int32));
        ////    ////            DTCriteria.Columns.Add("INV_MAST_SERVICE_ID", typeof(Int32));
        ////    ////            DTCriteria.Columns.Add("PROVIDER_ID");
        ////    ////            DTCriteria.Rows.Add(1, SelectedMastSchemeValue, ReadNullableValue(drConsultationService["INV_MAST_SERVICE_ID"]), SelectedProvider["H_EMP_ID"]);
        ////    ////            DataTable dtEpisodeDuration = obj.FetchEpisodeDuration(DTCriteria);
        ////    ////            if (dtEpisodeDuration != null && dtEpisodeDuration.Rows.Count > 0)
        ////    ////            {
        ////    ////                DtBillCommonDetails.Rows[0]["FREE_DAYS"] = dtEpisodeDuration.Rows[0]["FREE_DAYS"] != DBNull.Value ? Convert.ToInt32(dtEpisodeDuration.Rows[0]["FREE_DAYS"]) : 0;
        ////    ////                DtBillCommonDetails.Rows[0]["FREE_VISIT_ELIGIBLE"] = dtEpisodeDuration.Rows[0]["FREE_VISIT"] != DBNull.Value ? Convert.ToInt32(dtEpisodeDuration.Rows[0]["FREE_VISIT"]) : 0;
        ////    ////                if (dtEpisodeDuration.Rows[0]["EPISODE_DAYS"] != DBNull.Value)
        ////    ////                {
        ////    ////                    DtBillCommonDetails.Rows[0]["EPISODE_END_DATE"] = DateTime.Now.AddDays(Convert.ToInt32(dtEpisodeDuration.Rows[0]["EPISODE_DAYS"]) - 1).ToString("dd-MMM-yyy ") + Convert.ToDateTime("23:59").ToString("HH:mm"); 
        ////    ////                }
        ////    ////                else
        ////    ////                {
        ////    ////                    if (SelectedProviderIDValue != null)
        ////    ////                    {
        ////    ////                        DataSet DsConTypes = obj.FetchProviderConTypes(SelectedProviderIDValue);
        ////    ////                        if (DsConTypes.Tables.Contains("FETCH_CON_MAST_TYPE_RULE"))
        ////    ////                        {
        ////    ////                            int ConTypeId = Convert.ToInt32(drConsultationService["CON_TYPE_ID"]);
        ////    ////                            if (ConTypeId != -1)
        ////    ////                            {
        ////    ////                                DataTable DtConTypes = DsConTypes.Tables["FETCH_CON_MAST_TYPE_RULE"].Copy();
        ////    ////                                var resPorvider = DtConTypes.AsEnumerable().Where(row => row["CON_TYPE_ID"] != DBNull.Value && Convert.ToInt32(row["CON_TYPE_ID"]) == ConTypeId);
        ////    ////                                if (resPorvider.Count() > 0)
        ////    ////                                {
        ////    ////                                    DataTable dt = resPorvider.CopyToDataTable();
        ////    ////                                    DtBillCommonDetails.Rows[0]["FREE_DAYS"] = Convert.ToInt32(dt.Rows[0]["FREE_DAYS"]);
        ////    ////                                    DtBillCommonDetails.Rows[0]["FREE_VISIT_ELIGIBLE"] = Convert.ToInt32(dt.Rows[0]["FREE_VISIT_NO"]);
        ////    ////                                }
        ////    ////                                MainBilling objMainBilling = new MainBilling();
        ////    ////                                resetPeriod = objMainBilling.FetchResetPeriod(SelectedProviderIDValue, 0);
        ////    ////                                DtBillCommonDetails.Rows[0]["EPISODE_END_DATE"] = DateTime.Now.Date.AddDays(resetPeriod).AddTicks(-1);
        ////    ////                            }
        ////    ////                            else   // FREE Consultation
        ////    ////                            {
        ////    ////                            }
        ////    ////                        }
        ////    ////                    }
        ////    ////                    else
        ////    ////                    {
        ////    ////                    }
        ////    ////                }
        ////    ////            }
        ////    ////        }
        ////    ////    }
        ////    ////    else
        ////    ////    {
        ////    ////    }
        ////    ////}
        ////    ////catch (Exception)
        ////    ////{

        ////    ////    throw;
        ////    ////}

        ////}
        /// <summary>
        /// 
        /// </summary>
        /// <param name="drService"></param>
        /// <returns></returns>
        private bool ValidateInsuranceApproval(DataRow drService)
        {
            try
            {
                bool isSuccess = true;
                if (TaskForBilling != null && isTaskBilllingEbabled) //Speed Improve
                {
                    GetInsuranceApprovalDetailsForChecking(1, "", true);
                    do
                    {
                    } while (!TaskForBilling.IsCompleted);
                    TaskForBilling.Dispose();
                } //Speed Improve
                decimal Qty = drService["SERVICE_UTILISATION"] != DBNull.Value ? Convert.ToDecimal(drService["SERVICE_UTILISATION"]) : 1;
                if (SelectedServiceType != (int)ServiceType.Cafeteria && SelectedVisitMode != (int)VisitMode.OPCASH && drService["INV_MAST_SERVICE_ID"] != DBNull.Value
                    && (!drService.Table.Columns.Contains("INCEXLCSTATUS") || drService["INCEXLCSTATUS"] == DBNull.Value || Convert.ToInt16(drService["INCEXLCSTATUS"]) != (int)InclusionExclusionStatus.Exclusion))
                {
                    decimal orderAmount = 0;
                    if ((SelectedServiceType == (int)ServiceType.Consultation || SelectedServiceType == (int)ServiceType.Investigation)
                        && drService["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value)
                    {
                        if (isTaskBilllingEbabled && InsuranceApprovalIncoPatSchemeId > 0) //Speed Improve
                        {
                            Qty = 0;
                            orderAmount = InsuranceApprovalorderAmount; //Speed Improve
                        }
                        else
                        {
                            DataTable dtDtlsCriteria = new DataTable("DTLS_CRITERIA");
                            dtDtlsCriteria.Columns.Add("EMR_PAT_DTLS_INV_ORDER_ID");
                            dtDtlsCriteria.Rows.Add(drService["EMR_PAT_DTLS_INV_ORDER_ID"]);
                            MainEMRShared objEMRShared = new MainEMRShared();
                            DataTable dtPatDtlsInvOrder = objEMRShared.FetchInvOrderDtls(dtDtlsCriteria, 14);
                            if (dtPatDtlsInvOrder.KIIsNotNullAndRowCount())
                            {
                                orderAmount = ((dtPatDtlsInvOrder.Rows[0]["CHARGE_AMOUNT"] != DBNull.Value ? Convert.ToDecimal(dtPatDtlsInvOrder.Rows[0]["CHARGE_AMOUNT"]) : 0)
                                    + (dtPatDtlsInvOrder.Rows[0]["CO_PAY_AMOUNT"] != DBNull.Value ? Convert.ToDecimal(dtPatDtlsInvOrder.Rows[0]["CO_PAY_AMOUNT"]) : 0));
                                Qty = 0;
                            }
                        }

                    }
                    else if (SelectedServiceType == (int)ServiceType.Pharmacy)
                    {
                        if (isTaskBilllingEbabled && InsuranceApprovalIncoPatSchemeId > 0) //Speed Improve
                        {
                            orderAmount = InsuranceApprovalorderAmount;
                        } //Speed Improve
                        else
                        {
                            DataTable dtDtlsCriteria = new DataTable("DTLS_CRITERIA");
                            dtDtlsCriteria.Columns.Add("EMR_PAT_DTLS_PH_ORDER_ID");
                            dtDtlsCriteria.Columns.Add("MODE");
                            dtDtlsCriteria.Rows.Add(drService["EMR_PAT_DTLS_INV_ORDER_ID"], 14);
                            MainEMRShared objEMRShared = new MainEMRShared();
                            DataTable dtPatDtlsInvOrder = objEMRShared.FetchDtlsPHOrderwithCriteriaTable(dtDtlsCriteria);
                            if (dtPatDtlsInvOrder.KIIsNotNullAndRowCount())
                            {
                                orderAmount = ((dtPatDtlsInvOrder.Rows[0]["UNIT_PRICE"] != DBNull.Value ? Convert.ToDecimal(dtPatDtlsInvOrder.Rows[0]["UNIT_PRICE"]) : 0)
                                    + (dtPatDtlsInvOrder.Rows[0]["COPAY_AMOUNT"] != DBNull.Value ? Convert.ToDecimal(dtPatDtlsInvOrder.Rows[0]["COPAY_AMOUNT"]) : 0))
                                    * (dtPatDtlsInvOrder.Rows[0]["TOTAL_QUANTITY"] != DBNull.Value ? Convert.ToDecimal(dtPatDtlsInvOrder.Rows[0]["TOTAL_QUANTITY"]) : 1);
                            }
                        }
                    }
                    DataTable dtEncounter = null;
                    DataTable dtCriteria = null;
                   
                    if (InsuranceApprovalCriteria == null)
                        InsuranceApprovalCriteria = GetInsuranceApprovalStructure();
                    if (InsuranceApprovalCriteria != null && InsuranceApprovalCriteria.Rows.Count > 0)
                        InsuranceApprovalCriteria.Rows.Clear();

                    //Criteria.Columns.Add("BASE_CHARGE_TEMP", typeof(decimal));
                    //Criteria.Columns.Add("NET_AMOUNT_TEMP", typeof(decimal));
                    InsuranceApprovalCriteria.Rows.Add();
                    InsuranceApprovalCriteria.Rows[0]["INV_MAST_SERVICE_ID"] = drService["INV_MAST_SERVICE_ID"];
                    InsuranceApprovalCriteria.Rows[0]["BASE_CHARGE"] = (drService["BASE_CHARGE"] != DBNull.Value ?
                        Convert.ToDecimal(drService["BASE_CHARGE"]) : 0) - orderAmount;
                    InsuranceApprovalCriteria.Rows[0]["NET_AMOUNT"] = (drService["GROSS_AMOUNT"] != DBNull.Value ?
                        Convert.ToDecimal(drService["GROSS_AMOUNT"]) : 0) - orderAmount;
                    InsuranceApprovalCriteria.Rows[0]["QTY"] = Qty;
                    InsuranceApprovalCriteria.Rows[0]["EXCL_TYPE"] = DBNull.Value;
                    InsuranceApprovalCriteria.Rows[0]["ISBILLED"] = 0;
                    InsuranceApprovalCriteria.Rows[0]["INCEXLCSTATUS"] = drService["INCEXLCSTATUS"];
                    if (SelectedServiceType == (int)ServiceType.Pharmacy)
                    {
                        InsuranceApprovalCriteria.Rows[0]["EMR_PAT_DTLS_PH_ORDER_ID"] = drService["EMR_PAT_DTLS_INV_ORDER_ID"];
                    }
                    else
                    {
                        InsuranceApprovalCriteria.Rows[0]["EMR_PAT_DTLS_INV_ORDER_ID"] = drService["EMR_PAT_DTLS_INV_ORDER_ID"];
                    }
                    InsuranceApprovalCriteria.Rows[0]["SERVICE_TYPE"] = drService["SERVICE_TYPE"];
                    //Criteria.Rows[0]["BASE_CHARGE_TEMP"] = drService["BASE_CHARGE"];
                    //Criteria.Rows[0]["NET_AMOUNT_TEMP"] = drService["GROSS_AMOUNT"];

                    // Changes added, after implemented closed encounter billing Changes done Mode= 7 -- Filteration ENCOUNTER_STATUS commented
                    // closed encounter billing - Insurance approval Bug ID-22013
                    if (isTaskBilllingEbabled && InsuranceApprovalIncoPatSchemeId > 0)
                    {
                        InsuranceApprovalCriteria.Rows[0]["PAT_FIN_ENCOUNTER_ID"] = SelectedPatientFinEncounterID;
                        InsuranceApprovalCriteria.Rows[0]["INCO_PATIENT_SCHEME_ID"] = InsuranceApprovalIncoPatSchemeId;
                    }
                    else
                    {
                        dtCriteria = new DataTable("SEARCH_CRITERIA");
                        dtCriteria.Columns.Add("MRNO", typeof(string));
                        dtCriteria.Columns.Add("MODE", typeof(Int16));
                        dtCriteria.Columns.Add("PAT_FIN_ENCOUNTER_ID", typeof(Int64));
                        dtCriteria.Rows.Add(PatientInformation.Rows[0]["MRNO"], 7, SelectedPatientFinEncounterID);
                        MainCommon objCommon = new MainCommon();
                        dtEncounter = objCommon.SelectFinancialEncounter(dtCriteria);
                        if (dtEncounter.KIIsNotNullAndRowCount())
                        {
                            InsuranceApprovalCriteria.Rows[0]["PAT_FIN_ENCOUNTER_ID"] = dtEncounter.Rows[0]["PAT_FIN_ENCOUNTER_ID"];
                            InsuranceApprovalCriteria.Rows[0]["INCO_PATIENT_SCHEME_ID"] = dtEncounter.Rows[0]["INCO_PATIENT_SCHEME_ID"];
                        }
                    }
                    isTaskBilllingEbabled = false;
                    if (BillData.Tables["INV_PAT_BILLING"].Columns.Contains("AMOUNT_AVAILED"))
                    {
                        object sumObject = (from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                            where dr.RowState != DataRowState.Deleted
                                            && dr["INV_MAST_SERVICE_ID"] != DBNull.Value && drService["INV_MAST_SERVICE_ID"] != DBNull.Value
                                            && Convert.ToInt64(dr["INV_MAST_SERVICE_ID"]) != Convert.ToInt64(drService["INV_MAST_SERVICE_ID"])
                                            && dr["AMOUNT_AVAILED"] != DBNull.Value
                                            select Convert.ToDecimal(dr["AMOUNT_AVAILED"])).Sum();
                        InsuranceApprovalCriteria.Rows[0]["TOTAL_AMOUNT_AVAILED"] = (sumObject == DBNull.Value ? 0 : sumObject);
                    }
                    MainBillingShared objBillingShared = new MainBillingShared();
                    DataTable dtIncoPatientVisitLimit = objBillingShared.CheckLimitExceed(InsuranceApprovalCriteria);
                    if (dtIncoPatientVisitLimit.Rows.Count > 0)
                    {
                        bool isApprovalRequired = dtIncoPatientVisitLimit.Rows[0]["APPROVAL_STATUS"] != DBNull.Value && Convert.ToInt16(dtIncoPatientVisitLimit.Rows[0]["APPROVAL_STATUS"]) == -1 ? false : true;
                        if (isApprovalRequired && (SelectedServiceType == (int)ServiceType.Consultation || SelectedServiceType == (int)ServiceType.Investigation || SelectedServiceType == (int)ServiceType.Pharmacy)
                        && drService["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value)
                        {
                            DataTable DtCriteria = new DataTable("SEARCH_CRITERIA");
                            DtCriteria.Columns.Add("MODE");
                            DtCriteria.Columns.Add("EMR_PAT_DTLS_INV_ORDER_ID");
                            DtCriteria.Rows.Add(8, drService["EMR_PAT_DTLS_INV_ORDER_ID"]);
                            MainFOShared ObjFOShared = new MainFOShared();
                            DataTable dtDtlsApproval = ObjFOShared.FetchPatDtlsApproval(DtCriteria);
                            if (dtDtlsApproval.Rows.Count == 0)
                            {
                                drService["APPROVAL_STATUS"] = DBNull.Value;
                                //drService["VALIDATION_STATUS"] = DBNull.Value;
                            }
                            else if (drService["IS_EDITED"] == DBNull.Value)
                            {
                                drService["APPROVAL_STATUS"] = dtIncoPatientVisitLimit.Rows[0]["APPROVAL_STATUS"];
                                drService["VALIDATION_STATUS"] = dtIncoPatientVisitLimit.Rows[0]["VALIDATION_STATUS"];
                            }
                        }
                        else if (drService["IS_EDITED"] == DBNull.Value)
                        {
                            drService["APPROVAL_STATUS"] = dtIncoPatientVisitLimit.Rows[0]["APPROVAL_STATUS"];
                            drService["VALIDATION_STATUS"] = dtIncoPatientVisitLimit.Rows[0]["VALIDATION_STATUS"];
                        }
                        if ((drService["APPROVAL_STATUS"] != DBNull.Value
                            && (Convert.ToInt16(drService["APPROVAL_STATUS"]) == (int)InsuranceRequestStatus.Open
                            || Convert.ToInt16(drService["APPROVAL_STATUS"]) == (int)InsuranceRequestStatus.Post
                            || Convert.ToInt16(drService["APPROVAL_STATUS"]) == (int)InsuranceRequestStatus.Send
                            || Convert.ToInt16(drService["APPROVAL_STATUS"]) == (int)InsuranceRequestStatus.Hold))
                            || (drService["VALIDATION_STATUS"] != DBNull.Value && Convert.ToInt16(drService["VALIDATION_STATUS"]) == -1))
                        {
                            drService["ISSALE"] = false;
                        }
                        if (Convert.ToBoolean(drService["ISSALE"]))
                        {
                            if (dtIncoPatientVisitLimit.Rows[0]["AMOUNT_APPROVED"] != DBNull.Value && dtIncoPatientVisitLimit.Rows[0]["AMOUNT_REQUESTED"] != DBNull.Value
                                && IfNullReturnZero(dtIncoPatientVisitLimit.Rows[0]["AMOUNT_APPROVED"]) < IfNullReturnZero(dtIncoPatientVisitLimit.Rows[0]["AMOUNT_REQUESTED"]))
                            {
                                drService["SPONSOR"] = orderAmount - (IfNullReturnZero(dtIncoPatientVisitLimit.Rows[0]["AMOUNT_REQUESTED"]) -
                                    IfNullReturnZero(IfNullReturnZero(dtIncoPatientVisitLimit.Rows[0]["AMOUNT_APPROVED"])));
                                drService["PATIENT_SHARE"] = orderAmount - IfNullReturnZero(drService["SPONSOR"]);
                            }
                        }
                        if (IfNullReturnZero(drService["APPROVAL_STATUS"]) == (int)Infologics.Medilogics.Enumerators.Insurance.InsuranceRequestStatus.Open
                          && IfNullReturnZero(drService["IS_EDITED"]) != 1
                            && SelectedVisitMode != (int)VisitMode.OPCASH)
                        {
                            drService["PATIENT_SHARE"] = 0;
                            drService["SPONSOR"] = 0;
                        }
                        //1-Need Approval,3-Waiting for approval,5-Approved,6-Rejected
                        drService["INCO_DTLS_PAT_APPROVAL_ID"] = dtIncoPatientVisitLimit.Columns.Contains("INCO_DTLS_PAT_APPROVAL_ID") 
                            ? dtIncoPatientVisitLimit.Rows[0]["INCO_DTLS_PAT_APPROVAL_ID"] : DBNull.Value;
                        drService["AMOUNT_AVAILED"] = InsuranceApprovalCriteria.Rows[0]["AMOUNT_AVAILED"];
                        //if (BillData != null && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount()
                        //    && drService["APPROVAL_STATUS"] != DBNull.Value && Convert.ToInt16(drService["APPROVAL_STATUS"]) == -1 
                        //    && drService["INV_MAST_SERVICE_ID"] != DBNull.Value)
                        //{
                        if (drService["APPROVAL_STATUS"] != DBNull.Value && Convert.ToInt16(drService["APPROVAL_STATUS"]) == -1
                            && drService["INV_MAST_SERVICE_ID"] != DBNull.Value && drService["SALES_ACTUAL_QTY"]!=DBNull.Value)
                        {
                            drService["EDITED_STATUS"] = (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.Excluded;
                            LoadExcludedServiceCharge(Convert.ToInt64(drService["INV_MAST_SERVICE_ID"]), drService, Convert.ToDecimal(drService["SALES_ACTUAL_QTY"]));
                            drService["EDITED_STATUS"] = DBNull.Value;
                            //InclusionToExclusionStatusChange(drService, Convert.ToInt64(drService["INV_MAST_SERVICE_ID"]));
                            //ExclusionToInclusionStatusChange(drService, Convert.ToInt64(drService["INV_MAST_SERVICE_ID"]));
                        }
                    }
                }
                return isSuccess;
            }
            catch (Exception)
            {

                throw;
            }

        }

       
        private void LoadExcludedServiceCharge(long ServiceID, DataRow drService, decimal Qty)
        {
            try
            {
                DataTable dtServiceCharge = null;
                dsCharge = this.GetServiceCharge(ServiceID, drService);
                if (dsCharge != null && dsCharge.Tables["SERVICE_BASE_CHARGE"] != null
                          && dsCharge.Tables["SERVICE_BASE_CHARGE"].Rows.Count > 0)
                {
                    dtServiceCharge = dsCharge.Tables["SERVICE_BASE_CHARGE"];
                }
                if (dtServiceCharge.KIIsNotNullAndRowCount())
                {
                    drService["SCHEME_MARKUP"] = dtServiceCharge.Rows[0]["SCHEME_MARKUP"] != DBNull.Value
                                               ? (Convert.ToDecimal(dtServiceCharge.Rows[0]["SCHEME_MARKUP"]) * Qty) : 0;
                    drService["SCHEME_DISCOUNT_MARKUP"] = dtServiceCharge.Rows[0]["SCHEME_DISCOUNT_MARKUP"] != DBNull.Value
                                               ? (Convert.ToDecimal(dtServiceCharge.Rows[0]["SCHEME_DISCOUNT_MARKUP"]) * Qty) : 0;
                    drService["SCHEME_MARK_DISC_TEMP"] = dtServiceCharge.Rows[0]["SCHEME_DISCOUNT_MARKUP"] != DBNull.Value
                                               ? (Convert.ToDecimal(dtServiceCharge.Rows[0]["SCHEME_DISCOUNT_MARKUP"])) : 0;
                    drService["DISCOUNT_MARKUP"] = dtServiceCharge.Rows[0]["DISCOUNT_MARKUP"] != DBNull.Value
                                               ? (Convert.ToDecimal(dtServiceCharge.Rows[0]["DISCOUNT_MARKUP"]) * Qty) : 0;
                    drService["DISCOUNT_MARKUP_PER_ITEM"] = dtServiceCharge.Rows[0]["DISCOUNT_MARKUP"];
                    drService["AMOUNT_SCHEME"] = dtServiceCharge.Rows[0]["AMOUNT_SCHEME"] != DBNull.Value
                                               ? (Convert.ToDecimal(dtServiceCharge.Rows[0]["DISCOUNT_MARKUP"]) * Qty) : 0;
                    drService["SCHEME_DISCOUNT"] = dtServiceCharge.Rows[0]["SCHEME_DISCOUNT"] != DBNull.Value
                                               ? (Convert.ToDecimal(dtServiceCharge.Rows[0]["SCHEME_DISCOUNT"]) * Qty) : 0;
                    drService["SCHEME_MARKUP_IN_PERC"] = dtServiceCharge.Rows[0]["SCHEME_MARKUP_IN_PERC"];
                    drService["SCHEME_DISCOUNT_IN_PERC"] = dtServiceCharge.Rows[0]["SCHEME_DISCOUNT_IN_PERC"];
                    drService["NET_AMOUNT"] = dtServiceCharge.Rows[0]["NET_AMOUNT"] != DBNull.Value ? (Convert.ToDecimal(dtServiceCharge.Rows[0]["NET_AMOUNT"]) * Qty) : 0;
                    drService["NET"] = Convert.ToDecimal(drService["NET_AMOUNT"]) + Convert.ToDecimal(-1 * IfNullReturnZero(drService["DISCOUNT_MARKUP"]));
                    drService["TOTAL"] = drService["NET_AMOUNT"];
                    drService["GROSS_AMOUNT"] = drService["NET_AMOUNT"];
                    if (Convert.ToBoolean(drService["ISSALE"]))
                    {
                        drService["PATIENT_SHARE"] = IfNullReturnZero(drService["NET_AMOUNT"]);
                    }
                    else
                    {
                        drService["PATIENT_SHARE"] = 0;
                    }
                    drService["SPONSOR"] = 0;
                    drService["CO_PAY_AMOUNT"] = 0;
                    drService["TEMP_COPAY"] = 0;
                    drService["DEDUCTIBLE"] = 0;
                    drService["ACTUAL_COPAY"] = 0;
                }

            }
            catch (Exception)
            {

                throw;
            }
        }


        private string GetPatientName(DataTable dtName)
        {
            StringBuilder strName = new StringBuilder();
            strName.Append(dtName.Rows[0]["FIRST_NAME"]);
            if (dtName.Rows[0]["MIDDLE_NAME"] != DBNull.Value)
            {
                strName.Append(" " + dtName.Rows[0]["MIDDLE_NAME"]);
            }
            if (dtName.Rows[0]["LAST_NAME"] != DBNull.Value)
            {
                strName.Append(" " + dtName.Rows[0]["LAST_NAME"]);
            }
            return strName.ToString();
        }

        private void DosageCalculation(DataRow drData)
        {
            try
            {
                if (drData != null)
                {
                    if (drData["INV_MAST_SERVICE_ID"] != DBNull.Value && dsServiceData != null)
                    {
                        DataRow[] dsService = dsServiceData.Tables["INV_MAST_SERVICE"].Select("PRIMARY_ID=" + drData["INV_MAST_SERVICE_ID"]);
                        if (dsService.Length > 0)
                        {
                            decimal quantity = 1;
                            decimal perdosequantity = 1;
                            decimal totalDispenceUnit = 0;
                            decimal salesActualQty = 1;
                            decimal dose = 1;
                            decimal durationTemp = 1;
                            decimal frequencyval = 1;
                            if (drData["DOSE_VALUE"] != DBNull.Value)
                            {
                                dose = Convert.ToDecimal(drData["DOSE_VALUE"]);
                            }
                            if (dsService[0]["QUANTITY"] != DBNull.Value)
                            {
                                quantity = Convert.ToDecimal(dsService[0]["QUANTITY"]);
                            }
                            if (dsService[0]["PER_DOSE_QUANTITY"] != DBNull.Value)
                            {
                                perdosequantity = Convert.ToDecimal(dsService[0]["PER_DOSE_QUANTITY"]);
                            }
                            if (drData["SALES_ACTUAL_QTY"] != DBNull.Value)
                            {
                                salesActualQty = Convert.ToDecimal(drData["SALES_ACTUAL_QTY"]);
                            }
                            if (IfNullReturnZero(drData["IS_GENERIC_AGAINST"]) == 1)
                            {
                                if (BillData.Tables["PH_PAT_DTLS_ORDER"].KIIsNotNullAndRowCount())
                                {
                                    DataRow[] drRowphDtls = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + drData["INV_MAST_SERVICE_ID"]);
                                    if (drRowphDtls.Length > 0)
                                    {
                                        if (StrFreqHours != string.Empty)
                                        {
                                            drRowphDtls[0]["HOURLY"] = Convert.ToInt64(StrFreqHours);
                                        }
                                        if (!Frequency.KIIsNotNullAndRowCount())
                                        {
                                            //DataTable dtCriteria = new DataTable();
                                            //dtCriteria.Columns.Add("LOOKUP_TYPE");
                                            //dtCriteria.Rows.Add("FREQUENCY");
                                            Frequency = FrequencyTemp;// getValidEmrData(dtCriteria); 
                                        }
                                        if (Convert.ToString(drRowphDtls[0]["FREQUENCY"]) != string.Empty)
                                        {
                                            DataRow[] dr = Frequency.Select("EMR_LOOKUP_ID=" + drRowphDtls[0]["FREQUENCY"]);
                                            if (dr.Length > 0)
                                            {
                                                SelectedFrequency = Frequency.DefaultView[Frequency.Rows.IndexOf(dr[0])];
                                                if (SelectedFrequency != null && Convert.ToString(SelectedFrequency["FIELD6"]) != "-2" &&
                                                    Convert.ToString(SelectedFrequency["FIELD6"]) != "-1")
                                                {
                                                    frequencyval = Convert.ToDecimal(SelectedFrequency["FIELD6"]);
                                                }
                                                else if (Convert.ToString(SelectedFrequency["FIELD6"]) == "-2" && Convert.ToString(SelectedFrequency["FIELD6"]) != "-1"
                                                    && StrFreqHours != null && StrFreqHours != string.Empty)
                                                {
                                                    frequencyval = 24 / Convert.ToDecimal(drRowphDtls[0]["HOURLY"]);
                                                }
                                            }
                                        }
                                        if (drRowphDtls[0]["DURATION_TYPE"] != DBNull.Value)
                                        {
                                            //code changed for live issue...it was unable to type cast timespan into decimal
                                            //switch (Convert.ToInt16(drRowphDtls[0]["DURATION_TYPE"]))
                                            //{
                                            //    case 0: durationTemp = Convert.ToDecimal(durationTemp) * Convert.ToDecimal(drRowphDtls[0]["DURATION"]);
                                            //        break;
                                            //    case 1: durationTemp = Convert.ToDecimal(durationTemp) * Convert.ToDecimal(drRowphDtls[0]["DURATION"]) * 7;
                                            //        break;
                                            //    case 2: durationTemp = Convert.ToDecimal(durationTemp) * Convert.ToDecimal(StartDate.AddMonths(Convert.ToInt16(drRowphDtls[0]["DURATION"])) - StartDate);
                                            //        break;
                                            //    case 5: durationTemp = Convert.ToDecimal(durationTemp) * Convert.ToDecimal(StartDate.AddYears(Convert.ToInt16(drRowphDtls[0]["DURATION"])) - StartDate);
                                            //        break;
                                            //    default:
                                            //        break;
                                            //}
                                            if (Convert.ToInt16(drRowphDtls[0]["DURATION_TYPE"]) != 3)
                                            {
                                                durationTemp = Convert.ToDecimal(GetDurationDays(drRowphDtls[0]));
                                            }
                                        }
                                    }
                                }
                            }
                            totalDispenceUnit = (quantity / perdosequantity) * salesActualQty * dose * durationTemp * frequencyval;
                            if (BillData.Tables.Contains("PH_PAT_DTLS_ORDER") && BillData.Tables["PH_PAT_DTLS_ORDER"].KIIsNotNullAndRowCount())
                            {
                                DataRow[] drPatDtls = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + IfNullReturnZero(drData["INV_MAST_SERVICE_ID"]));
                                if (drPatDtls.Length > 0)
                                {
                                    drPatDtls[0]["TOTAL_DISPENSE_DOSE"] = totalDispenceUnit;
                                    if (StrFreqHours != string.Empty)
                                    {
                                        drPatDtls[0]["HOURLY"] = Convert.ToInt64(StrFreqHours);
                                    }
                                }
                            }
                            CommonShared.EMRMain.MainEMRShared objMainEMRShared = new MainEMRShared();
                            DataTable dtDosage = new DataTable();
                            if (drData["EMR_PAT_DTLS_MEDICATION_ID"] != DBNull.Value)
                            {
                                dtDosage = objMainEMRShared.FetchDosageDetails(drData["EMR_PAT_DTLS_MEDICATION_ID"].ToString());
                                if (!dtDosage.Columns.Contains("IS_SELECTED"))
                                {
                                    dtDosage.Columns.Add("IS_SELECTED", typeof(bool));
                                }
                                dtDosage.TableName = "EMR_PAT_PH_DTLS_DOSAGE";
                                if (dtDosage.KIIsNotNullAndRowCount())
                                {
                                    dtDosage.Rows[0]["TOTAL_DISPENSE_DOSE"] = totalDispenceUnit;
                                    if (!BillData.Tables.Contains("EMR_PAT_PH_DTLS_DOSAGE"))
                                    {
                                        BillData.Tables.Add(dtDosage.Copy());
                                    }
                                    else
                                    {
                                        if (BillData.Tables["EMR_PAT_PH_DTLS_DOSAGE"].Select("EMR_PAT_PH_DTLS_DOSAGE_ID=" + Convert.ToDecimal(dtDosage.Rows[0]["EMR_PAT_PH_DTLS_DOSAGE_ID"])).Length > 0)
                                        {
                                            DataRow dr = BillData.Tables["EMR_PAT_PH_DTLS_DOSAGE"].Select("EMR_PAT_PH_DTLS_DOSAGE_ID=" + Convert.ToDecimal(dtDosage.Rows[0]["EMR_PAT_PH_DTLS_DOSAGE_ID"])).First();
                                            dr["TOTAL_DISPENSE_DOSE"] = totalDispenceUnit;
                                        }
                                        else
                                        {
                                            BillData.Tables["EMR_PAT_PH_DTLS_DOSAGE"].Merge(dtDosage);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private Int64 PhUnitconvertion(Int64 Qty, long ServiceId)
        {
            try
            {
                Int64 ConvertQty = 0;
                if (dsServiceData != null && dsServiceData.Tables["INV_MAST_SERVICE"].KIIsNotNullAndRowCount())
                {
                    DataRow[] drFiltered = null;
                    if (SelectedServiceType == (int)ServiceType.Pharmacy)
                        drFiltered = dsServiceData.Tables["INV_MAST_SERVICE"].Select("PRIMARY_ID=" + Convert.ToDecimal(ServiceId));
                    else if (SelectedServiceType == (int)ServiceType.Investigation)
                    {
                        if (ServiceMedicine.Columns.Contains("PRIMARY_ID"))
                            drFiltered = ServiceMedicine.Select("PRIMARY_ID=" + Convert.ToDecimal(ServiceId));
                        else if (ServiceMedicine.Columns.Contains("INV_MAST_SERVICE_ID"))
                            drFiltered = ServiceMedicine.Select("INV_MAST_SERVICE_ID=" + Convert.ToDecimal(ServiceId));
                    }
                    if (drFiltered.Length > 0)
                    {
                        if (Convert.ToString(drFiltered[0]["QUANTITY_UNIT"]) != Convert.ToString(drFiltered[0]["UNIT_NAME"]) && drFiltered[0]["QUANTITY"] != DBNull.Value)
                        {
                            ConvertQty = (Int64)(Qty / IfNullReturnZero(drFiltered[0]["QUANTITY"]));
                            if (Convert.ToInt64(Qty % IfNullReturnZero(drFiltered[0]["QUANTITY"])) != 0)
                            {
                                ConvertQty++;
                            }
                        }
                        else if (PharamacyUnitSales.KIIsNotNullAndRowCount())
                        {
                            string Unit = string.Empty;
                            if (SelectedVisitModeNew == (int)VisitMode.IP)
                            {
                                Unit = Convert.ToString(drFiltered[0]["IP_UNIT"]);
                            }
                            else
                            {
                                Unit = Convert.ToString(drFiltered[0]["OP_UNIT"]);
                            }
                            DataRow[] drRow = PharamacyUnitSales.Select("TO_UNIT_NAME='" + Convert.ToString(Unit) + "'");
                            if (drRow.Length > 0)
                            {
                                ConvertQty = (Int64)(Qty / IfNullReturnZero(drRow[0]["CONVERSION_FACTOR"]));
                                if (Convert.ToInt64(Qty % IfNullReturnZero(drRow[0]["CONVERSION_FACTOR"])) != 0)
                                {
                                    ConvertQty++;
                                }
                            }
                        }
                        else
                        {
                            return 1;
                        }
                    }
                    else
                    {
                        // return 1; Bug ID 33214     
                        return 0;
                    }
                }
                //return ConvertQty;   //changed due to wrong conversion of qty.
                return Qty;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private Int64 PhUnitconvertion(Int64 Qty, long ServiceId, DataRow drEmrOrder)
        {
            try
            {
                Int64 ConvertQty = 1;
                if (dsServiceData.Tables["INV_MAST_SERVICE"].KIIsNotNullAndRowCount() && drEmrOrder != null)
                {
                    DataRow[] drFiltered = dsServiceData.Tables["INV_MAST_SERVICE"].Select("PRIMARY_ID=" + Convert.ToDecimal(ServiceId));
                    if (drFiltered.Length > 0)
                    {
                        if (!string.IsNullOrEmpty(drEmrOrder["QUANTITY_UNIT"].ToString()) && Convert.ToString(drEmrOrder["QUANTITY_UNIT"]) == Convert.ToString(drFiltered[0]["QUANTITY_UNIT"]) &&
                            Convert.ToString(drFiltered[0]["QUANTITY_UNIT"]) != Convert.ToString(drFiltered[0]["UNIT_NAME"]) && drFiltered[0]["QUANTITY"] != DBNull.Value)
                        {
                            ConvertQty = (Int64)(Qty / IfNullReturnZero(drFiltered[0]["QUANTITY"]));
                            if (Convert.ToInt64(Qty % IfNullReturnZero(drFiltered[0]["QUANTITY"])) != 0)
                            {
                                ConvertQty++;
                            }
                        }
                        else if (PharamacyUnitSales.KIIsNotNullAndRowCount() && !string.IsNullOrEmpty(drEmrOrder["QUANTITY_UNIT"].ToString()))
                        {
                            DataRow[] drRow = PharamacyUnitSales.Select("TO_UNIT_NAME='" + Convert.ToString(drEmrOrder["QUANTITY_UNIT"]) + "'");
                            if (drRow.Length > 0)
                            {
                                ConvertQty = (Int64)(Qty / IfNullReturnZero(drRow[0]["CONVERSION_FACTOR"]));
                                if (Convert.ToInt64(Qty % IfNullReturnZero(drRow[0]["CONVERSION_FACTOR"])) != 0)
                                {
                                    ConvertQty++;
                                }
                            }
                        }
                    }
                }
                //return ConvertQty;   //changed due to wrong conversion of qty.
                return Qty;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool FindServiceAdded(long ServiceID, string Batch, int UniqNo)
        {
            bool IsAdded = false;
            DataRow[] drItems = null;
            if (SelectedServiceType == (int)ServiceType.Pharmacy && BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0 && Batch != string.Empty)
            {
                if (EditService != null)
                {
                    IsExists = false;
                    drItems = BillData.Tables["INV_PAT_BILLING"].Select
                    ("INV_MAST_SERVICE_ID=" + ServiceID + " AND BATCHNO<>'" + EditService["BATCHNO"] + "' AND BATCHNO='" + Batch + "'" + "AND SL_NO=" + UniqNo);
                    if (drItems.Length == 0)//Select 
                    {
                        if (EditService["BATCHNO"].ToString() == Batch)
                        {
                            drItems = BillData.Tables["INV_PAT_BILLING"].Select("INV_MAST_SERVICE_ID=" + ServiceID + " AND BATCHNO='" + Batch + "'" + "AND SL_NO=" + UniqNo);
                        }
                        else
                        {
                            drItems = BillData.Tables["INV_PAT_BILLING"].Select("INV_MAST_SERVICE_ID=" + ServiceID + " AND BATCHNO='" + EditService["BATCHNO"] + "'" + "AND SL_NO=" + UniqNo);
                        }
                    }
                    else
                    {
                        IsExists = true;
                    }
                }
                else
                {
                    drItems = BillData.Tables["INV_PAT_BILLING"].Select("INV_MAST_SERVICE_ID=" + ServiceID + " AND BATCHNO='" + Batch + "'" + "AND SL_NO=" + UniqNo);
                }
            }
            else if (SelectedServiceType == (int)ServiceType.Pharmacy && BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0 && Batch == string.Empty)
            {
                drItems = BillData.Tables["INV_PAT_BILLING"].Select("INV_MAST_SERVICE_ID=" + ServiceID + "AND SL_NO=" + UniqNo);
            }
            if (drItems != null && drItems.Length > 0)
            {
                _FindService = drItems[0];
                IsAdded = true;// IsQtyEditable ? false : true;
            }
            return IsAdded;
        }

        #region OverRiding

        private void Executed_ExcltoIncl(object sender, ExecutedRoutedEventArgs e)
        {
            Controlvisible = true;
            try
            {

                DataRowView dr = (DataRowView)e.Parameter;
                if (dr != null && deleteValidation())
                {
                    isEdited = true;
                    long ServiceId = Int64.MinValue;
                    if (dr != null && dr.Row.Table.Columns.Contains("PRIMARY_ID") && dr["PRIMARY_ID"] != DBNull.Value)
                    {
                        ServiceId = Convert.ToInt64(dr["PRIMARY_ID"]);
                    }
                    else
                    {
                        ServiceId = Convert.ToInt64(dr["INV_MAST_SERVICE_ID"]);
                    }
                    //DataTable dtGenSetting = CommonData.GetDefaultSettings(0, "INCLUDE_SERVICE_TO_INSURANCE");
                    bool hasPrivilege = CommonData.CheckPrivilege("FO_BILLING_EXCL_TO_INCL");
                    if (hasPrivilege)
                    {
                        ReasonforOverRiding();
                        if (AllergyRemarks != string.Empty)
                        {
                            if (SelectedVisitMode != VisitMode.OPCASH &&
                               (IfNullReturnZero(dr["INCEXLCSTATUS"]) == (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion
                               || (dr["APPROVAL_STATUS"] != DBNull.Value && (Convert.ToInt16(dr["APPROVAL_STATUS"]) == -1 || Convert.ToInt16(dr["APPROVAL_STATUS"]) == (int)InsuranceRequestStatus.Reject))))
                            {
                                ExclusionToInclusionStatusChange(dr.Row, ServiceId);
                                if (dr.Row.Table.Columns.Contains("CONSUMPTION_STATUS") && IfNullReturnZero(dr["CONSUMPTION_STATUS"]) == 1)
                                {
                                    dr["ISSALE"] = 1;
                                    //CalculateMaxMinCopay();
                                    //CalculateServiceTotal();
                                }
                                CalculateMaxMinCopay();
                                CalculateServiceTotal();
                            }
                        }
                    }
                    else
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                              "User dont have privilege", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        AllergyRemarks = string.Empty;
                        ApprovalNo = string.Empty;
                        SelectedDate = DateTime.Now;
                    }
                    isEdited = false;
                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                Controlvisible = false;
            }
        }

        private void ExclusionToInclusionStatusChange(DataRow dr, long ServiceId)
        {
            Controlvisible = true;
            string str = string.Empty;
            Service = dr;
            if (dr["CPT_CODE"] != DBNull.Value)
            {
                str = Convert.ToString(dr["CPT_CODE"]);
            }
            dr["INCEXLCSTATUS"] = 1;
            dr["IS_EDITED"] = 1;
            dr["EDITED_STATUS"] = (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.ExclusiontoInclusion;
            dr["OVER_RIDING_REASON"] = AllergyRemarks;
            dr["APPROVAL_NO"] = ApprovalNo;
            dr["APPROVAL_DATE"] = SelectedDate;
            if (SelectedServiceType == (int)ServiceType.Investigation && dr.Table.Columns.Contains("INV_PARENT_CATEGORY_ID") && IfNullReturnZero(dr["INV_PARENT_CATEGORY_ID"]) == 5)
            {
                isPharmacyInServiceBilling = true;
            }
            LoadServiceChargeDetails(ServiceId, dr);
            isPharmacyInServiceBilling = false;
            dr["CPT_CODE"] = str;
            dr["GEN_PATIENT_SHARE"] = 0;
            dr["APPROVAL_STATUS"] = DBNull.Value; 
            isEdited = false;
            AllergyRemarks = string.Empty;
            ApprovalNo = string.Empty;
            SelectedDate = DateTime.Now;
            CalculateServiceTotal();
            if (!isERCredit)
            {
                ToBeCollected = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                    .Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]))
                    .Select(x => IfNullReturnZero(x["PATIENT_SHARE"])).Sum();
            }
            TotalAmount = (from drRow in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                           where drRow.RowState != DataRowState.Deleted && drRow["NET"] != DBNull.Value &&
                           drRow["ISSALE"] != DBNull.Value && Convert.ToBoolean(drRow["ISSALE"]) == true
                           select Convert.ToDecimal(drRow["NET"])).Sum();
            TotalNet = (from drNet in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                        where drNet.RowState != DataRowState.Deleted && drNet["NET_AMOUNT"] != DBNull.Value &&
                       drNet["ISSALE"] != DBNull.Value && Convert.ToBoolean(drNet["ISSALE"]) == true
                        select Convert.ToDecimal(drNet["NET_AMOUNT"])).Sum();
            Controlvisible = false;
            isMultipleServiceChangeBlock = 3; //Speed Improve
            ClearService();
            isMultipleServiceChangeBlock = 0; //Speed Improve
        }

        private void Executed_IncltoExcl(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                Controlvisible = false;
                DataRowView dr = (DataRowView)e.Parameter;
                if (dr != null && deleteValidation())
                {
                    isEdited = true;
                    long ServiceId = Int64.MinValue;
                    if (dr != null && dr.Row.Table.Columns.Contains("PRIMARY_ID") && dr["PRIMARY_ID"] != DBNull.Value)
                    {
                        ServiceId = Convert.ToInt64(dr["PRIMARY_ID"]);
                    }
                    else
                    {
                        ServiceId = Convert.ToInt64(dr["INV_MAST_SERVICE_ID"]);
                    }
                    //DataTable dtGenSetting = CommonData.GetDefaultSettings(0, "INCLUDE_SERVICE_TO_INSURANCE");
                    bool hasPrivilege = CommonData.CheckPrivilege("FO_BILLING_INCL_TO_EXCL");
                    if (hasPrivilege)
                    {
                        ReasonforOverRiding();
                        if (AllergyRemarks != string.Empty)
                        {
                            if (SelectedVisitMode != VisitMode.OPCASH &&
                               IfNullReturnZero(dr["INCEXLCSTATUS"]) == (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Inclusion)
                            {
                                InclusionToExclusionStatusChange(dr.Row, ServiceId);
                                dr.Row["IS_APPROVED"] = 1;
                                dr.Row["IS_APPROVED_ENABLE"] = 1;
                                if (Convert.ToInt32(dr.Row["SERVICE_TYPE"]) == (Int32)ServiceType.Pharmacy && Convert.ToInt16(dr.Row["CONSUMPTION_STATUS"]) == 1) // bug ID :31836
                                {
                                    dr.Row["ISSALE"] = true;
                                    //CalculateMaxMinCopay();
                                }
                                CalculateMaxMinCopay();
                            }
                        }
                    }
                    else
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                              "User dont have privilege", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        AllergyRemarks = string.Empty;
                        ApprovalNo = string.Empty;
                        SelectedDate = DateTime.Now;
                    }
                    isEdited = false;
                }
                //Commented for bugid 24520
                //Controlvisible = true;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void InclusionToExclusionStatusChange(DataRow dr, long ServiceId)
        {
            Controlvisible = false;
            string str = string.Empty;
            Service = dr;
            if (dr["CPT_CODE"] != DBNull.Value)
            {
                str = Convert.ToString(dr["CPT_CODE"]);
            }
            dr["INCEXLCSTATUS"] = 0;
            dr["IS_EDITED"] = 1;
            dr["EDITED_STATUS"] = (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.InclusiontoExclusion;
            dr["OVER_RIDING_REASON"] = AllergyRemarks;
            dr["DISCOUNT"] = 0;
            dr["CO_PAY_AMOUNT"] = 0;
            dr["SCHEME_DISCOUNT"] = 0;
            dr["DEDUCTIBLE"] = 0;
            if (SelectedServiceType == (int)ServiceType.Investigation && dr.Table.Columns.Contains("INV_PARENT_CATEGORY_ID")
               && Convert.ToInt16(IfNullReturnZero(dr["INV_PARENT_CATEGORY_ID"])) == (int)BaseCategory.Pharmacy)
                isPharmacyInServiceBilling = true; // Bug ID: 32098
            LoadServiceChargeDetails(ServiceId, dr);            
            dr["DISCOUNT"] = 0;
            dr["CO_PAY_AMOUNT"] = 0;
            dr["SCHEME_DISCOUNT"] = 0;
            dr["DEDUCTIBLE"] = 0;
            dr["CPT_CODE"] = str;
            dr["TOPUP_PAYER_ID"] = DBNull.Value;
            dr["TOPUP_AMOUNT"] = DBNull.Value;
            //Already assigned inside- investigationServicecharge Details - BugID -32697
            //dr["NET"] = IfNullReturnZero(dr["NET_AMOUNT"]);//Commented for Excluded/selfpay amount calculatuion with default scheme
            //dr["NET_AMOUNT"] = IfNullReturnZero(dr["AMOUNT"]);// *IfNullReturnZero(dr["QTY"]);//Commented for Excluded/selfpay amount calculatuion with default scheme
            dr["APPROVAL_STATUS"] = DBNull.Value;
            isEdited = false;
            AllergyRemarks = string.Empty;
            ApprovalNo = string.Empty;
            SelectedDate = DateTime.Now;
            CalculateServiceTotal();
            if (!isERCredit)
            {
                ToBeCollected = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                     .Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]))
                     .Select(x => IfNullReturnZero(x["PATIENT_SHARE"])).Sum();
            }
            TotalAmount = (from drRow in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                           where drRow.RowState != DataRowState.Deleted && drRow["NET"] != DBNull.Value &&
                           drRow["ISSALE"] != DBNull.Value && Convert.ToBoolean(drRow["ISSALE"]) == true
                           select Convert.ToDecimal(drRow["NET"])).Sum();
            TotalNet = (from drNet in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                        where drNet.RowState != DataRowState.Deleted && drNet["NET_AMOUNT"] != DBNull.Value &&
                       drNet["ISSALE"] != DBNull.Value && Convert.ToBoolean(drNet["ISSALE"]) == true
                        select Convert.ToDecimal(drNet["NET_AMOUNT"])).Sum();
            isMultipleServiceChangeBlock = 3;
            ClearService();
            isMultipleServiceChangeBlock = 0;
        }

        private void Executed_Needtoself(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                Controlvisible = false;
                DataRowView dr = (DataRowView)e.Parameter;
                if (dr != null && deleteValidation())
                {
                    long ServiceId = Int64.MinValue;
                    if (dr != null && dr.Row.Table.Columns.Contains("PRIMARY_ID") && dr["PRIMARY_ID"] != DBNull.Value)
                    {
                        ServiceId = Convert.ToInt64(dr["PRIMARY_ID"]);
                    }
                    else
                    {
                        ServiceId = Convert.ToInt64(dr["INV_MAST_SERVICE_ID"]);
                    }
                    //DataTable dtGenSetting = CommonData.GetDefaultSettings(0, "INCLUDE_SERVICE_TO_INSURANCE");
                    bool hasPrivilege = CommonData.CheckPrivilege("FO_BILLING_NEED_TO_SELF");
                    if (hasPrivilege)
                    {
                        if (SelectedVisitMode != VisitMode.OPCASH)
                        {
                            isEdited = true;
                            ReasonforOverRiding();
                            if (AllergyRemarks != string.Empty)
                            {
                                Service = dr.Row;
                                dr["PATIENT_SHARE"] = 0;//IfNullReturnZero(dr["SPONSOR"]) + IfNullReturnZero(dr["PATIENT_SHARE"]);
                                dr["SPONSOR"] = 0;
                                //dr["NET_AMOUNT"] = dr["PATIENT_SHARE"];
                                //dr["NET"] = dr["PATIENT_SHARE"];
                                dr["CO_PAY_AMOUNT"] = 0;
                                dr["DEDUCTIBLE"] = 0;
                                dr["IS_EDITED"] = 1;
                                dr["EDITED_STATUS"] = (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.Needapprovaltoselfpay;
                                //COMMENTED BY Ubythulla as told by sreeja no need to consider base charge in case of need aproval to self. need to consider NET_AMOUNT on 30-06-2014
                                //dr["PATIENT_SHARE"] = IfNullReturnZero(dr["BASE_CHARGE"]) * IfNullReturnZero(dr["QTY"]);
                                LoadServiceChargeDetails(ServiceId, dr.Row);
                                dr["PATIENT_SHARE"] = IfNullReturnZero(dr["NET_AMOUNT"]);
                                dr["CO_PAY_IN_PER"] = 0;
                                dr["OVER_RIDING_REASON"] = AllergyRemarks;
                                dr["SCHEME_DISCOUNT"] = 0;
                                //dr["GEN_PATIENT_SHARE"] = IfNullReturnZero(dr["BASE_CHARGE"]) * IfNullReturnZero(dr["QTY"]);//Commented for Excluded/selfpay amount calculatuion with default scheme
                                dr["GEN_PATIENT_SHARE"] = IfNullReturnZero(dr["NET_AMOUNT"]); 
                                AllergyRemarks = string.Empty;
                                ApprovalNo = string.Empty;
                                SelectedDate = DateTime.Now;
                                isEdited = false;
                                if (dr["SERVICE_TYPE"] != DBNull.Value && Convert.ToInt16(dr["SERVICE_TYPE"]) == (int)ServiceType.Consultation)
                                {
                                    dr["ISSALE"] = true;
                                }
                                if (!isERCredit)
                                {
                                    ToBeCollected = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                       .Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]))
                                       .Select(x => IfNullReturnZero(x["PATIENT_SHARE"])).Sum();
                                }
                                TotalAmount = (from drRow in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                               where drRow.RowState != DataRowState.Deleted && drRow["NET"] != DBNull.Value &&
                                               drRow["ISSALE"] != DBNull.Value && Convert.ToBoolean(drRow["ISSALE"]) == true
                                               select Convert.ToDecimal(drRow["NET"])).Sum();
                                TotalNet = (from drNet in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                            where drNet.RowState != DataRowState.Deleted && drNet["NET_AMOUNT"] != DBNull.Value &&
                                           drNet["ISSALE"] != DBNull.Value && Convert.ToBoolean(drNet["ISSALE"]) == true
                                            select Convert.ToDecimal(drNet["NET_AMOUNT"])).Sum();
                                SelectedItemServiceType = Convert.ToInt16(dr["SERVICE_TYPE"]);
                                CalculateServiceTotal();
                            }
                            isEdited = false;
                        }
                    }
                    else
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                              "User dont have privilege", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Executed_WaitingtoSelf(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                DataRowView dr = (DataRowView)e.Parameter;
                if (dr != null && deleteValidation())
                {
                    //DataTable dtGenSetting = CommonData.GetDefaultSettings(0, "INCLUDE_SERVICE_TO_INSURANCE");
                    long ServiceId = Int64.MinValue;
                    if (dr != null && dr.Row.Table.Columns.Contains("PRIMARY_ID") && dr["PRIMARY_ID"] != DBNull.Value)
                    {
                        ServiceId = Convert.ToInt64(dr["PRIMARY_ID"]);
                    }
                    else
                    {
                        ServiceId = Convert.ToInt64(dr["INV_MAST_SERVICE_ID"]);
                    }
                    bool hasPrivilege = CommonData.CheckPrivilege("FO_BILLING_WAIT_TO_SELF");
                    if (hasPrivilege)
                    {
                        if (SelectedVisitMode != VisitMode.OPCASH)
                        {
                            isEdited = true;
                            ReasonforOverRiding();
                            if (AllergyRemarks != string.Empty)
                            {
                                Service = dr.Row;
                                dr["PATIENT_SHARE"] = 0;
                                dr["CO_PAY_AMOUNT"] = 0;
                                dr["SPONSOR"] = 0;
                                dr["IS_EDITED"] = 1;
                                dr["DEDUCTIBLE"] = 0;
                                //dr["NET_AMOUNT"] = dr["PATIENT_SHARE"];
                                //dr["NET"] = dr["PATIENT_SHARE"];
                                dr["CO_PAY_IN_PER"] = 0;
                                dr["EDITED_STATUS"] = (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.Waitingforapprovaltoselfpay;
                                //COMMENTED BY Ubythulla as told by sreeja no need to consider base charge in case of waiting to self. need to consider NET_AMOUNT on 30-06-2014
                                //dr["PATIENT_SHARE"] = IfNullReturnZero(dr["BASE_CHARGE"]) * IfNullReturnZero(dr["QTY"]);
                                LoadServiceChargeDetails(ServiceId, dr.Row);
                                dr["PATIENT_SHARE"] = IfNullReturnZero(dr["NET_AMOUNT"]);
                                dr["OVER_RIDING_REASON"] = AllergyRemarks;
                                dr["APPROVAL_NO"] = ApprovalNo;
                                dr["APPROVAL_DATE"] = SelectedDate;
                                dr["SCHEME_DISCOUNT"] = 0;
                                //dr["GEN_PATIENT_SHARE"] = IfNullReturnZero(dr["BASE_CHARGE"]) * IfNullReturnZero(dr["QTY"]); //Commented for Excluded/selfpay amount calculatuion with default scheme
                                dr["GEN_PATIENT_SHARE"] = IfNullReturnZero(dr["NET_AMOUNT"]);
                                AllergyRemarks = string.Empty;
                                ApprovalNo = string.Empty;
                                SelectedDate = DateTime.Now;
                                isEdited = false;
                                if (dr["SERVICE_TYPE"] != DBNull.Value && Convert.ToInt16(dr["SERVICE_TYPE"]) == (int)ServiceType.Consultation)
                                {
                                    dr["ISSALE"] = true;
                                }
                                if (!isERCredit)
                                {
                                    ToBeCollected = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                        .Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]))
                                        .Select(x => IfNullReturnZero(x["PATIENT_SHARE"])).Sum();
                                }
                                TotalAmount = (from drRow in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                               where drRow.RowState != DataRowState.Deleted && drRow["NET"] != DBNull.Value &&
                                               drRow["ISSALE"] != DBNull.Value && Convert.ToBoolean(drRow["ISSALE"]) == true
                                               select Convert.ToDecimal(drRow["NET"])).Sum();
                                TotalNet = (from drNet in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                            where drNet.RowState != DataRowState.Deleted && drNet["NET_AMOUNT"] != DBNull.Value &&
                                           drNet["ISSALE"] != DBNull.Value && Convert.ToBoolean(drNet["ISSALE"]) == true
                                            select Convert.ToDecimal(drNet["NET_AMOUNT"])).Sum();
                                SelectedItemServiceType = Convert.ToInt16(dr["SERVICE_TYPE"]);
                                CalculateServiceTotal();
                            }
                            isEdited = false;
                        }
                    }
                    else
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                              "User dont have privilege", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Executed_NeedToIncl(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                Controlvisible = true;
                DataRowView dr = (DataRowView)e.Parameter;
                if (dr != null && deleteValidation())
                {
                    isEdited = true;
                    long ServiceId = Int64.MinValue;
                    if (dr != null && dr.Row.Table.Columns.Contains("PRIMARY_ID") && dr["PRIMARY_ID"] != DBNull.Value)
                    {
                        ServiceId = Convert.ToInt64(dr["PRIMARY_ID"]);
                    }
                    else
                    {
                        ServiceId = Convert.ToInt64(dr["INV_MAST_SERVICE_ID"]);
                    }
                    //DataTable dtGenSetting = CommonData.GetDefaultSettings(0, "INCLUDE_SERVICE_TO_INSURANCE");
                    bool hasPrivilege = CommonData.CheckPrivilege("FO_BILLING_NEED_TO_INCL");
                    if (hasPrivilege)
                    {
                        ReasonforOverRiding();
                        if (AllergyRemarks != string.Empty)
                        {
                            if (SelectedVisitMode != VisitMode.OPCASH)
                            {
                                string str = string.Empty;
                                Service = dr.Row;
                                if (dr["CPT_CODE"] != DBNull.Value)
                                {
                                    str = Convert.ToString(dr["CPT_CODE"]);
                                }
                                dr["INCEXLCSTATUS"] = 1;
                                dr["IS_EDITED"] = 1;
                                dr["EDITED_STATUS"] = (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.NeedapprovaltoInclusion;
                                dr["OVER_RIDING_REASON"] = AllergyRemarks;
                                dr["APPROVAL_STATUS"] = DBNull.Value;
                                dr["APPROVAL_NO"] = ApprovalNo;
                                dr["APPROVAL_DATE"] = SelectedDate;
                                LoadServiceChargeDetails(ServiceId, dr.Row);
                                dr["CPT_CODE"] = str;
                                dr["GEN_PATIENT_SHARE"] = 0;
                                isEdited = false;
                                AllergyRemarks = string.Empty;
                                AllergyRemarks = string.Empty;
                                ApprovalNo = string.Empty;
                                CalculateServiceTotal();
                                if (!isERCredit)
                                {
                                    ToBeCollected = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                        .Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]))
                                        .Select(x => IfNullReturnZero(x["PATIENT_SHARE"])).Sum();
                                }
                                TotalAmount = (from drRow in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                               where drRow.RowState != DataRowState.Deleted && drRow["NET"] != DBNull.Value &&
                                               drRow["ISSALE"] != DBNull.Value && Convert.ToBoolean(drRow["ISSALE"]) == true
                                               select Convert.ToDecimal(drRow["NET"])).Sum();
                                TotalNet = (from drNet in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                            where drNet.RowState != DataRowState.Deleted && drNet["NET_AMOUNT"] != DBNull.Value &&
                                           drNet["ISSALE"] != DBNull.Value && Convert.ToBoolean(drNet["ISSALE"]) == true
                                            select Convert.ToDecimal(drNet["NET_AMOUNT"])).Sum();
                            }
                        }
                    }
                    else
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                              "User dont have privilege", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        AllergyRemarks = string.Empty;
                        ApprovalNo = string.Empty;
                        SelectedDate = DateTime.Now;
                    }
                    isEdited = false;
                }
            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                Controlvisible = false;
            }
        }

        private void Executed_WaitToIncl(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                Controlvisible = true;
                DataRowView dr = (DataRowView)e.Parameter;
                if (dr != null && deleteValidation())
                {
                    isEdited = true;
                    long ServiceId = Int64.MinValue;
                    if (dr != null && dr.Row.Table.Columns.Contains("PRIMARY_ID") && dr["PRIMARY_ID"] != DBNull.Value)
                    {
                        ServiceId = Convert.ToInt64(dr["PRIMARY_ID"]);
                    }
                    else
                    {
                        ServiceId = Convert.ToInt64(dr["INV_MAST_SERVICE_ID"]);
                    }
                    //DataTable dtGenSetting = CommonData.GetDefaultSettings(0, "INCLUDE_SERVICE_TO_INSURANCE");
                    bool hasPrivilege = CommonData.CheckPrivilege("FO_BILLING_WAIT_TO_INCL");
                    if (hasPrivilege)
                    {
                        ReasonforOverRiding();
                        if (AllergyRemarks != string.Empty)
                        {
                            if (SelectedVisitMode != VisitMode.OPCASH)
                            {
                                string str = string.Empty;
                                Service = dr.Row;
                                if (dr["CPT_CODE"] != DBNull.Value)
                                {
                                    str = Convert.ToString(dr["CPT_CODE"]);
                                }
                                dr["INCEXLCSTATUS"] = 1;
                                dr["IS_EDITED"] = 1;
                                dr["EDITED_STATUS"] = (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.WaitingforapprovaltoInclusion;
                                dr["OVER_RIDING_REASON"] = AllergyRemarks;
                                dr["APPROVAL_NO"] = ApprovalNo;
                                dr["APPROVAL_DATE"] = SelectedDate;
                                dr["APPROVAL_STATUS"] = DBNull.Value;
                                LoadServiceChargeDetails(ServiceId, dr.Row);
                                dr["CPT_CODE"] = str;
                                dr["GEN_PATIENT_SHARE"] = 0;
                                isEdited = false;
                                AllergyRemarks = string.Empty;
                                dr["APPROVAL_NO"] = string.Empty;
                                dr["APPROVAL_DATE"] = DateTime.Now;
                                CalculateServiceTotal();
                                if (!isERCredit)
                                {
                                    ToBeCollected = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                        .Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]))
                                        .Select(x => IfNullReturnZero(x["PATIENT_SHARE"])).Sum();
                                }
                                TotalAmount = (from drRow in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                               where drRow.RowState != DataRowState.Deleted && drRow["NET"] != DBNull.Value &&
                                               drRow["ISSALE"] != DBNull.Value && Convert.ToBoolean(drRow["ISSALE"]) == true
                                               select Convert.ToDecimal(drRow["NET"])).Sum();
                                TotalNet = (from drNet in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                            where drNet.RowState != DataRowState.Deleted && drNet["NET_AMOUNT"] != DBNull.Value &&
                                           drNet["ISSALE"] != DBNull.Value && Convert.ToBoolean(drNet["ISSALE"]) == true
                                            select Convert.ToDecimal(drNet["NET_AMOUNT"])).Sum();
                            }
                        }
                    }
                    else
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                              "User dont have privilege", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        AllergyRemarks = string.Empty;
                        ApprovalNo = string.Empty;
                        SelectedDate = DateTime.Now;
                    }
                    isEdited = false;
                }
            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                Controlvisible = false;
            }
        }

        #endregion

        private string ReasonforOverRiding()
        {
            Bill_AllergyReasonPopup objAllergyReasonPopup = new Bill_AllergyReasonPopup();
            CommonWindow objWin = new CommonWindow(WindowControlBoxStyle.None);
            objAllergyReasonPopup.IsAllergyReasonMandatory = IsAllergyReasonMandatory;
            objWin.Content = objAllergyReasonPopup;
            CommandBinding objBind = FindResource("CloseAllergyRemarkPopup") as CommandBinding;
            objWin.CommandBindings.Add(objBind);
            objBind = FindResource("CancelAllergyRemarkPopup") as CommandBinding;
            objWin.CommandBindings.Add(objBind);
            objWin.Title = "Reason for overriding " + overridingResonHeader;
            objWin.WindowState = WindowState.Normal;
            objWin.WindowStartupLocation = WindowStartupLocation.CenterScreen;
            objWin.SizeToContent = SizeToContent.WidthAndHeight;
            objWin.ResizeMode = ResizeMode.NoResize;
            objWin.Owner = Window.GetWindow(this);
            objAllergyReasonPopup.DataContext = this;
            objWin.ShowDialog();
            return AllergyRemarks;
        }


        private void FetchCopayAmountUsed(DataRow drTemp = null)
        {
            try
            {
                if (SelectedOpenEpisodeID != string.Empty && SelectedServiceType != (int)ServiceType.Cafeteria)
                {
                    DataTable dtCriteria = new DataTable();
                    dtCriteria.Columns.Add("MRNO", typeof(string));
                    dtCriteria.Columns.Add("PAT_FIN_ENCOUNTER_ID", typeof(decimal));
                    dtCriteria.Columns.Add("MODE", typeof(int));
                    dtCriteria.Columns.Add("EPISODE_NO", typeof(decimal));
                    dtCriteria.Columns.Add("INCO_DTLS_SCHEME_ID", typeof(decimal));
                    dtCriteria.Columns.Add("SERVICE_TYPE", typeof(int));
                    dtCriteria.Columns.Add("INV_MAST_SERVICE_ID", typeof(int));
                    dtCriteria.Columns.Add("INCO_INV_CATEGORY_ID", typeof(int));
                    dtCriteria.Columns.Add("COPAY_AGAINST", typeof(int));
                    MainBillingShared objMain = new MainBillingShared();
                    dtCriteria.Rows.Add(PatientInformation.Rows[0]["MRNO"], SelectedPatientFinEncounterID, 5, SelectedOpenEpisodeID, SelectedIncoPatientSchemeID);

                    if (drTemp != null && drTemp.Table.Columns.Contains("COPAY_AGAINST") && drTemp.Table.Columns.Contains("INCO_INV_CATEGORY_ID"))
                    {
                        dtCriteria.Rows[0]["SERVICE_TYPE"] = drTemp["SERVICE_TYPE"] != DBNull.Value ? drTemp["SERVICE_TYPE"] : SelectedItemServiceType;
                        dtCriteria.Rows[0]["INV_MAST_SERVICE_ID"] = drTemp["INV_MAST_SERVICE_ID"];
                        dtCriteria.Rows[0]["INCO_INV_CATEGORY_ID"] = drTemp["INCO_INV_CATEGORY_ID"];
                        dtCriteria.Rows[0]["COPAY_AGAINST"] = drTemp["COPAY_AGAINST"];

                    }
                    DataTable dtTable = objMain.FetchCopayAmount(dtCriteria);
                    if (dtTable.KIIsNotNullAndRowCount())
                    {
                        if (drTemp != null && IfNullReturnZero(drTemp["COPAY_AGAINST"]) == 1)
                        {
                            TotalCopayAmount = dtTable.AsEnumerable().Where(x => IfNullReturnZero(x["COPAY_AGAINST"]) == 1).Count() > 0 ? dtTable.AsEnumerable().Where(x => IfNullReturnZero(x["COPAY_AGAINST"]) == 1).Select(x => IfNullReturnZero(x["COPAY_AMOUNT"])).First() : 0;
                            GrpCopayUsed = dtTable.AsEnumerable().Where(x => IfNullReturnZero(x["COPAY_AGAINST"]) == 2).Count() > 0 ? dtTable.AsEnumerable().Where(x => IfNullReturnZero(x["COPAY_AGAINST"]) == 2).Select(x => IfNullReturnZero(x["COPAY_AMOUNT"])).First() : 0;
                        }
                        else if (drTemp != null && IfNullReturnZero(drTemp["COPAY_AGAINST"]) == 2)
                        {
                            TotalCopayAmount = dtTable.AsEnumerable().Where(x => IfNullReturnZero(x["COPAY_AGAINST"]) == 2).Count() > 0 ? dtTable.AsEnumerable().Where(x => IfNullReturnZero(x["COPAY_AGAINST"]) == 2).Select(x => IfNullReturnZero(x["COPAY_AMOUNT"])).First() : 0;
                            GrpCopayUsed = 0;
                        }
                        else
                        {
                            TotalCopayAmount = IfNullReturnZero(dtTable.Rows[0]["COPAY_AMOUNT"]);
                            GrpCopayUsed = 0;
                        }
                    }
                }
                else
                {
                    TotalCopayAmount = 0;
                    GrpCopayUsed = 0;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Executed_CancelAllergyRemarkPopup(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                AllergyRemarks = string.Empty;
                AllergyRemarks = string.Empty;
                ApprovalNo = string.Empty;
                Window obj = sender as Window;
                obj.Close();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Executed_SchemeDetails(object sender, ExecutedRoutedEventArgs e)
        {
            if (SelectedVisitMode != (int)VisitMode.OPCASH)
            {
                if (PatientInformation != null && PatientInformation.Rows[0]["MRNO"] != DBNull.Value && Convert.ToString(PatientInformation.Rows[0]["MRNO"]) != string.Empty)
                {
                    UICursorService.SetCursorState();
                    #region For SchemeDetailsLoading
                    if (Scheme != null && Scheme.Rows.Count > 0)
                    {
                        DataRow[] drForScheme = Scheme.Select("INCO_MAST_SCHEME_ID=" + Convert.ToInt64(SelectedMastSchemeValue));
                        if (drForScheme != null && drForScheme.Count() > 0)
                        {
                            LoadSchemeDetails(drForScheme[0]);
                        }
                    }
                    #endregion

                    CommonWindow win = new CommonWindow(WindowControlBoxStyle.OnlyWithClose);
                    Infologics.Medilogics.MasterSettings.UIContainer.Scheme.UcContractLimitContainer ObjContractLimit = new Infologics.Medilogics.MasterSettings.UIContainer.Scheme.UcContractLimitContainer();
                    ObjContractLimit.MRNO = Convert.ToString(PatientInformation.Rows[0]["MRNO"]);
                    if (Scheme != null && Scheme.Rows.Count > 0)
                    {
                        DataRow[] dr = Scheme.Select("INCO_MAST_SCHEME_ID=" + Convert.ToInt64(SelectedMastSchemeValue));
                        if (dr != null && dr.Count() > 0)
                        {
                            ObjContractLimit.SelectedContractService = dr[0];
                        }
                    }
                    else
                    {
                        ObjContractLimit.SelectedContractService = null;
                    }
                    win.Content = ObjContractLimit;
                    bool IsOpenWindow = ObjContractLimit.IsPopUpOpen;
                    if (IsOpenWindow)
                    {
                        win.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                        win.Width = System.Windows.SystemParameters.PrimaryScreenWidth - (System.Windows.SystemParameters.PrimaryScreenWidth * .15);
                        win.Height = System.Windows.SystemParameters.PrimaryScreenHeight - (System.Windows.SystemParameters.PrimaryScreenHeight * .3);
                        win.Title = "Contract Limit";
                        win.AllowsTransparency = false;
                        win.ResizeMode = ResizeMode.NoResize;
                        win.ShowDialog();
                    }
                }
            }
            else
            {
                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                           "Payment Type is cash,No insurance details Available", MessageBoxButtonType.OK, MessageBoxImages.Information);
            }
        }

        private bool IsSchemeValid()
        {
            bool IsValid = true;
            DataRow[] dr = Scheme.Select("INCO_MAST_SCHEME_ID=" + SelectedMastSchemeValue);
            if (dr.Length > 0)
            {
                //if (dr[0]["SCHEME_VALID_TO"] != DBNull.Value && Convert.ToDateTime(dr[0]["SCHEME_VALID_TO"]) < Convert.ToDateTime(DateTime.Now)) // Scheme Vaidation is done based on service Date, Benson 27102015, sooraj assigned
                if (dr[0]["SCHEME_VALID_TO"] != DBNull.Value && Convert.ToDateTime(dr[0]["SCHEME_VALID_TO"]) < Convert.ToDateTime(EncounterEndDate))
                {
                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                           "Selected patient scheme is invalid", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    IsValid = false;
                }
                if (IsValid && dr[0]["NETWORK_VALID"] != DBNull.Value && Convert.ToInt64(dr[0]["NETWORK_VALID"]) == 0)
                {
                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                           "Scheme is invalid at Network level", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    IsValid = false;
                }
                if (IsValid && dr[0]["PLAN_VALID"] != DBNull.Value && Convert.ToInt64(dr[0]["PLAN_VALID"]) == 0)
                {
                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                           "Scheme is invalid at Plan level", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    IsValid = false;
                }
                if (IsValid && dr[0]["CONTRACT_VALID"] != DBNull.Value && Convert.ToInt64(dr[0]["CONTRACT_VALID"]) == 0)
                {
                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                           "Scheme is invalid at Contract level", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    IsValid = false;
                }
                if (IsValid && dr[0]["BUYER_VALID"] != DBNull.Value && Convert.ToInt64(dr[0]["BUYER_VALID"]) == 0)
                {
                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                           "Scheme is invalid at buyer level", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    IsValid = false;
                }
            }
            return IsValid;
        }

        //private void Executed_PrintPrescription(object sender, ExecutedRoutedEventArgs e)
        //{
        //    if (SelectedEMROrder != null)
        //    {
        //        string PrinterName = ConfigurationSettings.AppSettings["InvoicePrinter"];
        //        DataTable dtCriteria = new DataTable();
        //        dtCriteria.Columns.Add("MRNO", typeof(string));
        //        dtCriteria.Columns.Add("EMR_PROVIDER_VISIT_ID", typeof(decimal));
        //        dtCriteria.Columns.Add("MODE", typeof(int));
        //        dtCriteria.Rows.Add();
        //        dtCriteria.Rows[0]["MRNO"] = PatientInformation.Rows[0]["MRNO"];
        //        dtCriteria.Rows[0]["EMR_PROVIDER_VISIT_ID"] = SelectedEMROrder["EMR_PROVIDER_VISIT_ID"];
        //        dtCriteria.Rows[0]["MODE"] = 1;
        //        MainEMRShared objEmrShared = new MainEMRShared();
        //        DataTable dtPrescriptionsDetails = objEmrShared.FetchPrintPrescription(dtCriteria);
        //        dtPrescriptionsDetails.TableName = "Details";
        //        DataTable dtPrescriptionsMaster = new DataTable("Master");
        //        if (dtPrescriptionsDetails != null)
        //        {
        //            dtPrescriptionsMaster.Columns.Add("MRNO", typeof(string));
        //            dtPrescriptionsMaster.Columns.Add("PATIENT_NAME", typeof(string));
        //            dtPrescriptionsMaster.Columns.Add("DOCTOR_NAME", typeof(string));
        //            dtPrescriptionsMaster.Columns.Add("REQUESTED_ON", typeof(DateTime));
        //            dtPrescriptionsMaster.Columns.Add("PHARMACIST_NAME", typeof(string));
        //            dtPrescriptionsMaster.Rows.Add();
        //            dtPrescriptionsMaster.Rows[0]["MRNO"] = PatientInformation.Rows[0]["MRNO"];
        //            dtPrescriptionsMaster.Rows[0]["PATIENT_NAME"] = GetPatientName();
        //            dtPrescriptionsMaster.Rows[0]["DOCTOR_NAME"] = SelectedEMROrder["EMPNAME"];
        //            dtPrescriptionsMaster.Rows[0]["REQUESTED_ON"] = SelectedEMROrder["VISIT_DATE"]; //DOUBTS
        //            dtPrescriptionsMaster.Rows[0]["PHARMACIST_NAME"] = CommonData.LoggedInUserName;
        //        }
        //        DataSet dsPrintPrescriptionData = new DataSet();
        //        dsPrintPrescriptionData.Tables.Add(dtPrescriptionsMaster);
        //        dsPrintPrescriptionData.Tables.Add(dtPrescriptionsDetails);
        //        PrintPreviewDialog(dsPrintPrescriptionData);
        //    }
        //}

        #region Old Print Prescription Method
        //private void Executed_PrintPrescription(object sender, ExecutedRoutedEventArgs e)
        //{
        //    if (SelectedEMROrder != null)
        //    {
        //        //string PrinterName = ConfigurationSettings.AppSettings["InvoicePrinter"];
        //        //DataTable dtCriteria = new DataTable();
        //        //dtCriteria.Columns.Add("MRNO", typeof(string));
        //        //dtCriteria.Columns.Add("EMR_PROVIDER_VISIT_ID", typeof(decimal));
        //        //dtCriteria.Columns.Add("MODE", typeof(int));
        //        //dtCriteria.Rows.Add();
        //        //dtCriteria.Rows[0]["MRNO"] = PatientInformation.Rows[0]["MRNO"];
        //        //dtCriteria.Rows[0]["EMR_PROVIDER_VISIT_ID"] = SelectedEMROrder["EMR_PROVIDER_VISIT_ID"];
        //        //dtCriteria.Rows[0]["MODE"] = 1;
        //        //MainEMRShared objEmrShared = new MainEMRShared();
        //        //DataTable dtPrescriptionsDetails = objEmrShared.FetchPrintPrescription(dtCriteria);
        //        //dtPrescriptionsDetails.TableName = "Details";
        //        //DataTable dtPrescriptionsMaster = new DataTable("Master");
        //        //if (dtPrescriptionsDetails != null)
        //        //{
        //        //    dtPrescriptionsMaster.Columns.Add("MRNO", typeof(string));
        //        //    dtPrescriptionsMaster.Columns.Add("PATIENT_NAME", typeof(string));
        //        //    dtPrescriptionsMaster.Columns.Add("DOCTOR_NAME", typeof(string));
        //        //    dtPrescriptionsMaster.Columns.Add("REQUESTED_ON", typeof(DateTime));
        //        //    dtPrescriptionsMaster.Columns.Add("PHARMACIST_NAME", typeof(string));
        //        //    dtPrescriptionsMaster.Rows.Add();
        //        //    dtPrescriptionsMaster.Rows[0]["MRNO"] = PatientInformation.Rows[0]["MRNO"];
        //        //    dtPrescriptionsMaster.Rows[0]["PATIENT_NAME"] = GetPatientName();
        //        //    dtPrescriptionsMaster.Rows[0]["DOCTOR_NAME"] = SelectedEMROrder["EMPNAME"];
        //        //    dtPrescriptionsMaster.Rows[0]["REQUESTED_ON"] = SelectedEMROrder["VISIT_DATE"]; //DOUBTS
        //        //    dtPrescriptionsMaster.Rows[0]["PHARMACIST_NAME"] = CommonData.LoggedInUserName;
        //        //}
        //        //DataSet dsPrintPrescriptionData = new DataSet();
        //        //dsPrintPrescriptionData.Tables.Add(dtPrescriptionsMaster);
        //        //dsPrintPrescriptionData.Tables.Add(dtPrescriptionsDetails);
        //        //PrintPreviewDialog(dsPrintPrescriptionData);


        //        if (!Frequency.KIIsNotNullAndRowCount())
        //        {
        //            //DataTable dtCriteria = new DataTable();
        //            //dtCriteria.Columns.Add("LOOKUP_TYPE");
        //            //dtCriteria.Rows.Add("FREQUENCY");
        //            Frequency = FrequencyTemp;// getValidEmrData(dtCriteria);
        //        }

        //        DataTable dtPrescriptionDetails = dsBillXSD.EMR_PRESC_DTLS.Clone();
        //        DataTable dtPrescriptionMaster = dsBillXSD.EMR_PRESC_MAST.Clone();
        //        DataTable dtDiagno = new DataTable();
        //        DataTable dtAllergy = dsBillXSD.EMR_PRESC_ALLERGY.Clone();
        //        string Providername = string.Empty;
        //        dtPrescriptionMaster.Rows.Add();
        //        DataRow drDtls = null;
        //        // assigning values to Details table
        //        if (BillData != null && BillData.Tables.Contains("PH_PAT_DTLS_ORDER") && BillData.Tables["PH_PAT_DTLS_ORDER"] != null && BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Count > 0)
        //        {
        //            foreach (DataRow dr in BillData.Tables["PH_PAT_DTLS_ORDER"].Rows)
        //            {
        //                if (dr["EMR_PAT_DTLS_PH_ORDER_ID"] != DBNull.Value)
        //                {
        //                    drDtls = dtPrescriptionDetails.NewRow();

        //                    if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail") && EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0)
        //                    {
        //                        if (dr["EMR_PAT_DTLS_PH_ORDER_ID"] != DBNull.Value && (dr["EMR_PAT_DTLS_PH_ORDER_ID"] != string.Empty))
        //                        {
        //                            DataRow[] drSpecialInst = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID='" + dr["EMR_PAT_DTLS_PH_ORDER_ID"] + "'");
        //                            if (drSpecialInst != null && drSpecialInst.Count() > 0)
        //                            {
        //                                drDtls["SPECIAL_INSTRUCTION"] = drSpecialInst[0]["CONDITIONAL_FREQUENCY"];
        //                                drDtls["ADMINISTRATION_INSTRUCTION"] = drSpecialInst[0]["ADMINISTRATION_INSTRUCTION"];
        //                                drDtls["REMARKS"] = drSpecialInst[0]["REMARKS"];
        //                            }
        //                        }
        //                    }

        //                    if (dr["ROUTE"] != DBNull.Value)
        //                    {
        //                        drDtls["ROUTE"] = dr["ROUTE"];
        //                    }
        //                    else
        //                    {
        //                        if (OrderItems != null && OrderItems.Rows.Count > 0)
        //                        {
        //                            if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail") && EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0)
        //                            {
        //                                if (dr["EMR_PAT_DTLS_PH_ORDER_ID"] != DBNull.Value && Convert.ToString(dr["EMR_PAT_DTLS_PH_ORDER_ID"]) != string.Empty)
        //                                {
        //                                    if (dr["EMR_PAT_DTLS_PH_ORDER_ID"] != DBNull.Value && dr["EMR_PAT_DTLS_PH_ORDER_ID"] != string.Empty)
        //                                    {
        //                                        DataRow[] drOrderItems = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID='" + dr["EMR_PAT_DTLS_PH_ORDER_ID"] + "'");
        //                                        if (drOrderItems != null && drOrderItems.Count() > 0)
        //                                        {
        //                                            drDtls["ROUTE"] = drOrderItems[0]["ROUTE"];


        //                                            drDtls["DOSE"] = drOrderItems[0]["UNIT_DETAILS"];
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                        }
        //                    }
        //                    drDtls["MEDICINE_NAME"] = dr["MEDICINE_NAME"];
        //                    if (drDtls["DOSE"] == DBNull.Value)
        //                    {
        //                        drDtls["DOSE"] = Convert.ToString(dr["DOSE"]) + "  " + Convert.ToString(dr["DOSE_UNIT"]);
        //                    }
        //                    drDtls["FREQUENCY"] = dr["FREQ_VALUE"];
        //                    if (Frequency != null && Frequency.Rows.Count > 0)
        //                    {
        //                        if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail") && EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0)
        //                        {
        //                            if (dr["EMR_PAT_DTLS_PH_ORDER_ID"] != DBNull.Value && Convert.ToString(dr["EMR_PAT_DTLS_PH_ORDER_ID"]) != string.Empty)
        //                            {
        //                                DataRow[] drOrderItems = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID='" + dr["EMR_PAT_DTLS_PH_ORDER_ID"] + "'");
        //                                if (drOrderItems != null && drOrderItems.Count() > 0)
        //                                {
        //                                    var resrows = from freq in Frequency.AsEnumerable()
        //                                                  where drOrderItems[0]["FREQUENCY"] != DBNull.Value && freq["EMR_LOOKUP_ID"] != DBNull.Value && Convert.ToInt32(freq["EMR_LOOKUP_ID"]) == Convert.ToInt32(drOrderItems[0]["FREQUENCY"])
        //                                                  select freq;
        //                                    if (resrows != null && resrows.Count() > 0)
        //                                    {
        //                                        DataTable dtfreqtemp = resrows.CopyToDataTable();
        //                                        if (dtfreqtemp.Rows[0]["FIELD2"] != DBNull.Value && Convert.ToInt32(dtfreqtemp.Rows[0]["FIELD2"]) == 1)
        //                                        {
        //                                            drDtls["FREQUENCY"] = "Once in every " + drOrderItems[0]["FREQUENCY_VALUE"] + " " + drOrderItems[0]["FREQUENCY_NAME"];
        //                                        }
        //                                        else
        //                                        {
        //                                            if (drDtls["FREQUENCY"] == DBNull.Value)
        //                                            {
        //                                                drDtls["FREQUENCY"] = drOrderItems[0]["FREQUENCY_NAME"] + "-" + drOrderItems[0]["CONDITIONAL_FREQUENCY"];
        //                                            }
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                        }

        //                    }

        //                    if (OrderItems != null && OrderItems.Rows.Count > 0)
        //                    {
        //                        if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail") && EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0)
        //                        {
        //                            if (dr["EMR_PAT_DTLS_PH_ORDER_ID"] != DBNull.Value && Convert.ToString(dr["EMR_PAT_DTLS_PH_ORDER_ID"]) != string.Empty)
        //                            {
        //                                DataRow[] drOrderItems = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID='" + dr["EMR_PAT_DTLS_PH_ORDER_ID"] + "'");
        //                                if (drOrderItems != null && drOrderItems.Count() > 0)
        //                                {
        //                                    drDtls["START_DATE"] = drOrderItems[0]["START_DATE"];
        //                                    //     drDtls["DOSE"] = drOrderItems[0]["UNIT_DETAILS"];
        //                                }
        //                            }
        //                        }
        //                    }


        //                    drDtls["DURATIONS"] = GetDurationDays(dr);
        //                    //  drDtls["START_DATE"] = dr["START_DATE"];
        //                    dtPrescriptionDetails.Rows.Add(drDtls);
        //                }
        //            }
        //            // Providername = Convert.ToString( BillData.Tables["PH_PAT_DTLS_ORDER"].Rows[0]["PROVIDER_NAME"]);
        //        }

        //        //assigning value to master table
        //        dtPrescriptionMaster.Rows[0]["PATIENT_NAME"] = GetPatientName();
        //        dtPrescriptionMaster.Rows[0]["HOSPITAL_ID"] = CommonData.HospitalID;
        //        if (PatientInformation != null && PatientInformation.Rows.Count > 0)
        //        {
        //            switch (Convert.ToInt16(PatientInformation.Rows[0]["GENDER"]))
        //            {
        //                case 0:
        //                    dtPrescriptionMaster.Rows[0]["GENDER"] = "Male";
        //                    break;
        //                case 1:
        //                    dtPrescriptionMaster.Rows[0]["GENDER"] = "Female";
        //                    break;
        //                case 2:
        //                    dtPrescriptionMaster.Rows[0]["GENDER"] = "Unknown";
        //                    break;
        //                case 3:
        //                    dtPrescriptionMaster.Rows[0]["GENDER"] = "Others";
        //                    break;
        //                default:
        //                    break;
        //            }
        //            dtPrescriptionMaster.Rows[0]["AGE"] = GetAge(PatientInformation.Rows[0]);
        //            //DataTable dt = objCommon.GetAge(Convert.ToDateTime(PatientInformation.Rows[0]["DOB"]), DateTime.Now);
        //            //dtPrescriptionMaster.Rows[0]["AGE"] = Convert.ToString(dt.Rows[0]["AgeInString"]);
        //            dtPrescriptionMaster.Rows[0]["MRNO"] = PatientInformation.Rows[0]["MRNO"];
        //            //dtPrescriptionMaster.Rows[0]["REFERENECE_NO"] = "0";

        //        }

        //        DataTable dtcriteria = new DataTable();
        //        dtcriteria.Columns.Add("MRNO");
        //        dtcriteria.Columns.Add("MODE");
        //        dtcriteria.Rows.Add();
        //        dtcriteria.Rows[0]["MRNO"] = PatientInformation.Rows[0]["MRNO"];
        //        MainEMRShared obj = new MainEMRShared();
        //        DataTable dtAllergyTemp = obj.FetchPatWarning(dtcriteria);

        //        if (dtAllergyTemp != null && dtAllergyTemp.Rows.Count > 0)
        //        {
        //            DataRow[] drvalidAllergy = dtAllergyTemp.Select("ISVALID=1 AND ALLERGYNAME IS NOT NULL");
        //            if (drvalidAllergy != null && drvalidAllergy.Count() > 0)
        //            {
        //                dtAllergyTemp = drvalidAllergy.CopyToDataTable();
        //            }
        //            else
        //                dtAllergyTemp = dtAllergyTemp.Clone();
        //        }
        //        DataTable dtcriteriaDiagno = new DataTable();
        //        dtcriteriaDiagno.Columns.Add("MRNO");
        //        dtcriteriaDiagno.Columns.Add("MODE");
        //        dtcriteriaDiagno.Columns.Add("PAT_FIN_ENCOUNTER_ID");
        //        dtcriteriaDiagno.Rows.Add();
        //        dtcriteriaDiagno.Rows[0]["MRNO"] = PatientInformation.Rows[0]["MRNO"];
        //        dtcriteriaDiagno.Rows[0]["PAT_FIN_ENCOUNTER_ID"] = SelectedPatientFinEncounterID;

        //        MainBillingShared objBilling = new MainBillingShared();
        //        DataSet dsDiagnoTemp = objBilling.FetchPharmasyPrescriptionDtls(dtcriteriaDiagno);
        //        if (dsDiagnoTemp != null && dsDiagnoTemp.Tables.Contains("EMR_PRESC_DIGNO") && dsDiagnoTemp.Tables["EMR_PRESC_DIGNO"] != null && dsDiagnoTemp.Tables["EMR_PRESC_DIGNO"].Rows.Count > 0)
        //        {
        //            dtDiagno = dsDiagnoTemp.Tables["EMR_PRESC_DIGNO"].Copy();
        //        }
        //        else if (dsDiagnoTemp != null && dsDiagnoTemp.Tables.Contains("EMR_PRESC_DIGNO") && dsDiagnoTemp.Tables["EMR_PRESC_DIGNO"] != null)
        //        {
        //            dtDiagno = dsDiagnoTemp.Tables["EMR_PRESC_DIGNO"].Clone();
        //        }
        //        if (dsDiagnoTemp != null && dsDiagnoTemp.Tables.Contains("VITAL_SIGN") && dsDiagnoTemp.Tables["VITAL_SIGN"] != null && dsDiagnoTemp.Tables["VITAL_SIGN"].Rows.Count > 0)
        //        {
        //            dtPrescriptionMaster.Rows[0]["WEIGHT"] = dsDiagnoTemp.Tables["VITAL_SIGN"].Rows[0]["BODY_WEIGHT"];
        //        }

        //        if (dtAllergyTemp != null && dtAllergyTemp.Rows.Count > 0)
        //        {
        //            DataRow drAllergyDtls = null;

        //            foreach (DataRow drAll in dtAllergyTemp.Rows)
        //            {
        //                if (drAll["DRUG_ALLERGY_TYPE"] != DBNull.Value && Convert.ToInt32(drAll["DRUG_ALLERGY_TYPE"]) == (int)Infologics.Medilogics.Enumerators.EMR.DrugAllergyType.NKDA)
        //                {
        //                    ////   dtAllergy.Rows.Clear();
        //                    //   drAllergyDtls = dtAllergy.NewRow();
        //                    //   drAllergyDtls["ID"] = drAll["EMR_ALLERGY_ID"];
        //                    //   drAllergyDtls["NAME"] = drAll["ALLERGYNAME"];
        //                    //   dtAllergy.Rows.Add(drAllergyDtls);
        //                    //   break;
        //                }
        //                else
        //                {

        //                    drAllergyDtls = dtAllergy.NewRow();
        //                    drAllergyDtls["ID"] = drAll["EMR_ALLERGY_ID"];
        //                    drAllergyDtls["NAME"] = drAll["ALLERGYNAME"];
        //                    dtAllergy.Rows.Add(drAllergyDtls);
        //                }
        //            }

        //            if (dtAllergy != null && dtAllergy.Rows.Count == 0)
        //            {
        //                dtAllergy.Rows.Add("", "NKDA");
        //            }
        //        }

        //        if (dtPrescriptionDetails == null || (dtPrescriptionDetails != null && dtPrescriptionDetails.Rows.Count == 0))
        //        {
        //            return;
        //        }

        //        //if (DsEMROrderData != null && DsEMROrderData.Tables.Contains("Order") && DsEMROrderData.Tables["Order"] != null && DsEMROrderData.Tables["Order"].Rows.Count > 0)
        //        //{
        //        //    Providername = Convert.ToString(DsEMROrderData.Tables["Order"].Rows[0]["EMPNAME"]);
        //        //}

        //        if (SelectedEMROrder["EMPNAME"] != DBNull.Value)
        //        {
        //            Providername = SelectedEMROrder["EMPNAME"].ToString();
        //        }

        //        var query = EMROrderRelation.Tables["EMR_PROVIDER_VISIT"].AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PROVIDER_VISIT_ID"]) ==
        //                 IfNullReturnZero(SelectedEMROrder["EMR_PROVIDER_VISIT_ID"]) && IfNullReturnZero(x["PROVIDER_ID"]) != IfNullReturnZero(SelectedEMROrder["PROVIDER_ID"])).Select(x => x);
        //        if (query.Any() && query.First()["PROVIDER_NAME"] != DBNull.Value)
        //        {
        //            Providername = Providername + " ( By " + query.First()["PROVIDER_NAME"] + " )";
        //        }
        //        dtAllergy.TableName = "EMR_PRESC_ALLERGY";
        //        dtDiagno.TableName = "EMR_PRESC_DIAG";
        //        DataSet dsPrescription = new DataSet();
        //        DataTable dtGenericDtls = GenericDtls();
        //        dtPrescriptionDetails.Merge(dtGenericDtls);

        //        dsPrescription.Tables.Add(dtPrescriptionDetails);
        //        if (!dtPrescriptionMaster.Columns.Contains("ERX_NUMBER"))
        //        {
        //            dtPrescriptionMaster.Columns.Add("ERX_NUMBER", typeof(long));
        //        }
        //        if (ERXNo != null && ERXNo != string.Empty)
        //        {
        //            dtPrescriptionMaster.AsEnumerable().ForEach(x => x["ERX_NUMBER"] = Convert.ToInt64(ERXNo));
        //        }
        //        dsPrescription.Tables.Add(dtPrescriptionMaster);
        //        dsPrescription.Tables.Add(dtDiagno);
        //        dsPrescription.Tables.Add(dtAllergy);

        //        Infologics.Medilogics.PrintingLibrary.InvoiceCrystal.CrystalReports.CrptPrescription objCrptPrescription = new PrintingLibrary.InvoiceCrystal.CrystalReports.CrptPrescription();
        //        objCrptPrescription.SetDataSource(dsPrescription);
        //        objCrptPrescription.SetParameterValue("@Provider", Providername);
        //        objCrptPrescription.SetParameterValue("@User", CommonData.LoggedInUserName);

        //        Infologics.Medilogics.CommonSharedUI.ReportViewer.ucReportViewer objucReportViewer = new CommonSharedUI.ReportViewer.ucReportViewer();
        //        objucReportViewer.ReportSource = objCrptPrescription;
        //        Mouse.OverrideCursor = null;
        //        CommonWindow win = new CommonWindow(WindowControlBoxStyle.Default);
        //        win.Content = objucReportViewer;
        //        win.WindowStartupLocation = WindowStartupLocation.CenterScreen;
        //        win.Title = "Pharmacy Prescription";
        //        win.AllowsTransparency = false;
        //        win.ShowDialog();

        //    }
        //}

        //private DataTable GenericDtls()
        //{

        //    DataTable dtGeneric = new DataTable();
        //    if (EMROrderRelation.Tables["Detail"].Rows.Count > 0 && EMROrderRelation.Tables["Detail"].Rows[0]["MEDICINE_TYPE"] != DBNull.Value
        //        && SelectedEMROrder != null && SelectedEMROrder["EMR_PAT_MAST_INV_ORDER_ID"] != DBNull.Value && EMROrderRelation.Tables["Detail"].Rows[0]["EMR_PAT_MAST_INV_ORDER_ID"] != DBNull.Value)
        //    {
        //        var query = EMROrderRelation.Tables["Detail"].AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_MAST_INV_ORDER_ID"]) ==
        //                     IfNullReturnZero(SelectedEMROrder["EMR_PAT_MAST_INV_ORDER_ID"]) && IfNullReturnZero(x["MEDICINE_TYPE"]) == 1).Select(x => x);
        //        if (query.Count() > 0)
        //        {
        //            dtGeneric = query.CopyToDataTable();
        //        }
        //    }
        //    DataTable dtGenericDetails = dsBillXSD.EMR_PRESC_DTLS.Clone();
        //    DataRow drDtls = null;
        //    if (dtGeneric != null && dtGeneric.Rows.Count > 0)
        //    {
        //        foreach (DataRow dr in dtGeneric.Rows)
        //        {
        //            if (dr["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value)
        //            {
        //                drDtls = dtGenericDetails.NewRow();

        //                if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail") && EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0)
        //                {
        //                    if (dr["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value && (dr["EMR_PAT_DTLS_INV_ORDER_ID"] != string.Empty))
        //                    {
        //                        DataRow[] drSpecialInst = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID='" + dr["EMR_PAT_DTLS_INV_ORDER_ID"] + "'");
        //                        if (drSpecialInst != null && drSpecialInst.Count() > 0)
        //                        {
        //                            drDtls["SPECIAL_INSTRUCTION"] = drSpecialInst[0]["CONDITIONAL_FREQUENCY"];
        //                            drDtls["ADMINISTRATION_INSTRUCTION"] = drSpecialInst[0]["ADMINISTRATION_INSTRUCTION"];
        //                            drDtls["REMARKS"] = drSpecialInst[0]["REMARKS"];
        //                        }
        //                    }
        //                }

        //                if (dr["ROUTE"] != DBNull.Value)
        //                {
        //                    drDtls["ROUTE"] = dr["ROUTE"];
        //                }
        //                else
        //                {
        //                    if (OrderItems != null && OrderItems.Rows.Count > 0)
        //                    {
        //                        if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail") && EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0)
        //                        {
        //                            if (dr["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value && Convert.ToString(dr["EMR_PAT_DTLS_INV_ORDER_ID"]) != string.Empty)
        //                            {
        //                                if (dr["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value && dr["EMR_PAT_DTLS_INV_ORDER_ID"] != string.Empty)
        //                                {
        //                                    DataRow[] drOrderItems = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID='" + dr["EMR_PAT_DTLS_INV_ORDER_ID"] + "'");
        //                                    if (drOrderItems != null && drOrderItems.Count() > 0)
        //                                    {
        //                                        drDtls["ROUTE"] = drOrderItems[0]["ROUTE"];


        //                                        drDtls["DOSE"] = drOrderItems[0]["UNIT_DETAILS"];
        //                                    }
        //                                }
        //                            }
        //                        }
        //                    }
        //                }
        //                drDtls["MEDICINE_NAME"] = dr["NAME"];
        //                if (drDtls["DOSE"] == DBNull.Value && dr["QUANTITY"] != DBNull.Value && dr["QUANTITY_UNIT"] != DBNull.Value)
        //                {
        //                    drDtls["DOSE"] = Convert.ToString(dr["QUANTITY"]) + "  " + Convert.ToString(dr["QUANTITY_UNIT"]);
        //                }
        //                if (dr["FREQUENCY_VALUE"] != DBNull.Value)
        //                {
        //                    drDtls["FREQUENCY"] = dr["FREQUENCY_VALUE"];

        //                }
        //                if (Frequency != null && Frequency.Rows.Count > 0)
        //                {
        //                    if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail") && EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0)
        //                    {
        //                        if (dr["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value && Convert.ToString(dr["EMR_PAT_DTLS_INV_ORDER_ID"]) != string.Empty)
        //                        {
        //                            DataRow[] drOrderItems = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID='" + dr["EMR_PAT_DTLS_INV_ORDER_ID"] + "'");
        //                            if (drOrderItems != null && drOrderItems.Count() > 0)
        //                            {
        //                                var resrows = from freq in Frequency.AsEnumerable()
        //                                              where drOrderItems[0]["FREQUENCY"] != DBNull.Value && freq["EMR_LOOKUP_ID"] != DBNull.Value && Convert.ToInt32(freq["EMR_LOOKUP_ID"]) == Convert.ToInt32(drOrderItems[0]["FREQUENCY"])
        //                                              select freq;
        //                                if (resrows != null && resrows.Count() > 0)
        //                                {
        //                                    DataTable dtfreqtemp = resrows.CopyToDataTable();
        //                                    if (dtfreqtemp.Rows[0]["FIELD2"] != DBNull.Value && Convert.ToInt32(dtfreqtemp.Rows[0]["FIELD2"]) == 1)
        //                                    {
        //                                        drDtls["FREQUENCY"] = "Once in every " + drOrderItems[0]["FREQUENCY_VALUE"] + " " + drOrderItems[0]["FREQUENCY_NAME"];
        //                                    }
        //                                    else
        //                                    {
        //                                        if (drDtls["FREQUENCY"] == DBNull.Value)
        //                                        {
        //                                            drDtls["FREQUENCY"] = drOrderItems[0]["FREQUENCY_NAME"] + "-" + drOrderItems[0]["CONDITIONAL_FREQUENCY"];
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                        }
        //                    }

        //                }

        //                if (OrderItems != null && OrderItems.Rows.Count > 0)
        //                {
        //                    if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail") && EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0)
        //                    {
        //                        if (dr["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value && Convert.ToString(dr["EMR_PAT_DTLS_INV_ORDER_ID"]) != string.Empty)
        //                        {
        //                            DataRow[] drOrderItems = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID='" + dr["EMR_PAT_DTLS_INV_ORDER_ID"] + "'");
        //                            if (drOrderItems != null && drOrderItems.Count() > 0)
        //                            {
        //                                drDtls["START_DATE"] = drOrderItems[0]["START_DATE"];
        //                                //     drDtls["DOSE"] = drOrderItems[0]["UNIT_DETAILS"];
        //                            }
        //                        }
        //                    }
        //                }


        //                drDtls["DURATIONS"] = GetDurationDays(dr);
        //                //  drDtls["START_DATE"] = dr["START_DATE"];
        //                dtGenericDetails.Rows.Add(drDtls);
        //            }
        //        }

        //    }

        //    return dtGenericDetails;
        //}

        #endregion

        #region New Prescription Method

        private void Executed_PrintPrescription(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                if (BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0 && EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail") &&
                    EMROrderRelation.Tables["Detail"].KIIsNotNullAndRowCount())//SelectedEMROrder != null && 
                {
                    //string PrinterName = ConfigurationSettings.AppSettings["InvoicePrinter"];
                    //DataTable dtCriteria = new DataTable();
                    //dtCriteria.Columns.Add("MRNO", typeof(string));
                    //dtCriteria.Columns.Add("EMR_PROVIDER_VISIT_ID", typeof(decimal));
                    //dtCriteria.Columns.Add("MODE", typeof(int));
                    //dtCriteria.Rows.Add();
                    //dtCriteria.Rows[0]["MRNO"] = PatientInformation.Rows[0]["MRNO"];
                    //dtCriteria.Rows[0]["EMR_PROVIDER_VISIT_ID"] = SelectedEMROrder["EMR_PROVIDER_VISIT_ID"];
                    //dtCriteria.Rows[0]["MODE"] = 1;
                    //MainEMRShared objEmrShared = new MainEMRShared();
                    //DataTable dtPrescriptionsDetails = objEmrShared.FetchPrintPrescription(dtCriteria);
                    //dtPrescriptionsDetails.TableName = "Details";
                    //DataTable dtPrescriptionsMaster = new DataTable("Master");
                    //if (dtPrescriptionsDetails != null)
                    //{
                    //    dtPrescriptionsMaster.Columns.Add("MRNO", typeof(string));
                    //    dtPrescriptionsMaster.Columns.Add("PATIENT_NAME", typeof(string));
                    //    dtPrescriptionsMaster.Columns.Add("DOCTOR_NAME", typeof(string));
                    //    dtPrescriptionsMaster.Columns.Add("REQUESTED_ON", typeof(DateTime));
                    //    dtPrescriptionsMaster.Columns.Add("PHARMACIST_NAME", typeof(string));
                    //    dtPrescriptionsMaster.Rows.Add();
                    //    dtPrescriptionsMaster.Rows[0]["MRNO"] = PatientInformation.Rows[0]["MRNO"];
                    //    dtPrescriptionsMaster.Rows[0]["PATIENT_NAME"] = GetPatientName();
                    //    dtPrescriptionsMaster.Rows[0]["DOCTOR_NAME"] = SelectedEMROrder["EMPNAME"];
                    //    dtPrescriptionsMaster.Rows[0]["REQUESTED_ON"] = SelectedEMROrder["VISIT_DATE"]; //DOUBTS
                    //    dtPrescriptionsMaster.Rows[0]["PHARMACIST_NAME"] = CommonData.LoggedInUserName;
                    //}
                    //DataSet dsPrintPrescriptionData = new DataSet();
                    //dsPrintPrescriptionData.Tables.Add(dtPrescriptionsMaster);
                    //dsPrintPrescriptionData.Tables.Add(dtPrescriptionsDetails);
                    //PrintPreviewDialog(dsPrintPrescriptionData);


                    if (!Frequency.KIIsNotNullAndRowCount())
                    {
                        //DataTable dtCriteria = new DataTable();
                        //dtCriteria.Columns.Add("LOOKUP_TYPE");
                        //dtCriteria.Rows.Add("FREQUENCY");
                        Frequency = FrequencyTemp;// getValidEmrData(dtCriteria);
                    }
                    DataTable dtDiagno = new DataTable();
                    DataTable dtAllergy = dsBillXSD.EMR_PRESC_ALLERGY.Clone();
                    DataTable dtPrescriptionDetails = dsBillXSD.EMR_PRESC_DTLS.Clone();
                    DataTable dtPrescriptionMaster = dsBillXSD.EMR_PRESC_MAST.Clone();
                    dtPrescriptionMaster.Rows.Add();
                    string Providername = string.Empty;

                    //commented because CrptPrescription report is changed to RptEmrOrder   

                    //DataRow drDtls = null;
                    //// assigning values to Details table
                    //if (BillData != null && BillData.Tables.Contains("PH_PAT_DTLS_ORDER") && BillData.Tables["PH_PAT_DTLS_ORDER"] != null && BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Count > 0)
                    //{
                    //    foreach (DataRow dr in BillData.Tables["PH_PAT_DTLS_ORDER"].Rows)
                    //    {
                    //        if (dr["EMR_PAT_DTLS_PH_ORDER_ID"] != DBNull.Value)
                    //        {
                    //            drDtls = dtPrescriptionDetails.NewRow();

                    //            if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail") && EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0)
                    //            {
                    //                if (dr["EMR_PAT_DTLS_PH_ORDER_ID"] != DBNull.Value && (dr["EMR_PAT_DTLS_PH_ORDER_ID"] != string.Empty))
                    //                {
                    //                    DataRow[] drSpecialInst = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID='" + dr["EMR_PAT_DTLS_PH_ORDER_ID"] + "'");
                    //                    if (drSpecialInst != null && drSpecialInst.Count() > 0)
                    //                    {
                    //                        drDtls["SPECIAL_INSTRUCTION"] = drSpecialInst[0]["CONDITIONAL_FREQUENCY"];
                    //                        drDtls["ADMINISTRATION_INSTRUCTION"] = drSpecialInst[0]["ADMINISTRATION_INSTRUCTION"];
                    //                        drDtls["REMARKS"] = drSpecialInst[0]["REMARKS"];
                    //                    }
                    //                }
                    //            }

                    //            if (dr["ROUTE"] != DBNull.Value)
                    //            {
                    //                drDtls["ROUTE"] = dr["ROUTE"];
                    //            }
                    //            else
                    //            {
                    //                if (OrderItems != null && OrderItems.Rows.Count > 0)
                    //                {
                    //                    if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail") && EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0)
                    //                    {
                    //                        if (dr["EMR_PAT_DTLS_PH_ORDER_ID"] != DBNull.Value && Convert.ToString(dr["EMR_PAT_DTLS_PH_ORDER_ID"]) != string.Empty)
                    //                        {
                    //                            if (dr["EMR_PAT_DTLS_PH_ORDER_ID"] != DBNull.Value && dr["EMR_PAT_DTLS_PH_ORDER_ID"] != string.Empty)
                    //                            {
                    //                                DataRow[] drOrderItems = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID='" + dr["EMR_PAT_DTLS_PH_ORDER_ID"] + "'");
                    //                                if (drOrderItems != null && drOrderItems.Count() > 0)
                    //                                {
                    //                                    drDtls["ROUTE"] = drOrderItems[0]["ROUTE"];


                    //                                    drDtls["DOSE"] = drOrderItems[0]["UNIT_DETAILS"];
                    //                                }
                    //                            }
                    //                        }
                    //                    }
                    //                }
                    //            }
                    //            drDtls["MEDICINE_NAME"] = dr["MEDICINE_NAME"];
                    //            if (drDtls["DOSE"] == DBNull.Value)
                    //            {
                    //                drDtls["DOSE"] = Convert.ToString(dr["DOSE"]) + "  " + Convert.ToString(dr["DOSE_UNIT"]);
                    //            }
                    //            drDtls["FREQUENCY"] = dr["FREQ_VALUE"];
                    //            if (Frequency != null && Frequency.Rows.Count > 0)
                    //            {
                    //                if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail") && EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0)
                    //                {
                    //                    if (dr["EMR_PAT_DTLS_PH_ORDER_ID"] != DBNull.Value && Convert.ToString(dr["EMR_PAT_DTLS_PH_ORDER_ID"]) != string.Empty)
                    //                    {
                    //                        DataRow[] drOrderItems = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID='" + dr["EMR_PAT_DTLS_PH_ORDER_ID"] + "'");
                    //                        if (drOrderItems != null && drOrderItems.Count() > 0)
                    //                        {
                    //                            var resrows = from freq in Frequency.AsEnumerable()
                    //                                          where drOrderItems[0]["FREQUENCY"] != DBNull.Value && freq["EMR_LOOKUP_ID"] != DBNull.Value && Convert.ToInt32(freq["EMR_LOOKUP_ID"]) == Convert.ToInt32(drOrderItems[0]["FREQUENCY"])
                    //                                          select freq;
                    //                            if (resrows != null && resrows.Count() > 0)
                    //                            {
                    //                                DataTable dtfreqtemp = resrows.CopyToDataTable();
                    //                                if (dtfreqtemp.Rows[0]["FIELD2"] != DBNull.Value && Convert.ToInt32(dtfreqtemp.Rows[0]["FIELD2"]) == 1)
                    //                                {
                    //                                    drDtls["FREQUENCY"] = "Once in every " + drOrderItems[0]["FREQUENCY_VALUE"] + " " + drOrderItems[0]["FREQUENCY_NAME"];
                    //                                }
                    //                                else
                    //                                {
                    //                                    if (drDtls["FREQUENCY"] == DBNull.Value)
                    //                                    {
                    //                                        drDtls["FREQUENCY"] = drOrderItems[0]["FREQUENCY_NAME"] + "-" + drOrderItems[0]["CONDITIONAL_FREQUENCY"];
                    //                                    }
                    //                                }
                    //                            }
                    //                        }
                    //                    }
                    //                }

                    //            }

                    //            if (OrderItems != null && OrderItems.Rows.Count > 0)
                    //            {
                    //                if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail") && EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0)
                    //                {
                    //                    if (dr["EMR_PAT_DTLS_PH_ORDER_ID"] != DBNull.Value && Convert.ToString(dr["EMR_PAT_DTLS_PH_ORDER_ID"]) != string.Empty)
                    //                    {
                    //                        DataRow[] drOrderItems = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID='" + dr["EMR_PAT_DTLS_PH_ORDER_ID"] + "'");
                    //                        if (drOrderItems != null && drOrderItems.Count() > 0)
                    //                        {
                    //                            drDtls["START_DATE"] = drOrderItems[0]["START_DATE"];
                    //                            //     drDtls["DOSE"] = drOrderItems[0]["UNIT_DETAILS"];
                    //                        }
                    //                    }
                    //                }
                    //            }


                    //            drDtls["DURATIONS"] = GetDurationDays(dr);
                    //            //  drDtls["START_DATE"] = dr["START_DATE"];
                    //            dtPrescriptionDetails.Rows.Add(drDtls);
                    //        }
                    //    }
                    //    // Providername = Convert.ToString( BillData.Tables["PH_PAT_DTLS_ORDER"].Rows[0]["PROVIDER_NAME"]);
                    //}

                    ////assigning value to master table
                    //dtPrescriptionMaster.Rows[0]["PATIENT_NAME"] = GetPatientName();
                    //dtPrescriptionMaster.Rows[0]["HOSPITAL_ID"] = CommonData.HospitalID;
                    //if (PatientInformation != null && PatientInformation.Rows.Count > 0)
                    //{
                    //    switch (Convert.ToInt16(PatientInformation.Rows[0]["GENDER"]))
                    //    {
                    //        case 0:
                    //            dtPrescriptionMaster.Rows[0]["GENDER"] = "Male";
                    //            break;
                    //        case 1:
                    //            dtPrescriptionMaster.Rows[0]["GENDER"] = "Female";
                    //            break;
                    //        case 2:
                    //            dtPrescriptionMaster.Rows[0]["GENDER"] = "Unknown";
                    //            break;
                    //        case 3:
                    //            dtPrescriptionMaster.Rows[0]["GENDER"] = "Others";
                    //            break;
                    //        default:
                    //            break;
                    //    }
                    //    dtPrescriptionMaster.Rows[0]["AGE"] = GetAge(PatientInformation.Rows[0]);
                    //    //DataTable dt = objCommon.GetAge(Convert.ToDateTime(PatientInformation.Rows[0]["DOB"]), DateTime.Now);
                    //    //dtPrescriptionMaster.Rows[0]["AGE"] = Convert.ToString(dt.Rows[0]["AgeInString"]);
                    //    dtPrescriptionMaster.Rows[0]["MRNO"] = PatientInformation.Rows[0]["MRNO"];
                    //    //dtPrescriptionMaster.Rows[0]["REFERENECE_NO"] = "0";

                    //}

                    // Details for RptEmrOrder report
                    DataTable dtPrintData = new DataTable("CPOE_ORDERS");
                    dtPrintData.Columns.Add(new DataColumn("REPORT_ID", typeof(Int64)));
                    dtPrintData.Columns.Add(new DataColumn("MRNO", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("PAT_NAME", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("DOCTOR_NAME", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("ENTRY_DATE", typeof(DateTime)));
                    dtPrintData.Columns.Add(new DataColumn("CATAGORY", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("MEDICINE_NAME", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("DOSAGE", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("DURATION", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("ROUTE", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("SERVICE_NAME", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("COUNT", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("CLINICAL_INDICATION", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("PROPOSED_DATE", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("REMARKS", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("DIAGNOSIS", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("DESIGNATION", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("DEPARTMENT", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("INSURANCE", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("AGE", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("DOB", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("SEX", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("ISGENERIC", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("QUALIFICATION", typeof(String)));

                    dtPrintData.Columns.Add(new DataColumn("CPT", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("FREQUENCY", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("FREQUENCY_FREETEXT", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("PROVIDER_REMARKS", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("COMMON_REMARKS", typeof(String)));

                    dtPrintData.Columns.Add(new DataColumn("SPECIAL_INSTRUCTION", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("ADMIN_INSTRUCTION", typeof(String)));

                    dtPrintData.Columns.Add(new DataColumn("START_DATE", typeof(DateTime)));
                    dtPrintData.Columns.Add(new DataColumn("STOP_DATE", typeof(DateTime)));
                    dtPrintData.Columns.Add(new DataColumn("SERVICE_ORDER_ID", typeof(Int64)));
                    dtPrintData.Columns.Add(new DataColumn("SCHEME", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("ADMISSION_ORDER_STATUS", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("DISPENSE_QUANTITY", typeof(String)));

                    dtPrintData.Columns.Add(new DataColumn("SERVICE_IMG_PATH", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("IMAGE", typeof(byte[])));
                    dtPrintData.Columns.Add(new DataColumn("SERVICE_IMG_PATH2", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("IMAGE2", typeof(byte[])));
                    dtPrintData.Columns.Add(new DataColumn("QUANTITY", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("DURATIONDATA", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("FREQUENCYDATA", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("PHONE_NO", typeof(string)));
                    dtPrintData.Columns.Add(new DataColumn("ADDITIVE_MEDNAME", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("ADDITIVE_QUANTITY", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("ADDITIVE_REMARKS", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("ADDITIVE_ALL", typeof(String)));
                    dtPrintData.Columns.Add(new DataColumn("MATERIAL_TYPE"));
                    dtPrintData.Columns.Add(new DataColumn("DISPLAY_NAME", typeof(String)));
                    DataTable dt = new DataTable();
                    DataTable dtValidPrintData = new DataTable();
                    var ValidItems = BillData.Tables["PH_PAT_DTLS_ORDER"].AsEnumerable().Where(x => IfNullReturnZero(x["IS_SHOW_PH_PRESCRIPTION"]) == 1).Select(x => x);
                    if (ValidItems.Any())
                    {
                        dt = ValidItems.CopyToDataTable();
                        if (!dt.Columns.Contains("MATERIAL_TYPE"))
                        {
                            dt.Columns.Add("MATERIAL_TYPE");
                        }
                        foreach (DataRow item in dt.Rows)
                        {
                            var res = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(w =>
                                          Convert.ToString(w["SL_NO"]) == Convert.ToString(item["SL_NO"]) &&
                                          w["REF_DTLS_PH_ORDER_ID"] == DBNull.Value &&
                                          IfNullReturnZero(w["EMR_PAT_DTLS_INV_ORDER_ID"]) == IfNullReturnZero(item["EMR_PAT_DTLS_PH_ORDER_ID"]));
                            if (res.Any())
                            {
                                item["MATERIAL_TYPE"] = Convert.ToInt32(res.First()["MATERIAL_TYPE"]);
                            }
                        }
                    }

                    DataTable GenID = new DataTable();
                    GenID.Columns.Add(new DataColumn("GENERIC_ID", typeof(String)));
                    string[] Result = (from dr in EMROrderRelation.Tables["Detail"].AsEnumerable()
                                       where EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0 && dr["GENERIC_ID"] != DBNull.Value
                                       select dr["GENERIC_ID"].ToString()).ToArray();

                    StringBuilder strGenID = new StringBuilder();
                    int i = 0;
                    foreach (var DrResult in Result)
                    {
                        if (Result != null && !string.IsNullOrWhiteSpace(Convert.ToString(DrResult)))
                        {
                            if (i == 0)
                            {
                                strGenID.Append(Convert.ToString(DrResult));
                                i++;
                            }
                            else
                            {
                                strGenID.Append("," + Convert.ToString(DrResult));
                            }
                        }
                    }
                    if (strGenID != null)
                    {
                        GenID.Rows.Add();
                        GenID.Rows[0]["GENERIC_ID"] = strGenID;
                    }

                    var Query = from row in dt.AsEnumerable()
                                where (row["EMR_PAT_DTLS_PH_ORDER_ID"] != DBNull.Value) || (row["EMR_PAT_DTLS_PH_ORDER_ID"] == DBNull.Value && Convert.ToString(GenID.Rows[0]["GENERIC_ID"]).Contains(Convert.ToString(row["GENERIC_ID"])))
                                select row;
                    if (Query.Any())
                    {
                        dtValidPrintData = Query.CopyToDataTable();
                    }
                    var PharmacyfromFO = from row in dt.AsEnumerable()
                                         where (row["EMR_PAT_DTLS_PH_ORDER_ID"] == DBNull.Value && !Convert.ToString(GenID.Rows[0]["GENERIC_ID"]).Contains(Convert.ToString(row["GENERIC_ID"])))
                                         select row;
                    if (PharmacyfromFO.Any())
                    {
                        dtValidPrintData.Merge(PharmacyfromFO.CopyToDataTable());
                    }

                    //for removing the child items of additive
                    if (dtValidPrintData != null && dtValidPrintData.Rows.Count > 0 && BillData.Tables.Contains("INV_PAT_BILLING") && BillData.Tables["INV_PAT_BILLING"] != null && BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0
                        && BillData.Tables["INV_PAT_BILLING"].Columns.Contains("IS_ADDITIVE") && BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(r => IfNullReturnZero(r["IS_ADDITIVE"]) == 1).Count() > 0)
                    {

                        var dataExist = from drPrint in dtValidPrintData.AsEnumerable()
                                        join drGrid in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                        on Convert.ToString(drPrint["SL_NO"]) equals Convert.ToString(drGrid["SL_NO"])
                                        where drGrid["REF_DTLS_PH_ORDER_ID"] == DBNull.Value &&
                                        IfNullReturnZero(drGrid["EMR_PAT_DTLS_INV_ORDER_ID"]) == IfNullReturnZero(drPrint["EMR_PAT_DTLS_PH_ORDER_ID"])
                                        select drPrint;
                        if (dataExist.Any())
                        {
                            
                            dtValidPrintData = dataExist.CopyToDataTable();
                            
                        }
                        else
                        {
                            dtValidPrintData.Rows.Clear();
                        }
                    }
                    if (BillData != null && dtValidPrintData.KIIsNotNullAndRowCount())
                    {

                        Int64 SubReportID = 0;
                        Int64 recordID = 0;
                        DataRow drPrintData = null;
                        foreach (DataRow dr in dtValidPrintData.Rows)
                        {
                            Int64 ReportId = 0;
                            ReportId++;
                            SubReportID++;
                            recordID++;
                            drPrintData = dtPrintData.NewRow();
                            drPrintData["REPORT_ID"] = ReportId;
                            drPrintData["MRNO"] = dr["MRNO"];
                            drPrintData["PAT_NAME"] = dr["PATIENT_NAME"];
                            if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("order") && EMROrderRelation.Tables["order"] != null && EMROrderRelation.Tables["order"].Rows.Count > 0)
                            {
                                drPrintData["DOCTOR_NAME"] = EMROrderRelation.Tables["order"].Rows[0]["EMPNAME"];

                            }
                            if (BillData.Tables.Contains("INCO_DTLS_CONTRACT_ACC") && BillData.Tables["INCO_DTLS_CONTRACT_ACC"].Rows.Count > 0 && BillData.Tables["INCO_DTLS_CONTRACT_ACC"] != null)
                            {
                                if (BillData.Tables["INCO_DTLS_CONTRACT_ACC"].Rows[0]["PAYING_PARTY_NAME"] != DBNull.Value)
                                {
                                    drPrintData["SCHEME"] = BillData.Tables["INCO_DTLS_CONTRACT_ACC"].Rows[0]["PAYING_PARTY_NAME"];
                                }
                            }
                            drPrintData["CATAGORY"] = "Pharmacy";

                            drPrintData["DISPLAY_NAME"] = dr["MEDICINE_NAME"];
                            DataTable dtNameSetting = CommonData.GetDefaultSettings(0,"CPOE_MEDICINE_FOR_BRAND_PRINT_GENERIC_NAME_IN_PRESCRIPTION");
                            if (dtNameSetting.KIIsNotNullAndRowCount() && Convert.ToInt16(IfNullReturnZero(dtNameSetting.Rows[0]["VALUE"])) == 1 && IfNullReturnZero(dr["MATERIAL_TYPE"])==0)
                            {
                                // for showing generic name in place of brand name...
                                if (Generic != null && Generic.Rows.Count > 0 && dr["GENERIC_ID"] != null)
                                {
                                    var GenericName = from drGen in Generic.AsEnumerable()
                                                      where drGen.Field<decimal>("EMR_LOOKUP_ID") == Convert.ToDecimal(dr["GENERIC_ID"])
                                                      select drGen;
                                    if (GenericName.Any())
                                    {
                                        DataTable dtGen = GenericName.CopyToDataTable();
                                        drPrintData["MEDICINE_NAME"] = dtGen.Rows[0]["LOOKUP_VALUE"];
                                    }
                                    else
                                    {
                                        drPrintData["MEDICINE_NAME"] = dr["MEDICINE_NAME"];
                                    }
                                }
                            }
                            else
                            {
                                drPrintData["MEDICINE_NAME"] = dr["MEDICINE_NAME"];
                            }
                            //if (dr.Table.Columns.Contains("DOSE_FOR_PRESCRIPTION") && dr["DOSE_FOR_PRESCRIPTION"] != DBNull.Value)
                            //{
                            //    drPrintData["MEDICINE_NAME"] = drPrintData["MEDICINE_NAME"] + " (" + Convert.ToString(dr["DOSE_FOR_PRESCRIPTION"]) + ")";
                            //}
                            //else 
                            if (EMROrderRelation.Tables.Contains("EMR_PAT_PH_DTLS_DOSAGE") && EMROrderRelation.Tables["EMR_PAT_PH_DTLS_DOSAGE"] != null && EMROrderRelation.Tables["EMR_PAT_PH_DTLS_DOSAGE"].Rows.Count > 0)
                            {
                                var queryDosage = EMROrderRelation.Tables["EMR_PAT_PH_DTLS_DOSAGE"].AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_DTLS_PH_ORDER_ID"]) ==
                                     IfNullReturnZero(dr["EMR_PAT_DTLS_PH_ORDER_ID"])).Select(x => x);
                                if (queryDosage.Count() > 0)
                                {
                                    DataTable dtDosage = new DataTable();
                                    dtDosage = queryDosage.CopyToDataTable();
                                    //if (dtDosage != null && dtDosage.Rows.Count > 0 && dtDosage.Rows[0]["TOTAL_PER_DOSE"] != DBNull.Value)
                                    //{
                                    //    drPrintData["MEDICINE_NAME"] = drPrintData["MEDICINE_NAME"] + " (" + Convert.ToString(Convert.ToDecimal(dtDosage.Rows[0]["TOTAL_PER_DOSE"]) / Convert.ToDecimal(dr["DOSE"])) + Convert.ToString(dtDosage.Rows[0]["DOSE_UNIT"]) +")";
                                    //}
                                    //else
                                    if (dtDosage != null && dtDosage.Rows.Count > 0 && dtDosage.Rows[0]["DOSE"] != DBNull.Value)
                                    {
                                        drPrintData["MEDICINE_NAME"] = drPrintData["MEDICINE_NAME"] + " (" + string.Join("/", dtDosage.AsEnumerable().Select(x => Convert.ToString(x["DOSE"]) + Convert.ToString(x["DOSE_UNIT"]))) + ")";
                                        //drPrintData["MEDICINE_NAME"] = drPrintData["MEDICINE_NAME"] + " (" + Convert.ToString(dtDosage.Rows[0]["DOSE"]) + Convert.ToString(dtDosage.Rows[0]["DOSE_UNIT"]) +")";
                                    }
                                }
                            }
                            drPrintData["DURATION"] = Convert.ToString(dr["DURATION"]) + "  " + Convert.ToString(dr["DURATION_VALUE"]);
                            drPrintData["DURATIONDATA"] = Convert.ToString(dr["DURATION"]) + "  " + Convert.ToString(dr["DURATION_VALUE"]);
                            if (dr["ROUTE"] != DBNull.Value) //bug id 39279
                            {
                                drPrintData["ROUTE"] = dr["ROUTE"] + "-" + dr["FORM"];
                            }
                            drPrintData["SERVICE_NAME"] = DBNull.Value;
                            drPrintData["COUNT"] = DBNull.Value;
                            drPrintData["CLINICAL_INDICATION"] = DBNull.Value;
                            drPrintData["PROPOSED_DATE"] = DBNull.Value;
                            drPrintData["DIAGNOSIS"] = DBNull.Value;
                            if (dr.Table.Columns.Contains("DOSE_FOR_PRESCRIPTION") && dr["DOSE_FOR_PRESCRIPTION"] != DBNull.Value)
                            {
                                drPrintData["QUANTITY"] = Convert.ToString(dr["DOSE"]) + "  " + Convert.ToString(dr["DOSE_UNIT"]) + " (" + Convert.ToString(dr["DOSE_FOR_PRESCRIPTION"]) + ")";
                            }
                            else if (dr.Table.Columns.Contains("DOSE_UNIT") && dr["DOSE_UNIT"] != DBNull.Value)
                            {
                                drPrintData["QUANTITY"] = Convert.ToString(dr["DOSE"]) + "  " + Convert.ToString(dr["DOSE_UNIT"]);
                            }
                            else//bug id 39279
                            {
                                drPrintData["QUANTITY"] = Convert.ToString(dr["QUANTITY"]) + "  " + Convert.ToString(dr["QUANTITY_UNIT"]);
                            }
                            //if (dr.Table.Columns.Contains("DOSE_FOR_PRESCRIPTION") && dr["DOSE_FOR_PRESCRIPTION"] != DBNull.Value)//from date is not required along with dose bug id 39161
                            //{
                            //    drPrintData["QUANTITY"] = Convert.ToString(dr["DOSE"]) + "  " + Convert.ToString(dr["DOSE_UNIT"]) + " (" + Convert.ToString(dr["DOSE_FOR_PRESCRIPTION"]) + ")" + " From " + Convert.ToDateTime(dr["START_DATE"]);
                            //}
                            //else
                            //{
                            //    drPrintData["QUANTITY"] = Convert.ToString(dr["DOSE"]) + "  " + Convert.ToString(dr["DOSE_UNIT"]) + " From " + Convert.ToDateTime(dr["START_DATE"]);
                            //}
                            if (PatientInformation != null && PatientInformation.Rows.Count > 0)
                            {
                                if (!PatientInformation.Columns.Contains("DOB"))
                                {
                                    PatientInformation.Columns.Add("DOB");
                                    if (Patient != null && Patient.DOB != null)
                                    {
                                        PatientInformation.Rows[0]["DOB"] = Convert.ToDateTime(Patient.DOB);
                                    }
                                }
                                drPrintData["AGE"] = GetAge(PatientInformation.Rows[0]);
                                drPrintData["DOB"] = PatientInformation.Rows[0]["DOB"];

                                switch (Convert.ToInt16(PatientInformation.Rows[0]["GENDER"]))
                                {
                                    case 0:
                                        drPrintData["SEX"] = "Male";
                                        break;
                                    case 1:
                                        drPrintData["SEX"] = "Female";
                                        break;
                                    case 2:
                                        drPrintData["SEX"] = "Unknown";
                                        break;
                                    case 3:
                                        drPrintData["SEX"] = "Others";
                                        break;
                                    default:
                                        break;
                                }
                            }
                            drPrintData["DESIGNATION"] = DBNull.Value;
                            drPrintData["DEPARTMENT"] = DBNull.Value;
                            drPrintData["INSURANCE"] = SchemeMemNo; //SelectedContract;//new changes
                            drPrintData["QUALIFICATION"] = DBNull.Value;

                            drPrintData["ISGENERIC"] = dr["MEDICINE_TYPE"];
                            drPrintData["CPT"] = recordID.ToString();
                            drPrintData["FREQUENCY"] = dr["FREQ_VALUE"];
                            drPrintData["FREQUENCYDATA"] = dr["FREQ_VALUE"];
                            //drPrintData["PROVIDER_REMARKS"] = dr["REMARKS"];
                            if (dtValidPrintData.Columns.Contains("COMMON_REMARKS") && dr["COMMON_REMARKS"] != DBNull.Value)  //Changed by Shuaib
                            {
                                drPrintData["COMMON_REMARKS"] = dr["COMMON_REMARKS"];
                            }

                            if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail") && EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0)
                            {
                                if (dr["EMR_PAT_DTLS_PH_ORDER_ID"] != DBNull.Value && (Convert.ToString(dr["EMR_PAT_DTLS_PH_ORDER_ID"]) != string.Empty))
                                {
                                    DataRow[] drSpecialInst = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID='" + dr["EMR_PAT_DTLS_PH_ORDER_ID"] + "'");
                                    if (drSpecialInst != null && drSpecialInst.Count() > 0)
                                    {
                                        if (drSpecialInst[0]["CONDITIONAL_FREQUENCY"] != DBNull.Value)
                                        {
                                            drPrintData["SPECIAL_INSTRUCTION"] = drSpecialInst[0]["CONDITIONAL_FREQUENCY"];
                                        }
                                        else
                                        {
                                            drPrintData["SPECIAL_INSTRUCTION"] = string.Empty;

                                        }

                                        if (drSpecialInst[0]["ADMINISTRATION_INSTRUCTION"] != DBNull.Value)
                                        {
                                            drPrintData["ADMIN_INSTRUCTION"] = drSpecialInst[0]["ADMINISTRATION_INSTRUCTION"];
                                        }
                                        else
                                        {
                                            drPrintData["ADMIN_INSTRUCTION"] = string.Empty;
                                        }
                                        if (dr["FREQ_VALUE"] != DBNull.Value)
                                        {
                                            drPrintData["FREQUENCY"] = dr["FREQ_VALUE"];
                                            drPrintData["FREQUENCYDATA"] = dr["FREQ_VALUE"];
                                            drPrintData["DOSAGE"] = Convert.ToString(dr["DOSE"]) + "  " + Convert.ToString(dr["DOSE_UNIT"]) + " " + Convert.ToString(dr["FREQ_VALUE"]) + " " + "at" + " " + Convert.ToString(drSpecialInst[0]["ADMIN_TIME"]);
                                        }
                                        else if (dr["FREQUENCY_FREETEXT"] != DBNull.Value)
                                        {
                                            drPrintData["FREQUENCY"] = dr["FREQUENCY_FREETEXT"];
                                            drPrintData["FREQUENCYDATA"] = dr["FREQUENCY_FREETEXT"];
                                            drPrintData["DOSAGE"] = Convert.ToString(dr["DOSE"]) + "  " + Convert.ToString(dr["DOSE_UNIT"]) + " " + Convert.ToString(dr["FREQUENCY_FREETEXT"]) + " " + "at" + " " + Convert.ToString(drSpecialInst[0]["ADMIN_TIME"]);
                                        }
                                        //bug id 41442
                                        if (Frequency != null && Frequency.Rows.Count > 0  && drSpecialInst[0]["FREQUENCY_VALUE"] != DBNull.Value)
                                        {
                                            var FreqRow = from freq in Frequency.AsEnumerable()
                                                          where drSpecialInst[0]["FREQUENCY"] != DBNull.Value && freq["EMR_LOOKUP_ID"] != DBNull.Value && Convert.ToInt32(freq["EMR_LOOKUP_ID"]) == Convert.ToInt32(drSpecialInst[0]["FREQUENCY"])
                                                          select freq;
                                            if (FreqRow != null && FreqRow.Count() > 0)
                                            {
                                                DataTable dtfreqtemp = FreqRow.CopyToDataTable();
                                                if (dtfreqtemp.Rows[0]["FIELD2"] != DBNull.Value && Convert.ToInt32(dtfreqtemp.Rows[0]["FIELD2"]) == 1)
                                                {
                                                    drPrintData["FREQUENCY"] = "Once in every " + drSpecialInst[0]["FREQUENCY_VALUE"] + " " + dtfreqtemp.Rows[0]["FIELD1"];
                                                    drPrintData["FREQUENCYDATA"] = "Once in every " + drSpecialInst[0]["FREQUENCY_VALUE"] + " " + dtfreqtemp.Rows[0]["FIELD1"];
                                                }
                                            }
                                        }
                                        //bug id 41442 end
                                    }
                                }
                                else
                                {
                                    if (dr["FREQ_VALUE"] != DBNull.Value)
                                    {
                                        drPrintData["FREQUENCY"] = dr["FREQ_VALUE"];
                                        drPrintData["FREQUENCYDATA"] = dr["FREQ_VALUE"];
                                        drPrintData["DOSAGE"] = Convert.ToString(dr["DOSE"]) + "  " + Convert.ToString(dr["DOSE_UNIT"]) + " " + Convert.ToString(dr["FREQ_VALUE"]);
                                    }
                                    if (dr["ADMINISTRATION_INSTRUCTION"] != DBNull.Value)
                                    {
                                        drPrintData["ADMIN_INSTRUCTION"] = dr["ADMINISTRATION_INSTRUCTION"];
                                    }
                                    else
                                    {
                                        drPrintData["ADMIN_INSTRUCTION"] = string.Empty;
                                    }
                                    drPrintData["SPECIAL_INSTRUCTION"] = string.Empty;

                                }
                            }

                            if (dr["REMARKS"] != DBNull.Value)
                            {
                                drPrintData["REMARKS"] = dr["REMARKS"];
                            }
                            else
                            {
                                drPrintData["REMARKS"] = string.Empty;
                            }
                            if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail") && EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0)
                            {
                                drPrintData["ENTRY_DATE"] = EMROrderRelation.Tables["Detail"].Rows[0]["ENTER_VISIT"];
                                drPrintData["STOP_DATE"] = EMROrderRelation.Tables["Detail"].Rows[0]["STOP_DATE"];

                            }
                            drPrintData["START_DATE"] = dr["START_DATE"];
                            drPrintData["SERVICE_ORDER_ID"] = dr["EMR_PAT_DTLS_PH_ORDER_ID"];
                            drPrintData["ADMISSION_ORDER_STATUS"] = DBNull.Value;
                            drPrintData["DISPENSE_QUANTITY"] = dr["DISPENSE_QUANTITY"];
                            drPrintData["SERVICE_IMG_PATH"] = DBNull.Value;
                            drPrintData["IMAGE"] = DBNull.Value;
                            drPrintData["SERVICE_IMG_PATH2"] = DBNull.Value;
                            drPrintData["IMAGE2"] = DBNull.Value;
                            dtPrintData.Rows.Add(drPrintData);
                        }
                    }

                    //DataView dview = new DataView(dtPrintData);
                    //dview.Sort = "MEDICINE_NAME ASC";
                    //dtPrintData = dview.ToTable();

                    DataTable dtcriteria = new DataTable();
                    dtcriteria.Columns.Add("MRNO");
                    dtcriteria.Columns.Add("MODE");
                    dtcriteria.Rows.Add();
                    dtcriteria.Rows[0]["MRNO"] = PatientInformation.Rows[0]["MRNO"];
                    MainEMRShared obj = new MainEMRShared();
                    DataTable dtAllergyTemp = obj.FetchPatWarning(dtcriteria);

                    if (dtAllergyTemp != null && dtAllergyTemp.Rows.Count > 0)
                    {
                        DataRow[] drvalidAllergy = dtAllergyTemp.Select("ISVALID=1 AND WARNING_TYPE=" + (int)Enumerators.EMR.PatientWarningType.DrugAllergy);
                        if (drvalidAllergy != null && drvalidAllergy.Count() > 0)
                        {
                            dtAllergyTemp = drvalidAllergy.CopyToDataTable();
                        }
                        else
                            dtAllergyTemp = dtAllergyTemp.Clone();
                    }

                    DataTable dtcriteriaDiagno = new DataTable();
                    dtcriteriaDiagno.Columns.Add("MRNO");
                    dtcriteriaDiagno.Columns.Add("MODE");
                    dtcriteriaDiagno.Columns.Add("PAT_FIN_ENCOUNTER_ID");
                    dtcriteriaDiagno.Rows.Add();
                    dtcriteriaDiagno.Rows[0]["MRNO"] = PatientInformation.Rows[0]["MRNO"];
                    dtcriteriaDiagno.Rows[0]["PAT_FIN_ENCOUNTER_ID"] = SelectedPatientFinEncounterID;

                    MainBillingShared objBilling = new MainBillingShared();
                    DataSet dsDiagnoTemp = objBilling.FetchPharmasyPrescriptionDtls(dtcriteriaDiagno);
                    if (dsDiagnoTemp != null && dsDiagnoTemp.Tables.Contains("EMR_PRESC_DIGNO") && dsDiagnoTemp.Tables["EMR_PRESC_DIGNO"] != null && dsDiagnoTemp.Tables["EMR_PRESC_DIGNO"].Rows.Count > 0)
                    {
                        dtDiagno = dsDiagnoTemp.Tables["EMR_PRESC_DIGNO"].Copy();
                    }
                    else if (dsDiagnoTemp != null && dsDiagnoTemp.Tables.Contains("EMR_PRESC_DIGNO") && dsDiagnoTemp.Tables["EMR_PRESC_DIGNO"] != null)
                    {
                        dtDiagno = dsDiagnoTemp.Tables["EMR_PRESC_DIGNO"].Clone();
                    }
                    if (dsDiagnoTemp != null && dsDiagnoTemp.Tables.Contains("VITAL_SIGN") && dsDiagnoTemp.Tables["VITAL_SIGN"] != null && dsDiagnoTemp.Tables["VITAL_SIGN"].Rows.Count > 0)
                    {
                        dtPrescriptionMaster.Rows[0]["WEIGHT"] = dsDiagnoTemp.Tables["VITAL_SIGN"].Rows[0]["BODY_WEIGHT"];
                    }

                    //if (dtAllergyTemp != null && dtAllergyTemp.Rows.Count > 0)
                    //{
                    //    DataRow drAllergyDtls = null;

                    //    foreach (DataRow drAll in dtAllergyTemp.Rows)
                    //    {
                    //        if (drAll["DRUG_ALLERGY_TYPE"] != DBNull.Value && Convert.ToInt32(drAll["DRUG_ALLERGY_TYPE"]) == (int)Infologics.Medilogics.Enumerators.EMR.DrugAllergyType.NKDA)
                    //        {
                    //            ////   dtAllergy.Rows.Clear();
                    //            //   drAllergyDtls = dtAllergy.NewRow();
                    //            //   drAllergyDtls["ID"] = drAll["EMR_ALLERGY_ID"];
                    //            //   drAllergyDtls["NAME"] = drAll["ALLERGYNAME"];
                    //            //   dtAllergy.Rows.Add(drAllergyDtls);
                    //            //   break;
                    //        }
                    //        else
                    //        {

                    //            drAllergyDtls = dtAllergy.NewRow();
                    //            drAllergyDtls["ID"] = drAll["EMR_ALLERGY_ID"];
                    //            drAllergyDtls["NAME"] = drAll["ALLERGYNAME"];
                    //            dtAllergy.Rows.Add(drAllergyDtls);
                    //        }
                    //    }

                    //    if (dtAllergy != null && dtAllergy.Rows.Count == 0)
                    //    {
                    //        dtAllergy.Rows.Add("", "NKDA");
                    //    }
                    //}

                    //if (dtPrescriptionDetails == null || (dtPrescriptionDetails != null && dtPrescriptionDetails.Rows.Count == 0))
                    //{
                    //    return;
                    //}

                    //if (DsEMROrderData != null && DsEMROrderData.Tables.Contains("Order") && DsEMROrderData.Tables["Order"] != null && DsEMROrderData.Tables["Order"].Rows.Count > 0)
                    //{
                    //    Providername = Convert.ToString(DsEMROrderData.Tables["Order"].Rows[0]["EMPNAME"]);
                    //}

                    if (SelectedEMROrder != null && SelectedEMROrder.Table.Columns.Contains("EMPNAME") && SelectedEMROrder["EMPNAME"] != DBNull.Value)
                    {
                        Providername = SelectedEMROrder["EMPNAME"].ToString();
                    }
                    if (SelectedEMROrder != null && !SelectedEMROrder.Table.Columns.Contains("EMPNAME") && EMROrderRelation != null && EMROrderRelation.Tables.Contains("order") &&
                        EMROrderRelation.Tables["order"].KIIsNotNullAndRowCount() && SelectedEMROrder.Table.Columns.Contains("EMR_PROVIDER_VISIT_ID"))
                    {
                        var Drname = EMROrderRelation.Tables["order"].AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PROVIDER_VISIT_ID"]) ==
                                     IfNullReturnZero(SelectedEMROrder["EMR_PROVIDER_VISIT_ID"])).Select(x => x);
                        if (Drname.Any())
                        {
                            Providername = Convert.ToString(Drname.First()["EMPNAME"]);
                        }
                    }
                    else if (BillData.Tables["INV_PAT_BILLING"].Rows[0]["EMR_PROVIDER_VISIT_ID"] != DBNull.Value && EMROrderRelation.Tables["order"].KIIsNotNullAndRowCount())//if SelectedEMROrder is null then
                    {
                        var Drname = EMROrderRelation.Tables["order"].AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PROVIDER_VISIT_ID"]) ==
                                        IfNullReturnZero(BillData.Tables["INV_PAT_BILLING"].Rows[0]["EMR_PROVIDER_VISIT_ID"])).Select(x => x);
                        if (Drname.Any())
                        {
                            Providername = Convert.ToString(Drname.First()["EMPNAME"]);
                        }
                    }
                    if (SelectedEMROrder != null && SelectedEMROrder.Table.Columns.Contains("EMR_PROVIDER_VISIT_ID"))
                    {
                        var query = EMROrderRelation.Tables["EMR_PROVIDER_VISIT"].AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PROVIDER_VISIT_ID"]) ==
                                    IfNullReturnZero(SelectedEMROrder["EMR_PROVIDER_VISIT_ID"]) && IfNullReturnZero(x["PROVIDER_ID"]) != IfNullReturnZero(SelectedEMROrder["PROVIDER_ID"])).Select(x => x);
                        if (query.Any() && query.First()["PROVIDER_NAME"] != DBNull.Value)
                        {
                            Providername = Providername + " ( By " + query.First()["PROVIDER_NAME"] + " )";
                        }
                    }
                    //dtAllergy.TableName = "EMR_PRESC_ALLERGY";
                    //dtDiagno.TableName = "EMR_PRESC_DIAG";

                    DataSet dsPrescription = new DataSet();
                    DataTable dtGenericDtls = GenericDtls();
                    dtPrintData.Merge(dtGenericDtls);
                    if (!dtPrintData.Columns.Contains("ERX_NUMBER"))
                    {
                        dtPrintData.Columns.Add("ERX_NUMBER", typeof(long));
                    }
                    if (ERXNo != null && ERXNo != string.Empty)
                    {
                        dtPrintData.AsEnumerable().ForEach(x => x["ERX_NUMBER"] = Convert.ToInt64(ERXNo));
                    }
                    //DataView dview = new DataView(dtPrintData);
                    //dview.Sort = "DISPLAY_NAME ASC";
                    //dtPrintData = dview.ToTable();
                    //var varPharmacyList = (from dr in dtPrintData.AsEnumerable()
                    //                           where dr["DISPLAY_NAME"] != DBNull.Value
                    //                           select dr).OrderBy(order => order["DISPLAY_NAME"]);
                    //if (varPharmacyList.Count() > 0)
                    //{
                    //    DataTable dt1 = varPharmacyList.CopyToDataTable();
                    //    dtPrintData = dt1.Copy();
                    //    dtPrintData.TableName = "CPOE_ORDERS";
                    //}

                    dsPrescription.Tables.Add(dtPrintData);
                    //dsPrescription.Tables.Add(dtPrescriptionDetails);

                    dtPrescriptionDetails.Merge(dsBillXSD.EMR_PRESC_MAST);
                    dtPrescriptionDetails.Merge(dtPrescriptionMaster);
                    DataTable dtVital = new DataTable("VITALS");
                    dtVital.Columns.Add("WEIGHT");
                    dtVital.Rows.Add(Convert.ToString(dtPrescriptionMaster.Rows[0]["WEIGHT"]));
                    dsPrescription.Tables.Add(dtVital);
                    //dsPrescription.Tables.Add(dtPrescriptionMaster);
                    dsPrescription.Tables.Add(dtDiagno);
                    //dsPrescription.Tables.Add(dtAllergy);
                    dtAllergyTemp.TableName = "EMR_PAT_WARNING";
                    dtDiagno.TableName = "DIAGNOSIS";
                    dtDiagno.Columns["ID"].ColumnName = "ICD_CODE";
                    dtDiagno.Columns["NAME"].ColumnName = "ICD_NAME";
                    DataTable dtAllergyNew = new DataTable();
                    dtAllergyNew = dtAllergyTemp.Copy();
                    dsPrescription.Tables.Add(dtAllergyNew);
                    int EnableAllergy = 0;
                    int.TryParse(CommonData.GetDefaultSettings("CPOE_VIEW_IS_ALLERGY_DIAGNOSIS_WEIGHT_IN_PRINT_PREVIEW"), out EnableAllergy);
                    string settingsValue = Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.GetDefaultSettings("MEDICINE PRESCRIPTION WITH IMAGE");
                    if (dsPrescription != null && dsPrescription.Tables.Contains("CPOE_ORDERS") && dsPrescription.Tables["CPOE_ORDERS"].KIIsNotNullAndRowCount())
                    {
                        foreach (DataRow dr in dsPrescription.Tables["CPOE_ORDERS"].Rows)
                        {

                            dr["DOCTOR_NAME"] = Providername;
                            if (PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Columns.Contains("MOBILEPHONE") && PatientInformation.Rows[0]["MOBILEPHONE"] != DBNull.Value)
                            {
                                dr["PHONE_NO"] = PatientInformation.Rows[0]["MOBILEPHONE"];
                            }
                            //dr["PHONE_NO"] = string.Empty;
                            if (dr["SERVICE_ORDER_ID"] != DBNull.Value)
                            {
                                fillAdditiveforprint(dr);
                            }
                        }
                        Infologics.Medilogics.CommonSharedUI.EMROrders.EMROrdersPrint objemrPrint = new CommonSharedUI.EMROrders.EMROrdersPrint();
                        objemrPrint.Mode = 0;
                        objemrPrint.Style = Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.GetWindowStyle(WindowControlBoxStyle.Default) as Style;
                        objemrPrint.AllowsTransparency = false;
                        objemrPrint.PrintData = dsPrescription;//dtPrintData;
                        objemrPrint.ShowDialog();
                    }

                }
            }
            catch (Exception)
            {                
                throw;
            }
        }

        private void fillAdditiveforprint(DataRow drPrescription)
        {
            try
            {
                string AdditiveQty = string.Empty;
                string AdditiveMedName = string.Empty;
                string AdditiveRemarks = string.Empty;
                string AdditiveDose = string.Empty;
                string AdditiveAll = string.Empty;
                Int32 ReportId = 0;
                DataTable dtAdditive = new DataTable();
                MainEMRShared objShared = new MainEMRShared();
                dtAdditive.Merge(objShared.FetchAdditiveDetails(Convert.ToString(drPrescription["SERVICE_ORDER_ID"]), 2));
                if (dtAdditive.KIIsNotNullAndRowCount())
                {
                    DataRow[] dradditive = dtAdditive.Select("EMR_PAT_DTLS_PH_ORDER_ID IS NOT NULL");
                    if (dradditive.Length > 0)
                    {
                        foreach (DataRow dradd in dradditive.Where(r => r.RowState != DataRowState.Deleted))
                        {
                            if (dradd["DOSE"].KIIsNotNullOrEmpty())
                            {
                                AdditiveDose = Convert.ToString(dradd["DOSE"]);
                            }
                            ReportId++;
                            AdditiveAll = AdditiveAll + ReportId + ". ";
                            if (dradd["GENERIC_NAME"].KIIsNotNullOrEmpty())
                            {
                                AdditiveMedName = Convert.ToString(dradd["GENERIC_NAME"]);
                                if (AdditiveDose != string.Empty)
                                {
                                    AdditiveMedName = AdditiveMedName + " " + "(" + AdditiveDose + ")";
                                }
                                AdditiveAll = AdditiveAll + AdditiveMedName;
                            }
                            if (dradd["QUANTITY"].KIIsNotNullOrEmpty())
                            {
                                AdditiveQty = Convert.ToString(dradd["QUANTITY"]);
                                if (dradd["MAX_QUANTITY"].KIIsNotNullOrEmpty() && AdditiveQty != string.Empty)
                                {
                                    AdditiveQty = AdditiveQty + " - " + Convert.ToString(dradd["MAX_QUANTITY"]);
                                }
                                if (dradd["QUANTITY_UNIT"].KIIsNotNullOrEmpty())
                                {
                                    AdditiveQty = AdditiveQty + " " + Convert.ToString(dradd["QUANTITY_UNIT"]).Trim();
                                }
                                if (AdditiveQty != string.Empty && AdditiveDose != string.Empty)
                                {
                                    AdditiveQty = AdditiveQty + " " + "(" + AdditiveDose + ")";
                                }
                                if (AdditiveAll != string.Empty && AdditiveQty != string.Empty)
                                {
                                    AdditiveAll = AdditiveAll + ",";
                                    AdditiveAll = AdditiveAll + " Dose : " + AdditiveQty;
                                }
                            }
                            if (dradd["REMARKS"].KIIsNotNullOrEmpty())
                            {
                                AdditiveRemarks = Convert.ToString(dradd["REMARKS"]);
                                if (AdditiveAll != string.Empty)
                                {
                                    AdditiveAll = AdditiveAll + ",";
                                    AdditiveAll = AdditiveAll + " Remarks : " + AdditiveRemarks;
                                }
                            }
                            if (AdditiveAll != string.Empty)
                            {
                                AdditiveAll = AdditiveAll + "\n";
                            }
                        }
                    }
                }
                drPrescription["ADDITIVE_MEDNAME"] = AdditiveMedName;
                drPrescription["ADDITIVE_QUANTITY"] = AdditiveQty;
                drPrescription["ADDITIVE_REMARKS"] = AdditiveRemarks;
                drPrescription["ADDITIVE_ALL"] = AdditiveAll.Trim();
            }
            catch (Exception)
            {
                throw;
            }
        }
        private DataTable GetEMRAllerry(DataTable dtAllergyData)
        {
            try
            {
                DataTable dtData = new DataTable("DIAGNOSIS");
                dtData.Columns.Add("ID");
                dtData.Columns.Add("NAME");
                if (dtAllergyData != null && dtAllergyData.Rows.Count > 0)
                {
                    var diag = from drItem in dtAllergyData.AsEnumerable()
                               where drItem["ISVALID"] != DBNull.Value &&
                               Convert.ToInt16(drItem["ISVALID"]) == 1 &&
                               ((dtAllergyData.Rows.Count > 1 && Convert.ToString(drItem["ALLERGYNAME"]).Trim().ToUpper() != "NKDA") ||
                                dtAllergyData.Rows.Count < 2)
                               select new
                               {
                                   ID = 0,
                                   NAME = drItem["ALLERGYNAME"]
                               };
                    if (diag.Count() > 0)
                    {
                        dtData = new General.Control.Common().LINQToDataTable(diag.Distinct());
                    }
                }
                return dtData;
            }
            catch (Exception)
            {

                throw;
            }
        }

        private DataTable GetEMRDiagnosis(DataTable dtDiagData)
        {
            try
            {
                DataTable dtData = new DataTable("DIAGNOSIS");
                dtData.Columns.Add("ID");
                dtData.Columns.Add("NAME");
                if (dtDiagData != null && dtDiagData.Rows.Count > 0)
                {
                    var diag = from drItem in dtDiagData.AsEnumerable()
                               select new
                               {
                                   ID = drItem["ICD_CODE"],
                                   NAME = drItem["ICD_NAME"]
                               };
                    if (diag.Count() > 0)
                    {
                        dtData = new General.Control.Common().LINQToDataTable(diag.Distinct());
                    }
                }
                return dtData;
            }
            catch (Exception)
            {

                throw;
            }
        }

        string GetGenericPrescriptionDosePrint(DataTable dtDosageTemp)
        {
            try
            {
                string strDose = string.Empty;
                foreach (DataRow dritem in dtDosageTemp.Rows)
                {
                    strDose = strDose + Convert.ToString(dritem["DOSE"]) + "" + Convert.ToString(dritem["DOSE_UNIT"]) + "/";
                }
                strDose = strDose.TrimEnd('/');
                if (strDose != string.Empty)
                {
                    strDose = "(" + strDose + ")";
                }
                return strDose;
            }
            catch (Exception)
            {

                throw;
            }
        }

        private DataTable GenericDtls()
        {
            try
            {
                DataTable dtGeneric = new DataTable();
                DataTable dttemp = new DataTable();
                DataTable dtDosage = new DataTable();
                //if (EMROrderRelation.Tables["Detail"].Rows.Count > 0 && EMROrderRelation.Tables["Detail"].Rows[0]["MEDICINE_TYPE"] != DBNull.Value
                //    && SelectedEMROrder != null && SelectedEMROrder["EMR_PAT_MAST_INV_ORDER_ID"] != DBNull.Value && EMROrderRelation.Tables["Detail"].Rows[0]["EMR_PAT_MAST_INV_ORDER_ID"] != DBNull.Value)
                //{
                //    var query = EMROrderRelation.Tables["Detail"].AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_MAST_INV_ORDER_ID"]) ==
                //                 IfNullReturnZero(SelectedEMROrder["EMR_PAT_MAST_INV_ORDER_ID"]) && IfNullReturnZero(x["MEDICINE_TYPE"]) == 1 && IfNullReturnZero(x["EMR_PAT_PH_DRUG_ADMIN_ID"]) == 0).Select(x => x);
                //    if (query.Count() > 0)
                //    {
                //        dttemp = query.CopyToDataTable();
                //    }
                //}
                if (EMROrderRelation.Tables["Detail"].KIIsNotNullAndRowCount() && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())//changed for multiple EMR order
                {
                    var dataExist = from drRelation in EMROrderRelation.Tables["Detail"].AsEnumerable()
                                    join drGrid in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                    on Convert.ToInt64(IfNullReturnZero(drRelation["EMR_PAT_DTLS_INV_ORDER_ID"])) equals Convert.ToInt64(IfNullReturnZero(drGrid["EMR_PAT_DTLS_INV_ORDER_ID"]))
                                    where IfNullReturnZero(drRelation["MEDICINE_TYPE"]) == 1 && IfNullReturnZero(drRelation["EMR_PAT_PH_DRUG_ADMIN_ID"]) == 0
                                    select drRelation;
                    if (dataExist.Any())
                    {
                        dttemp = dataExist.CopyToDataTable();
                    }
                }
                if (dttemp != null && dttemp.Rows.Count > 0 && BillData.Tables.Contains("INV_PAT_BILLING") && BillData.Tables["INV_PAT_BILLING"] != null && BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0)
                {
                    dtGeneric = dttemp.Clone();
                    foreach (DataRow dr in BillData.Tables["INV_PAT_BILLING"].Rows)
                    {
                        if (dr["REF_DTLS_PH_ORDER_ID"] == DBNull.Value)//for removing the child items of additive
                        {
                            DataRow[] drSelected = dttemp.Select("NAME='" + dr["NAME"] + "'");
                            if (drSelected != null && drSelected.Count() > 0)
                            {
                                dtGeneric.Merge(drSelected.CopyToDataTable());
                            }
                        }
                    }
                }
                DataTable dtGenericDetails = new DataTable("CPOE_ORDERS");
                dtGenericDetails.Columns.Add(new DataColumn("REPORT_ID", typeof(Int64)));
                dtGenericDetails.Columns.Add(new DataColumn("MRNO", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("PAT_NAME", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("DOCTOR_NAME", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("ENTRY_DATE", typeof(DateTime)));
                dtGenericDetails.Columns.Add(new DataColumn("CATAGORY", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("MEDICINE_NAME", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("DOSAGE", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("DURATION", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("ROUTE", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("SERVICE_NAME", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("COUNT", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("CLINICAL_INDICATION", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("PROPOSED_DATE", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("REMARKS", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("DIAGNOSIS", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("DESIGNATION", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("DEPARTMENT", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("INSURANCE", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("AGE", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("DOB", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("SEX", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("ISGENERIC", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("QUALIFICATION", typeof(String)));

                dtGenericDetails.Columns.Add(new DataColumn("CPT", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("FREQUENCY", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("PROVIDER_REMARKS", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("COMMON_REMARKS", typeof(String)));

                dtGenericDetails.Columns.Add(new DataColumn("SPECIAL_INSTRUCTION", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("ADMIN_INSTRUCTION", typeof(String)));

                dtGenericDetails.Columns.Add(new DataColumn("START_DATE", typeof(DateTime)));
                dtGenericDetails.Columns.Add(new DataColumn("STOP_DATE", typeof(DateTime)));
                dtGenericDetails.Columns.Add(new DataColumn("SERVICE_ORDER_ID", typeof(Int64)));
                dtGenericDetails.Columns.Add(new DataColumn("SCHEME", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("ADMISSION_ORDER_STATUS", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("DISPENSE_QUANTITY", typeof(String)));

                dtGenericDetails.Columns.Add(new DataColumn("SERVICE_IMG_PATH", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("IMAGE", typeof(byte[])));
                dtGenericDetails.Columns.Add(new DataColumn("SERVICE_IMG_PATH2", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("IMAGE2", typeof(byte[])));
                dtGenericDetails.Columns.Add(new DataColumn("QUANTITY", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("DURATIONDATA", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("FREQUENCYDATA", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("PHONE_NO", typeof(string)));
                dtGenericDetails.Columns.Add(new DataColumn("ADDITIVE_MEDNAME", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("ADDITIVE_QUANTITY", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("ADDITIVE_REMARKS", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("ADDITIVE_ALL", typeof(String)));
                dtGenericDetails.Columns.Add(new DataColumn("DISPLAY_NAME", typeof(String)));
                DataRow drDtls = null;
                if (dtGeneric != null && dtGeneric.Rows.Count > 0)
                {
                    Int64 SubReportID = 0;
                    Int64 recordID = 0;

                    foreach (DataRow dr in dtGeneric.Rows)
                    {
                        drDtls = dtGenericDetails.NewRow();
                        Int64 ReportId = 0;
                        ReportId++;
                        SubReportID++;
                        recordID++;
                        drDtls["REPORT_ID"] = ReportId;
                        if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("order") && EMROrderRelation.Tables["order"] != null && EMROrderRelation.Tables["order"].Rows.Count > 0)
                        {
                            drDtls["DOCTOR_NAME"] = EMROrderRelation.Tables["order"].Rows[0]["EMPNAME"];

                        }
                        if (BillData.Tables.Contains("INCO_DTLS_CONTRACT_ACC") && BillData.Tables["INCO_DTLS_CONTRACT_ACC"].Rows.Count > 0 && BillData.Tables["INCO_DTLS_CONTRACT_ACC"] != null)
                        {
                            if (BillData.Tables["INCO_DTLS_CONTRACT_ACC"].Rows[0]["PAYING_PARTY_NAME"] != DBNull.Value)
                            {
                                drDtls["SCHEME"] = BillData.Tables["INCO_DTLS_CONTRACT_ACC"].Rows[0]["PAYING_PARTY_NAME"];
                            }
                        }
                        drDtls["CATAGORY"] = "Pharmacy";
                        if (EMROrderRelation.Tables.Contains("EMR_PAT_PH_DTLS_DOSAGE") && EMROrderRelation.Tables["EMR_PAT_PH_DTLS_DOSAGE"] != null && EMROrderRelation.Tables["EMR_PAT_PH_DTLS_DOSAGE"].Rows.Count > 0)
                        {
                            var query = EMROrderRelation.Tables["EMR_PAT_PH_DTLS_DOSAGE"].AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_DTLS_PH_ORDER_ID"]) ==
                                 IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"])).Select(x => x);
                            if (query.Count() > 0)
                            {
                                dtDosage = query.CopyToDataTable();
                                // drDtls["MEDICINE_NAME"] = dr["NAME"] + " " + Convert.ToString(dtDosage.Rows[0]["DOSE"]) + "  " + Convert.ToString(dtDosage.Rows[0]["DOSE_UNIT"]);//Bug Id 33483     
                                drDtls["MEDICINE_NAME"] = dr["NAME"] + " " + GetGenericPrescriptionDosePrint(dtDosage);
                                drDtls["DISPLAY_NAME"] = dr["NAME"] + " " + GetGenericPrescriptionDosePrint(dtDosage);
                                //drDtls["QUANTITY"] = Convert.ToString(dr["QUANTITY"]) + "  " + Convert.ToString(dr["QUANTITY_UNIT"]) + " " + GetGenericPrescriptionDosePrint(dtDosage) + " From " + Convert.ToDateTime(dr["START_DATE"]);
                                drDtls["QUANTITY"] = Convert.ToString(dr["QUANTITY"]) + "  " + Convert.ToString(dr["QUANTITY_UNIT"]) + " " + GetGenericPrescriptionDosePrint(dtDosage);//bug id 39161


                                string strFrequency = Convert.ToString(dr["FREQUENCY_NAME"]);
                                if (FrequencyTemp.KIIsNotNullAndRowCount() && dr["ISFREQUENCY_FREETEXT"] != DBNull.Value && Convert.ToInt32(dr["ISFREQUENCY_FREETEXT"]) == 0 && dr["FREQUENCY"] != DBNull.Value)
                                {
                                    if (FrequencyTemp.Select("EMR_LOOKUP_ID=" + dr["FREQUENCY"].ToString()).Count() > 0)
                                    {
                                        strFrequency = Convert.ToString(FrequencyTemp.Select("EMR_LOOKUP_ID=" + dr["FREQUENCY"]).First()["FIELD1"]);
                                        drDtls["FREQUENCY"] = strFrequency;
                                        drDtls["FREQUENCYDATA"] = strFrequency;
                                    }
                                    else
                                    {
                                        drDtls["FREQUENCY"] = dr["FREQUENCY_VALUE"];
                                        drDtls["FREQUENCYDATA"] = dr["FREQUENCY_VALUE"];
                                    }
                                    drDtls["DOSAGE"] = Convert.ToString(strFrequency) + " " + "at" + " " + Convert.ToString(dr["ADMIN_TIME"]);
                                }
                                else if (FrequencyTemp.KIIsNotNullAndRowCount() && dr["FREQUENCY_FREETEXT"] != DBNull.Value && Convert.ToInt32(dr["ISFREQUENCY_FREETEXT"]) == 1)
                                {
                                    //if (FrequencyTemp.Select("EMR_LOOKUP_ID=" + dr["FREQUENCY"].ToString()).Count() > 0)
                                    //{
                                    //    strFrequency = Convert.ToString(FrequencyTemp.Select("EMR_LOOKUP_ID=" + dr["FREQUENCY"]).First()["FIELD1"]);
                                    //    drDtls["FREQUENCY"] = strFrequency;
                                    //    drDtls["FREQUENCYDATA"] = strFrequency;
                                    //}
                                    //else
                                    //{
                                    drDtls["FREQUENCY"] = dr["FREQUENCY_FREETEXT"];
                                    drDtls["FREQUENCYDATA"] = dr["FREQUENCY_FREETEXT"];
                                    drDtls["DOSAGE"] = Convert.ToString(dr["FREQUENCY_FREETEXT"]) + " " + "at" + " " + Convert.ToString(dr["ADMIN_TIME"]);
                                    //}
                                }
                                //bug id 41442
                                if (Frequency != null && Frequency.Rows.Count > 0 && dr["FREQUENCY_VALUE"] != DBNull.Value)
                                {
                                    var FreqRow = from freq in Frequency.AsEnumerable()
                                                  where dr["FREQUENCY"] != DBNull.Value && freq["EMR_LOOKUP_ID"] != DBNull.Value && Convert.ToInt32(freq["EMR_LOOKUP_ID"]) == Convert.ToInt32(dr["FREQUENCY"])
                                                  select freq;
                                    if (FreqRow != null && FreqRow.Count() > 0)
                                    {
                                        DataTable dtfreqtemp = FreqRow.CopyToDataTable();
                                        if (dtfreqtemp.Rows[0]["FIELD2"] != DBNull.Value && Convert.ToInt32(dtfreqtemp.Rows[0]["FIELD2"]) == 1)
                                        {
                                            drDtls["FREQUENCY"] = "Once in every " + dr["FREQUENCY_VALUE"] + " " + dtfreqtemp.Rows[0]["FIELD1"];
                                            drDtls["FREQUENCYDATA"] = "Once in every " + dr["FREQUENCY_VALUE"] + " " + dtfreqtemp.Rows[0]["FIELD1"];
                                        }
                                    }
                                }
                                //bug id 41442 end
                            }
                            else //if medicine ordered as sliding scale then EMR_PAT_PH_DTLS_DOSAGE will not be having the record
                            {
                                drDtls["MEDICINE_NAME"] = dr["NAME"];
                                drDtls["DISPLAY_NAME"] = dr["NAME"];
                                if (FrequencyTemp.KIIsNotNullAndRowCount() && dr["FREQUENCY"] != DBNull.Value)
                                {
                                    if (FrequencyTemp.Select("EMR_LOOKUP_ID=" + dr["FREQUENCY"].ToString()).Count() > 0)
                                    {
                                        string Frequency = Convert.ToString(FrequencyTemp.Select("EMR_LOOKUP_ID=" + dr["FREQUENCY"]).First()["FIELD1"]);
                                        drDtls["FREQUENCY"] = Frequency;
                                        drDtls["FREQUENCYDATA"] = Frequency;
                                    }
                                    else
                                    {
                                        drDtls["FREQUENCY"] = dr["FREQUENCY_VALUE"];
                                        drDtls["FREQUENCYDATA"] = dr["FREQUENCY_VALUE"];
                                    }
                                }
                            }
                        }
                        else
                        {
                            drDtls["MEDICINE_NAME"] = dr["NAME"];
                            drDtls["DISPLAY_NAME"] = dr["NAME"];
                            //drDtls["FREQUENCY"] = dr["FREQUENCY_VALUE"];
                            //drDtls["FREQUENCYDATA"] = dr["FREQUENCY_VALUE"];
                            if (FrequencyTemp.KIIsNotNullAndRowCount() && dr["FREQUENCY"] != DBNull.Value)
                            {
                                if (FrequencyTemp.Select("EMR_LOOKUP_ID=" + dr["FREQUENCY"].ToString()).Count() > 0)
                                {
                                    string Frequency = Convert.ToString(FrequencyTemp.Select("EMR_LOOKUP_ID=" + dr["FREQUENCY"]).First()["FIELD1"]);
                                    drDtls["FREQUENCY"] = Frequency;
                                    drDtls["FREQUENCYDATA"] = Frequency;
                                }
                                else
                                {
                                    drDtls["FREQUENCY"] = dr["FREQUENCY_VALUE"];
                                    drDtls["FREQUENCYDATA"] = dr["FREQUENCY_VALUE"];
                                }
                            }
                        }
                        //drDtls["QUANTITY"] = Convert.ToString(dr["QUANTITY"]) + "  " + Convert.ToString(dr["QUANTITY_UNIT"]);


                        DataTable dtDuratioin = fillDurationWithMinutes();
                        if (dtDuratioin.KIIsNotNullAndRowCount() && dtDuratioin.Select("KEY=" + dr["DURATION_TYPE"]).Count() > 0)
                        {
                            DataRow DrRow = dtDuratioin.Select("KEY=" + dr["DURATION_TYPE"]).First();
                            if (DrRow != null)
                            {
                                drDtls["DURATION"] = Convert.ToString(dr["DURATION"]) + "  " + DrRow["VALUE"].ToString();
                                drDtls["DURATIONDATA"] = Convert.ToString(dr["DURATION"]) + "  " + DrRow["VALUE"].ToString();
                            }
                        }   
                        //if (BillData != null && BillData.Tables.Contains("PH_PAT_DTLS_ORDER") && BillData.Tables["PH_PAT_DTLS_ORDER"] != null && BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Count > 0)
                        //{
                        //    drDtls["DURATION"] = Convert.ToString(dr["DURATION"]) + "  " + Convert.ToString(BillData.Tables["PH_PAT_DTLS_ORDER"].Rows[0]["DURATION_VALUE"]);
                        //    drDtls["DURATIONDATA"] = Convert.ToString(dr["DURATION"]) + "  " + Convert.ToString(BillData.Tables["PH_PAT_DTLS_ORDER"].Rows[0]["DURATION_VALUE"]);
                        //}
                        if (dr["ROUTE"] != DBNull.Value)
                        {
                            drDtls["ROUTE"] = dr["ROUTE"] + "-" + dr["FORM"];
                        }
                        drDtls["SERVICE_NAME"] = DBNull.Value;
                        drDtls["COUNT"] = DBNull.Value;
                        drDtls["CLINICAL_INDICATION"] = DBNull.Value;
                        drDtls["PROPOSED_DATE"] = DBNull.Value;
                        drDtls["DIAGNOSIS"] = DBNull.Value;
                        if (PatientInformation != null && PatientInformation.Rows.Count > 0)
                        {
                            drDtls["MRNO"] = PatientInformation.Rows[0]["MRNO"];
                            if (PatientInformation.Columns.Contains("FULL_NAME"))
                            {
                                drDtls["PAT_NAME"] = PatientInformation.Rows[0]["FULL_NAME"];
                            }
                            else
                            {
                                if (PatientInformation.Columns.Contains("FIRST_NAME"))
                                {
                                    drDtls["PAT_NAME"] = PatientInformation.Rows[0]["FIRST_NAME"];
                                }
                                if (PatientInformation.Columns.Contains("MIDDLE_NAME") && !string.IsNullOrEmpty(PatientInformation.Rows[0]["MIDDLE_NAME"].ToString()))
                                {
                                    drDtls["PAT_NAME"] = drDtls["PAT_NAME"] + " " + PatientInformation.Rows[0]["MIDDLE_NAME"];
                                }
                                if (PatientInformation.Columns.Contains("LAST_NAME") && !string.IsNullOrEmpty(PatientInformation.Rows[0]["LAST_NAME"].ToString()))
                                {
                                    drDtls["PAT_NAME"] = drDtls["PAT_NAME"] + " " + PatientInformation.Rows[0]["LAST_NAME"];
                                }
                            }
                            drDtls["AGE"] = GetAge(PatientInformation.Rows[0]);
                            drDtls["DOB"] = PatientInformation.Rows[0]["DOB"];

                            switch (Convert.ToInt16(PatientInformation.Rows[0]["GENDER"]))
                            {
                                case 0:
                                    drDtls["SEX"] = "Male";
                                    break;
                                case 1:
                                    drDtls["SEX"] = "Female";
                                    break;
                                case 2:
                                    drDtls["SEX"] = "Unknown";
                                    break;
                                case 3:
                                    drDtls["SEX"] = "Others";
                                    break;
                                default:
                                    break;
                            }
                        }
                        drDtls["DESIGNATION"] = DBNull.Value;
                        drDtls["DEPARTMENT"] = DBNull.Value;
                        drDtls["INSURANCE"] = SchemeMemNo; //SelectedContract;//new changes
                        drDtls["QUALIFICATION"] = DBNull.Value;

                        drDtls["ISGENERIC"] = dr["MEDICINE_TYPE"];
                        drDtls["CPT"] = recordID.ToString();
                        //drDtls["PROVIDER_REMARKS"] = dr["REMARKS"];
                        if (dtGeneric.Columns.Contains("COMMON_REMARKS") && dr["COMMON_REMARKS"] != DBNull.Value)  //Changed by shuaib
                        {
                            drDtls["COMMON_REMARKS"] = dr["COMMON_REMARKS"];
                        }
                        if (dr["CONDITIONAL_FREQUENCY"] != DBNull.Value)
                        {
                            drDtls["SPECIAL_INSTRUCTION"] = dr["CONDITIONAL_FREQUENCY"];
                        }
                        else
                        {
                            drDtls["SPECIAL_INSTRUCTION"] = string.Empty;
                        }
                        if (dr["ADMINISTRATION_INSTRUCTION"] != DBNull.Value)
                        {
                            drDtls["ADMIN_INSTRUCTION"] = dr["ADMINISTRATION_INSTRUCTION"];
                        }
                        else
                        {
                            drDtls["ADMIN_INSTRUCTION"] = string.Empty;
                        }
                        if (dr["REMARKS"] != DBNull.Value)
                        {
                            drDtls["REMARKS"] = dr["REMARKS"];
                        }
                        else
                        {
                            drDtls["REMARKS"] = string.Empty;
                        }
                        drDtls["ENTRY_DATE"] = EMROrderRelation.Tables["Detail"].Rows[0]["ENTER_VISIT"];
                        drDtls["START_DATE"] = dr["START_DATE"];
                        drDtls["STOP_DATE"] = dr["STOP_DATE"];
                        drDtls["SERVICE_ORDER_ID"] = dr["EMR_PAT_DTLS_INV_ORDER_ID"];
                        drDtls["ADMISSION_ORDER_STATUS"] = DBNull.Value;
                        if (dr["DISPENSE_QUANTITY"] != DBNull.Value)
                        {
                            drDtls["DISPENSE_QUANTITY"] = dr["DISPENSE_QUANTITY"] + " " + dr["DISPENSE_QUANTITY_UNIT"];
                        }
                        drDtls["SERVICE_IMG_PATH"] = DBNull.Value;
                        drDtls["IMAGE"] = DBNull.Value;
                        drDtls["SERVICE_IMG_PATH2"] = DBNull.Value;
                        drDtls["IMAGE2"] = DBNull.Value;
                        dtGenericDetails.Rows.Add(drDtls);






                        //if (dr["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value)
                        //{
                        //    drDtls = dtGenericDetails.NewRow();

                        //    if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail") && EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0)
                        //    {
                        //        if (dr["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value && (dr["EMR_PAT_DTLS_INV_ORDER_ID"] != string.Empty))
                        //        {
                        //            DataRow[] drSpecialInst = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID='" + dr["EMR_PAT_DTLS_INV_ORDER_ID"] + "'");
                        //            if (drSpecialInst != null && drSpecialInst.Count() > 0)
                        //            {
                        //                drDtls["SPECIAL_INSTRUCTION"] = drSpecialInst[0]["CONDITIONAL_FREQUENCY"];
                        //                drDtls["ADMINISTRATION_INSTRUCTION"] = drSpecialInst[0]["ADMINISTRATION_INSTRUCTION"];
                        //                drDtls["REMARKS"] = drSpecialInst[0]["REMARKS"];
                        //            }
                        //        }
                        //    }

                        //    if (dr["ROUTE"] != DBNull.Value)
                        //    {
                        //        drDtls["ROUTE"] = dr["ROUTE"];
                        //    }
                        //    else
                        //    {
                        //        if (OrderItems != null && OrderItems.Rows.Count > 0)
                        //        {
                        //            if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail") && EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0)
                        //            {
                        //                if (dr["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value && Convert.ToString(dr["EMR_PAT_DTLS_INV_ORDER_ID"]) != string.Empty)
                        //                {
                        //                    if (dr["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value && dr["EMR_PAT_DTLS_INV_ORDER_ID"] != string.Empty)
                        //                    {
                        //                        DataRow[] drOrderItems = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID='" + dr["EMR_PAT_DTLS_INV_ORDER_ID"] + "'");
                        //                        if (drOrderItems != null && drOrderItems.Count() > 0)
                        //                        {
                        //                            drDtls["ROUTE"] = drOrderItems[0]["ROUTE"];


                        //                            drDtls["DOSE"] = drOrderItems[0]["UNIT_DETAILS"];
                        //                        }
                        //                    }
                        //                }
                        //            }
                        //        }
                        //    }
                        //    drDtls["MEDICINE_NAME"] = dr["NAME"];
                        //    if (drDtls["DOSE"] == DBNull.Value && dr["QUANTITY"] != DBNull.Value && dr["QUANTITY_UNIT"] != DBNull.Value)
                        //    {
                        //        drDtls["DOSE"] = Convert.ToString(dr["QUANTITY"]) + "  " + Convert.ToString(dr["QUANTITY_UNIT"]);
                        //    }
                        //    if (dr["FREQUENCY_VALUE"] != DBNull.Value)
                        //    {
                        //        drDtls["FREQUENCY"] = dr["FREQUENCY_VALUE"];

                        //    }
                        //    if (Frequency != null && Frequency.Rows.Count > 0)
                        //    {
                        //        if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail") && EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0)
                        //        {
                        //            if (dr["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value && Convert.ToString(dr["EMR_PAT_DTLS_INV_ORDER_ID"]) != string.Empty)
                        //            {
                        //                DataRow[] drOrderItems = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID='" + dr["EMR_PAT_DTLS_INV_ORDER_ID"] + "'");
                        //                if (drOrderItems != null && drOrderItems.Count() > 0)
                        //                {
                        //                    var resrows = from freq in Frequency.AsEnumerable()
                        //                                  where drOrderItems[0]["FREQUENCY"] != DBNull.Value && freq["EMR_LOOKUP_ID"] != DBNull.Value && Convert.ToInt32(freq["EMR_LOOKUP_ID"]) == Convert.ToInt32(drOrderItems[0]["FREQUENCY"])
                        //                                  select freq;
                        //                    if (resrows != null && resrows.Count() > 0)
                        //                    {
                        //                        DataTable dtfreqtemp = resrows.CopyToDataTable();
                        //                        if (dtfreqtemp.Rows[0]["FIELD2"] != DBNull.Value && Convert.ToInt32(dtfreqtemp.Rows[0]["FIELD2"]) == 1)
                        //                        {
                        //                            drDtls["FREQUENCY"] = "Once in every " + drOrderItems[0]["FREQUENCY_VALUE"] + " " + drOrderItems[0]["FREQUENCY_NAME"];
                        //                        }
                        //                        else
                        //                        {
                        //                            if (drDtls["FREQUENCY"] == DBNull.Value)
                        //                            {
                        //                                drDtls["FREQUENCY"] = drOrderItems[0]["FREQUENCY_NAME"] + "-" + drOrderItems[0]["CONDITIONAL_FREQUENCY"];
                        //                            }
                        //                        }
                        //                    }
                        //                }
                        //            }
                        //        }

                        //    }

                        //    if (OrderItems != null && OrderItems.Rows.Count > 0)
                        //    {
                        //        if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail") && EMROrderRelation.Tables["Detail"] != null && EMROrderRelation.Tables["Detail"].Rows.Count > 0)
                        //        {
                        //            if (dr["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value && Convert.ToString(dr["EMR_PAT_DTLS_INV_ORDER_ID"]) != string.Empty)
                        //            {
                        //                DataRow[] drOrderItems = EMROrderRelation.Tables["Detail"].Select("EMR_PAT_DTLS_INV_ORDER_ID='" + dr["EMR_PAT_DTLS_INV_ORDER_ID"] + "'");
                        //                if (drOrderItems != null && drOrderItems.Count() > 0)
                        //                {
                        //                    drDtls["START_DATE"] = drOrderItems[0]["START_DATE"];
                        //                    //     drDtls["DOSE"] = drOrderItems[0]["UNIT_DETAILS"];
                        //                }
                        //            }
                        //        }
                        //    }


                        //    drDtls["DURATIONS"] = GetDurationDays(dr);
                        //    //  drDtls["START_DATE"] = dr["START_DATE"];
                        //}

                    }
                }
                return dtGenericDetails;
            }
            catch (Exception)
            {
                throw;
            }
        }
        #endregion

        private string GetAge(DataRow drDOB)
        {
            string Age = string.Empty;
            //int year = 0;
            //int month = 0;
            //int days = 0;

            //DateTime dt1 = DateTime.Parse(Convert.ToDateTime(drDOB["DOB"]).ToString("dd/MM/yyyy"));
            //DateTime dt2 = DateTime.Parse(DateTime.Today.ToString("dd/MM/yyyy"));
            //TimeSpan ts = dt2.Subtract(dt1);
            //int NoOfdays = ts.Days;
            //if (NoOfdays >= 365)
            //{
            //    year = NoOfdays / 365;
            //    NoOfdays = NoOfdays - year * 365;
            //}

            //if (NoOfdays >= 30)
            //{
            //    month = NoOfdays / 30;
            //    NoOfdays = NoOfdays - month * 30;
            //}

            //Age = Convert.ToString(year) + "/" + Convert.ToString(month) + "/" + Convert.ToString(NoOfdays);

            //return Age;
            if (drDOB.Table.Columns.Contains("DOB"))
            {
                int[] monthDay = new int[12] { 31, -1, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
                DateTime fromDate;
                DateTime toDate;
                int year;
                int month;
                int day;
                fromDate = DateTime.Parse(Convert.ToDateTime(drDOB["DOB"]).ToString("dd/MM/yyyy"));
                toDate = DateTime.Parse(DateTime.Today.ToString("dd/MM/yyyy"));
                int increment = 0;
                //day calculation
                if (fromDate.Day > toDate.Day)
                {
                    increment = monthDay[fromDate.Month - 1];
                }
                if (increment == -1)
                {
                    if (DateTime.IsLeapYear(fromDate.Year))
                    {
                        increment = 29;
                    }
                    else
                    {
                        increment = 28;
                    }
                }
                if (increment != 0)
                {
                    day = (toDate.Day + increment) - fromDate.Day;
                    increment = 1;
                }
                else
                {
                    day = toDate.Day - fromDate.Day;
                }

                //month calculation
                if ((fromDate.Month + increment) > toDate.Month)
                {
                    month = (toDate.Month + 12) - (fromDate.Month + increment);
                    increment = 1;
                }
                else
                {
                    month = (toDate.Month) - (fromDate.Month + increment);
                    increment = 0;
                }
                //year calculation
                year = toDate.Year - (fromDate.Year + increment);

                Age = Convert.ToString(year) + "/" + Convert.ToString(month) + "/" + Convert.ToString(day) + "[YY/MM/DD]";
            }
            return Age;
        }

        private string GetDurationDays(DataRow drDuration)
        {
            string durationTemp = "1";
            if (drDuration["DURATION_TYPE"] != DBNull.Value && drDuration["DURATION"] != DBNull.Value)
            {
                switch (Convert.ToInt16(drDuration["DURATION_TYPE"]))
                {
                    case 0: durationTemp = Convert.ToString(drDuration["DURATION"]);
                        break;
                    case 1: durationTemp = Convert.ToString(Convert.ToInt64(drDuration["DURATION"]) * 7);
                        break;
                    case 2: durationTemp = Convert.ToString(Convert.ToInt64(drDuration["DURATION"]) * 30);
                        break;
                    case 5: durationTemp = Convert.ToString(Convert.ToInt64(drDuration["DURATION"]) * 365);
                        break;
                    case 3: durationTemp = Convert.ToString(Convert.ToInt64(drDuration["DURATION"]) / 24);
                        break;
                    default:
                        break;
                }
            }
            else if (drDuration["DURATION"] != DBNull.Value)
            {
                durationTemp = Convert.ToString(drDuration["DURATION"]);
            }
            else
            {
                durationTemp = "0";
            }
            return durationTemp;
        }

        General.Control.Common objCommon = new General.Control.Common();
        private void PrintPreviewDialog(DataSet dsPrintPrescriptionData)
        {

            if (dsPrintPrescriptionData.Tables.Contains("Master") && dsPrintPrescriptionData.Tables.Contains("Details"))
            {
                string DefaultSchemeID = string.Empty;
                DataTable dtCommon = CommonData.GetDefaultSettings(0, "DEFAULT SCHEME");
                if (dtCommon.Rows.Count > 0)
                    DefaultSchemeID = dtCommon.Rows[0]["VALUE"].ToString();
                DataTable dtPrintData = new DataTable();
                dtPrintData.Columns.Add(new DataColumn("REPORT_ID", typeof(Int64)));
                dtPrintData.Columns.Add(new DataColumn("MRNO", typeof(String)));
                dtPrintData.Columns.Add(new DataColumn("PAT_NAME", typeof(String)));
                dtPrintData.Columns.Add(new DataColumn("DOCTOR_NAME", typeof(String)));
                dtPrintData.Columns.Add(new DataColumn("ENTRY_DATE", typeof(DateTime)));
                dtPrintData.Columns.Add(new DataColumn("CATAGORY", typeof(String)));
                dtPrintData.Columns.Add(new DataColumn("MEDICINE_NAME", typeof(String)));
                dtPrintData.Columns.Add(new DataColumn("DOSAGE", typeof(String)));
                dtPrintData.Columns.Add(new DataColumn("DURATION", typeof(String)));
                dtPrintData.Columns.Add(new DataColumn("ROUTE", typeof(String)));
                dtPrintData.Columns.Add(new DataColumn("SERVICE_NAME", typeof(String)));
                dtPrintData.Columns.Add(new DataColumn("COUNT", typeof(String)));
                dtPrintData.Columns.Add(new DataColumn("CLINICAL_INDICATION", typeof(String)));
                dtPrintData.Columns.Add(new DataColumn("PROPOSED_DATE", typeof(String)));
                dtPrintData.Columns.Add(new DataColumn("REMARKS", typeof(String)));
                dtPrintData.Columns.Add(new DataColumn("DESIGNATION", typeof(String)));
                dtPrintData.Columns.Add(new DataColumn("DEPARTMENT", typeof(String)));
                dtPrintData.Columns.Add(new DataColumn("INSURANCE", typeof(String)));
                dtPrintData.Columns.Add(new DataColumn("AGE", typeof(String)));
                dtPrintData.Columns.Add(new DataColumn("SEX", typeof(String)));
                dtPrintData.Columns.Add(new DataColumn("ISGENERIC", typeof(String)));
                dtPrintData.Columns.Add(new DataColumn("QUALIFICATION", typeof(String)));
                dtPrintData.Columns.Add(new DataColumn("CPT", typeof(String)));
                dtPrintData.Columns.Add(new DataColumn("FREQUENCY", typeof(String)));
                dtPrintData.Columns.Add(new DataColumn("PROVIDER_REMARKS", typeof(String)));
                dtPrintData.Columns.Add(new DataColumn("COMMON_REMARKS", typeof(String)));
                dtPrintData.Columns.Add(new DataColumn("SPECIAL_INSTRUCTION", typeof(String)));
                dtPrintData.Columns.Add(new DataColumn("ADMIN_INSTRUCTION", typeof(String)));
                dtPrintData.Columns.Add(new DataColumn("START_DATE", typeof(DateTime)));
                dtPrintData.Columns.Add(new DataColumn("STOP_DATE", typeof(DateTime)));
                dtPrintData.Columns.Add(new DataColumn("DISPENSE_QUANTITY", typeof(string)));
                dtPrintData.Columns.Add(new DataColumn("SERVICE_IMG_PATH", typeof(string)));
                dtPrintData.Columns.Add(new DataColumn("IMAGE", typeof(byte[])));
                dtPrintData.Columns.Add(new DataColumn("SERVICE_IMG_PATH2", typeof(string)));
                dtPrintData.Columns.Add(new DataColumn("IMAGE2", typeof(byte[])));
                DataRow drPrintData;
                int ReportId = 1;
                int SubReportID = 0;
                int RecordID = 0;
                string MRNO = string.Empty;
                string PAT_NAME = string.Empty;
                string DOCTOR_NAME = string.Empty;
                string ENTRY_DATE = string.Empty;
                string AGE = string.Empty;
                string SEX = string.Empty;
                string DoctorDepartment = string.Empty;
                string DoctorDesignation = string.Empty;
                string DoctorQualification = string.Empty;
                MainADTShared objDoc = new MainADTShared();
                DataTable dtDocDet = objDoc.FetchDoctors(SelectedProviderValue, 1, 0, 1);
                foreach (DataRow dr in dtDocDet.Rows)
                {
                    if (dr["DEPARTMENT_NAME"] != DBNull.Value)
                        DoctorDepartment = dr["DEPARTMENT_NAME"].ToString();
                    if (dr["DESIGNATION"] != DBNull.Value)
                        DoctorDesignation = dr["DESIGNATION"].ToString();
                    if (dr["H_EMP_QLFN"] != DBNull.Value)
                        DoctorQualification = dr["H_EMP_QLFN"].ToString();
                }
                MainFOShared obj = new MainFOShared();
                foreach (DataRow dr in dsPrintPrescriptionData.Tables["Master"].Rows)
                {
                    if (dr["MRNO"] != DBNull.Value)
                        MRNO = dr["MRNO"].ToString();
                    if (dr["PATIENT_NAME"] != DBNull.Value)
                        PAT_NAME = dr["PATIENT_NAME"].ToString();
                    if (dr["DOCTOR_NAME"] != DBNull.Value)
                        DOCTOR_NAME = dr["DOCTOR_NAME"].ToString();
                    if (dr["REQUESTED_ON"] != DBNull.Value)
                        ENTRY_DATE = dr["REQUESTED_ON"].ToString();

                }
                string PatCompany, PatientAge, PatientSex;
                PatientAge = string.Empty;
                PatientSex = string.Empty;
                PatCompany = string.Empty;
                DataTable dtPatDet = obj.Search(1, MRNO, null);
                DataTable dtPatSCheme = obj.FetchPatSchemes(MRNO);
                if (dtPatDet != null)
                {
                    foreach (DataRow drPatInfo in dtPatDet.Rows)
                    {
                        if (drPatInfo["AGE"] != DBNull.Value)
                            PatientAge = drPatInfo["AGE"].ToString();
                        if (drPatInfo["GENDER"] != DBNull.Value)
                            PatientSex = drPatInfo["GENDER"].ToString();
                    }
                }
                if (dtPatSCheme != null)
                {
                    string DefaultCompany = string.Empty;
                    string DefaultInsurance = string.Empty;
                    DataRow[] drResult = dtPatSCheme.Select("INCO_DTLS_SCHEME_ID=" + DefaultSchemeID);
                    foreach (DataRow drRes in drResult)
                    {
                        if (drRes["CORPORATE"] != DBNull.Value)
                            DefaultCompany = drRes["CORPORATE"].ToString();
                        if (drRes["INSURANCE"] != DBNull.Value)
                            DefaultInsurance = drRes["INSURANCE"].ToString();
                    }
                    DataTable dtCorporate = dtPatSCheme.DefaultView.ToTable(true, "CORPORATE");
                    DataTable dtInsurance = dtPatSCheme.DefaultView.ToTable(true, "INSURANCE");
                    foreach (DataRow drPatScheme in dtCorporate.Rows)
                    {
                        if (drPatScheme["CORPORATE"] != DBNull.Value)
                        {
                            if (drPatScheme["CORPORATE"].ToString() != DefaultCompany)
                                PatCompany = PatCompany + drPatScheme["CORPORATE"] + ",";
                        }
                    }
                    foreach (DataRow drPatScheme in dtInsurance.Rows)
                    {
                        if (drPatScheme["INSURANCE"] != DBNull.Value)
                        {
                            if (drPatScheme["INSURANCE"].ToString() != DefaultInsurance)
                                PatCompany = PatCompany + drPatScheme["INSURANCE"] + ",";
                        }
                    }
                }
                if (PatCompany != string.Empty)
                {
                    PatCompany = PatCompany.Substring(0, PatCompany.Length - 1);
                }
                string MedicineName = string.Empty;
                string Dosage = string.Empty;
                string MedDuration = string.Empty;
                string Route = string.Empty;
                string Remarks = string.Empty;
                string MedicineType = string.Empty;
                string Frequency = string.Empty;
                string ProviderRemarks = string.Empty;
                string CommonRemarks = string.Empty;
                string SpecialInstruction = string.Empty;
                string AdminInstruction = string.Empty;
                string startDate = string.Empty;
                string stopDate = string.Empty;
                string ServiceImgPath = string.Empty;
                byte[] Image = null;
                string ServiceImgPath2 = string.Empty;
                byte[] Image2 = null;
                foreach (DataRow dr in dsPrintPrescriptionData.Tables["Details"].Rows)
                {
                    if (dr["PROVIDER_REMARKS"] != DBNull.Value)
                        ProviderRemarks = dr["PROVIDER_REMARKS"].ToString();
                    if (dr["COMMON_REMARKS"] != DBNull.Value)
                        CommonRemarks = dr["COMMON_REMARKS"].ToString();
                    if (dr["MEDICINE_NAME"] != DBNull.Value)
                        MedicineName = dr["MEDICINE_NAME"].ToString();
                    if (dr["DOSAGE"] != DBNull.Value)
                        Dosage = dr["DOSAGE"].ToString();
                    if (dr["DURATION"] != DBNull.Value)
                        MedDuration = dr["DURATION"].ToString();
                    if (dr["ROUTE"] != DBNull.Value)
                        Route = dr["ROUTE"].ToString();
                    if (dr["REMARKS"] != DBNull.Value)
                        Remarks = dr["REMARKS"].ToString();
                    if (dr["MEDICINE_TYPE"] != DBNull.Value)
                        MedicineType = dr["MEDICINE_TYPE"].ToString();
                    if (dr["FREQUENCY"] != DBNull.Value)
                        Frequency = dr["FREQUENCY"].ToString();
                    if (dr["SPECIAL_INSTRUCTION"] != DBNull.Value)
                        SpecialInstruction = dr["SPECIAL_INSTRUCTION"].ToString();
                    if (dr["ADMIN_INSTRUCTION"] != DBNull.Value)
                        AdminInstruction = dr["ADMIN_INSTRUCTION"].ToString();
                    if (dr["START_DATE"] != DBNull.Value)
                        startDate = dr["START_DATE"].ToString();
                    if (dr["STOP_DATE"] != DBNull.Value)
                        stopDate = Convert.ToString(dr["STOP_DATE"]);
                    if (dr["SERVICE_IMG_PATH"] != DBNull.Value)
                    {
                        ServiceImgPath = Convert.ToString(dr["SERVICE_IMG_PATH"]);
                        if (ServiceImgPath != string.Empty)
                        {
                            Image = objCommon.GetImageFiletoBytesWithImpersionation(ServiceImgPath);
                        }

                    }
                    if (dr["SERVICE_IMG_PATH2"] != DBNull.Value)
                    {
                        ServiceImgPath2 = Convert.ToString(dr["SERVICE_IMG_PATH2"]);
                        if (ServiceImgPath2 != string.Empty)
                        {
                            Image2 = objCommon.GetImageFiletoBytesWithImpersionation(ServiceImgPath2);
                        }

                    }
                    RecordID++;
                    drPrintData = dtPrintData.NewRow();
                    drPrintData["REPORT_ID"] = ReportId;
                    drPrintData["MRNO"] = MRNO;
                    drPrintData["PAT_NAME"] = PAT_NAME;
                    drPrintData["DOCTOR_NAME"] = DOCTOR_NAME;
                    drPrintData["ENTRY_DATE"] = ENTRY_DATE;
                    drPrintData["CATAGORY"] = "Pharmacy";
                    drPrintData["MEDICINE_NAME"] = MedicineName;
                    drPrintData["DOSAGE"] = Dosage;
                    drPrintData["DURATION"] = MedDuration;
                    drPrintData["ROUTE"] = Route;
                    drPrintData["SERVICE_NAME"] = DBNull.Value;
                    drPrintData["COUNT"] = DBNull.Value;
                    drPrintData["CLINICAL_INDICATION"] = DBNull.Value;
                    drPrintData["PROPOSED_DATE"] = DBNull.Value;
                    drPrintData["REMARKS"] = Remarks;
                    drPrintData["AGE"] = PatientAge;
                    drPrintData["SEX"] = PatientSex;
                    drPrintData["DESIGNATION"] = DoctorDesignation;
                    drPrintData["DEPARTMENT"] = DoctorDepartment;
                    drPrintData["INSURANCE"] = PatCompany;
                    drPrintData["ISGENERIC"] = MedicineType;
                    drPrintData["QUALIFICATION"] = DoctorQualification;
                    drPrintData["CPT"] = RecordID.ToString();
                    drPrintData["FREQUENCY"] = Frequency;
                    drPrintData["PROVIDER_REMARKS"] = ProviderRemarks;
                    drPrintData["COMMON_REMARKS"] = CommonRemarks;
                    drPrintData["SPECIAL_INSTRUCTION"] = SpecialInstruction;
                    drPrintData["ADMIN_INSTRUCTION"] = AdminInstruction;
                    drPrintData["START_DATE"] = startDate;
                    drPrintData["STOP_DATE"] = dr["STOP_DATE"];
                    drPrintData["DISPENSE_QUANTITY"] = dr["DISPENSE_QUANTITY"];
                    drPrintData["SERVICE_IMG_PATH"] = ServiceImgPath;
                    drPrintData["IMAGE"] = Image;
                    drPrintData["SERVICE_IMG_PATH2"] = ServiceImgPath2;
                    drPrintData["IMAGE2"] = Image2;
                    dtPrintData.Rows.Add(drPrintData);
                    MedicineName = string.Empty;
                    Dosage = string.Empty;
                    MedDuration = string.Empty;
                    Route = string.Empty;
                    Remarks = string.Empty;
                    MedicineType = string.Empty;
                    Frequency = string.Empty;
                    ProviderRemarks = string.Empty;
                    CommonRemarks = string.Empty;
                    SpecialInstruction = string.Empty;
                    AdminInstruction = string.Empty;
                    startDate = string.Empty;
                    stopDate = string.Empty;
                    ServiceImgPath = string.Empty;
                    Image = null;
                    ServiceImgPath2 = string.Empty;
                    Image2 = null;
                }
                if (dtPrintData.Rows.Count > 0)
                {
                    var queryFilter = from sel in dtPrintData.AsEnumerable()
                                      where sel["MEDICINE_NAME"] != DBNull.Value && sel["START_DATE"] != DBNull.Value
                                      orderby sel["MEDICINE_NAME"].ToString(), Convert.ToDateTime(sel["START_DATE"])
                                      select sel;

                    Bill_PrintPreviewDialog objemrPrint = new Bill_PrintPreviewDialog();
                    objemrPrint.Style = Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.GetWindowStyle(WindowControlBoxStyle.Default) as Style;
                    objemrPrint.AllowsTransparency = false;
                    objemrPrint.PrintData = queryFilter.CopyToDataTable();
                    objemrPrint.ShowDialog();
                }
            }
        }
        /// <summary>
        /// Gets the name of the patient.
        /// </summary>
        /// <returns></returns>
        private string GetPatientName()
        {
            try
            {
                StringBuilder strName = new StringBuilder();
                if (IsFromEMRBilling)
                {
                    if (Patient != null && Patient.Name != string.Empty)
                    {
                        strName.Append(Patient.Name);
                    }
                }
                else
                {
                    if (PatientInformation.Columns.Contains("TITLE"))
                    {
                        if (PatientInformation.Rows[0]["TITLE"] != DBNull.Value)
                        {
                            strName.Append(PatientInformation.Rows[0]["TITLE"]);
                            strName.Append(".");
                        }
                    }
                    strName.Append(PatientInformation.Rows[0]["FIRST_NAME"]);
                    if (PatientInformation.Rows[0]["MIDDLE_NAME"] != DBNull.Value)
                    {
                        strName.Append(" " + PatientInformation.Rows[0]["MIDDLE_NAME"]);
                    }
                    if (PatientInformation.Rows[0]["LAST_NAME"] != DBNull.Value)
                    {
                        strName.Append(" " + PatientInformation.Rows[0]["LAST_NAME"]);
                    }
                }
                return strName.ToString();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Executed_PrevMedication(object sender, ExecutedRoutedEventArgs e)
        {
            CommonWindow objwin = new CommonWindow(WindowControlBoxStyle.Default);
            UcPharmacyBillDetails objBillDetails = new UcPharmacyBillDetails();
            objBillDetails.Mrno = Convert.ToString(PatientInformation.Rows[0]["MRNO"]);
            if (objBillDetails.IsPharmacyBillExists)
            {
                objwin.Content = objBillDetails;
                objwin.Title = "Previous Dispensed Medication details of " + PatientInformation.Rows[0]["MRNO"];
                objwin.SizeToContent = SizeToContent.Manual;
                objwin.ResizeMode = ResizeMode.CanMinimize;
                objwin.Owner = Window.GetWindow(this);
                objwin.ShowInTaskbar = false;
                objwin.Show();
            }
        }

        private bool ExistEpiodeEncounterChecking()
        {
            Infologics.Medilogics.CommonSharedUI.BillingView.UcPatientEpisodeDetails objUcPatientEpisodeDetails = new Infologics.Medilogics.CommonSharedUI.BillingView.UcPatientEpisodeDetails();
            objUcPatientEpisodeDetails.MRNO = PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Columns.Contains("MRNO")
                && PatientInformation.Rows[0]["MRNO"] != DBNull.Value ? Convert.ToString(PatientInformation.Rows[0]["MRNO"]) : "";
            DataTable dtPatientEpisode = new DataTable();
            dtPatientEpisode = objUcPatientEpisodeDetails.PatientEpisode;
            //First Check with encounter table , then episode table..
            //issue occuring while .. taking 2 PAV
            objUcPatientEpisodeDetails.IsEpisode = false;
            objUcPatientEpisodeDetails.MRNO = PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Columns.Contains("MRNO")
            && PatientInformation.Rows[0]["MRNO"] != DBNull.Value ? Convert.ToString(PatientInformation.Rows[0]["MRNO"]) : "";
            dtPatientEpisode = objUcPatientEpisodeDetails.PatientEpisode;
            if (dtPatientEpisode.KIIsNotNullAndRowCount())
            {
                IsEpisode = false;
            }
            else
            {
                objUcPatientEpisodeDetails.IsEpisode = true;
                objUcPatientEpisodeDetails.MRNO = PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Columns.Contains("MRNO")
                && PatientInformation.Rows[0]["MRNO"] != DBNull.Value ? Convert.ToString(PatientInformation.Rows[0]["MRNO"]) : "";
                dtPatientEpisode = objUcPatientEpisodeDetails.PatientEpisode;
                if (dtPatientEpisode.KIIsNotNullAndRowCount())
                {
                    IsEpisode = true;
                }
                else
                {
                    IsEpisode = false;
                }
            }
            return IsEpisode;
        }
        bool isMultpleTimeCalculateMaxMinCopayNeeded = false;
        private void CalculateMaxMinCopay()
        {
            //FetchCopayAmountUsed();
            decimal qty = 0;
            decimal schemedisc = 0;
            int count = -1;
            if (BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount() && !isMultpleTimeCalculateMaxMinCopayNeeded)
            {
                BillData.Tables["INV_PAT_BILLING"].AsEnumerable().ForEach(x => { x["COPAY_USED"] = 0; x["CO_PAY_AMOUNT"] = 0; });//initializing to zero

                var Query = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                        .Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]))
                        .Select(x => x);
                if (Query.Count() > 0)
                {
                    //TotalCopayAmount = TotalCopayAmount + Query.AsEnumerable().Where(x => Convert.ToInt16(x["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion)
                    //    .Select(x => IfNullReturnZero(x["CO_PAY_AMOUNT"])).Sum();
                    //temp
                    //FetchCopayAmountUsed(Query.ElementAt(0));
                    foreach (DataRow drRow in Query)
                    {
                        FetchCopayAmountUsed(drRow);
                        if (IfNullReturnZero(drRow["COPAY_USED"]) > 0)
                        {
                            drRow["COPAY_USED"] = drRow["COPAY_USED"];
                        }
                        else
                        {
                            drRow["COPAY_USED"] = TotalCopayAmount;
                        }

                        if (IfNullReturnZero(drRow["COPAY_AGAINST"]) == 1 && IfNullReturnZero(drRow["GROUP_MAX_LIMIT"]) > 0)
                        {
                            decimal SerCopayUsed = IfNullReturnZero(drRow["COPAY_USED"]);
                            decimal SerMaxAllowed = IfNullReturnZero(drRow["COPAY_MAX_LIMIT_AMT"]);
                            decimal GrpMaxAllowed = IfNullReturnZero(drRow["GROUP_MAX_LIMIT"]);
                            decimal GrpRemainingCopayLimit = 0;
                            decimal SerRemainingCopayLimit = 0;
                            //if in case group level max copay is less than service level max copay then consider group level setting
                            if (GrpMaxAllowed < SerMaxAllowed)
                            {
                                drRow["COPAY_MAX_LIMIT_AMT"] = GrpMaxAllowed;
                                SerMaxAllowed = GrpMaxAllowed;
                            }
                            //end
                            if (Query.AsEnumerable().Where(x => IfNullReturnZero(x["INCO_INV_CATEGORY_ID"]) == IfNullReturnZero(drRow["INCO_INV_CATEGORY_ID"]) && IfNullReturnZero(x["COPAY_AGAINST"]) == 2).Count() > 0
                                && Query.AsEnumerable().Where(x => IfNullReturnZero(x["INCO_INV_CATEGORY_ID"]) == IfNullReturnZero(drRow["INCO_INV_CATEGORY_ID"]) && IfNullReturnZero(x["COPAY_AGAINST"]) == 2).Select(s => IfNullReturnZero(s["COPAY_USED"])).First() > 0)
                            {
                                GrpRemainingCopayLimit = GrpMaxAllowed - Query.AsEnumerable().Where(x => IfNullReturnZero(x["INCO_INV_CATEGORY_ID"]) == IfNullReturnZero(drRow["INCO_INV_CATEGORY_ID"]) && IfNullReturnZero(x["COPAY_AGAINST"]) == 2).Select(s => IfNullReturnZero(s["COPAY_USED"])).First();
                            }
                            else
                            {
                                decimal SumOfSerCop = 0;
                                if (GrpCopayUsed > 0)
                                {
                                    SumOfSerCop = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => Convert.ToBoolean(x["ISSALE"]) && Convert.ToInt16(x["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion
                                       && Convert.ToInt64(IfNullReturnZero(x["INCO_INV_CATEGORY_ID"])) == Convert.ToInt64(IfNullReturnZero(drRow["INCO_INV_CATEGORY_ID"])) && IfNullReturnZero(x["COPAY_AGAINST"]) == 1).Sum(s => IfNullReturnZero(s["CO_PAY_AMOUNT"]));
                                }
                                else
                                {
                                    var resValue = from sel in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                                   where Convert.ToBoolean(sel["ISSALE"]) && Convert.ToInt16(sel["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion &&
                                                         Convert.ToInt64(IfNullReturnZero(sel["INCO_INV_CATEGORY_ID"])) == Convert.ToInt64(IfNullReturnZero(drRow["INCO_INV_CATEGORY_ID"])) && IfNullReturnZero(sel["COPAY_AGAINST"]) == 1
                                                   group sel by sel["INV_MAST_SERVICE_ID"] into grp
                                                   select new
                                                   {
                                                       DISTINCT_COPAYUSED = grp.Max(x => x.Field<decimal>("COPAY_USED"))
                                                   };
                                    if (resValue.Count() > 0)
                                    {
                                        SumOfSerCop = resValue.Sum(s => s.DISTINCT_COPAYUSED);
                                    }
                                }
                                GrpRemainingCopayLimit = GrpMaxAllowed - (GrpCopayUsed + SumOfSerCop);
                            }
                            SerRemainingCopayLimit = SerMaxAllowed - SerCopayUsed;

                            if (GrpRemainingCopayLimit > 0)
                            {
                                if (SerRemainingCopayLimit <= 0)//
                                {
                                    drRow["COPAY_USED"] = SerMaxAllowed;
                                }
                                else if (SerRemainingCopayLimit > 0 && (GrpRemainingCopayLimit >= SerRemainingCopayLimit))
                                {
                                    drRow["COPAY_USED"] = drRow["COPAY_USED"];
                                }
                                else if (SerRemainingCopayLimit > 0 && (GrpRemainingCopayLimit < SerRemainingCopayLimit))
                                {
                                    drRow["COPAY_USED"] = SerMaxAllowed - GrpRemainingCopayLimit;
                                }
                            }
                            else //if (GrpMaxAllowed > 0 && GrpRemainingLimit <= 0)
                            {
                                drRow["COPAY_USED"] = SerMaxAllowed;
                            }
                        }
                        //temp
                        // count++;
                        //if (count > 0 && (Convert.ToInt64(IfNullReturnZero(Query.ElementAt(count)["INCO_INV_CATEGORY_ID"])) != Convert.ToInt64(IfNullReturnZero(Query.ElementAt(count - 1)["INCO_INV_CATEGORY_ID"]))
                        //               || Convert.ToInt16(IfNullReturnZero(Query.ElementAt(count)["COPAY_AGAINST"])) != Convert.ToInt16(IfNullReturnZero(Query.ElementAt(count - 1)["COPAY_AGAINST"]))))
                        //{
                        //    FetchCopayAmountUsed(drRow);
                        //}
                        //if (IfNullReturnZero(drRow["COPAY_USED"]) > 0)
                        //{
                        //}
                        //else
                        //{
                        //    drRow["COPAY_USED"] = TotalCopayAmount;
                        //}

                        if (Convert.ToInt16(drRow["SERVICE_TYPE"]) == (int)ServiceType.Investigation
                           || Convert.ToInt16(drRow["SERVICE_TYPE"]) == (int)ServiceType.Consultation || Convert.ToInt16(drRow["SERVICE_TYPE"]) == (int)ServiceType.ADT
                           || Convert.ToInt16(drRow["SERVICE_TYPE"]) == (int)ServiceType.Cafeteria)// Dhanya
                        {
                            qty = IfNullReturnZero(drRow["QTY"]);
                        }
                        else if (Convert.ToInt16(drRow["SERVICE_TYPE"]) == (int)ServiceType.Pharmacy)
                        {
                            qty = IfNullReturnZero(drRow["SALES_ACTUAL_QTY"]);
                        }
                        drRow["GROSS_AMOUNT"] = Convert.ToDecimal(drRow["BASE_CHARGE"]) * qty;
                        drRow["AMOUNT"] = Convert.ToDecimal(drRow["BASE_CHARGE"]) * qty;
                        if (BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                        .Select(x => IfNullReturnZero(x["OTHER_CHARGE"])).Sum() > 0)
                        {
                            drRow["NET_AMOUNT"] = (IfNullReturnZero(drRow["NET"]) + IfNullReturnZero(drRow["ADJUSTMENT"])) + IfNullReturnZero(drRow["OTHER_CHARGE"]);
                            //newly added lines
                            schemedisc = Convert.ToDecimal(drRow["SCHEME_MARK_DISC_TEMP"]) * qty;
                            decimal provideradj = 0;
                            provideradj = (drRow["PROVIDER_DISCOUNT_AMOUNT"] != DBNull.Value ? Convert.ToDecimal(drRow["PROVIDER_DISCOUNT_AMOUNT"]) : 0);
                            drRow["NET_AMOUNT"] = Convert.ToDecimal(drRow["NET_AMOUNT"]) + schemedisc + provideradj;
                            //end
                            if (drRow["BASEDON"] != DBNull.Value && Convert.ToInt16(drRow["BASEDON"]) == (int)Infologics.Medilogics.Enumerators.Insurance.ValueType.Gross)
                            {
                                drRow["ACTUAL_COPAY"] = Medilogics.General.Control.Common.MathRound((((Convert.ToDecimal(drRow["AMOUNT"]) + Convert.ToDecimal(drRow["OTHER_CHARGE"])) / 100) * IfNullReturnZero(drRow["CO_PAY_IN_PER"])), CommonData.DecimalPlace);
                            }
                            else if (drRow["BASEDON"] != DBNull.Value && Convert.ToInt16(drRow["BASEDON"]) == (int)Infologics.Medilogics.Enumerators.Insurance.ValueType.Net)
                            {
                                drRow["ACTUAL_COPAY"] = Medilogics.General.Control.Common.MathRound(((Convert.ToDecimal(drRow["NET_AMOUNT"]) / 100) * IfNullReturnZero(drRow["CO_PAY_IN_PER"])), CommonData.DecimalPlace);
                            }
                        }
                        if (((Convert.ToInt16(drRow["SERVICE_TYPE"]) == (int)ServiceType.Consultation && IfNullReturnZero(drRow["DEDUCTIBLE"]) == 0) ||
                            Convert.ToInt16(drRow["SERVICE_TYPE"]) != (int)ServiceType.Consultation)
                            && SelectedVisitModeNew != (int)VisitMode.OPCASH
                            && Convert.ToInt16(drRow["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion
                               && IfNullReturnZero(drRow["EDITED_STATUS"]) != (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.Needapprovaltoselfpay
                                && IfNullReturnZero(drRow["EDITED_STATUS"]) != (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.Waitingforapprovaltoselfpay)//&& IfNullReturnZero(drRow["APPROVAL_STATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.InsuranceRequestStatus.Approve
                        {
                            if (drRow["ACTUAL_COPAY"] != DBNull.Value && Convert.ToDecimal(drRow["COPAY_MIN_LIMIT_AMT"]) > 0 &&
                                 Convert.ToDecimal(drRow["COPAY_MIN_LIMIT_AMT"]) > Convert.ToDecimal(drRow["NET_AMOUNT"]) &&
                                 (Convert.ToDecimal(drRow["COPAY_USED"]) + Convert.ToDecimal(drRow["COPAY_MIN_LIMIT_AMT"])) <= Convert.ToDecimal(drRow["COPAY_MAX_LIMIT_AMT"]))
                            {
                                drRow["CO_PAY_AMOUNT"] = Convert.ToDecimal(drRow["NET_AMOUNT"]);// *qty;
                                drRow["COPAY_USED"] = Convert.ToDecimal(drRow["COPAY_USED"]) + (Convert.ToDecimal(drRow["NET_AMOUNT"]));
                                //TotalCopayAmount = Convert.ToDecimal(drRow["COPAY_USED"]);
                            }
                            else if (drRow["ACTUAL_COPAY"] != DBNull.Value && Convert.ToDecimal(drRow["COPAY_MIN_LIMIT_AMT"]) > 0 &&
                                     (Convert.ToDecimal(drRow["ACTUAL_COPAY"]) * qty) < Convert.ToDecimal(drRow["COPAY_MIN_LIMIT_AMT"]) &&
                                   (Convert.ToDecimal(drRow["COPAY_USED"]) + (Convert.ToDecimal(drRow["COPAY_MIN_LIMIT_AMT"]))) <= Convert.ToDecimal(drRow["COPAY_MAX_LIMIT_AMT"]))
                            {
                                drRow["CO_PAY_AMOUNT"] = Convert.ToDecimal(drRow["COPAY_MIN_LIMIT_AMT"]);// * qty;
                                drRow["COPAY_USED"] = Convert.ToDecimal(drRow["COPAY_USED"]) + (Convert.ToDecimal(drRow["COPAY_MIN_LIMIT_AMT"]));// * qty);
                                //TotalCopayAmount = Convert.ToDecimal(drRow["COPAY_USED"]);
                            }
                            else if (drRow["ACTUAL_COPAY"] != DBNull.Value && Convert.ToDecimal(drRow["COPAY_MAX_LIMIT_AMT"]) > 0 &&
                              (Convert.ToDecimal(drRow["COPAY_USED"]) + (Convert.ToDecimal(drRow["ACTUAL_COPAY"]) * qty)) <= Convert.ToDecimal(drRow["COPAY_MAX_LIMIT_AMT"]))
                            {
                                drRow["CO_PAY_AMOUNT"] = Convert.ToDecimal(drRow["ACTUAL_COPAY"]) * qty;
                                drRow["COPAY_USED"] = Convert.ToDecimal(drRow["COPAY_USED"]) + (Convert.ToDecimal(drRow["ACTUAL_COPAY"]) * qty);
                                //TotalCopayAmount = Convert.ToDecimal(drRow["COPAY_USED"]);
                            }
                            else if (drRow["ACTUAL_COPAY"] != DBNull.Value && Convert.ToDecimal(drRow["COPAY_MAX_LIMIT_AMT"]) > 0 &&
                            (Convert.ToDecimal(drRow["ACTUAL_COPAY"]) * qty) >= Convert.ToDecimal(drRow["COPAY_MAX_LIMIT_AMT"]) &&
                          (Convert.ToDecimal(drRow["COPAY_USED"]) + (Convert.ToDecimal(drRow["COPAY_MAX_LIMIT_AMT"])) <= Convert.ToDecimal(drRow["COPAY_MAX_LIMIT_AMT"])))
                            {
                                drRow["CO_PAY_AMOUNT"] = drRow["COPAY_MAX_LIMIT_AMT"];
                                drRow["COPAY_USED"] = Convert.ToDecimal(drRow["COPAY_USED"]) + Convert.ToDecimal(drRow["COPAY_MAX_LIMIT_AMT"]);
                                //TotalCopayAmount = Convert.ToDecimal(drRow["COPAY_USED"]);
                            }
                            else if (drRow["ACTUAL_COPAY"] != DBNull.Value && (Convert.ToDecimal(drRow["COPAY_USED"]) < Convert.ToDecimal(drRow["COPAY_MAX_LIMIT_AMT"]))
                                && drRow["COPAY_MAX_LIMIT_AMT"] != DBNull.Value && Convert.ToDecimal(drRow["COPAY_MAX_LIMIT_AMT"]) > 0
                                       && ((Convert.ToDecimal(drRow["COPAY_USED"]) + (Convert.ToDecimal(drRow["ACTUAL_COPAY"]) * qty)) > Convert.ToDecimal(drRow["COPAY_MAX_LIMIT_AMT"])))
                            {
                                if (IfNullReturnZero(drRow["COPAY_MAX_LIMIT_AMT"]) < Convert.ToDecimal(drRow["COPAY_USED"]))
                                {
                                    drRow["CO_PAY_AMOUNT"] = Convert.ToDecimal(drRow["COPAY_MAX_LIMIT_AMT"]);
                                }
                                else
                                {
                                    drRow["CO_PAY_AMOUNT"] = Convert.ToDecimal(drRow["COPAY_MAX_LIMIT_AMT"]) - Convert.ToDecimal(drRow["COPAY_USED"]);
                                }
                                drRow["COPAY_USED"] = Convert.ToDecimal(drRow["COPAY_USED"]) + IfNullReturnZero(drRow["CO_PAY_AMOUNT"]);
                                //TotalCopayAmount = Convert.ToDecimal(drRow["COPAY_USED"]);
                            }
                            else
                            {
                                drRow["CO_PAY_AMOUNT"] = 0;
                            }
                            if (Is_TopUP_checked && SelectedServiceType == (int)ServiceType.Pharmacy && IsFromPharmacyPanel && Top_payer_id > 0)
                            {
                                drRow["TOPUP_PAYER_ID"] = Top_payer_id;
                                drRow["TOPUP_AMOUNT"] = drRow["CO_PAY_AMOUNT"];
                                TotalCopayAmount -= IfNullReturnZero(drRow["CO_PAY_AMOUNT"]);
                                drRow["CO_PAY_AMOUNT"] = 0;
                            }
                        }
                        else if (Convert.ToInt16(drRow["SERVICE_TYPE"]) == (int)ServiceType.Consultation && IfNullReturnZero(drRow["DEDUCTIBLE"]) > 0
                            && drRow["ISNEWCASE"] != DBNull.Value && Convert.ToInt16(drRow["ISNEWCASE"]) == 0)
                        {
                            if (IfNullReturnZero(drRow["DEDUCTIBLE_MIN"]) < IfNullReturnZero(drRow["DEDUCTIBLE"]))
                            {
                                drRow["CO_PAY_AMOUNT"] = drRow["DEDUCTIBLE"];
                            }
                            else
                            {
                                drRow["CO_PAY_AMOUNT"] = drRow["DEDUCTIBLE_MIN"];
                            }
                        }
                        if (IsPhamracySettingEnable || IsServiceSettingEnable)
                        {
                            if (drRow["NET"] != DBNull.Value && Convert.ToDecimal(drRow["NET"]) < 0)
                            {
                                drRow["NET"] = 0;
                            }
                            drRow["NET_AMOUNT"] = (IfNullReturnZero(drRow["NET"]) + IfNullReturnZero(drRow["ADJUSTMENT"])) + IfNullReturnZero(drRow["OTHER_CHARGE"]);
                            schemedisc = Convert.ToDecimal(drRow["SCHEME_MARK_DISC_TEMP"]) * Convert.ToDecimal(drRow["QTY"]);
                            //Bug ID 24782
                            //Provider Discount Calculation
                            if (!IsFromIPAllocation && BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount()
                                && SelectedEncounterDetails != null && ((SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE")
                                && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value
                                && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.OPCASH)
                                || SelectedVisitMode == (int)VisitMode.OPCASH))
                            {
                                BillData.Tables["INV_PAT_BILLING"].Rows[0]["PAT_FIN_ENCOUNTER_ID"] = SelectedPatientFinEncounterID;
                                BillData.Tables["INV_PAT_BILLING"].Rows[0]["PROVIDER_ID"] = EMRItemSelected != null ? EMRItemSelected["PROVIDER_ID"] : SelectedProviderValue;
                                CalculateProviderDiscount(BillData.Tables["INV_PAT_BILLING"]);
                            }
                            //end bug
                            if ((drRow["SCHEME_MARK_DISC_TEMP"] != DBNull.Value)
                                && (Convert.ToDecimal(drRow["SCHEME_MARK_DISC_TEMP"]) < 0 || Convert.ToDecimal(drRow["SCHEME_MARK_DISC_TEMP"]) > 0 || Convert.ToDecimal(drRow["PROVIDER_DISCOUNT_AMOUNT"]) < 0)
                                && IfNullReturnZero(drRow["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion
                                && IfNullReturnZero(drRow["EDITED_STATUS"]) != (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.Needapprovaltoselfpay
                                && IfNullReturnZero(drRow["EDITED_STATUS"]) != (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.Waitingforapprovaltoselfpay
                                && IfNullReturnZero(drRow["APPROVAL_STATUS"]) != -1)  //|| drRow["PROVIDER_DISCOUNT_AMOUNT"]!=DBNull.Value
                            {
                                decimal provideradj = 0;
                                provideradj = (drRow["PROVIDER_DISCOUNT_AMOUNT"] != DBNull.Value ? Convert.ToDecimal(drRow["PROVIDER_DISCOUNT_AMOUNT"]) : 0);
                                if (SelectedServiceType == (int)ServiceType.Pharmacy || IfNullReturnZero(drRow["SERVICE_TYPE"]) == (int)ServiceType.Pharmacy)
                                {
                                    schemedisc = schemedisc * Convert.ToDecimal(drRow["BASE_QTY"]);
                                    drRow["DISCOUNT_MARKUP"] = schemedisc;
                                    if (schemedisc < 0)
                                        drRow["SCHEME_DISCOUNT"] = schemedisc;
                                }
                                if (IfNullReturnZero(drRow["NET_AMOUNT"]) > 0)
                                {
                                    drRow["NET_AMOUNT"] = Convert.ToDecimal(drRow["NET_AMOUNT"]) + schemedisc + provideradj;
                                    if (IfNullReturnZero(drRow["NET_AMOUNT"]) == 0)
                                    {
                                        drRow["CO_PAY_AMOUNT"] = 0;
                                    }
                                    //if -else added by Bug ID-22897     
                                    if (drRow["SERVICE_TYPE"] != DBNull.Value && Convert.ToInt16(drRow["SERVICE_TYPE"]) == (int)ServiceType.Consultation
                                        && drRow["DEDUCTIBLE"] != DBNull.Value && Convert.ToDecimal(drRow["DEDUCTIBLE"]) > 0)
                                    {

                                    }
                                    else
                                    {
                                        if (IfNullReturnZero(drRow["NET_AMOUNT"]) < IfNullReturnZero(drRow["CO_PAY_AMOUNT"]))
                                        {
                                            drRow["CO_PAY_AMOUNT"] = drRow["NET_AMOUNT"];
                                        }
                                    }
                                }
                                //when Net amount coming as -ve, no need to save -ve amount--> NET_AMOUNT=0//19/June/14
                                if (drRow["NET_AMOUNT"] != DBNull.Value && Convert.ToDecimal(drRow["NET_AMOUNT"]) < 0)
                                {
                                    drRow["NET_AMOUNT"] = 0;
                                    drRow["CO_PAY_AMOUNT"] = 0;
                                }
                            }
                            if (SelectedVisitMode == VisitMode.OPCASH)
                            {
                                drRow["PATIENT_SHARE"] = drRow["NET_AMOUNT"];
                                drRow["SPONSOR"] = 0;
                            }
                            else if (IfNullReturnZero(drRow["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion
                                && IfNullReturnZero(drRow["EDITED_STATUS"]) != (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.Needapprovaltoselfpay
                                && IfNullReturnZero(drRow["EDITED_STATUS"]) != (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.Waitingforapprovaltoselfpay
                                && IfNullReturnZero(drRow["APPROVAL_STATUS"]) != -1)
                            {
                                drRow["PATIENT_SHARE"] = drRow["CO_PAY_AMOUNT"];
                                drRow["SPONSOR"] = IfNullReturnZero(drRow["NET_AMOUNT"]) - IfNullReturnZero(drRow["PATIENT_SHARE"]);
                                if (IfNullReturnZero(drRow["SPONSOR"]) < 0)
                                {
                                    drRow["SPONSOR"] = 0;
                                }
                            }
                            else if (IfNullReturnZero(drRow["INCEXLCSTATUS"]) == (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion ||
                               IfNullReturnZero(drRow["EDITED_STATUS"]) == (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.Needapprovaltoselfpay
                                || IfNullReturnZero(drRow["EDITED_STATUS"]) == (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.Waitingforapprovaltoselfpay
                                || IfNullReturnZero(drRow["APPROVAL_STATUS"]) == -1)
                            {
                                //commneted bcoz..no need to adjust scheme level discount to excluded items
                                //drRow["NET_AMOUNT"] = Convert.ToDecimal(drRow["NET_AMOUNT"]) + schemedisc;
                                drRow["PATIENT_SHARE"] = drRow["NET_AMOUNT"];
                                drRow["SPONSOR"] = 0;
                                drRow["CO_PAY_AMOUNT"] = 0;
                                drRow["TEMP_COPAY"] = 0;
                                drRow["DEDUCTIBLE"] = 0;
                                drRow["ACTUAL_COPAY"] = 0;
                                drRow["DEDUCTIBLE"] = 0;
                                if (IfNullReturnZero(drRow["INCEXLCSTATUS"]) == (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion)
                                {
                                    if (drRow["IS_EDITED"] == DBNull.Value)
                                    {
                                        drRow["EDITED_STATUS"] = (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.Excluded;
                                    }
                                    //drRow["GEN_PATIENT_SHARE"] = (qty * IfNullReturnZero(drRow["BASE_CHARGE"])) + IfNullReturnZero(drRow["OTHER_CHARGE"]);
                                    drRow["GEN_PATIENT_SHARE"] = (IfNullReturnZero(drRow["NET_AMOUNT"]));//Commented for Excluded/selfpay amount calculatuion with default scheme
                                }
                                if (drRow["EDITED_STATUS"] != DBNull.Value && (Convert.ToInt16(drRow["EDITED_STATUS"]) == (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.Needapprovaltoselfpay
                                    || Convert.ToInt16(drRow["EDITED_STATUS"]) == (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.Waitingforapprovaltoselfpay))
                                {
                                    //drRow["GEN_PATIENT_SHARE"] = (qty * IfNullReturnZero(drRow["BASE_CHARGE"])) + IfNullReturnZero(drRow["OTHER_CHARGE"]); //Commented for Excluded/selfpay amount calculatuion with default scheme
                                    drRow["GEN_PATIENT_SHARE"] = (IfNullReturnZero(drRow["NET_AMOUNT"]));
                                }
                            }
                            if (IfNullReturnZero(drRow["APPROVAL_STATUS"]) == (int)Infologics.Medilogics.Enumerators.Insurance.InsuranceRequestStatus.Open
                               && IfNullReturnZero(drRow["IS_EDITED"]) != 1)
                            {
                                drRow["PATIENT_SHARE"] = 0;
                                drRow["SPONSOR"] = 0;
                            }
                        }
                        //if (IfNullReturnZero(drRow["APPROVAL_STATUS"]) == (int)Infologics.Medilogics.Enumerators.Insurance.InsuranceRequestStatus.Approve)
                        //{
                        //    ValidateInsuranceApproval(drRow);
                        //}
                        if (IfNullReturnZero(drRow["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion &&
                               IfNullReturnZero(drRow["EDITED_STATUS"]) != (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.Needapprovaltoselfpay
                                && IfNullReturnZero(drRow["EDITED_STATUS"]) != (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.Waitingforapprovaltoselfpay
                            && SelectedVisitModeNew != (int)VisitMode.OPCASH)
                        {
                            decimal patientshare = IfNullReturnZero(drRow["PATIENT_SHARE"]);
                            decimal difference = 0;
                            difference = (Medilogics.General.Control.Common.MathRound(IfNullReturnZero(drRow["PATIENT_SHARE"]), CommonData.DecimalPlace)) - patientshare;
                            if ((Medilogics.General.Control.Common.MathRound(IfNullReturnZero(drRow["PATIENT_SHARE"]), CommonData.DecimalPlace)) != patientshare)
                            {
                                drRow["PATIENT_SHARE"] = IfNullReturnZero(drRow["PATIENT_SHARE"]) - difference;
                            }
                            drRow["PATIENT_SHARE"] = Medilogics.General.Control.Common.MathRound(IfNullReturnZero(drRow["PATIENT_SHARE"]), CommonData.DecimalPlace);
                            if (difference > 0)
                            {
                                drRow["SPONSOR"] = IfNullReturnZero(drRow["SPONSOR"]) + difference;
                            }
                            drRow["SPONSOR"] = Medilogics.General.Control.Common.MathRound(IfNullReturnZero(drRow["SPONSOR"]), CommonData.DecimalPlace);
                            if (IfNullReturnZero(drRow["CO_PAY_AMOUNT"]) > 0)
                            {
                                patientshare = IfNullReturnZero(drRow["CO_PAY_AMOUNT"]);
                                difference = 0;
                                difference = (Medilogics.General.Control.Common.MathRound(IfNullReturnZero(drRow["CO_PAY_AMOUNT"]), CommonData.DecimalPlace)) - patientshare;
                                if ((Medilogics.General.Control.Common.MathRound(IfNullReturnZero(drRow["CO_PAY_AMOUNT"]), CommonData.DecimalPlace)) != patientshare)
                                {
                                    drRow["CO_PAY_AMOUNT"] = IfNullReturnZero(drRow["CO_PAY_AMOUNT"]) - difference;
                                }
                                drRow["CO_PAY_AMOUNT"] = Medilogics.General.Control.Common.MathRound(IfNullReturnZero(drRow["CO_PAY_AMOUNT"]), CommonData.DecimalPlace);
                            }
                        }
                        SelectedItemServiceType = Convert.ToInt16(drRow["SERVICE_TYPE"]);
                        if (IfNullReturnZero(drRow["COPAY_AGAINST"]) == 1 /* && IfNullReturnZero(drRow["CO_PAY_AMOUNT"]) > 0 */)
                        {
                            BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => Convert.ToBoolean(x["ISSALE"]) && Convert.ToInt16(x["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion
                                  && Convert.ToInt64(IfNullReturnZero(x["INV_MAST_SERVICE_ID"])) == Convert.ToInt64(IfNullReturnZero(drRow["INV_MAST_SERVICE_ID"]))).ForEach(x => x["COPAY_USED"] = drRow["COPAY_USED"]);

                            //BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => Convert.ToBoolean(x["ISSALE"]) && Convert.ToInt16(x["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion
                            //     && Convert.ToInt64(IfNullReturnZero(x["INCO_INV_CATEGORY_ID"])) == Convert.ToInt64(IfNullReturnZero(drRow["INCO_INV_CATEGORY_ID"])) && IfNullReturnZero(x["COPAY_AGAINST"]) == 2).ForEach(x => x["COPAY_USED"] =(IfNullReturnZero(x["COPAY_USED"]) + IfNullReturnZero(drRow["COPAY_USED"])));
                            decimal SumOfSerCop = 0;
                            decimal SumOfGrpCop = 0;
                            if (GrpCopayUsed > 0)
                            {
                                SumOfSerCop = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => Convert.ToBoolean(x["ISSALE"]) && Convert.ToInt16(x["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion
                                   && Convert.ToInt64(IfNullReturnZero(x["INCO_INV_CATEGORY_ID"])) == Convert.ToInt64(IfNullReturnZero(drRow["INCO_INV_CATEGORY_ID"])) && IfNullReturnZero(x["COPAY_AGAINST"]) == 1).Sum(s => IfNullReturnZero(s["CO_PAY_AMOUNT"]));
                            }
                            else
                            {
                                var resValue = from sel in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                               where Convert.ToBoolean(sel["ISSALE"]) && Convert.ToInt16(sel["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion &&
                                                     Convert.ToInt64(IfNullReturnZero(sel["INCO_INV_CATEGORY_ID"])) == Convert.ToInt64(IfNullReturnZero(drRow["INCO_INV_CATEGORY_ID"])) && IfNullReturnZero(sel["COPAY_AGAINST"]) == 1
                                               group sel by sel["INV_MAST_SERVICE_ID"] into grp
                                               select new
                                               {
                                                   DISTINCT_COPAYUSED = grp.Max(x => x.Field<decimal>("COPAY_USED"))
                                               };
                                if (resValue.Count() > 0)
                                {
                                    SumOfSerCop = resValue.Sum(s => s.DISTINCT_COPAYUSED);
                                }
                            }
                            SumOfGrpCop = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => Convert.ToBoolean(x["ISSALE"]) && Convert.ToInt16(x["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion
                               && Convert.ToInt64(IfNullReturnZero(x["INCO_INV_CATEGORY_ID"])) == Convert.ToInt64(IfNullReturnZero(drRow["INCO_INV_CATEGORY_ID"])) && IfNullReturnZero(x["COPAY_AGAINST"]) == 2).Sum(s => IfNullReturnZero(s["CO_PAY_AMOUNT"]));

                            BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => Convert.ToBoolean(x["ISSALE"]) && Convert.ToInt16(x["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion
                                 && Convert.ToInt64(IfNullReturnZero(x["INCO_INV_CATEGORY_ID"])) == Convert.ToInt64(IfNullReturnZero(drRow["INCO_INV_CATEGORY_ID"])) && IfNullReturnZero(x["COPAY_AGAINST"]) == 2).ForEach(x => x["COPAY_USED"] = (SumOfSerCop + SumOfGrpCop + GrpCopayUsed));
                        }
                        else if (IfNullReturnZero(drRow["COPAY_AGAINST"]) == 2 && IfNullReturnZero(drRow["CO_PAY_AMOUNT"]) > 0)
                        {
                            BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => Convert.ToBoolean(x["ISSALE"]) && Convert.ToInt16(x["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion
                               && Convert.ToInt64(IfNullReturnZero(x["INCO_INV_CATEGORY_ID"])) == Convert.ToInt64(IfNullReturnZero(drRow["INCO_INV_CATEGORY_ID"])) && IfNullReturnZero(x["COPAY_AGAINST"]) == 2).ForEach(x => x["COPAY_USED"] = drRow["COPAY_USED"]);
                        }
                        //temp
                        //BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => Convert.ToBoolean(x["ISSALE"]) && Convert.ToInt16(x["INCEXLCSTATUS"]) != (int)Infologics.Medilogics.Enumerators.Insurance.ValidationStatus.Exclusion
                        //    && Convert.ToInt64(IfNullReturnZero(x["INCO_INV_CATEGORY_ID"])) == Convert.ToInt64(IfNullReturnZero(drRow["INCO_INV_CATEGORY_ID"]))
                        //   /* && Convert.ToInt16(IfNullReturnZero(x["COPAY_AGAINST"])) == Convert.ToInt16(IfNullReturnZero(drRow["COPAY_AGAINST"]))*/ ).ForEach(x => x["COPAY_USED"] = drRow["COPAY_USED"]);
                    }
                    CalculateServiceTotal();
                    if (!isERCredit)
                    {
                        ToBeCollected = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                             .Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]))
                             .Select(x => Medilogics.General.Control.Common.MathRound(IfNullReturnZero(x["PATIENT_SHARE"]), CommonData.DecimalPlace)).Sum();
                    }
                }
            }

        }


        /// <summary>
        /// CheckingEncounterNoValidity
        /// </summary>
        /// <param name="dtExistEncounterDetails"></param>
        /// <returns></returns>
        private string CheckingEncounterNoValidity(DataTable dtExistEncounterDetails)
        {
            try
            {
                string strEncounterNo = string.Empty;
                string MRNO = PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Rows[0]["MRNO"] != DBNull.Value ? Convert.ToString(PatientInformation.Rows[0]["MRNO"]) : "";
                DataTable dtCriteria = new DataTable();
                dtCriteria.Columns.Add("MRNO");
                dtCriteria.Columns.Add("MODE");
                dtCriteria.Rows.Add(MRNO, 7);
                MainCommon objCommon = new MainCommon();
                DataTable dtFinancialEpisode = objCommon.FetchFinancialEpisodes(dtCriteria);
                if (dtFinancialEpisode.KIIsNotNullAndRowCount() && dtFinancialEpisode.Select("PAT_FIN_EPISODE_ID IS NOT NULL AND PAT_FIN_EPISODE_ID=" + SelectedPatientFinEpisodeID).Length > 0)
                {
                    strEncounterNo = dtExistEncounterDetails.KIIsNotNullAndRowCount() && dtExistEncounterDetails.Columns.Contains("ENCOUNTER_NO")
                     && dtExistEncounterDetails.Rows[0]["ENCOUNTER_NO"] != DBNull.Value ? Convert.ToString(dtExistEncounterDetails.Rows[0]["ENCOUNTER_NO"]) : "";
                }
                else if (dtFinancialEpisode.KIIsNotNullAndRowCount() && dtFinancialEpisode.Select("PAT_FIN_ENCOUNTER_ID IS NOT NULL AND PAT_FIN_ENCOUNTER_ID=" + SelectedPatientFinEncounterID).Length > 0)
                {
                    strEncounterNo = dtExistEncounterDetails.KIIsNotNullAndRowCount() && dtExistEncounterDetails.Columns.Contains("ENCOUNTER_NO")
                     && dtExistEncounterDetails.Rows[0]["ENCOUNTER_NO"] != DBNull.Value ? Convert.ToString(dtExistEncounterDetails.Rows[0]["ENCOUNTER_NO"]) : "";
                }
                return strEncounterNo;
            }
            catch (Exception ex)
            {
                throw ;
            }
        }
        /// <summary>
        /// CheckingEpisodeNoValidity
        /// </summary>
        /// <param name="dtExistEncounterDetails"></param>
        /// <returns></returns>
        private string CheckingEpisodeNoValidity(DataTable dtExistEpisoderDetails)
        {
            try
            {
                string strEpisodeNo = string.Empty;
                string MRNO = PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Rows[0]["MRNO"] != DBNull.Value ? Convert.ToString(PatientInformation.Rows[0]["MRNO"]) : "";
                MainCommon objCommon = new MainCommon();
                DataTable dtCriteria = new DataTable();
                dtCriteria.Columns.Add("MRNO");
                dtCriteria.Columns.Add("MODE");
                dtCriteria.Rows.Add(MRNO, 15);
                DataTable dtFinancialEpisode = objCommon.FetchFinancialEpisodes(dtCriteria);
                if (dtFinancialEpisode.KIIsNotNullAndRowCount() && dtFinancialEpisode.Select("PAT_FIN_EPISODE_ID IS NOT NULL AND PAT_FIN_EPISODE_ID=" + SelectedPatientFinEpisodeID).Length > 0)
                {
                    DataRow[] drFiltered = dtFinancialEpisode.Select("PAT_FIN_EPISODE_ID IS NOT NULL AND PAT_FIN_EPISODE_ID=" + SelectedPatientFinEpisodeID);
                    if (drFiltered.Length > 0)
                    {
                        strEpisodeNo = drFiltered[0].Table.Columns.Contains("EPISODE_NO")
                         && drFiltered[0]["EPISODE_NO"] != DBNull.Value ? Convert.ToString(drFiltered[0]["EPISODE_NO"]) : "";
                    }
                }
                return strEpisodeNo;
            }
            catch (Exception ex)
            {
                throw ;
            }
        }



        private DataTable LoadProvider()
        {
            MainHR objMainHR = new MainHR();
            DataTable dtCriteria = new DataTable();
            dtCriteria.Columns.Add("MODE", typeof(int));
            dtCriteria.Rows.Add(26);
            return objMainHR.FetchEmployeeWithDataTableCriteria(dtCriteria);
        }
        /// <summary>
        /// Loads the Cafeteria provider.
        /// </summary>
        /// <returns></returns>
        private DataTable LoadCafeteriaProvider()
        {
            try
            {
                MainCommon objCommon = new MainCommon();
                DataTable dtCriteria = new DataTable("PARAM_TABLE");
                dtCriteria.Columns.Add("HOSPITAL_ID");
                dtCriteria.Columns.Add("ISVALID");
                dtCriteria.Rows.Add(dtCriteria.NewRow());
                dtCriteria.Rows[0]["ISVALID"] = (int)Validity.Valid;
                DataTable dtProvider = objCommon.FetchReferralType(dtCriteria, Referral.Provider);
                dtProvider.Columns["NAME"].ColumnName = "EMPLOYEE_NAME";   
                dtProvider.DefaultView.RowFilter = "GEN_OUTSIDE_PROVIDER_ID=1";
                dtProvider = dtProvider.DefaultView.ToTable();               
                if (dtProvider != null && dtProvider.Rows.Count > 0)
                {
                    SelectedProvider = dtProvider.DefaultView[0];
                    SelectedProviderID = dtProvider.DefaultView[dtProvider.Rows.IndexOf(dtProvider.Rows[0])];
                }

                IsEnableCafeteriaTab = true;
                return dtProvider;
            }
            catch (Exception)
            {
                throw;
            }
        }
        int setFocus;
        public int SetFocus //1-qty focus,2-barcode focus.
        {
            get
            {
                return setFocus;
            }
            set
            {
                setFocus = value;
                OnPropertyChanged("SetFocus");
            }
        }

        # region Fetch Static Datas
        public void FetchHospitalServices()
        {
            try
            {
                DataTable dtCriteria = new DataTable("CRITERIA");
                dtCriteria.Columns.Add("MODE", typeof(Int16));
                dtCriteria.Columns.Add("ISVALID", typeof(Int16));
                dtCriteria.Columns.Add("CATEGORY_VALIDITY", typeof(Int16));
                dtCriteria.Columns.Add("HOSPITAL_ID", typeof(Int16));
                dtCriteria.TableName = "CRITERIA";
                dtCriteria.Rows.Add(1, 1, 1, CommonData.HospitalID);
                Infologics.Medilogics.CommonShared.ServiceMain.MainServiceShared objMainServiceShared = new Infologics.Medilogics.CommonShared.ServiceMain.MainServiceShared();
                DsServiceDetails = objMainServiceShared.FetchHospitalServices(dtCriteria);
            }
            catch (Exception)
            {

                throw;
            }

        }
        public void FetchCafeteriaServices()
        {
            try
            {
                DataTable dtCriteria = new DataTable("CRITERIA");
                dtCriteria.Columns.Add("MODE", typeof(Int16));
                dtCriteria.Columns.Add("ISVALID", typeof(Int16));
                dtCriteria.Columns.Add("CATEGORY_VALIDITY", typeof(Int16));
                dtCriteria.Columns.Add("HOSPITAL_ID", typeof(Int16));
                dtCriteria.Columns.Add("PARENT_INV_CATEGORY_ID", typeof(Int64));
                dtCriteria.TableName = "CRITERIA";
                Int64 ParentCategoryID =  CommonData.GetDefaultSettings("CAFETERIA CATEGORY ID").KIIsNotNullOrEmpty() ? Convert.ToInt64(CommonData.GetDefaultSettings("CAFETERIA CATEGORY ID")) :0;
                dtCriteria.Rows.Add(1, 1, 1, CommonData.HospitalID, ParentCategoryID);
                Infologics.Medilogics.CommonShared.ServiceMain.MainServiceShared objMainServiceShared = new Infologics.Medilogics.CommonShared.ServiceMain.MainServiceShared();
                DsServiceDetails = objMainServiceShared.FetchHospitalServices(dtCriteria);
            }
            catch (Exception)
            {

                throw;
            }

        }
        public void FetchMedicines()
        {
            try
            {//fetch all medicines
                MainPharmacyShared objPharmacy = new MainPharmacyShared();
                Medicines = objPharmacy.FetchMedicines(Int32.MinValue);
            }
            catch (Exception)
            {

                throw;
            }
        }

        public void FetchSubLocations()
        {
            try
            {
                DataTable dtCriteria = new DataTable("PHARMACY_CRITERIA");
                dtCriteria.Columns.Add("USER_ID");
                dtCriteria.Columns.Add("MODE");
                //DataTable dtSetting = CommonData.GetDefaultSettings(0, "IS_US_SETTING_APPLICABLE");
                if (IsUSSettingEnable)
                //dtSetting != null && Convert.ToInt16(dtSetting.Rows[0]["VALUE"]) == 1)
                {
                    dtCriteria.Rows.Add("", 5);
                }
                else
                {
                    dtCriteria.Rows.Add(CommonData.LoggedInUser, 2);
                }
                MainPharmacyShared objPharmacy = new MainPharmacyShared();
                SubLocations = objPharmacy.FetchPharmacySubLocations(dtCriteria);
            }
            catch (Exception)
            {

                throw;
            }
        }

        public void FetchAllSubLocations()
        {
            try
            {
                DataTable dtData = new DataTable();
                DataTable dtCriteria = new DataTable("PHARMACY_CRITERIA");
                dtCriteria.Columns.Add("USER_ID");
                dtCriteria.Columns.Add("MODE");
                dtCriteria.Rows.Add("", 0);
                MainPharmacyShared objPharmacy = new MainPharmacyShared();
                dtData = objPharmacy.FetchPharmacySubLocations(dtCriteria);
                if (dtData.KIIsNotNullAndRowCount())
                {
                    dtData.Columns["PH_SUBLOCATION_ID"].ColumnName = "INCO_MAST_ID";
                    AllLabOrSubLocations = dtData.DefaultView;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        public void FetchGenerics()
        {
            try
            {

                CommonServer.Main.MainCommon objcommon = new CommonServer.Main.MainCommon();
                DataTable dtCriteria = new DataTable("CRITERIA");
                dtCriteria.Columns.Add("LOOKUP_TYPE", typeof(string));
                dtCriteria.Columns.Add("HOSPITAL_ID", typeof(Int32));
                dtCriteria.Columns.Add("MODE", typeof(Int32));
                dtCriteria.TableName = "CRITERIA";
                dtCriteria.Rows.Add();
                dtCriteria.Rows[0]["LOOKUP_TYPE"] = "GENERIC";
                dtCriteria.Rows[0]["MODE"] = 13;
                dtCriteria.Rows[0]["HOSPITAL_ID"] = CommonData.HospitalID;
                Generics = objcommon.FetchEMRLookUp(dtCriteria);
            }
            catch (Exception)
            {

                throw;
            }
        }

        #endregion

        # region "Pharmcy Barcode"
        private void Executed_BarcodeWiseSearch(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                if (SelectedServiceType == (int)ServiceType.Pharmacy && EditService == null &&
                    BillData != null && BillData.Tables["INV_PAT_BILLING_TEMP"].Rows.Count > 0 &&
                    BarCode != string.Empty)
                {
                    BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BARCODE"] = BarCode;
                    MainBilling objMainbilling = new MainBilling();
                    DataTable DtCriteria = new DataTable();
                    DtCriteria.Columns.Add("MODE", typeof(int));
                    DtCriteria.Columns.Add("PH_SUBLOCATION_ID", typeof(int));
                    DtCriteria.Columns.Add("BARCODE", typeof(string));
                    DtCriteria.Rows.Add(1, Convert.ToInt64(SelectedLabOrSubLocationValue), BarCode);
                    DataTable dtData = new DataTable();
                    MainBillingShared objBillingShared = new MainBillingShared();
                    //DataTable dtSetting = CommonData.GetDefaultSettings(0, "IS_EXTERNAL_PHARMACY");
                    bool isNewPharmacy = true;
                    //if (dtSetting != null && dtSetting.Rows.Count > 0 && Convert.ToInt16(dtSetting.Rows[0]["VALUE"]) == 1)
                    if (DefaultSettings.Values.IS_EXTERNAL_PHARMACY)
                    {
                        dtData = objMainbilling.FetchPhStock(DtCriteria);
                    }
                    else
                    {
                        MainPharmacyShared objPharmacy = new MainPharmacyShared();
                        dtData = objPharmacy.FetchMedicinesDetailsBarcodeWise(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BARCODE"].ToString());
                        isNewPharmacy = false;
                    }
                    if (dtData != null && dtData.Rows.Count > 0 && Services != null && Services.Rows.Count > 0)
                    {
                        DataRow[] drMedicine = null;
                        if (isNewPharmacy)
                        {
                            if (Services.KIIsNotNullAndRowCount() && Services.Columns.Contains("INV_MAST_SERVICE_ID"))
                                drMedicine = Services.Select("INV_MAST_SERVICE_ID='" + dtData.Rows[0]["INV_MAST_SERVICE_ID"] + "'");
                            else if (Services.KIIsNotNullAndRowCount() && Services.Columns.Contains("PRIMARY_ID"))
                                drMedicine = Services.Select("PRIMARY_ID='" + dtData.Rows[0]["INV_MAST_SERVICE_ID"] + "'");
                        }
                        else
                        {
                            drMedicine = Services.Select("MEDICINE_CODE='" + dtData.Rows[0]["MEDICINE_CODE"] + "'");
                        }
                        if (drMedicine.Length > 0)
                        {
                            DataTable dt = Services.Copy();
                            isbarcodeEntered = true;
                            barcodeBatch = Convert.ToString(dtData.Rows[0]["BATCHNO"]);
                            if (!LoadEMROrdersbyBarCodeSearch(drMedicine))
                            {
                                SelectedService = dt.DefaultView[Services.Rows.IndexOf(drMedicine[0])];
                            }
                            isbarcodeEntered = false;
                            ServiceName = drMedicine[0]["NAME"].ToString();
                            SelectedBatchOrUnitValue = dtData.Rows[0]["BATCHNO"].ToString();
                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BARCODE"] = BarCode;
                            if (PharmacyByDevice == "1")
                            {
                                AddPharmacy();
                                SetFocus = 0;//reset
                                SetFocus = 2;//barcode focus
                            }
                            else
                            {
                                //Set focus to QTY textbox
                                UIElement focusedElement = Keyboard.FocusedElement as UIElement;
                                if (focusedElement is giAutoCompleteTextBox)//still focus in item enter textbox
                                {
                                    focusedElement.MoveFocus(new TraversalRequest(FocusNavigationDirection.Next));
                                    focusedElement = Keyboard.FocusedElement as UIElement;
                                    focusedElement.MoveFocus(new TraversalRequest(FocusNavigationDirection.Next));
                                }
                                else//still focus in barcode textbox
                                {
                                    focusedElement.MoveFocus(new TraversalRequest(FocusNavigationDirection.Next));
                                    focusedElement = Keyboard.FocusedElement as UIElement;
                                    focusedElement.MoveFocus(new TraversalRequest(FocusNavigationDirection.Next));
                                    focusedElement = Keyboard.FocusedElement as UIElement;
                                    focusedElement.MoveFocus(new TraversalRequest(FocusNavigationDirection.Next));
                                }
                            }
                            //IsAddButtonFocus = true;
                            //IsAddButtonFocus = false;
                            AddPharmacy();
                        }
                        else
                        {   //4-BARCODE
                            BillData.Tables["INV_PAT_BILLING_TEMP"].RejectChanges();
                            BillData.Tables["INV_PAT_BILLING_TEMP"].AcceptChanges();
                            if (PharmacyByDevice == "1")
                            {
                                ServiceName = "Nothing";//Set  focus after add a item
                                ServiceName = string.Empty;
                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["QTY"] = PharmacyDefaultQty;// 1;
                                BatchOrUnit = null;
                                SelectedBatchOrUnitIndex = -1;
                                SetFocus = 0;//reset
                                SetFocus = 2;//barcode focus
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                        "Item does not exist", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            }
                            else
                            {
                                SelectedService = null;
                                ServiceGenirc = string.Empty;
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                     "Item does not exist", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            }
                        }
                    }
                    else
                    {
                        BillData.Tables["INV_PAT_BILLING_TEMP"].RejectChanges();
                        BillData.Tables["INV_PAT_BILLING_TEMP"].AcceptChanges();
                        if (PharmacyByDevice == "1")
                        {
                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["QTY"] = PharmacyDefaultQty;// 1;
                        }
                        else
                        {
                            ServiceName = "Nothing";//Set  focus after add a item
                            ServiceName = string.Empty;
                            SelectedBatchOrUnitIndex = -1;
                            BatchOrUnit = null;
                            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["QTY"] = PharmacyDefaultQty;// 0;
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                         "Item does not exist in the selected sublocation", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        }
                    }
                }
                //else if (SelectedServiceType == (int)ServiceType.Investigation && EditService == null &&
                //   BillData != null && BillData.Tables["INV_PAT_BILLING_TEMP"].Rows.Count > 0 && ServicesTemp.KIIsNotNullAndRowCount())
                //{
                //    if (BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BARCODE"].ToString() != string.Empty)
                //    {
                //        ServiceName = string.Empty;
                //        ServicesTemp.DefaultView.RowFilter = "CPT_CODE IS NOT NULL AND CPT_CODE ='" + BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BARCODE"].ToString() + "'";
                //        IsInvestigationCPTCodeEnter = true;
                //        if (ServicesTemp.DefaultView.ToTable().KIIsNotNullAndRowCount())
                //        {
                //            Services = ServicesTemp.DefaultView.ToTable().Copy();
                //            SelectedService = Services.DefaultView[Services.Rows.IndexOf(Services.Rows[0])];
                //        }
                //        else
                //        {
                //            Services = null;
                //            BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BARCODE"] = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BARCODE"] != DBNull.Value
                //                ? Convert.ToString(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BARCODE"]) : string.Empty;
                //        }
                //        IsInvestigationCPTCodeEnter = false;
                //    }
                //    else
                //    {
                //        IsInvestigationCPTCodeEnter = true;
                //        Services = ServicesTemp.Copy();
                //        IsInvestigationCPTCodeEnter = false;
                //    }
                //}

            }
            catch (Exception ex)
            {
               // ExceptionHandler.WriteErrorLog(ex);
                throw;
            }
        }

        # endregion

        #region DueAmount
        // Move to common method , Benson ( DueAmounts = objUICommonMethods.DueAmount(MRNO);)  
        ////private void DueAmount()
        ////{
        ////    MainBilling objMainBilling = new MainBilling();
        ////    DataTable DtCriteria = new DataTable();
        ////    DtCriteria.Columns.Add("MRNO", typeof(string));
        ////    DtCriteria.Columns.Add("MODE", typeof(int));
        ////    DtCriteria.Rows.Add(PatientInformation.Rows[0]["MRNO"], 18);
        ////    DataTable dtTemp = objMainBilling.FetchPatBillPayingPartyWise(DtCriteria);
        ////    if (dtTemp.KIIsNotNullAndRowCount())
        ////    {
        ////        DueAmounts = IfNullReturnZero(dtTemp.Rows[0]["DUE_AMOUNT"]);
        ////    }
        ////}
        #endregion

        #region EMRBarCodeSearch

        private void Executed_EMRBarcodeWiseSearch(object sender, ExecutedRoutedEventArgs e)
        {
            if (SelectedServiceType == (int)ServiceType.Pharmacy && EditService == null &&
                   BillData != null && BillData.Tables["INV_PAT_BILLING_TEMP"].Rows.Count > 0)
            {
                DataRowView dr = (DataRowView)e.Parameter;
                DataRow drRow = dr.Row;
                //  BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["BARCODE"] = BarCode;
                MainBilling objMainbilling = new MainBilling();
                DataTable DtCriteria = new DataTable();
                DtCriteria.Columns.Add("MODE", typeof(int));
                DtCriteria.Columns.Add("PH_SUBLOCATION_ID", typeof(int));
                DtCriteria.Columns.Add("BARCODE", typeof(string));
                DtCriteria.Rows.Add(1, Convert.ToInt64(SelectedLabOrSubLocationValue), drRow["BARCODE"]);
                DataTable dtData = objMainbilling.FetchPhStock(DtCriteria);
                if (dtData != null && dtData.Rows.Count > 0 && Services != null && Services.Rows.Count > 0)
                {
                    if (Convert.ToInt64(dtData.Rows[0]["INV_MAST_SERVICE_ID"]) == Convert.ToInt64(dr["INV_MAST_SERVICE_ID"]))
                    {
                        // dr["BATCHNO"] = dtData.Rows[0]["BATCHNO"];// Commenting and assigning to drRow for fixing bug: 20971  
                        //bug: 20971 , Assigning two times because BATCH NO Combobox has already a selectionchanged event, so old refreshing is not working
                        drRow["BATCHNO"] = dtData.Rows[0]["BATCHNO"].ToString();
                        drRow["BATCHNO"] = dtData.Rows[0]["BATCHNO"].ToString();
                        //bug: 20971  END
                    }
                    else
                    {
                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                           "Selected medicine is different ", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    }
                }
                else
                {
                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                            "Item not available in the location ", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    drRow["BARCODE"] = null;
                }
            }

        }
        #endregion

        public bool isChangetoZeroChargeMenuClick = false;

        private void Executed_ChangetoZeroCharge(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                bool hasPrivilege = CommonData.CheckPrivilege("FO_BILLING_CHANGE_TO_ZERO_CHARGE");
                if (hasPrivilege)
                {
                    DataRowView dr = (DataRowView)e.Parameter;
                    if (dr != null && deleteValidation() && AdjustmentValidation())
                    {
                        isChangetoZeroChargeMenuClick = true;
                        overridingResonHeader = "- Change to zero charge";
                        if (!string.IsNullOrEmpty(Convert.ToString(dr["OVER_RIDING_REASON"])))
                        {
                            AllergyRemarks = Convert.ToString(dr["OVER_RIDING_REASON"]);
                        }
                        ReasonforOverRiding();
                        isEdited = true;
                        if (AllergyRemarks != string.Empty)
                        {
                            dr["BASE_CHARGE"] = 0;
                            dr["AMOUNT"] = 0;
                            dr["DISCOUNT"] = 0;
                            dr["MARKUP"] = 0;
                            dr["ADJUSTMENT"] = 0;
                            dr["SCHEME_MARKUP"] = 0;
                            dr["SCHEME_DISCOUNT_MARKUP"] = 0;
                            dr["SCHEME_MARK_DISC_TEMP"] = 0;
                            dr["DISCOUNT_MARKUP"] = 0;
                            dr["DISCOUNT_MARKUP_PER_ITEM"] = 0;
                            dr["AMOUNT_SCHEME"] = 0;
                            dr["SCHEME_DISCOUNT"] = 0;
                            dr["SCHEME_MARKUP_IN_PERC"] = 0;
                            dr["SCHEME_DISCOUNT_IN_PERC"] = 0;
                            dr["TEMP_COPAY"] = 0;
                            dr["NET_AMOUNT"] = 0;
                            dr["NET"] = 0;
                            dr["TOTAL"] = 0;
                            dr["CHARGE_FIXED"] = 0;
                            dr["DEDUCTIBLE"] = 0;
                            dr["CO_PAY_AMOUNT"] = 0;
                            dr["CO_PAY_IN_PER"] = 0;
                            dr["COPAY_MIN_LIMIT_AMT"] = 0;
                            dr["COPAY_MAX_LIMIT_AMT"] = 0;
                            dr["ACTUAL_COPAY"] = 0;
                            dr["DEDUCTIBLE_MIN"] = 0;
                            dr["GROSS_AMOUNT"] = 0;
                            dr["NET_AMOUNT"] = 0;
                            dr["PATIENT_SHARE"] = 0;
                            dr["SPONSOR"] = 0;
                            dr["GEN_PATIENT_SHARE"] = 0;
                            dr["DEDUCTIBLE"] = 0;
                            dr["IS_EDITED"] = 1;
                            dr["PROVIDER_DISCOUNT_AMOUNT"] = 0;
                            dr["PROVIDER_DISCOUNT_PERC"] = 0;
                            if ((SelectedEncounterDetails != null && SelectedEncounterDetails.Row.Table.Columns.Contains("ENCOUNTER_MODE")
                                && SelectedEncounterDetails.Row["ENCOUNTER_MODE"] != DBNull.Value
                                && Convert.ToInt16(SelectedEncounterDetails.Row["ENCOUNTER_MODE"]) == (int)VisitMode.OPCASH)
                                || SelectedVisitMode == (int)VisitMode.OPCASH)
                            {
                                CalculateTotalAdjustment();
                            }
                            else
                            {
                                TotalAdjustment = 0;
                            }
                            dr["EDITED_STATUS"] = (int)Infologics.Medilogics.Enumerators.Billing.InclusionOverrideStatus.ChangetoZeroCharge;
                            dr["OVER_RIDING_REASON"] = AllergyRemarks;
                            dr["APPROVAL_NO"] = ApprovalNo;
                            dr["APPROVAL_DATE"] = SelectedDate;
                            ApprovalNo = string.Empty;
                            SelectedDate = DateTime.Now;
                            AllergyRemarks = string.Empty;
                            isEdited = false;
                            if (dr["SERVICE_TYPE"] != DBNull.Value && Convert.ToInt16(dr["SERVICE_TYPE"]) == (int)ServiceType.Consultation)
                            {
                                dr["ISSALE"] = true;
                            }
                            if (!isERCredit)
                            {
                                ToBeCollected = BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                   .Where(x => x["ISSALE"] != DBNull.Value && Convert.ToBoolean(x["ISSALE"]))
                                   .Select(x => IfNullReturnZero(x["PATIENT_SHARE"])).Sum();
                            }
                            TotalAmount = (from drRow in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                           where drRow.RowState != DataRowState.Deleted && drRow["NET"] != DBNull.Value &&
                                           drRow["ISSALE"] != DBNull.Value && Convert.ToBoolean(drRow["ISSALE"]) == true
                                           select Convert.ToDecimal(drRow["NET"])).Sum();
                            TotalNet = (from drNet in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                        where drNet.RowState != DataRowState.Deleted && drNet["NET_AMOUNT"] != DBNull.Value &&
                                       drNet["ISSALE"] != DBNull.Value && Convert.ToBoolean(drNet["ISSALE"]) == true
                                        select Convert.ToDecimal(drNet["NET_AMOUNT"])).Sum();
                            SelectedItemServiceType = Convert.ToInt16(dr["SERVICE_TYPE"]);
                            CalculateMaxMinCopay();
                            CalculateServiceTotal();
                        }
                        overridingResonHeader = string.Empty;
                        isChangetoZeroChargeMenuClick = false;
                        isEdited = false;
                    }
                }
                else
                {
                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                          "User dont have privilege", MessageBoxButtonType.OK, MessageBoxImages.Information);
                    AllergyRemarks = string.Empty;
                    ApprovalNo = string.Empty;
                    SelectedDate = DateTime.Now;
                }
            }
            catch (Exception ex)
            {
                throw;
            }
            finally
            {
                Controlvisible = false;
            }
        }

        private void LoadSchemeDetails(DataRow dr)
        {
            DataRow drv = dr;
            if (drv != null)
            {
                //ucContracctControl.ucPriceList = new UcPriceList();
                #region FetchTarriffDetails
                DataTable dt = new DataTable();
                //dt.Columns.Add("INV_MAST_SERVICE_ID", typeof(Int64));
                dt.Columns.Add("MODE", typeof(Int16));
                dt.Columns.Add("INCO_MAST_CONTRACT_ID", typeof(Int64));
                dt.Rows.Add(6, drv["INCO_MAST_CONTRACT_ID"]);
                Int64 IncoMastContractID = Convert.ToInt64(drv["INCO_MAST_CONTRACT_ID"]);
                MasterSettings.Main.MainMasterSettings objMain1 = new MasterSettings.Main.MainMasterSettings();
                DataTable DsContractDetails = objMain1.FetchPriceList(dt);

                DataTable dtTpaPriceList = new DataTable();
                DataTable dtNetworkPriceList = new DataTable();
                DataTable dtPlanPriceList = new DataTable();
                DataTable tempdtPlanPriceList = new DataTable();

                if (DsContractDetails != null)
                {
                    dtTpaPriceList = null;
                    dtNetworkPriceList = null;
                    dtPlanPriceList = null;
                    var resTpaPl = DsContractDetails.Copy().AsEnumerable().Where(r => r["INCO_MAST_CONTRACT_ID"] != DBNull.Value &&
                        r["INCO_DTLS_CONTRACT_CLASS_ID"] == DBNull.Value && r["INCO_MAST_SCHEME_ID"] == DBNull.Value);
                    if (resTpaPl != null && resTpaPl.Count() > 0)
                    {
                        dtTpaPriceList = resTpaPl.CopyToDataTable();
                        dtTpaPriceList.TableName = "INCO_DTLS_TARIFF";
                    }
                    var resNetWork = DsContractDetails.Copy().AsEnumerable().Where(r => r["INCO_DTLS_CONTRACT_CLASS_ID"] != DBNull.Value &&
                        r["INCO_MAST_SCHEME_ID"] == DBNull.Value);
                    if (resNetWork != null && resNetWork.Count() > 0)
                    {
                        dtNetworkPriceList = resNetWork.CopyToDataTable();
                        dtNetworkPriceList.TableName = "INCO_DTLS_TARIFF";
                    }
                    var resPlanPl = DsContractDetails.Copy().AsEnumerable().Where(r => r["INCO_MAST_CONTRACT_ID"] != DBNull.Value &&
                        r["INCO_DTLS_CONTRACT_CLASS_ID"] != DBNull.Value && r["INCO_MAST_SCHEME_ID"] != DBNull.Value);
                    if (resPlanPl != null && resPlanPl.Count() > 0)
                    {
                        dtPlanPriceList = resPlanPl.CopyToDataTable();
                        dtPlanPriceList.TableName = "INCO_DTLS_TARIFF";
                        tempdtPlanPriceList = dtPlanPriceList.Copy();
                    }
                }

                #endregion
                int ContractTypeID = 2;
                DataTable dtTempPlan = null;
                DataRow[] drScheme = null;
                Medilogics.MasterSettings.UIContainer.Scheme.PriceList.GridDef.IncoMastContractId = null;
                Medilogics.MasterSettings.UIContainer.Scheme.PriceList.GridDef.IncoMastNetworkId = null;
                Medilogics.MasterSettings.UIContainer.Scheme.PriceList.GridDef.IncoMastSchemeId = null;
                //febin 16/7/14

                //if (SchemeNetwork != null && SchemeNetwork.AsEnumerable().Count(r => r["INCO_DTLS_CONTRACT_CLASS_ID"] != DBNull.Value && drv["INCO_DTLS_CONTRACT_CLASS_ID"] != DBNull.Value &&
                //    Convert.ToDecimal(r["INCO_DTLS_CONTRACT_CLASS_ID"]) == Convert.ToDecimal(drv["INCO_DTLS_CONTRACT_CLASS_ID"])) > 0)
                //{
                //    UIContainer.Scheme.PriceList.GridDef.SelectedNetwork = Convert.ToDecimal(SchemeNetwork.AsEnumerable().Where(r => r["INCO_DTLS_CONTRACT_CLASS_ID"] != DBNull.Value && drv["INCO_DTLS_CONTRACT_CLASS_ID"] != DBNull.Value &&
                //    Convert.ToDecimal(r["INCO_DTLS_CONTRACT_CLASS_ID"]) == Convert.ToDecimal(drv["INCO_DTLS_CONTRACT_CLASS_ID"])).First()["CLASS_ID"]);
                //}
                //else
                //{
                Medilogics.MasterSettings.UIContainer.Scheme.PriceList.GridDef.SelectedNetwork = null;
                //}
                //  NetPriceList_Click(Convert.ToInt64(drv["INCO_DTLS_CONTRACT_CLASS_ID"]));
                CommonWindow objwin = new CommonWindow(WindowControlBoxStyle.OnlyWithClose);
                Medilogics.MasterSettings.UIContainer.Scheme.PriceList.GridDef.IsFromTPA = false;
                Medilogics.MasterSettings.UIContainer.Scheme.PriceList.GridDef.IsFromNetwork = false;
                Medilogics.MasterSettings.UIContainer.Scheme.PriceList.GridDef.IsCorprate = ContractTypeID == 2 ? true : false;
                Medilogics.MasterSettings.UIContainer.Scheme.PriceList.GridDef.IsFromPlan = true;
                Medilogics.MasterSettings.UIContainer.Scheme.PriceList.GridDef.DtExistingData = null;
                Medilogics.MasterSettings.UIContainer.Scheme.PriceList.GridDef.DtOldSettings = null;//once pcts comming after that table not clear
                //else
                //{
                Medilogics.MasterSettings.UIContainer.Scheme.PriceList.GridDef.IncoMastContractId = IncoMastContractID;
                //if (DrvSelectedClass.KIIsNotNullOrEmpty())
                //{
                //    UIContainer.Scheme.PriceList.GridDef.IncoMastNetworkId = Convert.ToInt64(DrvSelectedClass.Row["INCO_DTLS_CONTRACT_CLASS_ID"]);
                Medilogics.MasterSettings.UIContainer.Scheme.PriceList.GridDef.IncoMastNetworkId = Convert.ToInt64(drv["INCO_DTLS_CONTRACT_CLASS_ID"]);
                //}
                Medilogics.MasterSettings.UIContainer.Scheme.PriceList.GridDef.IncoMastSchemeId = Convert.ToInt64(drv["INCO_MAST_SCHEME_ID"]);
                if (Medilogics.MasterSettings.UIContainer.Scheme.PriceList.GridDef.IncoMastSchemeId > 0 && dtPlanPriceList != null)
                {
                    drScheme = dtPlanPriceList.Copy().Select("INCO_MAST_SCHEME_ID =" + Convert.ToInt64(drv["INCO_MAST_SCHEME_ID"]) + " AND INCO_DTLS_TARIFF_ID > 0 AND ISDELETE <> 1");
                    if (drScheme != null && drScheme.Count() > 0)
                    {
                        Medilogics.MasterSettings.UIContainer.Scheme.PriceList.GridDef.DtOldSettings = drScheme.CopyToDataTable();
                    }
                }
                //}
                if (dtTpaPriceList != null && dtTpaPriceList.Rows.Count > 0)
                {
                    drScheme = null;
                    drScheme = dtTpaPriceList.Copy().Select("ISDELETE <> 1");
                    if (drScheme != null && drScheme.Count() > 0)
                    {
                        dtTempPlan = drScheme.CopyToDataTable();

                    }
                    if (dtNetworkPriceList != null && dtNetworkPriceList.Rows.Count > 0)
                    {
                        var resNetwork = dtNetworkPriceList.Copy().AsEnumerable().Where(r => r["INCO_DTLS_CONTRACT_CLASS_ID"] != DBNull.Value &&
                            r["ISDELETE"] != DBNull.Value && Convert.ToDecimal(r["ISDELETE"]) != 1 &&
                            Convert.ToInt64(r["INCO_DTLS_CONTRACT_CLASS_ID"]) == Convert.ToInt64(drv["INCO_DTLS_CONTRACT_CLASS_ID"]));
                        if (resNetwork != null && resNetwork.Count() > 0)
                        {
                            foreach (DataRow item in resNetwork.CopyToDataTable().Rows)
                            {
                                if (item["INV_MAST_SERVICE_ID"] == DBNull.Value && item["INCO_INV_CATEGORY_ID"] != DBNull.Value)
                                {
                                    var resExistNetwork = dtTempPlan.AsEnumerable().Where(r => r["INCO_INV_CATEGORY_ID"] != DBNull.Value &&
                                        r["INV_MAST_SERVICE_ID"] == DBNull.Value &&
                                        //r["INCO_DTLS_CONTRACT_CLASS_ID"] == DBNull.Value && r["INCO_MAST_SCHEME_ID"] == DBNull.Value &&
                                        Convert.ToInt64(r["INCO_INV_CATEGORY_ID"]) == Convert.ToInt64(item["INCO_INV_CATEGORY_ID"]));
                                    if (resExistNetwork != null && resExistNetwork.Count() > 0)
                                    {
                                        //resExistNetwork.ElementAt(0).ItemArray = item.ItemArray;
                                        if (resExistNetwork.First()["ISEXCLUDE"] != DBNull.Value && Convert.ToInt16(resExistNetwork.First()["ISEXCLUDE"]) == 0)
                                        {
                                            //SetTariffData(item, resExistNetwork.First());
                                            resExistNetwork.First()["INCO_DTLS_TARIFF_ID"] = item["INCO_DTLS_TARIFF_ID"];
                                            resExistNetwork.First()["INCO_DTLS_CONTRACT_CLASS_ID"] = item["INCO_DTLS_CONTRACT_CLASS_ID"];
                                            //resExistNetwork.First()["ISEXCLUDE"] = item["ISEXCLUDE"];
                                            resExistNetwork.First()["ISEDIT_FROM_NETWORK"] = item["ISEDIT_FROM_NETWORK"];
                                            if (resExistNetwork.First()["ISEXCLUDE"] != DBNull.Value && Convert.ToInt16(resExistNetwork.First()["ISEXCLUDE"]) == 1)
                                            {
                                                //SetExcludeData(resExistNetwork.First());
                                            }
                                        }
                                    }
                                    else
                                    {
                                        dtTempPlan.ImportRow(item);
                                    }

                                }
                                else
                                {
                                    var resExistNetwork = dtTempPlan.AsEnumerable().Where(r => r["INCO_INV_CATEGORY_ID"] != DBNull.Value &&
                                        r["INV_MAST_SERVICE_ID"] != DBNull.Value &&
                                        //r["INCO_MAST_CONTRACT_ID"] != DBNull.Value && r["INCO_DTLS_CONTRACT_CLASS_ID"] == DBNull.Value && r["INCO_MAST_SCHEME_ID"] == DBNull.Value &&
                                        Convert.ToInt64(r["INCO_INV_CATEGORY_ID"]) == Convert.ToInt64(item["INCO_INV_CATEGORY_ID"]) &&
                                        Convert.ToInt64(r["INV_MAST_SERVICE_ID"]) == Convert.ToInt64(item["INV_MAST_SERVICE_ID"]));
                                    if (resExistNetwork != null && resExistNetwork.Count() > 0)
                                    {
                                        //resExistNetwork.ElementAt(0).ItemArray = item.ItemArray;
                                        if (resExistNetwork.First()["ISEXCLUDE"] != DBNull.Value && Convert.ToInt16(resExistNetwork.First()["ISEXCLUDE"]) == 0)
                                        {
                                            //SetTariffData(item, resExistNetwork.First());
                                            resExistNetwork.First()["INCO_DTLS_CONTRACT_CLASS_ID"] = item["INCO_DTLS_CONTRACT_CLASS_ID"];
                                            //resExistNetwork.First()["ISEXCLUDE"] = item["ISEXCLUDE"];
                                            resExistNetwork.First()["ISEDIT_FROM_NETWORK"] = item["ISEDIT_FROM_NETWORK"];
                                            if (resExistNetwork.First()["ISEXCLUDE"] != DBNull.Value && Convert.ToInt16(resExistNetwork.First()["ISEXCLUDE"]) == 1)
                                            {
                                                //SetExcludeData(resExistNetwork.First());
                                            }
                                        }
                                    }
                                    else
                                    {
                                        dtTempPlan.ImportRow(item);
                                    }
                                }
                            }
                        }
                    }
                    //ResetTariffEditedStatusFileds(dtTempPlan);
                    if (dtPlanPriceList != null && dtPlanPriceList.Rows.Count > 0)
                    {
                        var resPlan = dtPlanPriceList.Copy().AsEnumerable().Where(r => r["INCO_MAST_SCHEME_ID"] != DBNull.Value &&
                            r["ISDELETE"] != DBNull.Value && Convert.ToDecimal(r["ISDELETE"]) != 1 &&
                            Convert.ToInt64(r["INCO_MAST_SCHEME_ID"]) == Convert.ToInt64(drv["INCO_MAST_SCHEME_ID"]));
                        if (resPlan != null && resPlan.Count() > 0)
                        {

                            foreach (DataRow item in resPlan.CopyToDataTable().Rows)
                            {
                                if (item["INV_MAST_SERVICE_ID"] == DBNull.Value && item["INCO_INV_CATEGORY_ID"] != DBNull.Value)
                                {

                                    var resExistNetwork = dtTempPlan.AsEnumerable().Where(r => r["INCO_INV_CATEGORY_ID"] != DBNull.Value &&
                                        r["INV_MAST_SERVICE_ID"] == DBNull.Value &&
                                        // r["INCO_MAST_SCHEME_ID"] == DBNull.Value &&
                                        Convert.ToInt64(r["INCO_INV_CATEGORY_ID"]) == Convert.ToInt64(item["INCO_INV_CATEGORY_ID"]));
                                    if (resExistNetwork != null && resExistNetwork.Count() > 0)
                                    {
                                        //resExistNetwork.ElementAt(0).ItemArray = item.ItemArray;
                                        if (resExistNetwork.First()["ISEXCLUDE"] != DBNull.Value && Convert.ToInt16(resExistNetwork.First()["ISEXCLUDE"]) == 0)
                                        {
                                            //SetTariffData(item, resExistNetwork.First());
                                            resExistNetwork.First()["INCO_DTLS_TARIFF_ID"] = item["INCO_DTLS_TARIFF_ID"];
                                            resExistNetwork.First()["INCO_MAST_SCHEME_ID"] = item["INCO_MAST_SCHEME_ID"];
                                            // resExistNetwork.First()["ISEXCLUDE"] = item["ISEXCLUDE"];
                                            resExistNetwork.First()["ISEDIT_FROM_PLAN"] = item["ISEDIT_FROM_PLAN"];
                                            if (resExistNetwork.First()["ISEXCLUDE"] != DBNull.Value && Convert.ToInt16(resExistNetwork.First()["ISEXCLUDE"]) == 1)
                                            {
                                                // SetExcludeData(resExistNetwork.First());
                                            }
                                        }
                                    }
                                    else
                                    {
                                        dtTempPlan.ImportRow(item);
                                    }

                                }
                                else
                                {
                                    var resExistNetwork = dtTempPlan.AsEnumerable().Where(r => r["INCO_INV_CATEGORY_ID"] != DBNull.Value &&
                                        r["INV_MAST_SERVICE_ID"] != DBNull.Value &&
                                        //r["INCO_MAST_CONTRACT_ID"] != DBNull.Value && r["INCO_MAST_SCHEME_ID"] == DBNull.Value &&
                                        Convert.ToInt64(r["INCO_INV_CATEGORY_ID"]) == Convert.ToInt64(item["INCO_INV_CATEGORY_ID"]) &&
                                        Convert.ToInt64(r["INV_MAST_SERVICE_ID"]) == Convert.ToInt64(item["INV_MAST_SERVICE_ID"]));
                                    if (resExistNetwork != null && resExistNetwork.Count() > 0)
                                    {
                                        if (resExistNetwork.First()["ISEXCLUDE"] != DBNull.Value && Convert.ToInt16(resExistNetwork.First()["ISEXCLUDE"]) == 0)
                                        {
                                            //resExistNetwork.ElementAt(0).ItemArray = item.ItemArray;
                                            //SetTariffData(item, resExistNetwork.First());
                                            resExistNetwork.First()["INCO_DTLS_TARIFF_ID"] = item["INCO_DTLS_TARIFF_ID"];
                                            resExistNetwork.First()["INCO_MAST_SCHEME_ID"] = item["INCO_MAST_SCHEME_ID"];
                                            // resExistNetwork.First()["ISEXCLUDE"] = item["ISEXCLUDE"];
                                            resExistNetwork.First()["ISEDIT_FROM_PLAN"] = item["ISEDIT_FROM_PLAN"];
                                            if (resExistNetwork.First()["ISEXCLUDE"] != DBNull.Value && Convert.ToInt16(resExistNetwork.First()["ISEXCLUDE"]) == 1)
                                            {
                                                //SetExcludeData(resExistNetwork.First());
                                            }
                                        }
                                    }
                                    else
                                    {
                                        dtTempPlan.ImportRow(item);
                                    }
                                }
                            }
                        }

                    }
                    if (dtTempPlan != null)
                    {

                        Medilogics.MasterSettings.UIContainer.Scheme.PriceList.GridDef.DtExistingData = dtTempPlan.Copy();
                    }

                }

                //UIContainer.Scheme.PriceList.UcPriceList uc = new UcPriceList();
                //uc.IsDisableStandardPlan = true;
                //if (IsCollapse == false && drv["PLAN_TYPE"] != DBNull.Value && Convert.ToInt16(drv["PLAN_TYPE"]) == (Int16)Infologics.Medilogics.Enumerators.Insurance.PlanType.Standard)
                //{
                //UcPriceList objPrice = new UcPriceList();
                ////UCPriceList.IsDisableStandardPlan = true;
                ////}
                //// objPrice.IsHeadingEnabled = false;
                //objwin.Content = objPrice;
                //objwin.Height = 520;
                //// objwin.Width = 1150;
                //objwin.Width = SystemParameters.WorkArea.Width - 300;
                //objwin.SizeToContent = SizeToContent.Manual;
                //objwin.ResizeMode = ResizeMode.NoResize;
                //objwin.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                //objwin.Owner = Window.GetWindow(this);
                //objwin.Title = "Tariff";
                //objwin.ShowDialog();                
                Medilogics.MasterSettings.UIContainer.Scheme.PriceList.GridDef.DtSource = null;
                Medilogics.MasterSettings.UIContainer.Scheme.PriceList.GridDef.IsFromPlan = false;
            }
        }

        private void SetTariffData(DataRow DrSource, DataRow DrTarget, bool IsUpadte = false)
        {

            try
            {
                bool IsAdded = false;
                if (IsUpadte)
                {
                    if (DrSource["ISEXCLUDE_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["ISEXCLUDE_EDITED"])) //(dr["ISEXCLUDE_EDITED"] != DBNull.Value && Convert.ToInt16(dr["ISEXCLUDE_EDITED"]) == 0))
                    {
                        DrTarget["ISEXCLUDE"] = DrSource["ISEXCLUDE"];
                        DrTarget["ISEXCLUDE_EDITED"] = DrSource["ISEXCLUDE_EDITED"];
                    }
                    else
                    {
                        // DrTarget["ISEXCLUDE"] = 0;
                    }
                    //if (DrSource["OP_CHARGE_MODE_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["OP_CHARGE_MODE_EDITED"]))
                    //{
                    //    DrTarget["OP_CHARGE_MODE"] = DrSource["OP_CHARGE_MODE"];
                    //    DrTarget["OP_CHARGE_MODE_EDITED"] = DrSource["OP_CHARGE_MODE_EDITED"];
                    //}
                    //else
                    //{
                    //  //  DrTarget["OP_CHARGE_MODE"] = 0;
                    //}
                    if ((DrSource["OP_CHARGE_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["OP_CHARGE_EDITED"])) ||
                        (DrSource["OP_CHARGE_TYPE_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["OP_CHARGE_TYPE_EDITED"])) ||
                        (DrSource["OP_CHARGE_MODE_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["OP_CHARGE_MODE_EDITED"])))
                    {
                        DrTarget["OP_CHARGE_MODE"] = DrSource["OP_CHARGE_MODE"];
                        DrTarget["OP_CHARGE_AMOUNT"] = DrSource["OP_CHARGE_AMOUNT"];
                        DrTarget["OP_CHARGE_PERC"] = DrSource["OP_CHARGE_PERC"];
                        DrTarget["OP_FACTOR_VALUE"] = DrSource["OP_FACTOR_VALUE"];
                        DrTarget["OP_CHARGE_FIXED"] = DrSource["OP_CHARGE_FIXED"];
                        DrTarget["OP_CHARGE_EDITED"] = DrSource["OP_CHARGE_EDITED"];
                        DrTarget["OP_CHARGE_TYPE_EDITED"] = DrSource["OP_CHARGE_TYPE_EDITED"];
                        DrTarget["OP_CHARGE_MODE_EDITED"] = DrSource["OP_CHARGE_MODE_EDITED"];
                    }
                    if ((DrSource["OPCREDIT_CHARGE_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["OPCREDIT_CHARGE_EDITED"])) ||
                        (DrSource["OPCREDIT_CHARGE_TYPE_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["OPCREDIT_CHARGE_TYPE_EDITED"])) ||
                         (DrSource["OPCREDIT_CHARGE_MODE_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["OPCREDIT_CHARGE_MODE_EDITED"])))
                    {
                        DrTarget["OPCREDIT_CHARGE_MODE"] = DrSource["OPCREDIT_CHARGE_MODE"];
                        DrTarget["OPCREDIT_CHARGE_AMOUNT"] = DrSource["OPCREDIT_CHARGE_AMOUNT"];
                        DrTarget["OPCREDIT_CHARGE_PERC"] = DrSource["OPCREDIT_CHARGE_PERC"];
                        DrTarget["OPCREDIT_FACTOR_VALUE"] = DrSource["OPCREDIT_FACTOR_VALUE"];
                        DrTarget["OPCREDIT_CHARGE_EDITED"] = DrSource["OPCREDIT_CHARGE_EDITED"];
                        DrTarget["OPCREDIT_CHARGE_FIXED"] = DrSource["OPCREDIT_CHARGE_FIXED"];
                        DrTarget["OPCREDIT_CHARGE_TYPE_EDITED"] = DrSource["OPCREDIT_CHARGE_TYPE_EDITED"];
                        DrTarget["OPCREDIT_CHARGE_MODE_EDITED"] = DrSource["OPCREDIT_CHARGE_MODE_EDITED"];

                    }
                    //if (DrSource["OPCREDIT_CHARGE_MODE_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["OPCREDIT_CHARGE_MODE_EDITED"]))
                    //{
                    //    DrTarget["OPCREDIT_CHARGE_MODE"] = DrSource["OPCREDIT_CHARGE_MODE"];
                    //    DrTarget["OPCREDIT_CHARGE_MODE_EDITED"] = DrSource["OPCREDIT_CHARGE_MODE_EDITED"];
                    //}
                    //else
                    //{
                    //    DrTarget["OPCREDIT_CHARGE_MODE"] = 0;
                    //}
                    //if (DrSource["IP_CHARGE_MODE_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["IP_CHARGE_MODE_EDITED"]))
                    //{
                    //    DrTarget["IP_CHARGE_MODE"] = DrSource["IP_CHARGE_MODE"];
                    //    DrTarget["IP_CHARGE_MODE_EDITED"] = DrSource["IP_CHARGE_MODE_EDITED"];
                    //}
                    //else
                    //{
                    //   // DrTarget["IP_CHARGE_MODE"] = 0;

                    //}
                    if ((DrSource["IP_CHARGE_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["IP_CHARGE_EDITED"])) ||
                        (DrSource["IP_CHARGE_TYPE_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["IP_CHARGE_TYPE_EDITED"])) ||
                        (DrSource["IP_CHARGE_MODE_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["IP_CHARGE_MODE_EDITED"])))
                    {
                        DrTarget["IP_CHARGE_MODE"] = DrSource["IP_CHARGE_MODE"];
                        DrTarget["IP_CHARGE_AMOUNT"] = DrSource["IP_CHARGE_AMOUNT"];
                        DrTarget["IP_CHARGE_PERC"] = DrSource["IP_CHARGE_PERC"];
                        DrTarget["IP_FACTOR_VALUE"] = DrSource["IP_FACTOR_VALUE"];
                        DrTarget["IP_CHARGE_FIXED"] = DrSource["IP_CHARGE_FIXED"];
                        DrTarget["IP_CHARGE_EDITED"] = DrSource["IP_CHARGE_EDITED"];
                        DrTarget["IP_CHARGE_TYPE_EDITED"] = DrSource["IP_CHARGE_TYPE_EDITED"];
                        DrTarget["IP_CHARGE_MODE_EDITED"] = DrSource["IP_CHARGE_MODE_EDITED"];
                    }
                    if ((DrSource["OP_LIMIT_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["OP_LIMIT_EDITED"])) ||
                        (DrSource["OP_LIMIT_TYPE_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["OP_LIMIT_TYPE_EDITED"])) ||
                        (DrSource["OP_LIMIT_MODE_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["OP_LIMIT_MODE_EDITED"])) ||
                        (DrSource["OPCREDIT_APPROVAL_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["OPCREDIT_APPROVAL_EDITED"])))
                    {
                        DrTarget["OPCREDIT_LIMIT_COUNT"] = DrSource["OPCREDIT_LIMIT_COUNT"];
                        DrTarget["OPCREDIT_LIMIT_AMOUNT"] = DrSource["OPCREDIT_LIMIT_AMOUNT"];
                        DrTarget["OP_LIMIT_EDITED"] = DrSource["OP_LIMIT_EDITED"];
                        DrTarget["OPCREDIT_LIMIT_BASEDON"] = DrSource["OPCREDIT_LIMIT_BASEDON"];
                        DrTarget["OP_LIMIT_TYPE_EDITED"] = DrSource["OP_LIMIT_TYPE_EDITED"];
                        //}
                        //if (DrSource["OP_LIMIT_MODE_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["OP_LIMIT_MODE_EDITED"]))
                        //{
                        //    DrTarget["OPCREDIT_LIMIT_BASEDON"] = DrSource["OPCREDIT_LIMIT_BASEDON"];
                        DrTarget["OP_LIMIT_MODE_EDITED"] = DrSource["OP_LIMIT_MODE_EDITED"];
                        //}
                        //else
                        //{
                        //   // DrTarget["OPCREDIT_LIMIT_BASEDON"] = 0;
                        //}
                        //if (DrSource["OPCREDIT_APPROVAL_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["OPCREDIT_APPROVAL_EDITED"]))
                        //{
                        DrTarget["OPCREDIT_APPROVAL_REQUIRED"] = DrSource["OPCREDIT_APPROVAL_REQUIRED"];
                        DrTarget["OPCREDIT_APPROVAL_EDITED"] = DrSource["OPCREDIT_APPROVAL_EDITED"];
                        //}
                        //else
                        //{
                        //DrTarget["OPCREDIT_APPROVAL_REQUIRED"] = 0;
                    }
                    if ((DrSource["IP_LIMIT_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["IP_LIMIT_EDITED"])) ||
                        (DrSource["IP_LIMIT_TYPE_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["IP_LIMIT_TYPE_EDITED"])) ||
                         (DrSource["IP_LIMIT_MODE_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["IP_LIMIT_MODE_EDITED"])) ||
                        (DrSource["IP_APPROVAL_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["IP_APPROVAL_EDITED"])))
                    {
                        DrTarget["IP_LIMIT_COUNT"] = DrSource["IP_LIMIT_COUNT"];
                        DrTarget["IP_LIMIT_AMOUNT"] = DrSource["IP_LIMIT_AMOUNT"];
                        DrTarget["IP_LIMIT_EDITED"] = DrSource["IP_LIMIT_EDITED"];
                        DrTarget["IP_LIMIT_BASEDON"] = DrSource["IP_LIMIT_BASEDON"];
                        DrTarget["IP_LIMIT_TYPE_EDITED"] = DrSource["IP_LIMIT_TYPE_EDITED"];
                        //}
                        //if (DrSource["IP_LIMIT_MODE_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["IP_LIMIT_MODE_EDITED"]))
                        //{
                        //    DrTarget["IP_LIMIT_BASEDON"] = DrSource["IP_LIMIT_BASEDON"];
                        DrTarget["IP_LIMIT_MODE_EDITED"] = DrSource["IP_LIMIT_MODE_EDITED"];
                        //}
                        //else
                        //{
                        //    //DrTarget["IP_LIMIT_BASEDON"] = 0;
                        //}


                        //if (DrSource["IP_APPROVAL_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["IP_APPROVAL_EDITED"]))
                        //{
                        DrTarget["IP_APPROVAL_REQUIRED"] = DrSource["IP_APPROVAL_REQUIRED"];
                        DrTarget["IP_APPROVAL_EDITED"] = DrSource["IP_APPROVAL_EDITED"];
                    }
                    else
                    {
                        //DrTarget["IP_APPROVAL_REQUIRED"] = 0;
                    }
                    if (DrSource["EPISODE_DAYS_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["EPISODE_DAYS_EDITED"]))
                    {
                        DrTarget["EPISODE_DAYS"] = DrSource["EPISODE_DAYS"];
                        DrTarget["EPISODE_DAYS_EDITED"] = DrSource["EPISODE_DAYS_EDITED"];
                    }
                    if (DrSource["FREE_DAYS_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["FREE_DAYS_EDITED"]))
                    {
                        DrTarget["FREE_DAYS"] = DrSource["FREE_DAYS"];
                        DrTarget["FREE_DAYS_EDITED"] = DrSource["FREE_DAYS_EDITED"];
                    }
                    if (DrSource["FREE_VISIT_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["FREE_VISIT_EDITED"]))
                    {
                        DrTarget["FREE_VISIT"] = DrSource["FREE_VISIT"];
                        DrTarget["FREE_VISIT_EDITED"] = DrSource["FREE_VISIT_EDITED"];
                    }


                    DrTarget["ISEDIT"] = DrSource["ISEDIT"];
                    DrTarget["ISINCLUDE"] = DrSource["ISINCLUDE"];
                    DrTarget["ISEDIT_FROM_NETWORK"] = DrSource["ISEDIT_FROM_NETWORK"];
                    DrTarget["ISEDIT_FROM_PLAN"] = DrSource["ISEDIT_FROM_PLAN"];
                }
                else
                {
                    if (DrSource["ISEXCLUDE"] != DBNull.Value && Convert.ToString(DrSource["ISEXCLUDE"]) != string.Empty && Convert.ToInt16(DrSource["ISEXCLUDE"]) != 0) //(dr["ISEXCLUDE_EDITED"] != DBNull.Value && Convert.ToInt16(dr["ISEXCLUDE_EDITED"]) == 0))
                    {
                        DrTarget["ISEXCLUDE"] = DrSource["ISEXCLUDE"];
                        DrTarget["ISEXCLUDE_EDITED"] = DrSource["ISEXCLUDE_EDITED"];
                        IsAdded = true;
                    }
                    //if (DrSource["OP_CHARGE_MODE"] != DBNull.Value && Convert.ToString(DrSource["OP_CHARGE_MODE"]) != string.Empty && Convert.ToInt16(DrSource["OP_CHARGE_MODE"]) != 0)//(dr["OP_CHARGE_MODE_EDITED"] != DBNull.Value && Convert.ToInt16(dr["OP_CHARGE_MODE_EDITED"]) == 0))
                    //{
                    //    DrTarget["OP_CHARGE_MODE"] = DrSource["OP_CHARGE_MODE"];
                    //    DrTarget["OP_CHARGE_MODE_EDITED"] = DrSource["OP_CHARGE_MODE_EDITED"];
                    //    IsAdded = true;
                    //}
                    if ((DrSource["OP_CHARGE_AMOUNT"] != DBNull.Value && Convert.ToString(DrSource["OP_CHARGE_AMOUNT"]) != string.Empty) ||
                        (DrSource["OP_CHARGE_PERC"] != DBNull.Value && Convert.ToString(DrSource["OP_CHARGE_PERC"]) != string.Empty) ||
                        (DrSource["OP_FACTOR_VALUE"] != DBNull.Value && Convert.ToString(DrSource["OP_FACTOR_VALUE"]) != string.Empty) ||
                        (DrSource["OP_CHARGE_FIXED"] != DBNull.Value && Convert.ToString(DrSource["OP_CHARGE_FIXED"]) != string.Empty))
                    {
                        DrTarget["OP_CHARGE_MODE"] = DrSource["OP_CHARGE_MODE"];
                        DrTarget["OP_CHARGE_AMOUNT"] = DrSource["OP_CHARGE_AMOUNT"];
                        DrTarget["OP_CHARGE_PERC"] = DrSource["OP_CHARGE_PERC"];
                        DrTarget["OP_FACTOR_VALUE"] = DrSource["OP_FACTOR_VALUE"];
                        DrTarget["OP_CHARGE_FIXED"] = DrSource["OP_CHARGE_FIXED"];
                        DrTarget["OP_CHARGE_EDITED"] = DrSource["OP_CHARGE_EDITED"];
                        IsAdded = true;
                    }
                    if ((DrSource["OPCREDIT_CHARGE_AMOUNT"] != DBNull.Value && Convert.ToString(DrSource["OPCREDIT_CHARGE_AMOUNT"]) != string.Empty) ||
                         (DrSource["OPCREDIT_CHARGE_PERC"] != DBNull.Value && Convert.ToString(DrSource["OPCREDIT_CHARGE_PERC"]) != string.Empty) ||
                         (DrSource["OPCREDIT_FACTOR_VALUE"] != DBNull.Value && Convert.ToString(DrSource["OPCREDIT_FACTOR_VALUE"]) != string.Empty) ||
                         (DrSource["OPCREDIT_CHARGE_FIXED"] != DBNull.Value && Convert.ToString(DrSource["OPCREDIT_CHARGE_FIXED"]) != string.Empty))
                    {
                        DrTarget["OPCREDIT_CHARGE_MODE"] = DrSource["OPCREDIT_CHARGE_MODE"];
                        DrTarget["OPCREDIT_CHARGE_AMOUNT"] = DrSource["OPCREDIT_CHARGE_AMOUNT"];
                        DrTarget["OPCREDIT_CHARGE_PERC"] = DrSource["OPCREDIT_CHARGE_PERC"];
                        DrTarget["OPCREDIT_FACTOR_VALUE"] = DrSource["OPCREDIT_FACTOR_VALUE"];
                        DrTarget["OPCREDIT_CHARGE_EDITED"] = DrSource["OPCREDIT_CHARGE_EDITED"];
                        DrTarget["OPCREDIT_CHARGE_FIXED"] = DrSource["OPCREDIT_CHARGE_FIXED"];
                        IsAdded = true;

                    }
                    //if (DrSource["OPCREDIT_CHARGE_MODE"] != DBNull.Value && Convert.ToString(DrSource["OPCREDIT_CHARGE_MODE"]) != string.Empty && Convert.ToInt16(DrSource["OPCREDIT_CHARGE_MODE"]) != 0)
                    //{
                    //    DrTarget["OPCREDIT_CHARGE_MODE"] = DrSource["OPCREDIT_CHARGE_MODE"];
                    //    DrTarget["OPCREDIT_CHARGE_MODE_EDITED"] = DrSource["OPCREDIT_CHARGE_MODE_EDITED"];
                    //    IsAdded = true;
                    //}
                    //if (DrSource["IP_CHARGE_MODE"] != DBNull.Value && Convert.ToString(DrSource["IP_CHARGE_MODE"]) != string.Empty && Convert.ToInt16(DrSource["IP_CHARGE_MODE"]) != 0)
                    //{
                    //    DrTarget["IP_CHARGE_MODE"] = DrSource["IP_CHARGE_MODE"];
                    //    DrTarget["IP_CHARGE_MODE_EDITED"] = DrSource["IP_CHARGE_MODE_EDITED"];
                    //    IsAdded = true;
                    //}
                    if ((DrSource["IP_CHARGE_AMOUNT"] != DBNull.Value && Convert.ToString(DrSource["IP_CHARGE_AMOUNT"]) != string.Empty) ||
                         (DrSource["IP_CHARGE_PERC"] != DBNull.Value && Convert.ToString(DrSource["IP_CHARGE_PERC"]) != string.Empty) ||
                         (DrSource["IP_FACTOR_VALUE"] != DBNull.Value && Convert.ToString(DrSource["IP_FACTOR_VALUE"]) != string.Empty) ||
                         (DrSource["IP_CHARGE_FIXED"] != DBNull.Value && Convert.ToString(DrSource["IP_CHARGE_FIXED"]) != string.Empty))
                    {
                        DrTarget["IP_CHARGE_MODE"] = DrSource["IP_CHARGE_MODE"];
                        DrTarget["IP_CHARGE_AMOUNT"] = DrSource["IP_CHARGE_AMOUNT"];
                        DrTarget["IP_CHARGE_PERC"] = DrSource["IP_CHARGE_PERC"];
                        DrTarget["IP_FACTOR_VALUE"] = DrSource["IP_FACTOR_VALUE"];
                        DrTarget["IP_CHARGE_FIXED"] = DrSource["IP_CHARGE_FIXED"];
                        DrTarget["IP_CHARGE_EDITED"] = DrSource["IP_CHARGE_EDITED"];
                        IsAdded = true;
                    }
                    if ((DrSource["OPCREDIT_LIMIT_COUNT"] != DBNull.Value && Convert.ToString(DrSource["OPCREDIT_LIMIT_COUNT"]) != string.Empty) ||
                          (DrSource["OPCREDIT_LIMIT_AMOUNT"] != DBNull.Value && Convert.ToString(DrSource["OPCREDIT_LIMIT_AMOUNT"]) != string.Empty))
                    {
                        DrTarget["OPCREDIT_LIMIT_BASEDON"] = DrSource["OPCREDIT_LIMIT_BASEDON"];
                        DrTarget["OPCREDIT_LIMIT_COUNT"] = DrSource["OPCREDIT_LIMIT_COUNT"];
                        DrTarget["OPCREDIT_LIMIT_AMOUNT"] = DrSource["OPCREDIT_LIMIT_AMOUNT"];
                        DrTarget["OP_LIMIT_EDITED"] = DrSource["OP_LIMIT_EDITED"];
                        IsAdded = true;
                    }
                    //if (DrSource["OPCREDIT_LIMIT_BASEDON"] != DBNull.Value && Convert.ToString(DrSource["OPCREDIT_LIMIT_BASEDON"]) != string.Empty && Convert.ToInt16(DrSource["OPCREDIT_LIMIT_BASEDON"]) != 0)
                    //{
                    //    DrTarget["OPCREDIT_LIMIT_BASEDON"] = DrSource["OPCREDIT_LIMIT_BASEDON"];
                    //    DrTarget["OP_LIMIT_MODE_EDITED"] = DrSource["OP_LIMIT_MODE_EDITED"];
                    //    IsAdded = true;
                    //}
                    if ((DrSource["IP_LIMIT_COUNT"] != DBNull.Value && Convert.ToString(DrSource["IP_LIMIT_COUNT"]) != string.Empty) ||
                         (DrSource["IP_LIMIT_AMOUNT"] != DBNull.Value && Convert.ToString(DrSource["IP_LIMIT_AMOUNT"]) != string.Empty))
                    {
                        DrTarget["IP_LIMIT_BASEDON"] = DrSource["IP_LIMIT_BASEDON"];
                        DrTarget["IP_LIMIT_COUNT"] = DrSource["IP_LIMIT_COUNT"];
                        DrTarget["IP_LIMIT_AMOUNT"] = DrSource["IP_LIMIT_AMOUNT"];
                        DrTarget["IP_LIMIT_EDITED"] = DrSource["IP_LIMIT_EDITED"];
                        IsAdded = true;
                    }
                    //if (DrSource["IP_LIMIT_BASEDON"] != DBNull.Value && Convert.ToString(DrSource["IP_LIMIT_BASEDON"]) != string.Empty && Convert.ToInt16(DrSource["IP_LIMIT_BASEDON"]) != 0)
                    //{
                    //    DrTarget["IP_LIMIT_BASEDON"] = DrSource["IP_LIMIT_BASEDON"];
                    //    DrTarget["IP_LIMIT_MODE_EDITED"] = DrSource["IP_LIMIT_MODE_EDITED"];
                    //    IsAdded = true;
                    //}


                    if (DrSource["OPCREDIT_APPROVAL_REQUIRED"] != DBNull.Value && Convert.ToString(DrSource["OPCREDIT_APPROVAL_REQUIRED"]) != string.Empty)
                    {
                        DrTarget["OPCREDIT_APPROVAL_REQUIRED"] = DrSource["OPCREDIT_APPROVAL_REQUIRED"];
                        DrTarget["OPCREDIT_APPROVAL_EDITED"] = DrSource["OPCREDIT_APPROVAL_EDITED"];
                        IsAdded = true;
                    }
                    if (DrSource["IP_APPROVAL_EDITED"] != DBNull.Value && Convert.ToString(DrSource["IP_APPROVAL_EDITED"]) != string.Empty)
                    {
                        DrTarget["IP_APPROVAL_REQUIRED"] = DrSource["IP_APPROVAL_REQUIRED"];
                        DrTarget["IP_APPROVAL_EDITED"] = DrSource["IP_APPROVAL_EDITED"];
                        IsAdded = true;
                    }
                    if (DrSource["EPISODE_DAYS"] != DBNull.Value && Convert.ToString(DrSource["EPISODE_DAYS"]) != string.Empty)
                    {
                        DrTarget["EPISODE_DAYS"] = DrSource["EPISODE_DAYS"];
                        DrTarget["EPISODE_DAYS_EDITED"] = DrSource["EPISODE_DAYS_EDITED"];
                        IsAdded = true;
                    }
                    if (DrSource["FREE_DAYS"] != DBNull.Value && Convert.ToString(DrSource["FREE_DAYS"]) != string.Empty)
                    {
                        DrTarget["FREE_DAYS"] = DrSource["FREE_DAYS"];
                        DrTarget["FREE_DAYS_EDITED"] = DrSource["FREE_DAYS_EDITED"];
                        IsAdded = true;
                    }
                    if (DrSource["FREE_VISIT"] != DBNull.Value && Convert.ToString(DrSource["FREE_VISIT"]) != string.Empty)
                    {
                        DrTarget["FREE_VISIT"] = DrSource["FREE_VISIT"];
                        DrTarget["FREE_VISIT_EDITED"] = DrSource["FREE_VISIT_EDITED"];
                        IsAdded = true;
                    }
                    if (IsAdded)
                    {
                        DrTarget["INCO_DTLS_TARIFF_ID"] = DrSource["INCO_DTLS_TARIFF_ID"];
                        DrTarget["INCO_MAST_CONTRACT_ID"] = DrSource["INCO_MAST_CONTRACT_ID"];
                        DrTarget["LOCATION_ID"] = DrSource["LOCATION_ID"];
                        DrTarget["INCO_DTLS_CONTRACT_CLASS_ID"] = DrSource["INCO_DTLS_CONTRACT_CLASS_ID"];
                        DrTarget["FROM_DATE"] = DrSource["FROM_DATE"];
                        DrTarget["CREATED_BY"] = DrSource["CREATED_BY"];
                        DrTarget["LAST_UPDATED_BY"] = DrSource["LAST_UPDATED_BY"];
                        DrTarget["GEN_AUDIT_ID"] = DrSource["GEN_AUDIT_ID"];
                        DrTarget["INCO_MAST_SCHEME_ID"] = DrSource["INCO_MAST_SCHEME_ID"];
                        DrTarget["INCO_INV_CATEGORY_ID"] = DrSource["INCO_INV_CATEGORY_ID"];
                        DrTarget["INV_MAST_SERVICE_ID"] = DrSource["INV_MAST_SERVICE_ID"];
                        DrTarget["SERVICE_TYPE"] = DrSource["SERVICE_TYPE"];
                        DrTarget["ISEDIT"] = DrSource["ISEDIT"];
                        DrTarget["ISINCLUDE"] = DrSource["ISINCLUDE"];
                        DrTarget["ISEDIT_FROM_NETWORK"] = DrSource["ISEDIT_FROM_NETWORK"];
                        DrTarget["ISEDIT_FROM_PLAN"] = DrSource["ISEDIT_FROM_PLAN"];
                        DrTarget["ISDELETE"] = DrSource["ISDELETE"];
                    }
                }

            }
            catch (Exception)
            {

                throw;
            }
        }

        private void SetExcludeData(DataRow dr)
        {
            try
            {

                dr["OP_CHARGE_AMOUNT"] = DBNull.Value;
                dr["OP_CHARGE_PERC"] = DBNull.Value;
                dr["OP_FACTOR_VALUE"] = DBNull.Value;
                dr["OP_CHARGE_FIXED"] = DBNull.Value;
                dr["OP_CHARGE_MODE"] = 0;
                dr["OP_CHARGE_EDITED"] = 1;


                dr["OPCREDIT_CHARGE_AMOUNT"] = DBNull.Value;
                dr["OPCREDIT_CHARGE_PERC"] = DBNull.Value;
                dr["OPCREDIT_FACTOR_VALUE"] = DBNull.Value;
                dr["OPCREDIT_CHARGE_EDITED"] = 1;
                dr["OPCREDIT_CHARGE_FIXED"] = DBNull.Value;
                dr["OPCREDIT_CHARGE_MODE"] = 0;

                dr["IP_CHARGE_AMOUNT"] = DBNull.Value;
                dr["IP_CHARGE_PERC"] = DBNull.Value;
                dr["IP_FACTOR_VALUE"] = DBNull.Value;
                dr["IP_CHARGE_MODE"] = 0;
                dr["IP_CHARGE_FIXED"] = DBNull.Value;
                dr["IP_CHARGE_EDITED"] = 1;


                dr["OPCREDIT_LIMIT_BASEDON"] = 0;
                dr["OPCREDIT_LIMIT_COUNT"] = DBNull.Value;
                dr["OPCREDIT_LIMIT_AMOUNT"] = DBNull.Value;
                dr["OP_LIMIT_EDITED"] = 1;

                dr["IP_LIMIT_COUNT"] = DBNull.Value;
                dr["IP_LIMIT_AMOUNT"] = DBNull.Value;
                dr["IP_LIMIT_EDITED"] = 1;
                dr["IP_LIMIT_BASEDON"] = 0;

                dr["OPCREDIT_APPROVAL_REQUIRED"] = 0;
                dr["OPCREDIT_APPROVAL_EDITED"] = 1;

                dr["IP_APPROVAL_REQUIRED"] = 0;
                dr["IP_APPROVAL_EDITED"] = 0;

                dr["EPISODE_DAYS"] = DBNull.Value;
                dr["EPISODE_DAYS_EDITED"] = 1;

                dr["FREE_DAYS"] = DBNull.Value;
                dr["FREE_DAYS_EDITED"] = 1;

                dr["FREE_VISIT"] = DBNull.Value;
                dr["FREE_VISIT_EDITED"] = 1;
            }
            catch (Exception)
            {

                throw;
            }
        }

        private void Executed_AllServiceDelete(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                if (deleteValidation())
                {

                    dbOperation = DBOperation.Delete;                   
                    //DataRowView drvInvPatBilling = (DataRowView)e.Parameter;
                    isMultipleServiceChangeBlock = 3; //Speed Improve
                    ClearService();
                    isMultipleServiceChangeBlock = 0; //Speed Improve
                    for (int i = 0; i < BillData.Tables["INV_PAT_BILLING"].Rows.Count; i++)
                    {
                        if (BillData.Tables["INV_PAT_BILLING"].Rows[i]["ISSALE"] != DBNull.Value && Convert.ToBoolean(BillData.Tables["INV_PAT_BILLING"].Rows[i]["ISSALE"]))
                        {
                            decimal emrPatDtlsId = 0;
                            if (IfNullReturnZero(BillData.Tables["INV_PAT_BILLING"].Rows[i]["IS_CONSUMPTION"]) == 2)
                            {
                                emrPatDtlsId = IfNullReturnZero(BillData.Tables["INV_PAT_BILLING"].Rows[i]["EMR_PAT_DTLS_INV_ORDER_ID"]);
                            }
                            DeleteServiceDetails(BillData.Tables["INV_PAT_BILLING"].Rows[i]);
                            i--;
                            if (emrPatDtlsId > 0 && BillData.Tables["INV_PAT_BILLING"].Select("EMR_PAT_DTLS_INV_ORDER_ID="
                                              + emrPatDtlsId).Count() > 0)
                            {
                                DataRow[] drConsumption = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => IfNullReturnZero(x["IS_CONSUMPTION"]) != 2 &&
                                    IfNullReturnZero(x["EMR_PAT_DTLS_INV_ORDER_ID"]) == emrPatDtlsId).Select(x => x).ToArray();
                                foreach (DataRow dr in drConsumption)
                                {
                                    DataRow[] drTempConsumption = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + dr["INV_MAST_SERVICE_ID"]);
                                    if (drTempConsumption.Length > 0)
                                    {
                                        BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Remove(drTempConsumption[0]);
                                    }
                                    BillData.Tables["INV_PAT_BILLING"].Rows.Remove(dr);
                                    i--;
                                }
                            }
                            if (i < -1)
                            {
                                i = -1;
                            }
                        }
                    }
                    SerialNoCount();
                }
                //SerialNoCount();
                //DisableOnServiceAddedIntoGrid();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void OnNonEncounterICD_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            UIConsultationICD objUINonConsultICD = new UIConsultationICD(DtICDDetails);
            CommonWindow commonWindow = new CommonWindow(WindowControlBoxStyle.OnlyWithClose);           
            //objUINonConsultICD.ICDCode = ICDCode;
            //objUINonConsultICD.ICDType = ICDType;


            //if (DtICDDetails.Rows.Count > 0)
            //{
            //    objUINonConsultICD.DtICDDetails = DtICDDetails;
            //}
            //else
            //{
            //if (BillData != null && BillData.Tables.Contains("GEN_PAT_BILL_ICD"))
            //    objUINonConsultICD.DtICDDetails = BillData.Tables["GEN_PAT_BILL_ICD"];
            //  }
            FillNonConsultICDs();
            if (DtICDDetails != null && DtICDDetails.Rows.Count > 0)
                objUINonConsultICD.DtICDDetails = DtICDDetails.Copy();
            commonWindow.Content = objUINonConsultICD;
            commonWindow.SizeToContent = SizeToContent.Manual;
            commonWindow.ResizeMode = ResizeMode.NoResize;
            commonWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;
            commonWindow.Width = 380;
            commonWindow.Height = 310;
            // commonWindow.SizeToContent = SizeToContent.WidthAndHeight;
            commonWindow.Title = "ICD Diagnosis Details";
            commonWindow.Owner = Window.GetWindow(this);
            commonWindow.ShowDialog();
            //ICDCode = objUINonConsultICD.ICDCode;
            //ICDType = objUINonConsultICD.ICDType;

            DtICDDetails = objUINonConsultICD.DtICDDetails;
        }

        /// <summary>
        /// DtICDDetails Property
        /// </summary>
        private DataTable dtICDDetails;
        public DataTable DtICDDetails
        {
            get { return dtICDDetails; }
            set
            {
                dtICDDetails = value;
                OnPropertyChanged("DtICDDetails");//Implement INotifyPropertyChanged

                if (BillData != null && BillData.Tables.Contains("GEN_PAT_BILL_ICD") && DtICDDetails != null)
                {
                    BillData.Tables.Remove("GEN_PAT_BILL_ICD");
                    DtICDDetails.TableName = "GEN_PAT_BILL_ICD";
                    BillData.Tables.Add(DtICDDetails.Copy());
                }
            }
        }

        private DataTable getValidEmrData(DataTable dtCriteria)
        {
            DataTable dtTable = new DataTable();
            if (EMRData.GetEMRLookupData(dtCriteria).Copy().KIIsNotNullAndRowCount())
            {
                dtTable = EMRData.GetEMRLookupData(dtCriteria).Copy().AsEnumerable().Where(x => x["ISVALID"] != DBNull.Value && Convert.ToBoolean(x["ISVALID"]))
                 .Select(x => x).CopyToDataTable();
            }
            return dtTable;
        }

        private void DurationNullConvertion(DataSet dsMedicineData)
        {
            if (dsMedicineData.Tables["EMR_PAT_DTLS_PH_ORDER"].KIIsNotNullAndRowCount())
            {
                foreach (DataRow drDuration in dsMedicineData.Tables["EMR_PAT_DTLS_PH_ORDER"].Rows)
                {
                    if (drDuration["START_DATE"] != DBNull.Value && drDuration["END_DATE"] != DBNull.Value && drDuration["DURATION"] == DBNull.Value
                        && drDuration["DURATION_TYPE"] == DBNull.Value)
                    {
                        TimeSpan ts = (Convert.ToDateTime(drDuration["END_DATE"]) - Convert.ToDateTime(drDuration["START_DATE"]));
                        //   int totaldays = (int)ts;
                        double differenceInDays = ts.TotalDays;
                        int totaldays = (int)differenceInDays;
                        if (differenceInDays % totaldays != 0)
                        {
                            totaldays++;
                        }
                        drDuration["DURATION"] = totaldays.ToString();
                        drDuration["DURATION_TYPE"] = 0;
                    }
                }
            }
        }

        private DataTable fillDuration()
        {
            DataTable durationtable = new DataTable();
            durationtable = (objCommon.EnumToDataTable(typeof(Infologics.Medilogics.Enumerators.EMR.DurationType), string.Empty, string.Empty));
            if (durationtable.KIIsNotNullAndRowCount())
            {
                DataRow[] dr = durationtable.AsEnumerable().Where(x => IfNullReturnZero(x["KEY"]) == 4).Select(x => x).ToArray();
                if (dr.Count() > 0)
                {
                    durationtable.Rows.Remove(dr[0]);
                }
            }
            return durationtable;
        }
        private DataTable fillDurationWithMinutes()
        {
            DataTable durationtable = new DataTable();
            durationtable = (objCommon.EnumToDataTable(typeof(Infologics.Medilogics.Enumerators.EMR.DurationType), string.Empty, string.Empty));
            return durationtable;
        }
        /// <summary>
        /// Provider Discount Calculation
        /// </summary>
        /// <param name="dtbilling"></param>
        public void CalculateProviderDiscount(DataTable dtbilling)
        {
            MainEMRShared objMainEMRShared = new MainEMRShared();
            DataTable dtProviderDiscount = objMainEMRShared.FetchDiscountCategoryByProvider(dtbilling);

            //TotalAdjustment = 0;
            if (dtbilling.Columns.Contains("PROVIDER_DISCOUNT_AMOUNT") && dtbilling.Columns.Contains("PROVIDER_DISCOUNT_PERC") && dtProviderDiscount.KIIsNotNullAndRowCount())
            {
                foreach (DataRow drPatBilling in dtbilling.Rows)
                {
                    if (drPatBilling["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value)
                    {
                        var ProviderDiscountFilter = from dr in dtProviderDiscount.AsEnumerable()
                                                     where dr.RowState != DataRowState.Deleted && dr["INV_CATEGORY_ID"] != DBNull.Value
                                                     && drPatBilling["INV_PARENT_CATEGORY_ID"] != DBNull.Value
                                                     && (Convert.ToInt64(dr["INV_CATEGORY_ID"]) == Convert.ToInt64(drPatBilling["INV_PARENT_CATEGORY_ID"])
                                                     || dr["INV_CATEGORY_ID"] == DBNull.Value)
                                                     select dr;
                        if (ProviderDiscountFilter.Count() > 0)
                        {
                            drPatBilling["PROVIDER_DISCOUNT_PERC"] = ProviderDiscountFilter.ElementAt(0)["DISCOUNT_PERCENTAGE_VALUE"] != DBNull.Value ?
                                ProviderDiscountFilter.ElementAt(0)["DISCOUNT_PERCENTAGE_VALUE"] : 0;
                            drPatBilling["PROVIDER_DISCOUNT_AMOUNT"] = ProviderDiscountFilter.ElementAt(0)["DISCOUNT_FIXED_VALUE"] != DBNull.Value ?
                                ProviderDiscountFilter.ElementAt(0)["DISCOUNT_FIXED_VALUE"] : 0;
                            if (drPatBilling["PROVIDER_DISCOUNT_PERC"] != DBNull.Value)
                            {
                                drPatBilling["PROVIDER_DISCOUNT_AMOUNT"] = Medilogics.General.Control.Common.MathRound
                                            (-1 * (Convert.ToDecimal(drPatBilling["NET"])) * Convert.ToDecimal(drPatBilling["PROVIDER_DISCOUNT_PERC"]) / 100, DecimalPlace);
                                //TotalAdjustment = TotalAdjustment + Convert.ToDecimal(drPatBilling["PROVIDER_DISCOUNT_AMOUNT"]);
                                //Provadj = TotalAdjustment;
                            }
                            else if (drPatBilling["PROVIDER_DISCOUNT_AMOUNT"] != DBNull.Value)
                            {
                                drPatBilling["PROVIDER_DISCOUNT_AMOUNT"] = (-1 * (Convert.ToDecimal(drPatBilling["PROVIDER_DISCOUNT_AMOUNT"])));
                            }
                        }
                    }
                }
                if (dtbilling.Select("PROVIDER_DISCOUNT_AMOUNT<0").Length > 0)
                {
                    GenBillProviderDiscount = BillData.Tables["GEN_BILL_DISCOUNT"].Clone();
                    GenBillProviderDiscount.Rows.Add();
                    GenBillProviderDiscount.Rows[0]["GEN_BILL_DISCOUNT_ID"] = -1;
                    GenBillProviderDiscount.Rows[0]["GEN_DISCOUNT_SETUP_ID"] = DBNull.Value;
                    GenBillProviderDiscount.Rows[0]["EMPLOYEE_ID"] = dtProviderDiscount.Rows[0]["PROVIDER_ID"];
                    GenBillProviderDiscount.Rows[0]["DISCOUNT"] = (from dr in dtbilling.AsEnumerable()
                                                                   where dr.RowState != DataRowState.Deleted && dr["PROVIDER_DISCOUNT_AMOUNT"] != DBNull.Value
                                                                   select Convert.ToDecimal(dr["PROVIDER_DISCOUNT_AMOUNT"])).Sum();
                    GenBillProviderDiscount.Rows[0]["REMARKS"] = "Provider Discount";
                    GenBillProviderDiscount.Rows[0]["VISIT_NO"] = dtPatientVisit.KIIsNotNullAndRowCount() ? Convert.ToInt64(dtPatientVisit.Rows[0]["VISIT_NO"]) : 0;
                }
            }
        }

        public void CalculateDiscountTotal(DataTable dtbilling)
        {
            decimal Roundoff;
            foreach (DataRow drPatBilling in dtbilling.Rows)
            {
                drPatBilling["DISCOUNT"] = Medilogics.General.Control.Common.MathRound((drPatBilling["DISCOUNT"] != DBNull.Value ? Convert.ToDecimal(drPatBilling["DISCOUNT"]) : 0)
                    + (drPatBilling["PROVIDER_DISCOUNT_AMOUNT"] != DBNull.Value ? Convert.ToDecimal(drPatBilling["PROVIDER_DISCOUNT_AMOUNT"]) : 0), DecimalPlace);
                drPatBilling["DISCOUNT_MARKUP"] = Medilogics.General.Control.Common.MathRound((drPatBilling["DISCOUNT_MARKUP"] != DBNull.Value ? Convert.ToDecimal(drPatBilling["DISCOUNT_MARKUP"]) : 0)
                    + (drPatBilling["PROVIDER_DISCOUNT_AMOUNT"] != DBNull.Value ? Convert.ToDecimal(drPatBilling["PROVIDER_DISCOUNT_AMOUNT"]) : 0), DecimalPlace);

            }
        }



        private void LoadRadioButton()
        {
            try
            {
                DataTable dtTypes = new DataTable();
                dtTypes.Columns.Add("VALUE");
                dtTypes.Columns.Add("ID");
                dtTypes.Rows.Add("Internal", 0);
                dtTypes.Rows.Add("External", 1);
                PrescriptionMode = dtTypes;
            }
            catch (Exception)
            {

                throw;
            }
        }

        private void Executed_RemoveService(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                dbOperation = DBOperation.Delete;
                DataRowView drvInvPatBilling = (DataRowView)e.Parameter;
                if (giMessageBox.Show(CommonData.MESSAGEHEADER, "Are you sure you want to remove the service " + drvInvPatBilling["NAME"] + "?",
                    MessageBoxButtonType.YesNo, MessageBoxImages.Question) == MessageBoxDialogueResult.Yes)
                {
                    isMultipleServiceChangeBlock = 3;
                    ClearService();
                    isMultipleServiceChangeBlock = 0;
                    IsAllergyReasonMandatory = false;
                    overridingResonHeader = "Remove service";
                    ReasonforOverRiding();
                    overridingResonHeader = string.Empty;
                    IsAllergyReasonMandatory = true;
                    for (int i = 0; i < BillData.Tables["INV_PAT_BILLING"].Rows.Count; i++)
                    {
                        if (drvInvPatBilling["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value
                            && BillData.Tables["INV_PAT_BILLING"].Rows[i]["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value
                            && Convert.ToInt64(drvInvPatBilling["EMR_PAT_DTLS_INV_ORDER_ID"])
                            == Convert.ToInt64(BillData.Tables["INV_PAT_BILLING"].Rows[i]["EMR_PAT_DTLS_INV_ORDER_ID"]))
                        {
                            //BillData.Tables["INV_PAT_BILLING_REMOVE_SERVICE"].ImportRow(BillData.Tables["INV_PAT_BILLING"].Rows[i]);
                            BillData.Tables["INV_PAT_BILLING"].Rows[i]["ISCASHIERREMOVED"] = 1;
                            BillData.Tables["INV_PAT_BILLING"].Rows[i]["OVER_RIDING_REASON"] = AllergyRemarks;
                            BillData.Tables["INV_PAT_BILLING"].Rows[i]["PROVIDER_ID"] = CommonData.LoggedInUser;

                            MainEMRShared objEMRShared = new MainEMRShared();
                            if (SelectedServiceType!=(int)ServiceType.Cafeteria)
                            {                                
                                objEMRShared.UpdateInvDtls(BillData.Tables["INV_PAT_BILLING"].Rows[i], 18);
                            }
                            else if (SelectedServiceType == (int)ServiceType.Cafeteria)
                            {
                                DataTable dt = new DataTable();
                                dt.Columns.Add("EMR_PAT_DTLS_KOT_ID");
                                dt.Columns.Add("ISCASHIERREMOVED",typeof(int));
                                dt.Columns.Add("USER_ID");
                                //dt.Columns.Add("ORDER_VALUE_GROSS");
                                //dt.Columns.Add("CHARGE_AMOUNT");
                                dt.Columns.Add("MODE");
                                DataRow dr = dt.NewRow();
                                dr["EMR_PAT_DTLS_KOT_ID"] = BillData.Tables["INV_PAT_BILLING"].Rows[i]["EMR_PAT_DTLS_INV_ORDER_ID"];
                                //dr["ORDER_VALUE_GROSS"] = dr["GROSS_AMOUNT"];
                                //dr["CHARGE_AMOUNT"] = BillData.Tables["INV_PAT_BILLING"].Rows[i]["NET"];
                                dr["ISCASHIERREMOVED"]=1;
                                dr["USER_ID"]=CommonData.LoggedInUser;
                                dr["MODE"] = 3;
                                dt.Rows.Add(dr);                             
                                objEMRShared.UpdateKOTOrderDetails(dt);
                            }

                            
                            //32026
                            var query = from dr in BillData.Tables["INV_PAT_BILLING"].AsEnumerable()
                                        where Convert.ToInt64(dr["EMR_PAT_DTLS_INV_ORDER_ID"]) == Convert.ToInt64(drvInvPatBilling["EMR_PAT_DTLS_INV_ORDER_ID"])
                                        select dr;
                            if (query.Any())
                            {
                                foreach (DataRow dr in query.CopyToDataTable().Rows)
                                {
                                    DeleteServiceDetails(BillData.Tables["INV_PAT_BILLING"].Rows[i]);
                                }

                                this.SetInitalData_EMRCPOE();
                            }
                            //32026 -END
                            i--;
                            break;
                        }
                    }

                    SerialNoCount();
                }
            }
            catch (Exception)
            {
                throw;
            }

        }

        /// <summary>
        /// ERNoBlack Property
        /// </summary>
        private bool erxnoblack = false;
        public bool ERXNoBlack
        {
            get { return erxnoblack; }
            set
            {
                erxnoblack = value;
                OnPropertyChanged("ERXNoBlack");//Implement INotifyPropertyChanged
            }
        }

        /// <summary>
        /// ExternalCheck Property
        /// </summary>
        private bool externalcheck;
        public bool ExternalCheck
        {
            get { return externalcheck; }
            set
            {
                externalcheck = value;
                OnPropertyChanged("ExternalCheck");//Implement INotifyPropertyChanged
            }
        }



        private void Executed_btnInternalExternalClick(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                //DataTable dtSetting = CommonData.GetDefaultSettings(0, "IS_PBM_REQUEST_ONLY");
                //if (dtSetting != null && dtSetting.Rows.Count > 0 && Convert.ToInt16(dtSetting.Rows[0]["VALUE"]) == 1)
                if(DefaultSettings.Values.IS_PBM_REQUEST_ONLY)
                {
                    UcPBMAuthorization objUcPBMAuthorization = new UcPBMAuthorization();
                    CommonWindow objWin = new CommonWindow(WindowControlBoxStyle.None);
                    objUcPBMAuthorization.Generic = Generic;
                    DefaultPharmacySubLocationValue = System.Configuration.ConfigurationSettings.AppSettings["DefaultPharmacySublocation"];
                    if (string.IsNullOrEmpty(Convert.ToString(DefaultPharmacySubLocationValue)))
                        DefaultPharmacySubLocationValue = Convert.ToString(IP_Gen_App_Sub_Location);
                    if (((DefaultPharmacySubLocationValue != string.Empty && DefaultPharmacySubLocationValue != null && DefaultPharmacySubLocationValue != "") || LabOrSubLocations.ToTable().Select("INCO_MAST_ID=" + 2).Any())
                        && (LabOrSubLocations != null || AssociatedLabOrSubLocations != null)
                        && LabOrSubLocations != null && LabOrSubLocations.ToTable().KIIsNotNullAndRowCount())
                    {
                        DataRow[] drFounds = LabOrSubLocations.ToTable().Select("NAME='" + DefaultPharmacySubLocationValue.ToString().ToUpper().Trim() + "'");
                        if (!drFounds.Any())
                        {
                            drFounds = LabOrSubLocations.ToTable().Select("INCO_MAST_ID=" + 2);
                        }
                        if (drFounds.Length > 0)
                        {
                            MainBillingShared objBillingShared = new MainBillingShared();
                            //DataTable dtSettings = CommonData.GetDefaultSettings(0, "IS_EXTERNAL_PHARMACY");
                            //if (dtSettings != null && dtSettings.Rows.Count > 0 && Convert.ToInt16(dtSettings.Rows[0]["VALUE"]) == 1)
                            if (DefaultSettings.Values.IS_EXTERNAL_PHARMACY)
                            {
                                if (FOData.Medicines != null)
                                {
                                    DataTable dtMedicineData = FOData.Medicines.Copy();
                                    var Query = dtMedicineData.AsEnumerable()
                               .Where(x => x["PH_SUBLOCATION_ID"] != DBNull.Value && Convert.ToInt64(x["PH_SUBLOCATION_ID"]) == Convert.ToInt64(drFounds[0]["INCO_MAST_ID"]))
                               .Select(x => x);
                                    if (Query.Count() > 0)
                                    {
                                        objUcPBMAuthorization.ServicesTemp = Query.CopyToDataTable();
                                    }
                                }
                            }
                        }
                    }
                    objUcPBMAuthorization.Frequency = FrequencyTemp;
                    objUcPBMAuthorization.DrugUnit = DrugUnitTemp;
                    objUcPBMAuthorization.Duratioin = fillDuration();
                    objUcPBMAuthorization.ClaimFormNo = ClaimFormNo;
                    objUcPBMAuthorization.ERXNo = ERXNo;
                    objUcPBMAuthorization.IsPbmChecked = true;
                    objUcPBMAuthorization.PrescriptionModeValue = PrescriptionModeValue;
                    objUcPBMAuthorization.SelectedPatientFinEncounterID = SelectedPatientFinEncounterID;
                    objUcPBMAuthorization.ClinicianID = ClinicianID;
                    objUcPBMAuthorization.Is_PBM = Is_PBM;
                    if (PatientInformation.KIIsNotNullAndRowCount())
                    {
                        objUcPBMAuthorization.MRNO = Convert.ToString(PatientInformation.Rows[0]["MRNO"]);
                    }
                    objUcPBMAuthorization.IsNonConsultantEncounter = IsNonConsultEncounter;
                    objUcPBMAuthorization.IsClinicianIDenable = IsClinicianIDenable; //for clician id textbox in PBM window
                    LoadPbmData();
                    if (ItemDetailsData.KIIsNotNullAndRowCount())
                    {
                        objUcPBMAuthorization.ItemDetails = ItemDetailsData;
                        objUcPBMAuthorization.NonConsultantOrder = ItemDetailsData.Clone();
                        objUcPBMAuthorization.NonConsultantOrder.Rows.Add();
                    }
                    else if (IsNonConsultEncounter)
                    {
                        ItemDetailsData.Rows.Add();
                        objUcPBMAuthorization.NonConsultantOrder = ItemDetailsData;
                    }
                    if (!string.IsNullOrEmpty(SelectedProviderIDValue))
                    {
                        objUcPBMAuthorization.SelectedProviderIDValue = SelectedProviderIDValue;
                    }
                    DataTable dtTempDetails = new DataTable();
                    objUcPBMAuthorization.PatientInformation = PatientInformation;
                    objUcPBMAuthorization.SelectedContract = SelectedContract;
                    objWin.Content = objUcPBMAuthorization;
                    objWin.WindowState = WindowState.Normal;
                    //objWin.SizeToContent = SizeToContent.Manual;
                    objWin.Width = 950;
                    objWin.Height = 420;
                    objWin.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                    objWin.ResizeMode = ResizeMode.NoResize;
                    //objWin.SizeToContent = SizeToContent.WidthAndHeight;
                    objWin.Owner = Window.GetWindow(this);
                    objWin.Title = "Authorization";
                    objWin.ShowDialog();
                }
                else
                {
                    UIPrescriptionDetails objUcInternalExternalprescriptiondetail = new UIPrescriptionDetails();
                    CommonWindow objWin = new CommonWindow(WindowControlBoxStyle.None);
                    objUcInternalExternalprescriptiondetail.DateApproved = DateTime.Now;
                    objWin.Content = objUcInternalExternalprescriptiondetail;
                    if (IsClaimApplicable == true)
                    {
                        objUcInternalExternalprescriptiondetail.IsClaimMandatory = true;
                    }
                    else
                    {
                        objUcInternalExternalprescriptiondetail.IsClaimMandatory = false;
                    }

                    if (Convert.ToInt16(e.Parameter) == 0)
                    {
                        objWin.Title = "Internal Rx Details";
                        objUcInternalExternalprescriptiondetail.ControlVisibility = Visibility.Collapsed;
                        objUcInternalExternalprescriptiondetail.ContractVisibility = Visibility.Collapsed;
                        ExternalCheck = false;
                    }
                    else
                    {
                        objWin.Title = "External Rx Details";
                        objUcInternalExternalprescriptiondetail.ControlVisibility = Visibility.Visible;
                        objUcInternalExternalprescriptiondetail.ContractVisibility = Visibility.Visible;
                        ExternalCheck = true;
                    }
                    DataTable dtTempDetails = new DataTable();
                    CommonXSD.XSD.Billing objdsBillXSD = new CommonXSD.XSD.Billing();
                    dtTempDetails = objdsBillXSD.INTERNAL_EXTERNAL_DETAILS.Clone();
                    dtTempDetails.Rows.Add();
                    if (dtTempDetails.Columns.Contains("APPROVAL_DATE"))
                        dtTempDetails.Rows[0]["APPROVAL_DATE"] = System.DateTime.Now;
                    LoadErxData();
                    if (ItemDetailsData.KIIsNotNullAndRowCount())
                    {
                        objUcInternalExternalprescriptiondetail.ItemDetails = ItemDetailsData;
                        DataRow[] drFilterRow = ItemDetailsData.AsEnumerable().Where(x => x["PH_RX_INFO_ID"] != DBNull.Value).ToArray();
                        if (drFilterRow.Any())
                        {
                            ItemDetailsData.AsEnumerable().ForEach(x => x["PH_RX_INFO_ID"] = drFilterRow[0]["PH_RX_INFO_ID"]);
                            ItemDetailsData.AsEnumerable().ForEach(x => x["PRESCRIPTION_TYPE"] = drFilterRow[0]["PRESCRIPTION_TYPE"]);
                            if (drFilterRow[0]["PRESCRIPTION_TYPE"] != DBNull.Value)
                            {
                                dtTempDetails.Rows[0]["PRESCRIPTION_TYPE"] = drFilterRow[0]["PRESCRIPTION_TYPE"];
                            }
                            if (drFilterRow[0]["CLAIM_FORM_NUMBER"] != DBNull.Value)
                            {
                                dtTempDetails.Rows[0]["CLAIM_FORM_NUMBER"] = drFilterRow[0]["CLAIM_FORM_NUMBER"];
                            }
                            if (drFilterRow[0]["APPROVAL_NO"] != DBNull.Value)
                            {
                                dtTempDetails.Rows[0]["APPROVAL_NO"] = drFilterRow[0]["APPROVAL_NO"];
                            }
                            if (drFilterRow[0]["APPROVAL_DATE"] != DBNull.Value)
                            {
                                dtTempDetails.Rows[0]["APPROVAL_DATE"] = drFilterRow[0]["APPROVAL_DATE"];
                            }
                        }
                    }
                    if (!InternalExternalDetails.KIIsNotNullAndRowCount())
                    {
                        if (ERXNo != string.Empty && ERXEnableCheck == true)
                        {
                            dtTempDetails.Rows[0]["ERX"] = ERXNo;
                            objUcInternalExternalprescriptiondetail.IsERXEnable = false;

                        }
                        if (ClaimFormNo != string.Empty)
                        {
                            dtTempDetails.Rows[0]["CLAIM_FORM_NUMBER"] = ClaimFormNo;
                            objUcInternalExternalprescriptiondetail.IsClaimFormNo = false;
                        }
                        objUcInternalExternalprescriptiondetail.InternalExternalDetails = dtTempDetails;
                    }
                    //else 
                    //{
                    //    if (ERXNo != string.Empty && ERXEnableCheck == true && objUcInternalExternalprescriptiondetail.InternalExternalDetails.Rows[0]["ERX"] == DBNull.Value)
                    //    {
                    //        objUcInternalExternalprescriptiondetail.InternalExternalDetails.Rows[0]["ERX"] = ERXNo;
                    //        objUcInternalExternalprescriptiondetail.IsERXEnable = false;

                    //    }
                    //}
                    if (ExternalCheck == true)
                    {
                        objUcInternalExternalprescriptiondetail.InternalExternalDetails = dtTempDetails;
                    }
                    objUcInternalExternalprescriptiondetail.SelectedModeValue = PrescriptionModeValue;
                    if (!InternalExternalDetails.KIIsNotNullAndRowCount() && ERXNo != string.Empty && ERXEnableCheck == true)
                    {
                        objUcInternalExternalprescriptiondetail.RbnOtherEnable = true;
                    }
                    var filteredscheme = Scheme.AsEnumerable()
                        .Where(x => IfNullReturnZero(x["INCO_MAST_SCHEME_ID"]) != CommonData.DefaultScheme);
                    if (filteredscheme.Any())
                    {
                        objUcInternalExternalprescriptiondetail.ContractDetails = filteredscheme.CopyToDataTable();
                    }
                    //DataTable dt = CommonData.GetDefaultSettings(0, "IS_ERX_PBM_VISIBILE");
                    //if (dt != null && dt.Rows.Count > 0 && Convert.ToInt16(dt.Rows[0]["VALUE"]) == 0)
                    if (DefaultSettings.Values.IS_ERX_PBM_VISIBILE == false)
                    {
                        objUcInternalExternalprescriptiondetail.RbnErxOthersVisibility = Visibility.Collapsed;
                    }
                    //DataTable dtTemp = CommonData.GetDefaultSettings(0, "IS_OTHERS_VISIBILE");
                    //if (dtTemp != null && dtTemp.Rows.Count > 0 && Convert.ToInt16(dtTemp.Rows[0]["VALUE"]) == 0)
                    if (DefaultSettings.Values.IS_OTHERS_VISIBILE == false)
                    {
                        objUcInternalExternalprescriptiondetail.RbnOthersVisibility = Visibility.Collapsed;
                    }
                    if (InternalExternalDetails != null && InternalExternalDetails.Rows.Count > 0)
                    {
                        if (ERXNo != string.Empty && ERXEnableCheck == true)
                        {
                            objUcInternalExternalprescriptiondetail.IsERXEnable = false;
                            objUcInternalExternalprescriptiondetail.RbnOtherEnable = true;
                        }
                        if (ClaimFormNo != string.Empty)
                        {
                            dtTempDetails.Rows[0]["CLAIM_FORM_NUMBER"] = ClaimFormNo;
                            objUcInternalExternalprescriptiondetail.IsClaimFormNo = false;
                        }
                        objUcInternalExternalprescriptiondetail.InternalExternalDetails = InternalExternalDetails;
                        objUcInternalExternalprescriptiondetail.TempInternalExternalDetails = InternalExternalDetails.Copy();
                    }
                    objUcInternalExternalprescriptiondetail.PatFinEncounterId = SelectedPatientFinEncounterID;
                    objUcInternalExternalprescriptiondetail.MRNO = Convert.ToString(PatientInformation.Rows[0]["MRNO"]);
                    objWin.WindowState = WindowState.Normal;
                    objWin.SizeToContent = SizeToContent.Manual;
                    objWin.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                    objWin.ResizeMode = ResizeMode.NoResize;
                    objWin.SizeToContent = SizeToContent.WidthAndHeight;
                    //objWin.SizeToContent = SizeToContent.Height;
                    //objWin.Height = 280;
                    //objWin.Width = 400;
                    objWin.Owner = Window.GetWindow(this);
                    objWin.ShowDialog();
                    if (objUcInternalExternalprescriptiondetail.IsAvailedServiceUpdate)
                    {
                        InternalExternalDetails = objUcInternalExternalprescriptiondetail.InternalExternalDetails;
                        if (Convert.ToInt16(InternalExternalDetails.Rows[0]["PRESCRIPTION_TYPE"]) == 1)
                        {
                            InternalExternalDetails.Rows[0]["EXTERNAL_PROVIDER"] = DBNull.Value;
                            InternalExternalDetails.Rows[0]["DHA_ID"] = DBNull.Value;
                            InternalExternalDetails.Rows[0]["INCO_PATIENT_SCHEME_ID"] = DBNull.Value;
                            //InternalExternalDetails.Rows[0]["CLAIM_FORM_NUMBER"] = DBNull.Value;

                        }
                        ERXNo = Convert.ToString(InternalExternalDetails.Rows[0]["ERX"]);
                        InternalExternalDetails.Rows[0]["PRESCRIPTION_MODE"] = PrescriptionModeValue;
                        if (BillData.Tables.Contains("INTERNAL_EXTERNAL_DETAILS"))
                        {
                            BillData.Tables["INTERNAL_EXTERNAL_DETAILS"].Rows.Clear();
                            BillData.Tables["INTERNAL_EXTERNAL_DETAILS"].Merge(InternalExternalDetails.Copy());

                        }
                        else
                        {
                            BillData.Tables.Add(InternalExternalDetails.Copy());
                        }
                        BillData.Tables["BILL_COMMON_DETAILS"].Rows[0]["PRESCRIPTION_TYPE"] = Convert.ToInt16(InternalExternalDetails.Rows[0]["PRESCRIPTION_TYPE"]);

                        if (ERXNo != string.Empty && ERXEnableCheck == true)
                        {
                            BillData.Tables["INTERNAL_EXTERNAL_DETAILS"].Rows[0]["IS_MANUAL"] = 0;
                        }
                        else
                        {
                            BillData.Tables["INTERNAL_EXTERNAL_DETAILS"].Rows[0]["IS_MANUAL"] = 1;
                        }
                        if (ClaimFormNo != string.Empty)
                            BillData.Tables["INTERNAL_EXTERNAL_DETAILS"].Rows[0]["IS_CLAIM_MANUAL"] = 0;
                        else
                            BillData.Tables["INTERNAL_EXTERNAL_DETAILS"].Rows[0]["IS_CLAIM_MANUAL"] = 1;

                        if (objUcInternalExternalprescriptiondetail.IsERXBlack == true)
                        {
                            ERXNoRed = false;
                            ERXNoBlack = true;
                        }
                        OnSchemeSelectionChanged(null);

                    }
                    else if (InternalExternalDetails != null && InternalExternalDetails.Rows.Count > 0)
                    {
                        InternalExternalDetails = objUcInternalExternalprescriptiondetail.InternalExternalDetails;
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }


        private void RemoveUnWantedServiceSelectionChanged()
        {
            try
            {
                if (IsRemoveUnWantedService)
                {
                    LoadRemovedServices();
                    IsClickRemovedServiceCheck = true;
                    IsServiceAddedIntoGrid = true;
                    IsExpiredVisibile = false;
                    EMROrderRelation = null;
                }
                else if (IsClickRemovedServiceCheck)
                {
                    DataRowView drv = SelectedEncounterDetails;
                    ClearBillServiceTypeBased(false);
                    if (drv != null && drv.Row["PAT_FIN_ENCOUNTER_ID"] != DBNull.Value)
                    {
                        EncounterSelectionChanged(drv);
                        OnSchemeSelectionChanged(Convert.ToInt64(drv.Row["PAT_FIN_ENCOUNTER_ID"]));
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void LoadRemovedServices()
        {
            try
            {
                if (BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount())
                {
                    BillData.Tables["INV_PAT_BILLING"].Rows.Clear();
                }
                if (SelectedServiceType != (int)ServiceType.Cafeteria)
                {
                    string strMRNO = PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Rows[0]["MRNO"] != DBNull.Value
                    ? Convert.ToString(PatientInformation.Rows[0]["MRNO"]) : "";
                    MainEMRShared objEMRShared = new MainEMRShared();
                    DataTable criteria = new DataTable("SEARCH_CRITERIA");
                    criteria.Columns.Add("MRNO");
                    criteria.Columns.Add("PAT_FIN_ENCOUNTER_ID");
                    criteria.Rows.Add(strMRNO, SelectedPatientFinEncounterID);
                    DataTable RemovedService = objEMRShared.FetchInvOrderDtls(criteria, 22);
                    if (RemovedService.KIIsNotNullAndRowCount())
                    {
                        foreach (DataRow drRow in RemovedService.Rows)
                        {
                            int count = BillData.Tables["INV_PAT_BILLING"].Rows.Count;
                            BillData.Tables["INV_PAT_BILLING"].Rows.Add();
                            BillData.Tables["INV_PAT_BILLING"].Rows[count]["NAME"] = drRow["NAME"];
                            BillData.Tables["INV_PAT_BILLING"].Rows[count]["QTY"] = drRow["QTY"];
                            BillData.Tables["INV_PAT_BILLING"].Rows[count]["BATCHNO"] = drRow["BATCHNO"];
                            BillData.Tables["INV_PAT_BILLING"].Rows[count]["SALES_UNIT_NAME"] = drRow["SALES_UNIT_NAME"];
                            BillData.Tables["INV_PAT_BILLING"].Rows[count]["BASE_CHARGE"] = IfNullReturnZero(drRow["SALES_RATE"]);// / IfNullReturnZero(drRow["SALES_ACTUAL_QTY"]);
                            BillData.Tables["INV_PAT_BILLING"].Rows[count]["NET_AMOUNT"] = IfNullReturnZero(drRow["NET_AMOUNT"]);
                            BillData.Tables["INV_PAT_BILLING"].Rows[count]["INV_MAST_SERVICE_ID"] = IfNullReturnZero(drRow["INV_MAST_SERVICE_ID"]);
                            BillData.Tables["INV_PAT_BILLING"].Rows[count]["EMR_PAT_DTLS_INV_ORDER_ID"] = IfNullReturnZero(drRow["EMR_PAT_DTLS_INV_ORDER_ID"]);
                            BillData.Tables["INV_PAT_BILLING"].Rows[count]["ISCASHIERREMOVED"] = 1;
                        }
                    }
                    
                }
                else if (SelectedServiceType == (int)ServiceType.Cafeteria)
                {
                    DataSet RemovedService = LoadEMRKOTOrder(1);

                    if (RemovedService.Tables["EMR_PAT_DTLS_KOT"].KIIsNotNullAndRowCount())
                    {
                        foreach (DataRow drRow in RemovedService.Tables["EMR_PAT_DTLS_KOT"].Rows)
                        {
                            int count = BillData.Tables["INV_PAT_BILLING"].Rows.Count;
                            BillData.Tables["INV_PAT_BILLING"].Rows.Add();
                            BillData.Tables["INV_PAT_BILLING"].Rows[count]["NAME"] = drRow["ITEM_NAME"];
                            BillData.Tables["INV_PAT_BILLING"].Rows[count]["QTY"] = drRow["QUANTITY"];
                            //BillData.Tables["INV_PAT_BILLING"].Rows[count]["BATCHNO"] = drRow["BATCHNO"];
                            //BillData.Tables["INV_PAT_BILLING"].Rows[count]["SALES_UNIT_NAME"] = drRow["SALES_UNIT_NAME"];
                            //BillData.Tables["INV_PAT_BILLING"].Rows[count]["BASE_CHARGE"] = IfNullReturnZero(drRow["ORDER_VALUE_GROSS"]);// / IfNullReturnZero(drRow["SALES_ACTUAL_QTY"]);
                            //BillData.Tables["INV_PAT_BILLING"].Rows[count]["NET_AMOUNT"] = IfNullReturnZero(drRow["CHARGE_AMOUNT"]);
                            BillData.Tables["INV_PAT_BILLING"].Rows[count]["INV_MAST_SERVICE_ID"] = IfNullReturnZero(drRow["INV_MAST_SERVICE_ID"]);
                            BillData.Tables["INV_PAT_BILLING"].Rows[count]["EMR_PAT_DTLS_INV_ORDER_ID"] = IfNullReturnZero(drRow["EMR_PAT_DTLS_KOT_ID"]);
                            BillData.Tables["INV_PAT_BILLING"].Rows[count]["ISCASHIERREMOVED"] = 1;
                            LoadServiceChargeDetails(Convert.ToInt32(drRow["INV_MAST_SERVICE_ID"]), BillData.Tables["INV_PAT_BILLING"].Rows[count]);
                        }
                    }
                    
                }
                
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Executed_AddRemovedService(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                DataRowView drvInvPatBilling = (DataRowView)e.Parameter;
                if (drvInvPatBilling != null)
                {
                    if (SelectedServiceType!=(int)ServiceType.Cafeteria)
                    {
                        drvInvPatBilling["ISCASHIERREMOVED"] = 0;
                        drvInvPatBilling["OVER_RIDING_REASON"] = string.Empty;
                        drvInvPatBilling["PROVIDER_ID"] = string.Empty;
                        MainEMRShared objEMRShared = new MainEMRShared();
                        objEMRShared.UpdateInvDtls(drvInvPatBilling.Row, 18);
                        LoadRemovedServices();

                    }
                    else if (SelectedServiceType == (int)ServiceType.Cafeteria)
                    {
                                MainEMRShared objEMRShared = new MainEMRShared();
                                DataTable dt = new DataTable();
                                dt.Columns.Add("EMR_PAT_DTLS_KOT_ID");
                                dt.Columns.Add("ISCASHIERREMOVED",typeof(int));
                                dt.Columns.Add("USER_ID");
                                dt.Columns.Add("MODE");
                                DataRow dr = dt.NewRow();
                                dr["EMR_PAT_DTLS_KOT_ID"] = drvInvPatBilling["EMR_PAT_DTLS_INV_ORDER_ID"];
                                dr["ISCASHIERREMOVED"]=0;
                                dr["USER_ID"]=CommonData.LoggedInUser;
                                dr["MODE"] = 3;
                                dt.Rows.Add(dr);                             
                                objEMRShared.UpdateKOTOrderDetails(dt);
                                LoadRemovedServices();
                    }
                    
                }

            }
            catch (Exception)
            {
                
                throw;
            }
            
            
        }

        private void erxEnable()
        {
            if (SelectedSpeciality == null && SelectedProvider == null)
            {
                PrescriptionModeIndex = 1;
                PrescriptionModeValue = 1;
                ERxEnable = true;
            }
            else
            {
                PrescriptionModeIndex = 0;
                PrescriptionModeValue = 0;
                ERxEnable = false;
            }
        }

        private void UIServiceDelivery_Loaded(object sender, RoutedEventArgs e)
        {
            if (!CommonData.CheckPrivilege("BILLING_SERVICE_BILL_MSG_NOT_REQUIRED") && PatientInformation != null && PatientInformation.Rows.Count > 0 && !IsPatientIP())
            {
                BillingMessage objBillingMessage = new BillingMessage();
                objBillingMessage.LoadMessage(PatientInformation.Rows[0]["MRNO"].ToString(), null);
            }
            if (!IsFromEMRBilling && !IsFromFBBilling)
                FetchStaticData();// Copied from constructor to onLoad, prime onsite changes.Benson
        }

        private void OnLoadEMROrderSelection()
        {
            try
            {
                ismsgPopped = false;
                isOnLoadEmrOrder = true;
                string ProviderID = string.Empty;
                if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("Order") && EMROrderRelation.Tables["Order"].KIIsNotNullAndRowCount()
                    && EMROrderRelation.Tables.Contains("OrderRelation") && EMROrderRelation.Tables["OrderRelation"].KIIsNotNullAndRowCount()
                    && ERxVisibility != Visibility.Visible)
                {
                    //If expired orders are selected then load deafult scheme 
                    //ExpiredOrderSchemeSelectionChange();

                    if (SelectedServiceType == (int)ServiceType.Pharmacy && SelectedVisitModeNew != (int)VisitMode.IP)
                    {
                        if (SelectedLabOrSubLocationValue != null && SelectedLabOrSubLocationValue != -1)
                        {
                            EMROrderRelation.Tables["OrderRelation"].DefaultView.RowFilter = string.Empty;
                            EMROrderRelation.Tables["OrderRelation"].DefaultView.RowFilter = "PROVIDER_ID=" + SelectedProviderIDValue + " AND VISIT_DATE>'" + DateTime.Now.AddDays(-1).ToString("dd-MMM-yyyy HH:mm") + "'";
                            if (Mouse.OverrideCursor == null)
                                Mouse.OverrideCursor = Cursors.Wait;
                            foreach (DataRowView drv in EMROrderRelation.Tables["OrderRelation"].DefaultView)
                            {
                                ProviderID = drv.Row["PROVIDER_ID"] != DBNull.Value ? Convert.ToString(drv.Row["PROVIDER_ID"]) : string.Empty;
                                drv.Row["ISSELECT"] = true;
                                EditService = null;
                                IsEditExecuted = false;
                                SelectedService = null;
                                SelectedEMROrder = null;
                                IsBarCodeSearchbyManual = false;
                                isAddforPrint = true;
                                isfromCPOEorder = true;
                                SelectedEMROrderedData(drv, true);
                                isfromCPOEorder = false;
                                isAddforPrint = false;
                            }
                            EMROrderRelation.Tables["Order"].DefaultView.RowFilter = "PROVIDER_ID=" + SelectedProviderIDValue + " AND VISIT_DATE>'" + DateTime.Now.AddDays(-1).ToString("dd-MMM-yyyy HH:mm") + "'";
                            if (!ismsgPopped)//bug id 42283
                            {
                                foreach (DataRowView drv in EMROrderRelation.Tables["Order"].DefaultView)
                                {
                                    drv["ISSELECT"] = true;
                                    IsAllergicOrder = true;
                                }
                            }
                        }
                    }
                }
                else if (IsNonConsultEncounter)
                {
                    LoadPhRxDtlsInfo();
                    if (PhRXDtlsInfo.KIIsNotNullAndRowCount() && IfNullReturnZero(SelectedLabOrSubLocationValue) > 0)
                    {
                        {
                            var drGeneric = PhRXDtlsInfo.AsEnumerable().Where(x => x["REQUESTED_ITEM_ID"] != DBNull.Value).Select(x => x);
                            if (drGeneric.Any())
                            {
                                foreach (DataRow drRow in drGeneric)
                                {
                                    DataRow drFound = FindService(Convert.ToInt64(drRow["REQUESTED_ITEM_ID"]));
                                    if (drFound != null)
                                    {
                                        drPhRxDtlsData = drRow;
                                        IsBarCodeSearchbyManual = false;
                                        dsServiceData.Tables["INV_MAST_SERVICE"].DefaultView.RowFilter = string.Empty;
                                        SelectedService = dsServiceData.Tables["INV_MAST_SERVICE"].DefaultView[dsServiceData.Tables["INV_MAST_SERVICE"].Rows.IndexOf(drFound)];
                                        IsBarCodeSearchbyManual = true;
                                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["GENERIC_ID"] = drRow["ORDERED_GENERIC_ID"];
                                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_INV_ORDER_ID"] = drRow["EMR_PAT_DTLS_PH_ORDER_ID"];
                                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["EMR_PAT_DTLS_MEDICATION_ID"] = drRow["EMR_PAT_DTLS_PH_ORDER_ID"];
                                        Service = drFound;
                                        IsBarCodeSearchbyManual = true;
                                        if (Frequency.KIIsNotNullAndRowCount())
                                        {
                                            if (Frequency.Select("EMR_LOOKUP_ID=" + drPhRxDtlsData["FREQUENCY"]).Count() > 0)
                                            {
                                                DataRow DrRow = Frequency.Select("EMR_LOOKUP_ID=" + drPhRxDtlsData["FREQUENCY"]).First();
                                                SelectedFrequency = Frequency.DefaultView[Frequency.Rows.IndexOf(DrRow)];
                                                BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["FREQUENCY"] = SelectedFrequency["LOOKUP_VALUE"];
                                            }
                                        }
                                        StrDrugUnit = Convert.ToString(drPhRxDtlsData["DOSE"]);
                                        StrDuration = "1";
                                        isEmrOrder = true;
                                        isNonConsultationOrder = true;
                                        this.AddPharmacy();
                                        isNonConsultationOrder = false;
                                        isEmrOrder = false;
                                        drPhRxDtlsData = null;
                                    }
                                }
                            }
                        }
                    }
                }
                isOnLoadEmrOrder = false;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                    Mouse.OverrideCursor = null;
            }
        }

        private bool LoadEMROrdersbyBarCodeSearch(DataRow[] drMedicines)
        {
            try
            {
                IsBarCodeSearchbyManual = false;
                long serviceID = 0;
                if (drMedicines[0].Table.Columns.Contains("PRIMARY_ID"))
                {
                    serviceID = Convert.ToInt64(drMedicines[0]["PRIMARY_ID"]);
                }
                else
                {
                    serviceID = Convert.ToInt64(drMedicines[0]["INV_MAST_SERVICE_ID"]);
                }
                if (BillData.Tables["INV_PAT_BILLING"].Rows.Count > 0)
                {
                    bool isBarcodeExist = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => IfNullReturnZero(x["INV_MAST_SERVICE_ID"]) == serviceID &&
                        Convert.ToString(x["BATCHNO"]) == barcodeBatch).Count() > 0;
                    var filterBarCodeItems = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => IfNullReturnZero(x["INV_MAST_SERVICE_ID"]) == serviceID &&
                         (!Convert.ToBoolean(x["IS_BARCODE_READ"]) || (Convert.ToBoolean(x["IS_BARCODE_READ"]) && Convert.ToString(x["BARCODE"]) == BarCode)
                       || (Convert.ToBoolean(x["IS_BARCODE_READ"]) && Convert.ToString(x["BATCHNO"]) == barcodeBatch) || (Convert.ToBoolean(x["IS_BARCODE_READ"]) && !isBarcodeExist)) &&
                        IfNullReturnZero(x["EMR_PAT_DTLS_MEDICATION_ID"]) > 0 && IfNullReturnZero(x["IS_DISPENSE"]) != 1
                        && (IfNullReturnZero(x["APPROVAL_STATUS"]) == (int)Infologics.Medilogics.Enumerators.Insurance.InsuranceRequestStatus.Approve ||
                        IfNullReturnZero(x["APPROVAL_STATUS"]) == 0) && IfNullReturnZero(x["ISCASHIERREMOVED"]) != 1).Select(x => x);
                    if (filterBarCodeItems.Any())
                    {
                        filterBarCodeItems.AsDataView()[0]["ISSALE"] = false;
                        filterBarCodeItems.AsDataView()[0]["ISLABEL"] = false;
                        SelectedService = filterBarCodeItems.CopyToDataTable().DefaultView[0];
                        EditService = filterBarCodeItems.CopyToDataTable().Rows[0];
                        if (Convert.ToBoolean(EditService["IS_BARCODE_READ"]))
                        {
                            EditService["QTY"] = IfNullReturnZero(EditService["QTY"]) + 1;
                        }
                        if (!IsUSSettingEnable && EditService["MEDICINE_CODE"] != DBNull.Value)
                        {
                            BatchAll.DefaultView.RowFilter = "MEDICINE_CODE=" + EditService["MEDICINE_CODE"];
                            BatchOrUnit = BatchAll.DefaultView.ToTable();
                            //DataTable dtExpired = CommonData.GetDefaultSettings(0, "IS_VISIBILE_EXPIRED_MEDICINES");
                            //if (dtExpired != null && dtExpired.Rows.Count > 0)
                            //{
                            //if (Convert.ToInt32(dtExpired.Rows[0]["VALUE"]) == 0)
                            if (DefaultSettings.Values.IS_VISIBILE_EXPIRED_MEDICINES == false)
                            {
                                if (BatchOrUnit != null)
                                {
                                    var Query = BatchOrUnit.AsEnumerable()
                                        .Where(x => Convert.ToDateTime(x["EXPDATE"]) > DateTime.Today)
                                        .Select(x => x);
                                    if (Query.Count() > 0)
                                    {
                                        DataTable dtTemp = new DataTable();
                                        dtTemp = Query.CopyToDataTable();
                                        BatchOrUnit = null;
                                        BatchOrUnit = dtTemp;
                                    }
                                    else
                                    {
                                        BatchOrUnit = null;
                                    }
                                }
                            }
                            //}
                        }
                        if (UnitSalesConversionApplicable && PharamacyUnitSales.KIIsNotNullAndRowCount())
                        {
                            SelectedPharamacyUnitSalesIndex = 0;
                            SelectedPharamacyUnitSalesValue = EditService["PH_UNIT_SALES_CONVERSION_ID"] != DBNull.Value
                                ? Convert.ToInt64(EditService["PH_UNIT_SALES_CONVERSION_ID"]) : 0;
                        }
                        if (EditService["INV_MAST_SERVICE_ID"] != DBNull.Value)
                        {
                            GetMedicineDetails(Convert.ToInt64(EditService["INV_MAST_SERVICE_ID"]));
                        }
                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0].ItemArray = EditService.ItemArray;
                        Quantity = BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["QTY"] != DBNull.Value
                            ? Convert.ToDecimal(BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["QTY"]) : 1;
                        if (EditService["INV_MAST_SERVICE_ID"] != DBNull.Value && Generic.KIIsNotNullAndRowCount())
                        {
                            DataRow drRow = null;
                            drRow = Generic.Rows[0];
                            SelectedGeneric = Generic.DefaultView[Generic.Rows.IndexOf(drRow)];
                            ServiceGenirc = Convert.ToString(SelectedGeneric["LOOKUP_VALUE"]);
                        }
                        if (BillData.Tables.Contains("PH_PAT_DTLS_ORDER") && BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Count > 0
                            && EditService["INV_MAST_SERVICE_ID"] != DBNull.Value)
                        {
                            DataRow drPatOrder = null;
                            if (BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + EditService["INV_MAST_SERVICE_ID"]).Count() > 0)
                            {
                                drPatOrder = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + EditService["INV_MAST_SERVICE_ID"] + "AND SL_NO=" + EditService["SL_NO"]).First();
                            }
                            DataRow dr = null;
                            if (drPatOrder != null)
                            {
                                if (drPatOrder["EMR_PAT_DTLS_PH_ORDER_ID"] != DBNull.Value)
                                {
                                    isEmrOrder = true;
                                }
                                if (Route.KIIsNotNullAndRowCount() && drPatOrder["ROUTE"] != DBNull.Value
                                    && Route.Select("ROUTE='" + drPatOrder["ROUTE"] + "'").Length > 0)
                                {
                                    dr = Route.Select("ROUTE='" + drPatOrder["ROUTE"] + "'").First();
                                    SelectedRoute = Route.DefaultView[Route.Rows.IndexOf(dr)];
                                }
                                OnselectedRouteChanged();
                                if (Form.KIIsNotNullAndRowCount() && drPatOrder["FORM"] != DBNull.Value &&
                                     Form.Select("FORM='" + drPatOrder["FORM"] + "'").Length > 0)
                                {
                                    dr = Form.Select("FORM='" + drPatOrder["FORM"] + "'").First();
                                    SelectedForm = Form.DefaultView[Form.Rows.IndexOf(dr)];
                                }
                                if (Duratioin.KIIsNotNullAndRowCount() && drPatOrder["DURATION_TYPE"] != DBNull.Value &&
                                    Duratioin.Select("KEY=" + drPatOrder["DURATION_TYPE"]).Length > 0)
                                {
                                    dr = Duratioin.Select("KEY=" + drPatOrder["DURATION_TYPE"]).First();
                                    SelectedDuratioin = Duratioin.DefaultView[Duratioin.Rows.IndexOf(dr)];
                                }
                                if (Frequency.KIIsNotNullAndRowCount() && drPatOrder["FREQUENCY"] != DBNull.Value &&
                                    Convert.ToString(drPatOrder["FREQUENCY"]) != string.Empty &&
                                    Frequency.Select("EMR_LOOKUP_ID=" + drPatOrder["FREQUENCY"]).Length > 0)
                                {
                                    //SelectedFrequencyvalue = IfNullReturnZero(drPatOrder["FREQUENCY"]);
                                    dr = Frequency.Select("EMR_LOOKUP_ID=" + drPatOrder["FREQUENCY"]).First();
                                    SelectedFrequency = Frequency.DefaultView[Frequency.Rows.IndexOf(dr)];
                                }
                                if (drPatOrder["ADMINISTRATION_INSTRUCTION"] != DBNull.Value)
                                {
                                    AdmnInstName = Convert.ToString(drPatOrder["ADMINISTRATION_INSTRUCTION"]);
                                }
                                StrDuration = Convert.ToString(drPatOrder["DURATION"]);
                                StrUnit = Convert.ToString(drPatOrder["QUANTITY"]);
                                Remarks = Convert.ToString(drPatOrder["REMARKS"]);
                                StartDate = Convert.ToDateTime(drPatOrder["START_DATE"]);
                                StrDrugUnit = Convert.ToString(drPatOrder["DOSE"]);
                                if (drPatOrder["EMR_PAT_DTLS_PH_ORDER_ID"] != DBNull.Value)
                                {
                                    IsNormalOrder = false;
                                }
                                if (drPatOrder["PRIORITY"] != DBNull.Value &&
                                    Urgency.Select("KEY=" + drPatOrder["PRIORITY"]).Length > 0)
                                {
                                    dr = Urgency.Select("KEY=" + drPatOrder["PRIORITY"]).First();
                                    SelectedUrgency = Urgency.DefaultView[Urgency.Rows.IndexOf(dr)];
                                }
                                if (drPatOrder["DOSE_UNIT"] != DBNull.Value &&
                                    DrugUnit.Select("LOOKUP_VALUE='" + drPatOrder["DOSE_UNIT"] + "'").Length > 0)
                                {
                                    dr = DrugUnit.Select("LOOKUP_VALUE='" + drPatOrder["DOSE_UNIT"] + "'").First();
                                    SelectedDose = DrugUnit.DefaultView[DrugUnit.Rows.IndexOf(dr)];
                                }
                                if (drPatOrder["HOURLY"] != DBNull.Value)
                                {
                                    StrFreqHours = Convert.ToString(drPatOrder["HOURLY"]);
                                }
                            }
                            else
                            {
                                return false;
                            }
                        }
                        else
                        {
                            return false;
                        }
                        if (PharamacyUnitSales.KIIsNotNullAndRowCount() && EditService["PH_UNIT_SALES_CONVERSION_ID"] != DBNull.Value)
                        {
                            DataRow[] dr = PharamacyUnitSales.Select("PH_UNIT_SALES_CONVERSION_ID=" + Convert.ToInt64(EditService["PH_UNIT_SALES_CONVERSION_ID"]));
                            if (dr.Length > 0)
                            {
                                SelectedPharamacyUnitSales = PharamacyUnitSales.DefaultView[PharamacyUnitSales.Rows.IndexOf(dr[0])];
                            }
                        }
                    }
                    else
                    {
                        return false;
                    }
                    this.SetMedicineDetails(EditService["BATCHNO"].ToString());
                    IsBarCodeSearch = true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception)
            {
                throw;
            }
            return true;
        }
        private void OnloadEmrData()
        {
            try
            {
                DataTable dtMedicineCriteria = new DataTable("SEARCH_CRITERIA");
                dtMedicineCriteria.Columns.Add("LOOKUP_TYPE");
                dtMedicineCriteria.Rows.Add("QUANTITY UNIT");
                if (DrugUnitTemp.KIIsNotNullAndRowCount() == false)
                    DrugUnitTemp = getValidEmrData(dtMedicineCriteria);
                DrugUnit = DrugUnitTemp;
                dtMedicineCriteria.Rows[0]["LOOKUP_TYPE"] = "ADMIN INSTRUCTION";
                if (AdminInstructionTemp.KIIsNotNullAndRowCount() == false)
                    AdminInstructionTemp = getValidEmrData(dtMedicineCriteria);
                AdminInstruction = AdminInstructionTemp;
                dtMedicineCriteria.Rows[0]["LOOKUP_TYPE"] = "FREQUENCY";
                if (FrequencyTemp.KIIsNotNullAndRowCount() == false)
                    FrequencyTemp = getValidEmrData(dtMedicineCriteria);
                Frequency = FrequencyTemp;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void CreateProfileData(DataSet XSD)
        {
            try
            {
                if (XSD.Tables["INV_BILL_PROFILE_SERVICE"] != null)
                {
                    XSD.Tables["INV_BILL_PROFILE_SERVICE"].Rows.Clear();
                }
                foreach (DataRow dr in XSD.Tables["INV_PAT_BILLING"].Rows)
                {
                    if (dr["ISSALE"] != DBNull.Value && Convert.ToBoolean(dr["ISSALE"])
                        && dr["ISPROFILE"] != DBNull.Value && Convert.ToInt16(dr["ISPROFILE"]) == 1)
                    {
                        if (dr["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value)
                        {
                            IsProfileServiceAdded(dr, true);
                        }
                        else
                        {
                            IsProfileServiceAdded(dr, false);
                        }
                        if (dtBillProfile_Service.KIIsNotNullAndRowCount())
                        {
                            XSD.Tables["INV_BILL_PROFILE_SERVICE"].Merge(dtBillProfile_Service);
                            dtBillProfile_Service.Rows.Clear();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw ;
            }
        }

        /// <summary>
        /// Variable Copay & Deductible Window Enable property
        ///
        /// </summary>
        private bool isVariableDeductableCopay;
        public bool IsVariableDeductableCopay
        {
            get
            {
                return this.isVariableDeductableCopay;
            }
            set
            {
                this.isVariableDeductableCopay = value;
                this.OnPropertyChanged("IsVariableDeductableCopay");
            }
        }

        private void GetCopayDeductible() // jmp_copayNdeductible
        {
            try
            {
                DataSet dsCopay = new DataSet();
                DataTable dtTpaPriceList = new DataTable();
                DataTable dtNetworkCopayDeduct = new DataTable();
                DataTable dtPlanCopayDeduct = new DataTable();
                DataTable dtNetwork;
                if (SelectedContract != null)
                {


                    Infologics.Medilogics.MasterSettings.UIContainer.Scheme.CopayAndDeductible.GridDef.IsFromNetwork = false;
                    Infologics.Medilogics.MasterSettings.UIContainer.Scheme.CopayAndDeductible.GridDef.IsFromPlan = true;
                    Infologics.Medilogics.MasterSettings.UIContainer.Scheme.CopayAndDeductible.GridDef.IncoMastContractId = Convert.ToInt64(INCO_MAST_CONTRACT_ID);
                    //DataRow[] drScheme = null;
                    Infologics.Medilogics.MasterSettings.UIContainer.Scheme.CopayAndDeductible.GridDef.IncoMastNetworkId = Convert.ToInt64(INCO_DTLS_CONTRACT_CLASS_ID);
                    Infologics.Medilogics.MasterSettings.UIContainer.Scheme.CopayAndDeductible.GridDef.IncoMastSchemeId = Convert.ToInt64(INCO_MAST_SCHEME_ID);
                    DataTable dtCopay = new Infologics.Medilogics.MasterSettings.UIContainer.XSD.Contracts.INCO_DTLS_DEDUCT_COPAYDataTable().Clone();
                    DataTable dtCriteria = new DataTable();
                    MasterSettings.Main.MainMasterSettings objMain = new MainMasterSettings();
                    dtCriteria.Columns.Add("INCO_INV_CATEGORY_IDS");
                    dtCriteria.Columns.Add("INCO_MAST_CONTRACT_ID");
                    dtCriteria.Columns.Add("MODE", typeof(Int16));
                    dtCriteria.Columns.Add("INCO_DTLS_CONTRACT_CLASS_ID", typeof(decimal));
                    dtCriteria.Columns.Add("INCO_MAST_SCHEME_ID", typeof(decimal));
                    dtCriteria.Columns.Add("MRNO", typeof(string));
                    dtCriteria.Rows.Add(DBNull.Value, Convert.ToInt64(INCO_MAST_CONTRACT_ID), 2, DBNull.Value, DBNull.Value, DBNull.Value);
                    dtTpaPriceList = objMain.FetchPriceList(dtCriteria);
                    dtCriteria.Rows.Clear();
                    dtCriteria.Rows.Add(DBNull.Value, Convert.ToInt64(INCO_MAST_CONTRACT_ID), 1, Convert.ToInt64(INCO_DTLS_CONTRACT_CLASS_ID), Convert.ToInt64(INCO_MAST_SCHEME_ID), SelectedEncounterDetails["MRNO"]);
                    DataTable dtTemp = objMain.FetchCopayDeductable(dtCriteria);
                    dtCriteria.Rows.Clear();
                    var resNetWork = dtTemp.Copy().AsEnumerable().Where(r => r["INCO_MAST_SCHEME_ID"] == DBNull.Value && r["MRNO"] == DBNull.Value);
                    if (resNetWork != null && resNetWork.Any())
                    {
                        dtNetworkCopayDeduct = resNetWork.CopyToDataTable();
                    }
                    var resPlan = dtTemp.Copy().AsEnumerable().Where(r => r["INCO_MAST_SCHEME_ID"] != DBNull.Value && r["MRNO"] == DBNull.Value);
                    if (resPlan != null && resPlan.Any())
                    {
                        dtPlanCopayDeduct = resPlan.CopyToDataTable();
                    }
                    //if (DtDeductCopay == null || DtDeductCopay != null && DtDeductCopay.Rows.Count == 0)
                    //{
                    var resPlanBasedMrno = dtTemp.Copy().AsEnumerable().Where(r => r["INCO_MAST_SCHEME_ID"] != DBNull.Value && r["MRNO"] != DBNull.Value);
                    if (resPlanBasedMrno != null && resPlanBasedMrno.Any())
                    {
                        DtDeductCopay = resPlanBasedMrno.CopyToDataTable();
                    }
                    else
                    {
                        DtDeductCopay = null;
                    }
                    //}

                    if (dtTpaPriceList != null && dtTpaPriceList.Rows.Count > 0)
                    {
                        string[] strGroupId = (from row in dtTpaPriceList.Copy().AsEnumerable()
                                               where row["INV_MAST_SERVICE_ID"] == DBNull.Value && row["INCO_INV_CATEGORY_ID"] != DBNull.Value
                                               select row["INCO_INV_CATEGORY_ID"].ToString()).ToArray();
                        string GroupId = String.Join(",", strGroupId);
                        if (GroupId != "" && GroupId != string.Empty)
                        {
                            dtCriteria.Rows.Add(GroupId, Convert.ToInt64(INCO_MAST_CONTRACT_ID), 3, DBNull.Value, DBNull.Value, DBNull.Value);
                            dtCopay = objMain.FetchCopayDeductable(dtCriteria);
                            dtCriteria.Rows.Clear();
                            //dtCriteria.Rows.Add(GroupId, Convert.ToInt64(INCO_MAST_CONTRACT_ID), 0, DBNull.Value, DBNull.Value, DBNull.Value);
                            //dtCopay.Merge(objMain.FetchCopayDeductable(dtCriteria));
                            if (!dtCriteria.Columns.Contains("IS_FROM_COPAY"))
                            {
                                dtCriteria.Columns.Add("IS_FROM_COPAY", typeof(decimal));
                            }
                            dtCriteria.Rows.Add(GroupId, Convert.ToInt64(INCO_MAST_CONTRACT_ID), 0, DBNull.Value, DBNull.Value, DBNull.Value, 1);
                            dtCopay.Merge(objMain.FetchCopayDeductable(dtCriteria));
                            if (dtCriteria.Columns.Contains("IS_FROM_COPAY"))
                            {
                                dtCriteria.Columns.Remove("IS_FROM_COPAY");
                            }
                        }
                        dtNetwork = dtNetworkCopayDeduct.Copy();
                        //not taking Network level setting
                        //if (dtNetworkCopayDeduct.KIIsNotNullAndRowCount()) By Riyas
                        //{
                        //    dtNetworkCopayDeduct = null;
                        //}
                        if (dtNetworkCopayDeduct != null && dtNetworkCopayDeduct.Rows.Count > 0)
                        {
                            var res = dtNetworkCopayDeduct.Copy().AsEnumerable().Where(r => r["INCO_DTLS_CONTRACT_CLASS_ID"] != DBNull.Value &&
                                 (r["INCO_INV_CATEGORY_ID"] != DBNull.Value || r["INV_MAST_SERVICE_ID"] != DBNull.Value) &&
                                Convert.ToInt64(r["INCO_DTLS_CONTRACT_CLASS_ID"]) == Convert.ToInt64(INCO_DTLS_CONTRACT_CLASS_ID));
                            if (res != null && res.Count() > 0)
                            {
                                foreach (DataRow item in res.CopyToDataTable().Rows)
                                {
                                    if (item["INV_MAST_SERVICE_ID"] == DBNull.Value && item["INCO_INV_CATEGORY_ID"] != DBNull.Value)
                                    {

                                        var resExistCopayNetwork = dtCopay.AsEnumerable().Where(r => r["INCO_INV_CATEGORY_ID"] != DBNull.Value &&
                                            r["INV_MAST_SERVICE_ID"] == DBNull.Value &&
                                            Convert.ToInt64(r["INCO_INV_CATEGORY_ID"]) == Convert.ToInt64(item["INCO_INV_CATEGORY_ID"]));
                                        if (resExistCopayNetwork != null && resExistCopayNetwork.Any())
                                        {
                                            //resExistCopayNetwork.ElementAt(0).ItemArray = item.ItemArray;
                                            SetRowsValue(resExistCopayNetwork.First(), item);
                                        }

                                    }
                                    else
                                    {
                                        var resExistCopayNetwork = dtCopay.AsEnumerable().Where(r => r["INCO_INV_CATEGORY_ID"] != DBNull.Value &&
                                            r["INV_MAST_SERVICE_ID"] != DBNull.Value &&
                                            Convert.ToInt64(r["INCO_INV_CATEGORY_ID"]) == Convert.ToInt64(item["INCO_INV_CATEGORY_ID"]) &&
                                            Convert.ToInt64(r["INV_MAST_SERVICE_ID"]) == Convert.ToInt64(item["INV_MAST_SERVICE_ID"]));
                                        if (resExistCopayNetwork != null && resExistCopayNetwork.Any())
                                        {
                                            //resExistCopayNetwork.ElementAt(0).ItemArray = item.ItemArray;
                                            SetRowsValue(resExistCopayNetwork.First(), item);
                                        }
                                    }
                                }
                            }
                        }
                        //not taking plan level setting
                        //if (dtPlanCopayDeduct.KIIsNotNullAndRowCount()) By Riyas
                        //{
                        //    dtPlanCopayDeduct = null;
                        //}
                        if (dtPlanCopayDeduct != null && dtPlanCopayDeduct.Rows.Count > 0)
                        {
                            var res = dtPlanCopayDeduct.Copy().AsEnumerable().Where(r => r["INCO_MAST_SCHEME_ID"] != DBNull.Value &&
                                 (r["INCO_INV_CATEGORY_ID"] != DBNull.Value || r["INV_MAST_SERVICE_ID"] != DBNull.Value) &&
                                Convert.ToInt64(r["INCO_MAST_SCHEME_ID"]) == Convert.ToInt64(INCO_MAST_SCHEME_ID));
                            if (res != null && res.Any())
                            {
                                foreach (DataRow item in res.CopyToDataTable().Rows)
                                {
                                    if (item["INV_MAST_SERVICE_ID"] == DBNull.Value && item["INCO_INV_CATEGORY_ID"] != DBNull.Value)
                                    {

                                        var resExistCopayNetwork = dtCopay.AsEnumerable().Where(r => r["INCO_INV_CATEGORY_ID"] != DBNull.Value &&
                                            r["INV_MAST_SERVICE_ID"] == DBNull.Value &&
                                            Convert.ToInt64(r["INCO_INV_CATEGORY_ID"]) == Convert.ToInt64(item["INCO_INV_CATEGORY_ID"]));
                                        if (resExistCopayNetwork != null && resExistCopayNetwork.Any())
                                        {
                                            SetCopayData(item, resExistCopayNetwork.First());
                                            resExistCopayNetwork.First()["INCO_DTLS_DEDUCT_COPAY_ID"] = item["INCO_DTLS_DEDUCT_COPAY_ID"];
                                        }

                                    }
                                    else
                                    {
                                        var resExistCopayNetwork = dtCopay.AsEnumerable().Where(r => r["INCO_INV_CATEGORY_ID"] != DBNull.Value &&
                                            r["INV_MAST_SERVICE_ID"] != DBNull.Value &&
                                            Convert.ToInt64(r["INCO_INV_CATEGORY_ID"]) == Convert.ToInt64(item["INCO_INV_CATEGORY_ID"]) &&
                                            Convert.ToInt64(r["INV_MAST_SERVICE_ID"]) == Convert.ToInt64(item["INV_MAST_SERVICE_ID"]));
                                        if (resExistCopayNetwork != null && resExistCopayNetwork.Any())
                                        {
                                            SetCopayData(item, resExistCopayNetwork.First());
                                            resExistCopayNetwork.First()["INCO_DTLS_DEDUCT_COPAY_ID"] = item["INCO_DTLS_DEDUCT_COPAY_ID"];
                                        }
                                    }
                                }
                            }
                        }
                        if (DtDeductCopay != null && DtDeductCopay.Rows.Count > 0)
                        {
                            var res = DtDeductCopay.Copy().AsEnumerable().Where(r => r["INCO_MAST_SCHEME_ID"] != DBNull.Value &&
                                 (r["INCO_INV_CATEGORY_ID"] != DBNull.Value || r["INV_MAST_SERVICE_ID"] != DBNull.Value) &&
                                Convert.ToInt64(r["INCO_MAST_SCHEME_ID"]) == Convert.ToInt64(INCO_MAST_SCHEME_ID));
                            if (res != null && res.Count() > 0)
                            {
                                foreach (DataRow item in res.CopyToDataTable().Rows)
                                {
                                    if (item["INV_MAST_SERVICE_ID"] == DBNull.Value && item["INCO_INV_CATEGORY_ID"] != DBNull.Value)
                                    {

                                        var resExistCopayNetwork = dtCopay.AsEnumerable().Where(r => r["INCO_INV_CATEGORY_ID"] != DBNull.Value &&
                                            r["INV_MAST_SERVICE_ID"] == DBNull.Value &&
                                            Convert.ToInt64(r["INCO_INV_CATEGORY_ID"]) == Convert.ToInt64(item["INCO_INV_CATEGORY_ID"]));
                                        if (resExistCopayNetwork != null && resExistCopayNetwork.Any())
                                        {
                                            SetCopayData(item, resExistCopayNetwork.First());
                                        }

                                    }
                                    else
                                    {
                                        var resExistCopayNetwork = dtCopay.AsEnumerable().Where(r => r["INCO_INV_CATEGORY_ID"] != DBNull.Value &&
                                            r["INV_MAST_SERVICE_ID"] != DBNull.Value &&
                                            Convert.ToInt64(r["INCO_INV_CATEGORY_ID"]) == Convert.ToInt64(item["INCO_INV_CATEGORY_ID"]) &&
                                            Convert.ToInt64(r["INV_MAST_SERVICE_ID"]) == Convert.ToInt64(item["INV_MAST_SERVICE_ID"]));
                                        if (resExistCopayNetwork != null && resExistCopayNetwork.Any())
                                        {
                                            SetCopayData(item, resExistCopayNetwork.First());
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (dtCopay != null)
                    {
                        Infologics.Medilogics.MasterSettings.UIContainer.Scheme.CopayAndDeductible.GridDef.DtDataFromPriceList = dtCopay.Copy();
                    }
                }
                DataTable dtDefaultCopay = null;
                //if (DtDeductCopay!=null && DtDeductCopay.AsEnumerable().Count(r => r["INCO_INV_CATEGORY_ID"] == DBNull.Value && r["INV_MAST_SERVICE_ID"] == DBNull.Value &&
                //    r["INCO_MAST_SCHEME_ID"] != DBNull.Value && Convert.ToInt64(r["INCO_MAST_SCHEME_ID"]) == Convert.ToInt64(SelectedContract["INCO_MAST_SCHEME_ID"])) > 0)
                //{
                //    var resDefualtFo = DtDeductCopay.AsEnumerable().Where(r => r["INCO_INV_CATEGORY_ID"] == DBNull.Value && r["INV_MAST_SERVICE_ID"] == DBNull.Value &&
                //        r["INCO_MAST_SCHEME_ID"] != DBNull.Value && Convert.ToInt64(r["INCO_MAST_SCHEME_ID"]) == Convert.ToInt64(SelectedContract["INCO_MAST_SCHEME_ID"]));
                //    if (resDefualtFo != null && resDefualtFo.Count() > 0)
                //    {
                //        dtDefaultCopay = resDefualtFo.CopyToDataTable();
                //    }
                //}
                //else
                {
                    if (dtNetworkCopayDeduct != null)
                    {
                        var resDefaultNetWork = dtNetworkCopayDeduct.AsEnumerable().Where(r => r["INCO_INV_CATEGORY_ID"] == DBNull.Value && r["INV_MAST_SERVICE_ID"] == DBNull.Value &&
                            r["INCO_DTLS_CONTRACT_CLASS_ID"] != DBNull.Value &&
                            Convert.ToInt64(r["INCO_DTLS_CONTRACT_CLASS_ID"]) == Convert.ToInt64(INCO_DTLS_CONTRACT_CLASS_ID));
                        if (resDefaultNetWork != null && resDefaultNetWork.Any())
                        {
                            dtDefaultCopay = resDefaultNetWork.CopyToDataTable();
                        }
                    }
                    if (dtPlanCopayDeduct != null)
                    {
                        var resDefaultPlan = dtPlanCopayDeduct.AsEnumerable().Where(r => r["INCO_INV_CATEGORY_ID"] == DBNull.Value && r["INV_MAST_SERVICE_ID"] == DBNull.Value &&
                            r["INCO_MAST_SCHEME_ID"] != DBNull.Value &&
                            Convert.ToInt64(r["INCO_MAST_SCHEME_ID"]) == Convert.ToInt64(INCO_MAST_SCHEME_ID));
                        if (resDefaultPlan != null && resDefaultPlan.Any())
                        {
                            // dtDefaultCopay = resDefaultPlan.CopyToDataTable();

                            if (dtDefaultCopay != null && dtDefaultCopay.Rows.Count > 0)
                            {
                                SetCopayData(resDefaultPlan.First(), dtDefaultCopay.Rows[0]);
                                dtDefaultCopay.Rows[0]["INCO_DTLS_DEDUCT_COPAY_ID"] = resDefaultPlan.First()["INCO_DTLS_DEDUCT_COPAY_ID"];
                                //dtDefaultCopay.Rows[0]["OPCREDIT_DEDUCT_BASEDON"] = resDefaultPlan.First()["OPCREDIT_DEDUCT_BASEDON"];
                                //dtDefaultCopay.Rows[0]["OPCREDIT_COPAY_BASEDON"] = resDefaultPlan.First()["OPCREDIT_COPAY_BASEDON"];
                                //dtDefaultCopay.Rows[0]["IP_COPAY_BASEDON"] = resDefaultPlan.First()["IP_COPAY_BASEDON"];
                            }
                            else
                            {
                                dtDefaultCopay = resDefaultPlan.CopyToDataTable();
                            }
                        }
                    }
                    //not taking plan/Network level setting for Default..mohd adil
                    //if (dtDefaultCopay.KIIsNotNullAndRowCount()) By Riyas
                    //{
                    //    dtDefaultCopay = null;
                    //}
                    if (DtDeductCopay != null && DtDeductCopay.Rows.Count > 0)
                    {
                        var resDefualtFo = DtDeductCopay.AsEnumerable().Where(r => r["INCO_INV_CATEGORY_ID"] == DBNull.Value && r["INV_MAST_SERVICE_ID"] == DBNull.Value &&
                            r["INCO_MAST_SCHEME_ID"] != DBNull.Value && Convert.ToInt64(r["INCO_MAST_SCHEME_ID"]) == Convert.ToInt64(INCO_MAST_SCHEME_ID));
                        if (resDefualtFo != null && resDefualtFo.Any())
                        {
                            if (dtDefaultCopay != null && dtDefaultCopay.Rows.Count > 0)
                            {
                                //dtDefaultCopay = resDefualtFo.CopyToDataTable();
                                SetCopayData(resDefualtFo.First(), dtDefaultCopay.Rows[0]);
                                dtDefaultCopay.Rows[0]["INCO_DTLS_DEDUCT_COPAY_ID"] = resDefualtFo.First()["INCO_DTLS_DEDUCT_COPAY_ID"];
                                //dtDefaultCopay.Rows[0]["OPCREDIT_DEDUCT_BASEDON"] = resDefualtFo.First()["OPCREDIT_DEDUCT_BASEDON"];
                                //dtDefaultCopay.Rows[0]["OPCREDIT_COPAY_BASEDON"] = resDefualtFo.First()["OPCREDIT_COPAY_BASEDON"];
                                //dtDefaultCopay.Rows[0]["IP_COPAY_BASEDON"] = resDefualtFo.First()["IP_COPAY_BASEDON"];
                            }
                            else
                            {
                                dtDefaultCopay = resDefualtFo.CopyToDataTable();
                            }
                        }
                    }

                }
                CommonWindow objwin = new CommonWindow(Enumerators.General.WindowControlBoxStyle.None);
                Infologics.Medilogics.MasterSettings.UIContainer.Scheme.CopayAndDeductible.UcCopayAndDeductible objPrice = new MasterSettings.UIContainer.Scheme.CopayAndDeductible.UcCopayAndDeductible();
                objwin.Content = objPrice;
                if (dtDefaultCopay != null && dtDefaultCopay.Rows.Count > 0)
                {
                    if (dtDefaultCopay.Rows[0]["IS_DEFAULT"] != DBNull.Value)
                    {
                        objPrice.IsDefault = Convert.ToBoolean(dtDefaultCopay.Rows[0]["IS_DEFAULT"]);
                    }
                    objPrice.DtSourceDeductCopay = dtDefaultCopay.Copy();
                    objPrice.DtSourceDeductCopayCopy = dtDefaultCopay.Copy();
                }
                //lines added for fetching default copay/deductible LOG
                objPrice.IsFromMRNO = true;
                objPrice.MRNO = (PatientInformation.KIIsNotNullAndRowCount() && PatientInformation.Rows[0]["MRNO"] != DBNull.Value) ? PatientInformation.Rows[0]["MRNO"].ToString() : string.Empty;
                objPrice.GetDefaulDeductCopayLOG();
                //end
                objPrice.IsDefault = true;
                objPrice.WindowClosing = false;
                objwin.Height = 500;
                objwin.Width = 1000;
                objwin.SizeToContent = SizeToContent.Manual;
                objwin.ResizeMode = ResizeMode.NoResize;
                objwin.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                objwin.Title = "Copay and Deductibles";
                ////if (IsEncounterOpen)
                ////{
                //objPrice.IsDisableStandardPlan = true;
                ////}
                ////else
                ////{
                objPrice.IsDisableStandardPlan = false;
                objPrice.IsDisableFo = true;
                //objPrice.IsDirectSave = true;
                ////}
                objwin.ShowDialog();
                // DtDeductCopay = Infologics.Medilogics.MasterSettings.UIContainer.Scheme.CopayAndDeductible.GridDef.DtSource;
                if (!objPrice.WindowClosing && Infologics.Medilogics.MasterSettings.UIContainer.Scheme.CopayAndDeductible.GridDef.DtSource != null && Infologics.Medilogics.MasterSettings.UIContainer.Scheme.CopayAndDeductible.GridDef.DtSource.Rows.Count > 0)
                {
                    //var query = from dr in Infologics.Medilogics.MasterSettings.UIContainer.Scheme.CopayAndDeductible.GridDef.DtSource.AsEnumerable()
                    //            where dr["ISEDIT_FROM_PLAN"] != null && Convert.ToInt16(dr["ISEDIT_FROM_PLAN"]) == 1
                    //            select dr;
                    //if (query.Count() > 0)
                    //{
                    //    IsOverRide = true;
                    //}
                    foreach (DataRow dr in Infologics.Medilogics.MasterSettings.UIContainer.Scheme.CopayAndDeductible.GridDef.DtSource.Copy().Rows)
                    {
                        if (dr["ISEDIT_FROM_PLAN"] != DBNull.Value && Convert.ToDecimal(dr["ISEDIT_FROM_PLAN"]) == 1 &&
                                   dr["INCO_MAST_SCHEME_ID"] != DBNull.Value && Convert.ToInt64(dr["INCO_MAST_SCHEME_ID"]) == Convert.ToInt64(INCO_MAST_SCHEME_ID))
                        {
                            if (DtDeductCopay == null)
                            {
                                DtDeductCopay = new Infologics.Medilogics.MasterSettings.UIContainer.XSD.Contracts.INCO_DTLS_DEDUCT_COPAYDataTable().Clone();
                            }
                            var resNetWork = DtDeductCopay.AsEnumerable().Where(rNetWork => rNetWork["INCO_DTLS_DEDUCT_COPAY_ID"] != DBNull.Value &&
                                dr["INCO_DTLS_DEDUCT_COPAY_ID"] != DBNull.Value && rNetWork["INCO_MAST_SCHEME_ID"] != DBNull.Value &&
                                 Convert.ToInt64(rNetWork["INCO_MAST_SCHEME_ID"]) == Convert.ToInt64(INCO_MAST_SCHEME_ID) &&
                                 Convert.ToInt64(rNetWork["INCO_DTLS_DEDUCT_COPAY_ID"]) == Convert.ToInt64(dr["INCO_DTLS_DEDUCT_COPAY_ID"]));
                            if (resNetWork != null && resNetWork.Any())
                            {
                                //resNetWork.ElementAt(0).ItemArray = dr.ItemArray;
                                SetCopayData(dr, resNetWork.First(), true);
                                if ((resNetWork.First()["OPLIMIT_MAX_EDITED"] != DBNull.Value && Convert.ToInt16(resNetWork.First()["OPLIMIT_MAX_EDITED"]) == 1) ||
                                    resNetWork.First()["OPLIMIT_MIN_EDITED"] != DBNull.Value && Convert.ToInt16(resNetWork.First()["OPLIMIT_MIN_EDITED"]) == 1)
                                {
                                    resNetWork.First()["OPCOPAY_EDITED"] = 1;
                                }
                                if ((resNetWork.First()["IPLIMIT_MIN_EDITED"] != DBNull.Value && Convert.ToInt16(resNetWork.First()["IPLIMIT_MIN_EDITED"]) == 1) ||
                                    resNetWork.First()["IPLIMIT_MAX_EDITED"] != DBNull.Value && Convert.ToInt16(resNetWork.First()["IPLIMIT_MAX_EDITED"]) == 1)
                                {
                                    resNetWork.First()["IPCOPAY_EDITED"] = 1;
                                }
                            }
                            else
                            {
                                //dtPlanCopayDeduct.ImportRow(dr);
                                DataRow drNew = DtDeductCopay.NewRow();
                                if (dr["INCO_DTLS_DEDUCT_COPAY_ID"] != DBNull.Value && Convert.ToInt64(dr["INCO_DTLS_DEDUCT_COPAY_ID"]) > 0)
                                {
                                    // commented mohd adil
                                    //dr["INCO_DTLS_DEDUCT_COPAY_ID"] = -Convert.ToInt64(dr["INCO_DTLS_DEDUCT_COPAY_ID"]);
                                }
                                SetDefualtCopayData(dr, drNew);
                                SetCopayData(dr, drNew, true);
                                if ((drNew["OPLIMIT_MAX_EDITED"] != DBNull.Value && Convert.ToInt16(drNew["OPLIMIT_MAX_EDITED"]) == 1) ||
                                    drNew["OPLIMIT_MIN_EDITED"] != DBNull.Value && Convert.ToInt16(drNew["OPLIMIT_MIN_EDITED"]) == 1)
                                {
                                    drNew["OPCOPAY_EDITED"] = 1;
                                }
                                if ((drNew["IPLIMIT_MIN_EDITED"] != DBNull.Value && Convert.ToInt16(drNew["IPLIMIT_MIN_EDITED"]) == 1) ||
                                    drNew["IPLIMIT_MAX_EDITED"] != DBNull.Value && Convert.ToInt16(drNew["IPLIMIT_MAX_EDITED"]) == 1)
                                {
                                    drNew["IPCOPAY_EDITED"] = 1;
                                }
                                DtDeductCopay.Rows.Add(drNew);
                            }
                        }
                    }
                }

                if (!objPrice.WindowClosing && objPrice.IsUpdate && objPrice.DtSourceDeductCopay != null && objPrice.DtSourceDeductCopay.Rows.Count > 0)
                {
                    if (DtDeductCopay != null && DtDeductCopay.Rows.Count > 0)
                    {
                        var resExistCopay = DtDeductCopay.AsEnumerable().Where(r => r["INCO_INV_CATEGORY_ID"] == DBNull.Value && r["INV_MAST_SERVICE_ID"] == DBNull.Value &&
                            r["INCO_MAST_SCHEME_ID"] != DBNull.Value &&
                        Convert.ToInt64(r["INCO_MAST_SCHEME_ID"]) == Convert.ToInt64(INCO_MAST_SCHEME_ID));
                        if (resExistCopay != null && resExistCopay.Count() > 0)
                        {
                            //SetRowsValue(resExistCopay.First(), objPrice.DtSourceDeductCopay.Rows[0]);
                            if (!CheckRows(objPrice.DtSourceDeductCopay.Rows[0], resExistCopay.First()))
                            {
                                //SetCopayData(objPrice.DtSourceDeductCopay.Rows[0], resExistCopay.First(), true);
                                SetRowsValue(resExistCopay.First(), objPrice.DtSourceDeductCopay.Rows[0]);
                                if (Convert.ToInt64(resExistCopay.First()["INCO_DTLS_DEDUCT_COPAY_ID"]) > 0 && objPrice.IsNewSetting)
                                {
                                    resExistCopay.First()["INCO_DTLS_DEDUCT_COPAY_ID"] = -Convert.ToInt64(resExistCopay.First()["INCO_DTLS_DEDUCT_COPAY_ID"]);  //uncommented for MRNO level overriding
                                }
                            }
                        }
                        else
                        {
                            if (Convert.ToInt64(objPrice.DtSourceDeductCopay.Rows[0]["INCO_DTLS_DEDUCT_COPAY_ID"]) > 0 && objPrice.IsNewSetting)
                            {
                                objPrice.DtSourceDeductCopay.Rows[0]["INCO_DTLS_DEDUCT_COPAY_ID"] = -Convert.ToInt64(objPrice.DtSourceDeductCopay.Rows[0]["INCO_DTLS_DEDUCT_COPAY_ID"]);  //uncommented for MRNO level overriding
                            }
                            DtDeductCopay.ImportRow(objPrice.DtSourceDeductCopay.Rows[0]);
                            //DataRow drNew = DtDeductCopay.NewRow();
                            //if (Convert.ToInt64(objPrice.DtSourceDeductCopay.Rows[0]["INCO_DTLS_DEDUCT_COPAY_ID"]) > 0)
                            //{
                            //    objPrice.DtSourceDeductCopay.Rows[0]["INCO_DTLS_DEDUCT_COPAY_ID"] = -Convert.ToInt64(objPrice.DtSourceDeductCopay.Rows[0]["INCO_DTLS_DEDUCT_COPAY_ID"]);
                            //}
                            //SetDefualtCopayData(objPrice.DtSourceDeductCopay.Rows[0], drNew);
                            //SetCopayData(objPrice.DtSourceDeductCopay.Rows[0], drNew, true);
                            //DtDeductCopay.Rows.Add(drNew);
                        }

                    }
                    else
                    {
                        if (DtDeductCopay == null)
                        {
                            DtDeductCopay = new Infologics.Medilogics.MasterSettings.UIContainer.XSD.Contracts.INCO_DTLS_DEDUCT_COPAYDataTable().Clone();
                        }
                        if (Convert.ToInt64(objPrice.DtSourceDeductCopay.Rows[0]["INCO_DTLS_DEDUCT_COPAY_ID"]) > 0 && objPrice.IsNewSetting )
                        {
                            objPrice.DtSourceDeductCopay.Rows[0]["INCO_DTLS_DEDUCT_COPAY_ID"] = -Convert.ToInt64(objPrice.DtSourceDeductCopay.Rows[0]["INCO_DTLS_DEDUCT_COPAY_ID"]); //uncommented for MRNO level overriding
                        }
                        DtDeductCopay.ImportRow(objPrice.DtSourceDeductCopay.Rows[0]);
                        //DataRow drNew = DtDeductCopay.NewRow();
                        //if (Convert.ToInt64(objPrice.DtSourceDeductCopay.Rows[0]["INCO_DTLS_DEDUCT_COPAY_ID"]) > 0)
                        //{
                        //    objPrice.DtSourceDeductCopay.Rows[0]["INCO_DTLS_DEDUCT_COPAY_ID"] = -Convert.ToInt64(objPrice.DtSourceDeductCopay.Rows[0]["INCO_DTLS_DEDUCT_COPAY_ID"]);
                        //}
                        //SetDefualtCopayData(objPrice.DtSourceDeductCopay.Rows[0], drNew);
                        //SetCopayData(objPrice.DtSourceDeductCopay.Rows[0], drNew, true);
                        //DtDeductCopay.Rows.Add(drNew);
                    }
                    //SS27102014
                    //if (dtDefaultCopay != null)
                    //{
                    //    if (dsCopay.Tables.Contains("INCO_DTLS_DEDUCT_COPAY"))
                    //    {
                    //        dsCopay.Tables.Remove("INCO_DTLS_DEDUCT_COPAY");
                    //    }
                    //    dsCopay.Tables.Add(dtDefaultCopay); //tt
                    //}
                    //else 
                }
                if (!objPrice.WindowClosing && DtDeductCopay != null)
                {
                    DataRow[] Row = DtDeductCopay.Copy().Select("ISEDIT_FROM_PLAN = 1");
                    if (Row != null && Row.Count() > 0)
                    {
                        DtDeductCopay = Row.CopyToDataTable();
                        DtDeductCopay.TableName = "INCO_DTLS_DEDUCT_COPAY";
                        DtDeductCopay.Columns.Add("MODE");
                        DtDeductCopay.AsEnumerable().ForEach(r => { r["MRNO"] = PatientInformation.Rows[0]["MRNO"]; r["MODE"] = 1; r["CREATED_BY"] = CommonData.LoggedInUser; });
                        if (dsCopay.Tables.Contains("INCO_DTLS_DEDUCT_COPAY"))
                        {
                            dsCopay.Tables.Remove("INCO_DTLS_DEDUCT_COPAY");
                        }
                        dsCopay.Tables.Add(DtDeductCopay.Copy()); //tt
                        //mode 1 using for mrno level overriding...added by mohd adil
                        //dsCopay.Tables["INCO_DTLS_DEDUCT_COPAY"].Columns.Add("MODE");
                        //dsCopay.Tables["INCO_DTLS_DEDUCT_COPAY"].AsEnumerable().ForEach(r => r["MODE"] = 1);
                    }
                    else
                    {
                        DtDeductCopay = null;
                    }
                }
                //SS27102014
                XSD.CancelBill obj = new XSD.CancelBill();
                DataTable dtGenAudit = obj.GEN_AUDIT.Clone();
                AuditData.GetAuditData(dtGenAudit, CommonData.LoggedInUser, 0);
                if (!objPrice.WindowClosing && dtGenAudit.KIIsNotNullAndRowCount() && DtDeductCopay.KIIsNotNullAndRowCount())
                {

                    dsCopay.Tables.Add(dtGenAudit);
                    MainBilling objMain = new MainBilling();
                    objMain.SaveCopayAndDeductible(dsCopay);

                }
            }
            catch (Exception ex)
            {
                //if (Ex.Message.Contains("-20103"))
                //{
                //    throw new MedilogicsException("Data changed by another user.. Please reload and continue..");

                //}
                if (ex.Message != null && ex.Message.Contains("-20103"))
                {
                    throw new MedilogicsException((ex.Message.Substring(ex.Message.IndexOf('$') + 1)).Substring(0, (ex.Message.Substring(ex.Message.IndexOf('$') + 1)).IndexOf('?')));
                }
                else
                {
                    throw;
                }
            }
        }


        ////if (DtDeductCopay != null)
        ////{
        ////    IsOverRide = DtDeductCopay.Rows.Count > 0 ? true : false;
        ////    DtDeductCopay.TableName = "INCO_DTLS_DEDUCT_COPAY";
        ////}


        public DataTable DtDeductCopay
        {
            get { return (DataTable)GetValue(DtDeductCopayProperty); }
            set { SetValue(DtDeductCopayProperty, value); }
        }

        // Using a DependencyProperty as the backing store for DtDeductCopay.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty DtDeductCopayProperty =
            DependencyProperty.Register("DtDeductCopay", typeof(DataTable), typeof(UIServiceDelivery), new UIPropertyMetadata(null));

        private void SetRowsValue(DataRow Target, DataRow Source)
        {
            foreach (DataColumn col in Target.Table.Columns)
            {
                if (Source.Table.Columns.Contains(col.ColumnName))
                {
                    Target[col] = Source[col.ColumnName];
                }
            }
        }

        private void SetCopayData(DataRow DrSource, DataRow DrTarget, bool IsUpadte = false)
        {
            try
            {
                bool IsAdded = false;
                if (IsUpadte)
                {
                    if ((DrSource["DEDUCTIBLE_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["DEDUCTIBLE_EDITED"])) ||
                        (DrSource["DEDUCTIBLE_TYPE_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["DEDUCTIBLE_TYPE_EDITED"])) ||
                        (DrSource["DEDUCTIBLE_MODE_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["DEDUCTIBLE_MODE_EDITED"])) ||
                        (DrSource["DEDUCTIBLE_LIMIT_MIN_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["DEDUCTIBLE_LIMIT_MIN_EDITED"])))
                    {
                        DrTarget["OPCREDIT_DEDUCT_BASEDON"] = DrSource["OPCREDIT_DEDUCT_BASEDON"];
                        DrTarget["OPCREDIT_DEDUCT_AMOUNT"] = DrSource["OPCREDIT_DEDUCT_AMOUNT"];
                        DrTarget["OPCREDIT_DEDUCT_PERC"] = DrSource["OPCREDIT_DEDUCT_PERC"];
                        DrTarget["DEDUCTIBLE_EDITED"] = DrSource["DEDUCTIBLE_EDITED"];
                        DrTarget["DEDUCTIBLE_TYPE_EDITED"] = DrSource["DEDUCTIBLE_TYPE_EDITED"];

                        DrTarget["DEDUCTIBLE_MODE_EDITED"] = DrSource["DEDUCTIBLE_MODE_EDITED"];
                        DrTarget["OPCREDIT_DEDUCT_LIMIT_MIN"] = DrSource["OPCREDIT_DEDUCT_LIMIT_MIN"];
                        DrTarget["DEDUCTIBLE_LIMIT_MIN_EDITED"] = DrSource["DEDUCTIBLE_LIMIT_MIN_EDITED"];
                    }
                    if ((DrSource["OPCOPAY_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["OPCOPAY_EDITED"])) ||
                    (DrSource["OPCOPAY_MODE_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["OPCOPAY_MODE_EDITED"])) ||
                    (DrSource["OPLIMIT_MIN_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["OPLIMIT_MIN_EDITED"])) ||
                    (DrSource["OPLIMIT_MAX_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["OPLIMIT_MAX_EDITED"])))
                    {
                        DrTarget["OPCREDIT_COPAY_BASEDON"] = DrSource["OPCREDIT_COPAY_BASEDON"];
                        DrTarget["OPCREDIT_COPAY_PERC"] = DrSource["OPCREDIT_COPAY_PERC"];
                        DrTarget["OPCOPAY_EDITED"] = DrSource["OPCOPAY_EDITED"];
                        DrTarget["OPCOPAY_MODE_EDITED"] = DrSource["OPCOPAY_MODE_EDITED"];

                        DrTarget["OPCREDIT_COPAY_LIMIT_MIN"] = DrSource["OPCREDIT_COPAY_LIMIT_MIN"];
                        DrTarget["OPLIMIT_MIN_EDITED"] = DrSource["OPLIMIT_MIN_EDITED"];
                        DrTarget["OPCREDIT_COPAY_LIMIT_MAX"] = DrSource["OPCREDIT_COPAY_LIMIT_MAX"];
                        DrTarget["OPLIMIT_MAX_EDITED"] = DrSource["OPLIMIT_MAX_EDITED"];
                    }

                    if ((DrSource["IPCOPAY_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["IPCOPAY_EDITED"])) ||
                       (DrSource["IPCOPAY_MODE_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["IPCOPAY_MODE_EDITED"])) ||
                       (DrSource["IPLIMIT_MIN_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["IPLIMIT_MIN_EDITED"])) ||
                       (DrSource["IPLIMIT_MAX_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["IPLIMIT_MAX_EDITED"])))
                    {
                        DrTarget["IP_COPAY_BASEDON"] = DrSource["IP_COPAY_BASEDON"];
                        DrTarget["IP_COPAY_PERC"] = DrSource["IP_COPAY_PERC"];
                        DrTarget["IPCOPAY_EDITED"] = DrSource["IPCOPAY_EDITED"];
                        DrTarget["IPCOPAY_MODE_EDITED"] = DrSource["IPCOPAY_MODE_EDITED"];
                        DrTarget["IP_COPAY_LIMIT_MIN"] = DrSource["IP_COPAY_LIMIT_MIN"];
                        DrTarget["IPLIMIT_MIN_EDITED"] = DrSource["IPLIMIT_MIN_EDITED"];
                        DrTarget["IP_COPAY_LIMIT_MAX"] = DrSource["IP_COPAY_LIMIT_MAX"];
                        DrTarget["IPLIMIT_MAX_EDITED"] = DrSource["IPLIMIT_MAX_EDITED"];
                    }
                    DrTarget["ISEDIT_FROM_NETWORK"] = DrSource["ISEDIT_FROM_NETWORK"];
                    DrTarget["ISINCLUDE"] = DrSource["ISINCLUDE"];
                    DrTarget["ISEDIT_FROM_PLAN"] = DrSource["ISEDIT_FROM_PLAN"];
                    DrTarget["ISDELETE"] = DrSource["ISDELETE"];
                    //lines added by mohd adil
                    if (DrSource["FROM_DATE_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["FROM_DATE_EDITED"]))
                    {
                        DrTarget["FROM_DATE"] = DrSource["FROM_DATE"];
                        DrTarget["FROM_DATE_EDITED"] = DrSource["FROM_DATE_EDITED"];
                    }
                    if (DrSource["TO_DATE_EDITED"] != DBNull.Value && Convert.ToBoolean(DrSource["TO_DATE_EDITED"]))
                    {
                        DrTarget["TO_DATE"] = DrSource["TO_DATE"];
                        DrTarget["TO_DATE_EDITED"] = DrSource["TO_DATE_EDITED"];
                    }
                    //end
                }
                else
                {
                    if ((DrSource["OPCREDIT_DEDUCT_AMOUNT"] != DBNull.Value && Convert.ToString(DrSource["OPCREDIT_DEDUCT_AMOUNT"]) != string.Empty) ||
                        (DrSource["OPCREDIT_DEDUCT_PERC"] != DBNull.Value && Convert.ToString(DrSource["OPCREDIT_DEDUCT_PERC"]) != string.Empty))
                    {
                        DrTarget["OPCREDIT_DEDUCT_BASEDON"] = DrSource["OPCREDIT_DEDUCT_BASEDON"];
                        DrTarget["OPCREDIT_DEDUCT_AMOUNT"] = DrSource["OPCREDIT_DEDUCT_AMOUNT"];
                        DrTarget["OPCREDIT_DEDUCT_PERC"] = DrSource["OPCREDIT_DEDUCT_PERC"];
                        DrTarget["DEDUCTIBLE_EDITED"] = DrSource["DEDUCTIBLE_EDITED"];
                        IsAdded = true;

                    }
                    if (DrSource["OPCREDIT_DEDUCT_LIMIT_MIN"] != DBNull.Value && Convert.ToString(DrSource["OPCREDIT_DEDUCT_LIMIT_MIN"]) != string.Empty)
                    {
                        DrTarget["OPCREDIT_DEDUCT_LIMIT_MIN"] = DrSource["OPCREDIT_DEDUCT_LIMIT_MIN"];
                        DrTarget["DEDUCTIBLE_LIMIT_MIN_EDITED"] = DrSource["DEDUCTIBLE_LIMIT_MIN_EDITED"];
                        IsAdded = true;
                    }
                    if (DrSource["OPCREDIT_COPAY_PERC"] != DBNull.Value && Convert.ToString(DrSource["OPCREDIT_COPAY_PERC"]) != string.Empty)
                    {
                        DrTarget["OPCREDIT_COPAY_BASEDON"] = DrSource["OPCREDIT_COPAY_BASEDON"];
                        DrTarget["OPCREDIT_COPAY_PERC"] = DrSource["OPCREDIT_COPAY_PERC"];
                        DrTarget["OPCOPAY_EDITED"] = DrSource["OPCOPAY_EDITED"];
                        IsAdded = true;
                    }
                    if (DrSource["OPCREDIT_COPAY_LIMIT_MIN"] != DBNull.Value && Convert.ToString(DrSource["OPCREDIT_COPAY_LIMIT_MIN"]) != string.Empty)
                    {
                        DrTarget["OPCREDIT_COPAY_LIMIT_MIN"] = DrSource["OPCREDIT_COPAY_LIMIT_MIN"];
                        DrTarget["OPLIMIT_MIN_EDITED"] = DrSource["OPLIMIT_MIN_EDITED"];
                        IsAdded = true;
                    }
                    if (DrSource["OPCREDIT_COPAY_LIMIT_MAX"] != DBNull.Value && Convert.ToString(DrSource["OPCREDIT_COPAY_LIMIT_MAX"]) != string.Empty)
                    {
                        DrTarget["OPCREDIT_COPAY_LIMIT_MAX"] = DrSource["OPCREDIT_COPAY_LIMIT_MAX"];
                        DrTarget["OPLIMIT_MAX_EDITED"] = DrSource["OPLIMIT_MAX_EDITED"];
                        IsAdded = true;
                    }

                    if (DrSource["IP_COPAY_PERC"] != DBNull.Value && Convert.ToString(DrSource["IP_COPAY_PERC"]) != string.Empty)
                    {
                        DrTarget["IP_COPAY_BASEDON"] = DrSource["IP_COPAY_BASEDON"];
                        DrTarget["IP_COPAY_PERC"] = DrSource["IP_COPAY_PERC"];
                        DrTarget["IPCOPAY_EDITED"] = DrSource["IPCOPAY_EDITED"];
                        IsAdded = true;
                    }
                    if (DrSource["IP_COPAY_LIMIT_MIN"] != DBNull.Value && Convert.ToString(DrSource["IP_COPAY_LIMIT_MIN"]) != string.Empty)
                    {
                        DrTarget["IP_COPAY_LIMIT_MIN"] = DrSource["IP_COPAY_LIMIT_MIN"];
                        DrTarget["IPLIMIT_MIN_EDITED"] = DrSource["IPLIMIT_MIN_EDITED"];
                        IsAdded = true;
                    }
                    if (DrSource["IP_COPAY_LIMIT_MAX"] != DBNull.Value && Convert.ToString(DrSource["IP_COPAY_LIMIT_MAX"]) != string.Empty)
                    {
                        DrTarget["IP_COPAY_LIMIT_MAX"] = DrSource["IP_COPAY_LIMIT_MAX"];
                        DrTarget["IPLIMIT_MAX_EDITED"] = DrSource["IPLIMIT_MAX_EDITED"];
                        IsAdded = true;
                    }
                    if (IsAdded)
                    {
                        DrTarget["INCO_DTLS_DEDUCT_COPAY_ID"] = DrSource["INCO_DTLS_DEDUCT_COPAY_ID"];
                        DrTarget["INCO_MAST_CONTRACT_ID"] = DrSource["INCO_MAST_CONTRACT_ID"];
                        DrTarget["INCO_INV_CATEGORY_ID"] = DrSource["INCO_INV_CATEGORY_ID"];
                        DrTarget["INV_MAST_SERVICE_ID"] = DrSource["INV_MAST_SERVICE_ID"];
                        //DrTarget["FROM_DATE"] = DrSource["FROM_DATE"];
                        if (Convert.ToString(DrSource["MRNO"]) != string.Empty)//if mrno level overriding then take dates from mrno data
                        {
                            DrTarget["FROM_DATE"] = DrSource["FROM_DATE"];
                            DrTarget["TO_DATE"] = DrSource["TO_DATE"];
                            DrTarget["MRNO"] = DrSource["MRNO"];
                        }
                        else
                        {
                            DrTarget["FROM_DATE"] = DrSource["FROM_DATE"];
                        }
                        DrTarget["INCO_DTLS_CONTRACT_CLASS_ID"] = DrSource["INCO_DTLS_CONTRACT_CLASS_ID"];
                        DrTarget["CREATED_BY"] = DrSource["CREATED_BY"];
                        DrTarget["IS_DEFAULT"] = DrSource["IS_DEFAULT"];
                        DrTarget["GEN_AUDIT_ID"] = DrSource["GEN_AUDIT_ID"];
                        DrTarget["INCO_MAST_SCHEME_ID"] = DrSource["INCO_MAST_SCHEME_ID"];
                        DrTarget["ISEDIT_FROM_NETWORK"] = DrSource["ISEDIT_FROM_NETWORK"];
                        DrTarget["ISINCLUDE"] = DrSource["ISINCLUDE"];
                        DrTarget["ISEDIT_FROM_PLAN"] = DrSource["ISEDIT_FROM_PLAN"];
                        DrTarget["ISDELETE"] = DrSource["ISDELETE"];
                    }
                }

            }

            catch (Exception)
            {

                throw;
            }
        }
        private void SetDefualtCopayData(DataRow DrSource, DataRow DrTarget)
        {
            DrTarget["INCO_DTLS_DEDUCT_COPAY_ID"] = DrSource["INCO_DTLS_DEDUCT_COPAY_ID"];
            DrTarget["INCO_MAST_CONTRACT_ID"] = DrSource["INCO_MAST_CONTRACT_ID"];
            DrTarget["FROM_DATE"] = DrSource["FROM_DATE"];
            //lines added by mohd adil
            DrTarget["TO_DATE"] = DrSource["TO_DATE"];
            //end
            DrTarget["INV_MAST_SERVICE_ID"] = DrSource["INV_MAST_SERVICE_ID"];
            DrTarget["IS_DEFAULT"] = DrSource["IS_DEFAULT"];
            DrTarget["INCO_DTLS_CONTRACT_CLASS_ID"] = DrSource["INCO_DTLS_CONTRACT_CLASS_ID"];
            DrTarget["CREATED_BY"] = DrSource["CREATED_BY"];
            DrTarget["GEN_AUDIT_ID"] = DrSource["GEN_AUDIT_ID"];
            DrTarget["INCO_MAST_SCHEME_ID"] = DrSource["INCO_MAST_SCHEME_ID"];
            DrTarget["INCO_INV_CATEGORY_ID"] = DrSource["INCO_INV_CATEGORY_ID"];
            DrTarget["NAME"] = DrSource["NAME"];
            DrTarget["CPT_CODE"] = DrSource["CPT_CODE"];
            DrTarget["ISINCLUDE"] = 0;
            DrTarget["ISEDIT_FROM_NETWORK"] = DrSource["ISEDIT_FROM_NETWORK"];
            DrTarget["ISEDIT_FROM_PLAN"] = DrSource["ISEDIT_FROM_PLAN"];
            DrTarget["ROOT_CATEGORY_NAME"] = DrSource["ROOT_CATEGORY_NAME"];
            DrTarget["ISDELETE"] = DrSource["ISDELETE"];

            DrTarget["DEDUCTIBLE_EDITED"] = 0;
            DrTarget["DEDUCTIBLE_MODE_EDITED"] = 0;
            DrTarget["DEDUCTIBLE_TYPE_EDITED"] = 0;
            DrTarget["DEDUCTIBLE_LIMIT_MIN_EDITED"] = 0;
            DrTarget["OPCOPAY_EDITED"] = 0;
            DrTarget["OPCOPAY_MODE_EDITED"] = 0;
            DrTarget["OPCOPAY_TYPE_EDITED"] = 0;
            DrTarget["OPLIMIT_MAX_EDITED"] = 0;
            DrTarget["OPLIMIT_MIN_EDITED"] = 0;
            DrTarget["IPCOPAY_EDITED"] = 0;
            DrTarget["IPCOPAY_MODE_EDITED"] = 0;
            DrTarget["IPCOPAY_TYPE_EDITED"] = 0;

            DrTarget["IPLIMIT_MAX_EDITED"] = 0;
            DrTarget["IPLIMIT_MIN_EDITED"] = 0;
        }
        private bool CheckRows(DataRow newRow, DataRow oldRow)
        {
            foreach (DataColumn col in newRow.Table.Columns)
            {
                if (oldRow.Table.Columns.Contains(col.ColumnName))
                {
                    if (col.DataType == typeof(decimal))
                    {
                        if ((oldRow[col.ColumnName] == DBNull.Value && newRow[col] != DBNull.Value && Convert.ToString(newRow[col.ColumnName]).Trim() != string.Empty) ||
                            (oldRow[col.ColumnName] != DBNull.Value && Convert.ToString(oldRow[col.ColumnName]).Trim() != string.Empty && newRow[col] == DBNull.Value) ||
                            (oldRow[col.ColumnName] != DBNull.Value && newRow[col] != DBNull.Value && Convert.ToString(oldRow[col.ColumnName]).Trim() != string.Empty && Convert.ToString(newRow[col.ColumnName]).Trim() != string.Empty &&
                            Convert.ToDecimal(oldRow[col.ColumnName]) != Convert.ToDecimal(newRow[col])))
                        {
                            return false;
                        }
                    }
                    else if (col.DataType == typeof(string))
                    {
                        if ((oldRow[col.ColumnName] != DBNull.Value && Convert.ToString(oldRow[col.ColumnName]).Trim() != string.Empty &&
                              (newRow[col] == DBNull.Value || (newRow[col] != DBNull.Value && Convert.ToString(newRow[col]).Trim() == string.Empty))) ||
                            (oldRow[col.ColumnName] == DBNull.Value && newRow[col] != DBNull.Value && Convert.ToString(newRow[col.ColumnName]).Trim() != string.Empty) ||
                            (oldRow[col.ColumnName] != DBNull.Value && newRow[col] != DBNull.Value && newRow[col] != DBNull.Value && Convert.ToString(newRow[col.ColumnName]).Trim() != string.Empty && Convert.ToString(newRow[col.ColumnName]).Trim() != string.Empty &&
                            Convert.ToString(oldRow[col.ColumnName]) != Convert.ToString(newRow[col])))
                        {
                            return false;
                        }
                    }
                    else if (col.DataType == typeof(DateTime) && col.DataType == typeof(DateTime))
                    {
                        if ((oldRow[col.ColumnName] != DBNull.Value && Convert.ToString(oldRow[col.ColumnName]).Trim() != string.Empty && newRow[col] == DBNull.Value) ||
                            (oldRow[col.ColumnName] == DBNull.Value && newRow[col] != DBNull.Value && Convert.ToString(newRow[col.ColumnName]).Trim() != string.Empty) ||
                            (oldRow[col.ColumnName] != DBNull.Value && newRow[col] != DBNull.Value && Convert.ToString(newRow[col.ColumnName]).Trim() != string.Empty && Convert.ToString(newRow[col.ColumnName]).Trim() != string.Empty &&
                            Convert.ToDateTime(oldRow[col.ColumnName]) != Convert.ToDateTime(newRow[col])))
                        {
                            return false;
                        }
                    }
                }
            }
            return true;
        }

        private void OnCopayAndDeductible_Click(object sender, ExecutedRoutedEventArgs e)
        {
            GetCopayDeductible();
        }

        private void LoadErxData()
        {
            try
            {
                DataTable dtCriteria = new DataTable();
                dtCriteria.Columns.Add("MRNO", typeof(string));
                dtCriteria.Columns.Add("PAT_FIN_ENCOUNTER_ID", typeof(long));
                dtCriteria.Columns.Add("MODE", typeof(int));
                dtCriteria.Rows.Add(PatientInformation.Rows[0]["MRNO"], SelectedPatientFinEncounterID, 30);
                MainEMRShared objMainEMRShared = new MainEMRShared();
                ItemDetailsData = objMainEMRShared.FetchDtlsPHOrderwithCriteriaTable(dtCriteria);
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void LoadPbmData()
        {
            try
            {
                DataTable dtCriteria = new DataTable();
                dtCriteria.Columns.Add("MRNO", typeof(string));
                dtCriteria.Columns.Add("PAT_FIN_ENCOUNTER_ID", typeof(long));
                dtCriteria.Columns.Add("MODE", typeof(int));
                dtCriteria.Rows.Add(PatientInformation.Rows[0]["MRNO"], SelectedPatientFinEncounterID, 31);
                MainEMRShared objMainEMRShared = new MainEMRShared();
                DataTable dtItem = objMainEMRShared.FetchDtlsPHOrderwithCriteriaTable(dtCriteria);
                if (dtItem != null && dtItem.Rows.Count > 0)
                {
                    if (!dtItem.Columns.Contains("ITEM_REJECTION"))
                    {
                        dtItem.Columns.Add("ITEM_REJECTION", typeof(int));
                        dtItem.AsEnumerable().ForEach(r => r["ITEM_REJECTION"] = 0);
               
                        dtItem.AsEnumerable().Where(r => (Convert.ToInt32(r["REQUEST_STATUS"]) == (int)PBMStatus.Approved || Convert.ToInt32(r["REQUEST_STATUS"]) == (int)PBMStatus.Rejected ||
                            Convert.ToInt32(r["REQUEST_STATUS"]) == (int)PBMStatus.ApprovalWithRejection) && Convert.ToDecimal(r["APPROVED_QTY"]) == 0).ForEach(r => r["ITEM_REJECTION"] = 1);
                    }
                    if (dtItem.Columns.Contains("IS_ADDITIVE"))
                    {

                        string[] str = dtItem.AsEnumerable().Where(x => IfNullReturnZero(x["REF_DTLS_PH_ORDER_ID"]) > 0).Select(x => Convert.ToString(x["REF_DTLS_PH_ORDER_ID"])).Distinct().ToArray();
                        if (str.Any())
                        {
                            dtItem.AsEnumerable().Where(x => str.Contains(Convert.ToString(x["REF_DTLS_PH_ORDER_ID"])) || str.Contains(Convert.ToString(x["EMR_PAT_DTLS_PH_ORDER_ID"]))).ForEach(x => x["IS_ADDITIVE"] = 1);

                            dtItem.AsEnumerable().Where(r => IfNullReturnZero(r["REF_DTLS_PH_ORDER_ID"]) > 0).ForEach(r => r["IS_CHILD_ITEM"] = 1);
                            //for sorting the data 
                            if (dtItem.AsEnumerable().Where(x => IfNullReturnZero(x["IS_ADDITIVE"]) == 1).Count() > 0)
                            {
                                DataTable DtSort = new DataTable();
                                DtSort = dtItem.Copy();
                                DtSort.Columns.Add("SORTING_ORDER");
                                //string[] strID = DtSort.AsEnumerable().Where(x => IfNullReturnZero(x["REF_DTLS_PH_ORDER_ID"]) > 0).Select(x => Convert.ToString(x["REF_DTLS_PH_ORDER_ID"])).Distinct().ToArray();
                                int sort = 1;

                                foreach (string ID in str)
                                {
                                    var query = DtSort.AsEnumerable().Where(x => Convert.ToString(x["REF_DTLS_PH_ORDER_ID"]) == ID || Convert.ToString(x["EMR_PAT_DTLS_PH_ORDER_ID"]) == ID).Select(x => x).OrderBy(x => IfNullReturnZero(x["REF_DTLS_PH_ORDER_ID"]));
                                    if (query.Any())
                                    {
                                        foreach (DataRow drr in query)
                                        {
                                            drr["SORTING_ORDER"] = sort;
                                            sort++;
                                        }
                                    }
                                }
                                DtSort.AsEnumerable().Where(x => IfNullReturnZero(x["IS_ADDITIVE"]) == 0).ForEach(x => x["SORTING_ORDER"] = sort);
                                DtSort.DefaultView.Sort = "SORTING_ORDER";
                                DtSort.Columns.Remove("SORTING_ORDER");
                                dtItem.Rows.Clear();
                                dtItem.Merge(DtSort.DefaultView.ToTable());
                                int count = 1;
                                dtItem.AsEnumerable().ForEach(x => x["SL_NO"] = count++);

                            }
                        }
                        //dtItem.AsEnumerable().Where(r => IfNullReturnZero(r["REF_DTLS_PH_ORDER_ID"]) > 0).ForEach(r => r["IS_CHILD_ITEM"] = 1);
                        ////for sorting the data 
                        //if (dtItem.AsEnumerable().Where(x => IfNullReturnZero(x["IS_ADDITIVE"]) == 1).Count() > 0)
                        //{
                        //    DataTable DtSort = new DataTable();
                        //    DtSort = dtItem.Copy();
                        //    DtSort.Columns.Add("SORTING_ORDER");
                        //    string[] strID = DtSort.AsEnumerable().Where(x => IfNullReturnZero(x["REF_DTLS_PH_ORDER_ID"]) > 0).Select(x => Convert.ToString(x["REF_DTLS_PH_ORDER_ID"])).Distinct().ToArray();
                        //    int sort = 1;
                        //    if (strID.Any())
                        //    {
                        //        foreach (string ID in strID)
                        //        {
                        //            var query = DtSort.AsEnumerable().Where(x => Convert.ToString(x["REF_DTLS_PH_ORDER_ID"]) == ID || Convert.ToString(x["EMR_PAT_DTLS_PH_ORDER_ID"]) == ID).Select(x => x).OrderBy(x => IfNullReturnZero(x["REF_DTLS_PH_ORDER_ID"]));
                        //            if (query.Any())
                        //            {
                        //                foreach (DataRow drr in query)
                        //                {
                        //                    drr["SORTING_ORDER"] = sort;
                        //                    sort++;
                        //                }
                        //            }
                        //        }
                        //        DtSort.AsEnumerable().Where(x => IfNullReturnZero(x["IS_ADDITIVE"]) == 0).ForEach(x => x["SORTING_ORDER"] = sort);
                        //        DtSort.DefaultView.Sort = "SORTING_ORDER";
                        //        DtSort.Columns.Remove("SORTING_ORDER");
                        //        dtItem.Rows.Clear();
                        //        dtItem.Merge(DtSort.DefaultView.ToTable());
                        //        int count = 1;
                        //        dtItem.AsEnumerable().ForEach(x => x["SL_NO"] = count++);
                        //    }
                        //}
                    }
                }
                ItemDetailsData = dtItem.Copy();
                
                   
                //ItemDetailsData = objMainEMRShared.FetchDtlsPHOrderwithCriteriaTable(dtCriteria);
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool isFromFBBilling;
        public bool IsFromFBBilling
        {
            get
            {
                return isFromFBBilling;
            }
            set
            {
                isFromFBBilling = value;
                OnPropertyChanged("IsFromFBBilling");
                if (IsFromFBBilling)
                {
                    HasServicePrivilege = CommonData.CheckPrivilege("FINAL_BILLING_SERVICE_BILLING");
                    HasPharmacyPrivilege = CommonData.CheckPrivilege("FINAL_BILLING_PHARMACY_BILLING");
                    if (!HasServicePrivilege && !HasPharmacyPrivilege)
                    {
                        IsServiceOrdersVisible = false;
                    }
                    if (!HasServicePrivilege && HasPharmacyPrivilege)
                    {
                        tabPharmacyOrder.IsSelected = true;
                    }
                }
            }
        }

        #region Filter Medicines in Service Tab
        private void filterMedicineInServices()
        {
            try
            {
                DataTable dtMedicines = new DataTable();
                if (dsServiceData != null && dsServiceData.Tables["INV_MAST_SERVICE"].KIIsNotNullAndRowCount())
                {
                    Services = dsServiceData.Tables["INV_MAST_SERVICE"].Copy();
                    if (Services.Columns.Contains("PARENT_INV_CATEGORY_ID") && SelectedServiceType != (int)ServiceType.Cafeteria && CategorySelectedValue != -1) //Speed Improve
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(CategorySelectedValue)))
                        {
                            Services.DefaultView.RowFilter = "PARENT_INV_CATEGORY_ID=-1 OR PARENT_INV_CATEGORY_ID=" + CategorySelectedValue;
                        }
                        else
                        {
                            Services.DefaultView.RowFilter = "PARENT_INV_CATEGORY_ID=-1";
                        }
                        Services = Services.DefaultView.ToTable();
                        if (SelectedPHSubLocationsValue != null && SelectedPHSubLocationsValue > 0 && CategorySelectedValue != 5)
                        {
                            IsBlockSelectedPHSubLocationsValueChange = true;
                            SelectedPHSubLocationsValue = 0;
                            IsBlockSelectedPHSubLocationsValueChange = false;
                        }
                        SelectedService = null;
                    } //Speed Improve
                }
                if ((SelectedPHSubLocationsValue != null && SelectedPHSubLocationsValue > 0 && ServiceMedicine.KIIsNotNullAndRowCount()) &&
                    (CategorySelectedValue == -1 || CategorySelectedValue == 5))
                {
                    FOData.FetchMedicines();
                    ServiceMedicine = FOData.Medicines.Copy();
                    SelectedLabOrSubLocationValue = SelectedPHSubLocationsValue;
                    var Query = ServiceMedicine.AsEnumerable()
                                   .Where(x => x["PH_SUBLOCATION_ID"] != DBNull.Value && Convert.ToInt32(x["PH_SUBLOCATION_ID"]) == SelectedPHSubLocationsValue)
                                   .Select(x => x);
                    if (Query.Any())
                    {
                        dtMedicines = Query.CopyToDataTable().Copy();
                        dtMedicines.Columns["INV_MAST_SERVICE_ID"].ColumnName = "PRIMARY_ID";
                        if (Services.KIIsNotNullAndRowCount())
                        {
                            Services.Merge(dtMedicines.Copy());
                        }
                        else
                        {
                            Services = dtMedicines.Copy();
                        }
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        #endregion

        private void FetchConsumptionData(long emrPatDtlsInvOrderId)
        {
            try
            {
                DataTable dtCriteria = new DataTable();
                dtCriteria.Columns.Add("EMR_PAT_DTLS_INV_ORDER_ID", typeof(long));
                dtCriteria.Rows.Add(Convert.ToInt64(emrPatDtlsInvOrderId));
                objEmrShared = new MainEMRShared();
                DataTable dtGetData = new DataTable();
                if (SelectedItemServiceType == 3)
                {
                    dtGetData = objEmrShared.FetchInvOrderDtls(dtCriteria, 30);
                }
                else if (SelectedItemServiceType == 4)
                {
                    dtGetData = objEmrShared.FetchInvOrderDtls(dtCriteria, 31);
                }
                if (dtGetData != null && dtGetData.Rows.Count > 0)
                {
                    #region In Consumable medice sublocation not mandatory
                    //if (SelectedPHSubLocationsValue != null)
                    //{
                    //   // ByRiyas1
                    //    var resCons = dtGetData.AsEnumerable().Where(x => IfNullReturnZero(x["PH_SUBLOCATION_ID"]) == SelectedPHSubLocationsValue);
                    //    if (resCons != null && resCons.Any())
                    //    {
                    //        dtGetData = resCons.CopyToDataTable();
                    //        dtGetData.TableName = "Detail";
                    //    }
                    //}
                    #endregion
                    if (SelectedItemServiceType == 3 && BillData.Tables["INV_PAT_BILLING"] != null &&
                        BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Count(c => IfNullReturnZero(c["EMR_PAT_DTLS_INV_ORDER_ID"]) == emrPatDtlsInvOrderId) == 0)
                    {
                        return;
                    }
                    DataRow EMRItemSelectedTemp = EMRItemSelected;
                    foreach (DataRow item in dtGetData.Rows)
                    {
                        isConsumptionBilling = true;
                        DataRow drFound = FindService(Convert.ToInt64(item["INV_MAST_SERVICE_ID"]));
                        bool isAssignFromService = true;
                        if (drFound == null && ServiceMedicine.KIIsNotNullAndRowCount())
                        {
                            DataTable dtTemp = new DataTable();
                            dtTemp = ServiceMedicine.Copy();                            
                            dtTemp.Columns.Add("SERVICE_CATEGORY");
                            drFound = dtTemp.Rows[0];
                            drFound["NAME"] = item["NAME"];
                            drFound["INV_MAST_SERVICE_ID"] = item["INV_MAST_SERVICE_ID"];
                            SelectedService = dtTemp.DefaultView[dtTemp.Rows.IndexOf(drFound)];
                            isAssignFromService = false;
                        }
                        if (drFound != null)
                        {
                            if (BillData.Tables["INV_PAT_BILLING"].KIIsNotNullAndRowCount() && Convert.ToInt16(item["CONSUMPTION_STATUS"]) == 1 &&
                                BillData.Tables["INV_PAT_BILLING"].Select("EMR_PAT_DTLS_INV_ORDER_ID=" + emrPatDtlsInvOrderId).Count() > 0)
                            {
                                drConsumptionINVRow = BillData.Tables["INV_PAT_BILLING"].Select("EMR_PAT_DTLS_INV_ORDER_ID=" + emrPatDtlsInvOrderId).First();
                                drConsumptionINVRow["IS_CONSUMPTION"] = 2;

                            }
                           
                            IsBarCodeSearchbyManual = false;
                            drConsumptionRow = item;
                            dsServiceData.Tables["INV_MAST_SERVICE"].DefaultView.RowFilter = string.Empty;
                            Services.DefaultView.RowFilter = string.Empty;
                            if (isAssignFromService)
                                SelectedService = Services.DefaultView[Services.Rows.IndexOf(drFound)];
                            isEmrOrder = true;
                            EMRItemSelected = EMRItemSelectedTemp;
                            this.AddPharmacy();
                            fromEMR = false;
                            isConsumptionBilling = false;
                            drConsumptionRow = null;
                            drConsumptionINVRow = null;
                        }
                        isConsumptionBilling = false;
                    }
                }
            }
            catch (Exception)
            {                
                throw;
            }
        }

        private void PharmacyLabelPrinting_Click(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                DataRowView drvInvPatBilling = (DataRowView)e.Parameter;
               
                DataTable dtPrint = new DataTable();
                DataSet dsPrint = new DataSet();
                DataTable dtFrequency = null;
                if (dsBillData.Tables.Contains("PH_PAT_DTLS_ORDER"))
                {
                    DataTable dtCriteriaCode = new DataTable();
                    dtCriteriaCode.Columns.Add("INV_MAST_SERVICE_ID");
                    dtCriteriaCode.Columns.Add("PH_SUBLOCATION_ID");
                    dtCriteriaCode.Columns.Add("BATCHNO");
                    dtCriteriaCode.Columns.Add("MODE");

                    if (drvInvPatBilling.Row["EMR_PAT_DTLS_MEDICATION_ID"] != DBNull.Value)
                    {
                        DataRow[] drselected = dsBillData.Tables["PH_PAT_DTLS_ORDER"].Select("EMR_PAT_DTLS_PH_ORDER_ID =" + Convert.ToInt64(drvInvPatBilling.Row["EMR_PAT_DTLS_MEDICATION_ID"]));
                        if (drselected.Count() > 0)
                        {
                            dtPrint = drselected.CopyToDataTable(); 
                        }
                        else
                        {
                            dtPrint = dsBillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID =" + Convert.ToInt64(drvInvPatBilling.Row["INV_MAST_SERVICE_ID"])).CopyToDataTable();
                        }
                    }
                    else
                    {
                        dtPrint = dsBillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID =" + Convert.ToInt64(drvInvPatBilling.Row["INV_MAST_SERVICE_ID"])).CopyToDataTable();
                    }
                    dtPrint.Columns.Add("EPISODE_STATUS");
                    dtPrint.Columns.Add("EXP_DATE");
                    dtPrint.Columns.Add("BATCHNO");
                    dtPrint.Columns.Add("PH_SUBLOCATION_ID");
                    dtPrint.Columns.Add("VISIT_NO");
                    dtPrint.Columns.Add("FREQUENCY_DESC");
                    dtPrint.Columns.Add("FREQUENCY_NAME");
                    dtPrint.Columns.Add("BARCODE");
                    AddColumn<long>(dtPrint, "PH_PAT_BILLING_ID");
                    foreach (DataRow item in dtPrint.Rows)
                    {
                        item["BATCHNO"] = drvInvPatBilling.Row["BATCHNO"];
                        item["EXP_DATE"] = drvInvPatBilling.Row["EXP_DATE"];
                        item["VISIT_NO"] = drvInvPatBilling.Row["VISIT_NO"];
                        item["FREQUENCY_NAME"] = drvInvPatBilling.Row["FREQUENCY"];
                        item["PH_SUBLOCATION_ID"] = drvInvPatBilling.Row["SUBLOCATION"];
                        item["PH_PAT_BILLING_ID"] = drvInvPatBilling.Row["PH_PAT_BILLING_ID"];
                        item["FREQUENCY_DESC"] = item["FREQ_VALUE"];
                        if (string.IsNullOrEmpty(Convert.ToString(item["ISINFUSION"])) == false && Convert.ToInt32(item["ISINFUSION"]) == 1)
                        {
                            item["QUANTITY"] = item["IV_QUANTITY"];
                            item["QUANTITY_UNIT"] = item["IV_QUANTITY_UNIT"];
                        }
                        item["EPISODE_STATUS"] = (int)EpisodeStatus.OP;
                        if (IsPatientIP())
                        {
                            item["EPISODE_STATUS"] = (int)EpisodeStatus.IP;
                        }
                        if (Generic.KIIsNotNullAndRowCount())
                        {
                            if (item["GENERIC_ID"].KIIsNotNullOrEmpty())
                            {
                                DataRow[] dr = Generic.Select("EMR_LOOKUP_ID =" + Convert.ToInt64(item["GENERIC_ID"]));
                                if (dr.KIIsNotNullOrEmpty() && dr.Length > 0)
                                {
                                    item["GENERIC_NAME"] = Convert.ToString(dr[0]["LOOKUP_VALUE"]);
                                }
                            }
                        }
                        if (item.Table.Columns.Contains("IS_GENERIC_AGAINST") && item["IS_GENERIC_AGAINST"].KIIsNotNullOrEmpty())
                        {
                            if ((Convert.ToInt16(item["IS_GENERIC_AGAINST"]) != 1) || (Convert.ToString(item["MEDICINE_NAME"]).Contains("[" + Convert.ToString(item["GENERIC_NAME"]) + "]") == false))
                            {
                                if (item["GENERIC_NAME"].KIIsNotNullOrEmpty())
                                {
                                    item["MEDICINE_NAME"] = Convert.ToString(item["MEDICINE_NAME"]) + "[" + Convert.ToString(item["GENERIC_NAME"]) + "]";
                                }
                            }
                        }
                        else
                        {
                            if (item["GENERIC_NAME"].KIIsNotNullOrEmpty())
                            {
                                if (Convert.ToString(item["MEDICINE_NAME"]).Contains("[" + Convert.ToString(item["GENERIC_NAME"]) + "]") == false)
                                {
                                    item["MEDICINE_NAME"] = Convert.ToString(item["MEDICINE_NAME"]) + "[" + Convert.ToString(item["GENERIC_NAME"]) + "]";
                                }
                            }
                        }
                        dtCriteriaCode.Rows.Clear();
                        dtCriteriaCode.Rows.Add(item["BRAND_ID"].ToString(), item["PH_SUBLOCATION_ID"].ToString(), item["BATCHNO"].ToString(), 1);
                        DataTable dtBarcode = new Infologics.Medilogics.Billing.Main.MainBilling().FetchPhStock(dtCriteriaCode);
                        item["BARCODE"] = dtBarcode.Rows.Count > 0 ? dtBarcode.Rows[0]["BARCODE"] : string.Empty;
                    }
                    dtPrint.TableName = "PRINT_DATA";
                    dsPrint.Tables.Add(dtPrint);
                    CommonSharedUI.Printing.CommonFunction objCommonFunction = new CommonSharedUI.Printing.CommonFunction();
                    objCommonFunction.PrintDirectPrescriptionLabel(dsPrint);
                }
            }
            catch (Exception)
            {

                throw;
            }
        
        }
        public string getPharmacyNoteFormat(DataRow dr)//vinu john
        {
            if (dr != null)
            {
                StringBuilder stringFormat = new StringBuilder();
                string first = "Take";
                stringFormat.Append(first + " ");
                //if (dr.Table.Columns.Contains("Quantity") &&!dr.IsNull("Quantity"))
                //{
                //    stringFormat.Append(Convert.ToString(dr["Quantity"] + " "));
                //}
                if (dr.Table.Columns.Contains("DOSE") && !dr.IsNull("DOSE"))
                {
                    stringFormat.Append(Convert.ToString((Convert.ToString(dr["DOSE"]).Trim().StartsWith(".") ? ("0" + Convert.ToString(dr["DOSE"]).Trim()) : Convert.ToString(dr["DOSE"]).Trim()) + " "));
                }
                if (dr.Table.Columns.Contains("DOSE_UNIT") && !dr.IsNull("DOSE_UNIT"))
                {
                    stringFormat.Append(Convert.ToString(dr["DOSE_UNIT"] + " "));
                }
                //string second = "through"; //commented bcoz requested by jerin...through is not required 
                //stringFormat.Append(second + " ");
                if (dr.Table.Columns.Contains("Route") && !dr.IsNull("Route"))
                {
                    stringFormat.Append(Convert.ToString(dr["Route"] + " "));
                }
                if (dr.Table.Columns.Contains("FREQ_VALUE") && !dr.IsNull("FREQ_VALUE"))
                {
                    stringFormat.Append(Convert.ToString(dr["FREQ_VALUE"] + " "));
                }
                string third = "for";
                stringFormat.Append(third + " ");
                //if (dr.Table.Columns.Contains("END_DATE") && !dr.IsNull("END_DATE"))
                //{
                //    if (dr.Table.Columns.Contains("START_DATE") && !dr.IsNull("START_DATE"))
                //    {
                //        stringFormat.Append(Convert.ToString((Convert.ToDateTime(dr["END_DATE"]) - Convert.ToDateTime(dr["START_DATE"])).TotalDays) + " ");
                //    }
                //}
                if (dr.Table.Columns.Contains("DURATION") && !dr.IsNull("DURATION"))
                {
                    stringFormat.Append(Convert.ToString(dr["DURATION"] + " "));
                }
                string fourth = "days";
                stringFormat.Append(fourth);
                return stringFormat.ToString();
            }
            else
            {
                return "";
            }
        }

        private void PharmacistRemarkorComment_Click(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                DataRowView dr = (DataRowView)e.Parameter;
                if (dr != null)
                {
                    Infologics.Medilogics.CommonSharedUI.Pharmacy.UIContainer.ucNotifyDoctorContainer objucNotifyDoctorContainer = new CommonSharedUI.Pharmacy.UIContainer.ucNotifyDoctorContainer(IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"]), 1);
                    CommonWindow objWin = new CommonWindow(WindowControlBoxStyle.OnlyWithClose);
                    objWin.Content = objucNotifyDoctorContainer;
                    objWin.ResizeMode = ResizeMode.NoResize;
                    objWin.SizeToContent = SizeToContent.WidthAndHeight;
                    objWin.Title = "Pharmacist Remarks/Comments";
                    objWin.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                    objWin.ShowDialog();
                }
            }
            catch (Exception)
            {                
                throw;
            }
        }
        #region OLD VERIFICATION CALCEL
        
       
        //private void VerificationCancel_Click(object sender, ExecutedRoutedEventArgs e)
        //{
        //    try
        //    {
        //        DataRowView dr = (DataRowView)e.Parameter;
        //        if (dr != null)
        //        {
        //            DataRow drPatOrder = null;
        //            var queryAd = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_DTLS_INV_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"]) ||
        //            IfNullReturnZero(x["REF_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"])).Select(x => x);
        //            foreach (DataRow drQuery in queryAd)
        //            {
        //                MainEMRShared objemr = new MainEMRShared();

        //                if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail") && EMROrderRelation.Tables["Detail"].KIIsNotNullAndRowCount() && EMROrderRelation.Tables["Detail"].Columns.Contains("REF_DTLS_PH_ORDER_ID"))
        //                {
        //                    decimal EmrOrderCount = EMROrderRelation.Tables["Detail"].AsEnumerable().Where(x => IfNullReturnZero(x["IS_ADDITIVE"]) == 1 && (IfNullReturnZero(x["EMR_PAT_DTLS_INV_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"]) || IfNullReturnZero(x["REF_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"])) ).Count();
        //                    decimal GridCount = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => Convert.ToInt16(IfNullReturnZero(x["IS_ADDITIVE"])) == 1 && (IfNullReturnZero(x["EMR_PAT_DTLS_INV_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"]) || IfNullReturnZero(x["REF_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"]))).Count();

        //                    if (GridCount > 0 && (GridCount < EmrOrderCount))
        //                    {
        //                        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
        //                             "Please select all additives to continue", MessageBoxButtonType.OK, MessageBoxImages.Information);
        //                        return;
        //                    }
        //                }


        //                // as per new requirement after nurse verification also, system should allow to cancel verification but before administration 15march2016

        //                //DataTable dtdtlsCriteria = new DataTable();
        //                //dtdtlsCriteria.Columns.Add("EMR_PAT_DTLS_PH_ORDER_ID", typeof(string));
        //                //dtdtlsCriteria.Columns.Add("MODE", typeof(Int16));
        //                //dtdtlsCriteria.Rows.Add(drQuery["EMR_PAT_DTLS_INV_ORDER_ID"], 38);
        //                //DataTable dtdtls = objemr.FetchDtlsPHOrderwithCriteriaTable(dtdtlsCriteria);
        //                //if (dtdtls.KIIsNotNullAndRowCount())
        //                //{
        //                //    if (IfNullReturnZero(dtdtls.Rows[0]["ISNURSE_VERIFIED"]) == 1)
        //                //    {
        //                //        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
        //                //       "Nurse verification is done. Cannot be cancelled.", MessageBoxButtonType.OK, MessageBoxImages.Information);
        //                //        return;
        //                //    }
        //                //}
        //                if (objemr.FetchDrugAdminByDtlsPhOrderIdWithMode(IfNullReturnZero(drQuery["EMR_PAT_DTLS_INV_ORDER_ID"]).ToString(), 1))
        //                {
        //                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
        //                       "This item has administered. Cannot be cancelled.", MessageBoxButtonType.OK, MessageBoxImages.Information);
        //                    return;
        //                }
        //            }
        //            if (giMessageBox.Show(CommonData.MESSAGEHEADER, "Do you want to cancel the verification?", MessageBoxButtonType.YesNo, MessageBoxImages.Question) == MessageBoxDialogueResult.Yes)
        //            {
        //                foreach (DataRow drQuery in queryAd)
        //                {
        //                    if (BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + drQuery["INV_MAST_SERVICE_ID"] + "AND SL_NO=" + drQuery["SL_NO"]).Count() > 0)
        //                    {

        //                        drPatOrder = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + drQuery["INV_MAST_SERVICE_ID"] + "AND SL_NO=" + drQuery["SL_NO"]).First();

        //                        MainBilling objBIlling = new MainBilling();
        //                        DataTable dtPhPatDtlsOrder = new DataTable();
        //                        dtPhPatDtlsOrder = drPatOrder.Table.Clone();
        //                        dtPhPatDtlsOrder.Rows.Add();
        //                        dtPhPatDtlsOrder.Rows[0].ItemArray = drPatOrder.ItemArray;
        //                        dtPhPatDtlsOrder.Columns.Add("MODE", typeof(int));
        //                        dtPhPatDtlsOrder.Columns.Add("DISPENSE_LOCATION", typeof(int));
        //                        dtPhPatDtlsOrder.Columns.Add("MACHINE", typeof(string));
        //                        dtPhPatDtlsOrder.Columns.Add("VERIFIED_USER_ID", typeof(string));
        //                        dtPhPatDtlsOrder.Rows[0]["MODE"] = 1;
        //                        dtPhPatDtlsOrder.Rows[0]["HOSPITAL_ID"] = CommonData.HospitalID;
        //                        dtPhPatDtlsOrder.Rows[0]["MACHINE"] = Environment.MachineName;
        //                        dtPhPatDtlsOrder.Rows[0]["VERIFIED_USER_ID"] = CommonData.LoggedInUser;
        //                        dtPhPatDtlsOrder.Rows[0]["ISLABEL"] = false;
        //                        //dtPhPatDtlsOrder.Columns["EMR_PAT_DTLS_INV_ORDER_ID"].ColumnName = "EMR_PAT_DTLS_PH_ORDER_ID";                        
        //                        //if (giMessageBox.Show(CommonData.MESSAGEHEADER, "Do you want to cancel the verification?", MessageBoxButtonType.YesNo, MessageBoxImages.Question) == MessageBoxDialogueResult.Yes)
        //                        //{
        //                        objBIlling.UpdatePH_RX_INFO(dtPhPatDtlsOrder);
        //                        drQuery["IS_VERIFIED"] = 0;
        //                        drQuery["ISVERIFICATION"] = false;
        //                        drQuery["ISSALE"] = false;
        //                        drQuery["VERIFICATION_SAVE_ENABLE"] = 1;
        //                        drQuery["ISLABEL"] = false;
        //                        decimal qty = 0;
        //                        decimal pricevalue = 0;
        //                        DataRow drEmr = GetEMRCPOEPrescription(drQuery);
        //                        if (drEmr != null)
        //                        {

        //                            DataTable dtCriteria = new DataTable();
        //                            dtCriteria.Columns.Add("INV_MAST_SERVICE_ID", typeof(Int64));
        //                            dtCriteria.Rows.Add(drQuery["INV_MAST_SERVICE_ID"]);
        //                            MainBillingShared objBillingShared = new MainBillingShared();
        //                            DataTable PharamacyUnitSalesTemp = objBillingShared.FetchPharmacyUnitSales(dtCriteria);
        //                            if (PharamacyUnitSalesTemp != null)
        //                            {
        //                                var query = PharamacyUnitSalesTemp.AsEnumerable().Where(x => x["ISROOT"] != DBNull.Value && Convert.ToInt16(x["ISROOT"]) == 1).Select(x => x);
        //                                if (query.Any())
        //                                {
        //                                    PharamacyUnitSalesTemp = query.CopyToDataTable();
        //                                }
        //                                drQuery["BASE_QTY"] = PharamacyUnitSalesTemp.Rows[0]["BASE_QTY"];
        //                                drQuery["PH_UNIT_SALES_CONVERSION_ID"] = PharamacyUnitSalesTemp.Rows[0]["PH_UNIT_SALES_CONVERSION_ID"];

        //                            }
        //                            qty = IfNullReturnZero(drQuery["BASE_QTY"]) * IfNullReturnZero(drEmr["QTY"]);
        //                            pricevalue = IfNullReturnZero(drQuery["BASE_CHARGE"]) * qty;
        //                            drQuery["SALES_ACTUAL_QTY"] = qty;
        //                            drQuery["SERVICE_UTILISATION"] = qty;
        //                            drQuery["QTY"] = qty;

        //                            drQuery["AMOUNT"] = pricevalue;
        //                            drQuery["NET_AMOUNT"] = pricevalue;
        //                            drQuery["TOTAL"] = pricevalue;
        //                            drQuery["CHARGE_FIXED"] = pricevalue;
        //                            drQuery["GROSS_AMOUNT"] = pricevalue;
        //                            drQuery["NET"] = pricevalue;
        //                        }
        //                        //foreach (DataRow drPh in BillData.Tables["PH_PAT_DTLS_ORDER"].Rows)
        //                        //{
        //                        //    if (Convert.ToInt64(drPh["BRAND_ID"]) == Convert.ToInt64(dr.Row["INV_MAST_SERVICE_ID"]))
        //                        //    {
        //                        drPatOrder["PH_PAT_DTLS_ORDER_ID"] = DBNull.Value;
        //                        drPatOrder["QUANTITY"] = qty;
        //                        drPatOrder["ISLABEL"] = false;
        //                        MainEMRShared objemr = new MainEMRShared();
        //                        DataTable dtdtlsCriteria = new DataTable();
        //                        dtdtlsCriteria.Columns.Add("EMR_PAT_DTLS_PH_ORDER_ID", typeof(string));
        //                        dtdtlsCriteria.Columns.Add("MODE", typeof(Int16));
        //                        dtdtlsCriteria.Rows.Add(drQuery["EMR_PAT_DTLS_INV_ORDER_ID"], 38);
        //                        DataTable dtdtls = objemr.FetchDtlsPHOrderwithCriteriaTable(dtdtlsCriteria);
        //                        if (dtdtls.KIIsNotNullAndRowCount() && dtdtls.Rows[0]["SUBSTITUTE_MEDICINE_ID"] != DBNull.Value) // bug id 36277
        //                        {
        //                            drPatOrder["SUBSTITUTE_MEDICINE_ID"] = dtdtls.Rows[0]["SUBSTITUTE_MEDICINE_ID"];
        //                        }
        //                        //    }
        //                        //}
        //                        //BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Remove(drPatOrder);
        //                        //BillData.Tables["INV_PAT_BILLING"].Rows.Remove(dr.Row);
        //                        //SerialNoCount();
        //                        //giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
        //                        //"Verification cancelled successfuly", MessageBoxButtonType.OK, MessageBoxImages.Success);
        //                        //}

        //                    }
        //                }
        //            }
        //        }
        //    }
        //    catch (Exception)
        //    {
        //        throw;
        //    }
        //}
        #endregion
        #region NEW VERIFICATION CANCEL
        private void VerificationCancel_Click(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                DataRowView dr = (DataRowView)e.Parameter;
                if (dr != null)
                {
                    DataRow drPatOrder = null;
                    var queryAd = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => IfNullReturnZero(x["EMR_PAT_DTLS_INV_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"]) ||
                    IfNullReturnZero(x["REF_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"])).Select(x => x);
                    foreach (DataRow drQuery in queryAd)
                    {
                        MainEMRShared objemr = new MainEMRShared();

                        if (EMROrderRelation != null && EMROrderRelation.Tables.Contains("Detail") && EMROrderRelation.Tables["Detail"].KIIsNotNullAndRowCount() && EMROrderRelation.Tables["Detail"].Columns.Contains("REF_DTLS_PH_ORDER_ID"))
                        {
                            decimal EmrOrderCount = EMROrderRelation.Tables["Detail"].AsEnumerable().Where(x => IfNullReturnZero(x["IS_ADDITIVE"]) == 1 && (IfNullReturnZero(x["EMR_PAT_DTLS_INV_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"]) || IfNullReturnZero(x["REF_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"])) ).Count();
                            decimal GridCount = BillData.Tables["INV_PAT_BILLING"].AsEnumerable().Where(x => Convert.ToInt16(IfNullReturnZero(x["IS_ADDITIVE"])) == 1 && (IfNullReturnZero(x["EMR_PAT_DTLS_INV_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"]) || IfNullReturnZero(x["REF_DTLS_PH_ORDER_ID"]) == IfNullReturnZero(dr["EMR_PAT_DTLS_INV_ORDER_ID"]))).Count();

                            if (GridCount > 0 && (GridCount < EmrOrderCount))
                            {
                                giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                     "Please select all additives to continue", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                return;
                            }
                            //blocking the verification cancellation after partial dispense of item
                            DataRow drItem = this.GetEMRCPOEPrescription(drQuery);
                            if (drItem !=null)
                            {
                                Int64 billedqty = 0;
                                billedqty = Convert.ToInt64(IfNullReturnZero(drItem["BILLED_QTY"])) - Convert.ToInt64(IfNullReturnZero(drItem["RETURN_QTY"]));
                                if (billedqty > 0)
                                {
                                    giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                                    "Order billed. Can not be cancelled.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                                    return;
                                }
                            }
                        }
                        // as per new requirement after nurse verification also, system should allow to cancel verification but before administration 15march2016
                        //DataTable dtdtlsCriteria = new DataTable();
                        //dtdtlsCriteria.Columns.Add("EMR_PAT_DTLS_PH_ORDER_ID", typeof(string));
                        //dtdtlsCriteria.Columns.Add("MODE", typeof(Int16));
                        //dtdtlsCriteria.Rows.Add(drQuery["EMR_PAT_DTLS_INV_ORDER_ID"], 38);
                        //DataTable dtdtls = objemr.FetchDtlsPHOrderwithCriteriaTable(dtdtlsCriteria);
                        //if (dtdtls.KIIsNotNullAndRowCount())
                        //{
                        //    if (IfNullReturnZero(dtdtls.Rows[0]["ISNURSE_VERIFIED"]) == 1)
                        //    {
                        //        giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                        //       "Nurse verification is done. Cannot be cancelled.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                        //        return;
                        //    }
                        //}
                        if (objemr.FetchDrugAdminByDtlsPhOrderIdWithMode(IfNullReturnZero(drQuery["EMR_PAT_DTLS_INV_ORDER_ID"]).ToString(), 1))
                        {
                            giMessageBox.Show(Infologics.Medilogics.CommonClient.Controls.StaticData.CommonData.MESSAGEHEADER,
                               "This item has administered. Cannot be cancelled.", MessageBoxButtonType.OK, MessageBoxImages.Information);
                            return;
                        }
                    }
                    if (giMessageBox.Show(CommonData.MESSAGEHEADER, "Do you want to cancel the verification?", MessageBoxButtonType.YesNo, MessageBoxImages.Question) == MessageBoxDialogueResult.Yes)
                    {
                        DataTable dtPatBilling = queryAd.CopyToDataTable();
                        foreach (DataRow drQuery in dtPatBilling.Rows)
                        {
                            if (BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + drQuery["INV_MAST_SERVICE_ID"] + "AND SL_NO=" + drQuery["SL_NO"]).Count() > 0)
                            {

                                drPatOrder = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + drQuery["INV_MAST_SERVICE_ID"] + "AND SL_NO=" + drQuery["SL_NO"]).First();

                                MainBilling objBIlling = new MainBilling();
                                DataTable dtPhPatDtlsOrder = new DataTable();
                                dtPhPatDtlsOrder = drPatOrder.Table.Clone();
                                dtPhPatDtlsOrder.Rows.Add();
                                dtPhPatDtlsOrder.Rows[0].ItemArray = drPatOrder.ItemArray;
                                dtPhPatDtlsOrder.Columns.Add("MODE", typeof(int));
                                dtPhPatDtlsOrder.Columns.Add("DISPENSE_LOCATION", typeof(int));
                                dtPhPatDtlsOrder.Columns.Add("MACHINE", typeof(string));
                                dtPhPatDtlsOrder.Columns.Add("VERIFIED_USER_ID", typeof(string));
                                dtPhPatDtlsOrder.Rows[0]["MODE"] = 1;
                                dtPhPatDtlsOrder.Rows[0]["HOSPITAL_ID"] = CommonData.HospitalID;
                                dtPhPatDtlsOrder.Rows[0]["MACHINE"] = Environment.MachineName;
                                dtPhPatDtlsOrder.Rows[0]["VERIFIED_USER_ID"] = CommonData.LoggedInUser;
                                dtPhPatDtlsOrder.Rows[0]["ISLABEL"] = false;
                                //updation function calling
                                objBIlling.UpdatePH_RX_INFO(dtPhPatDtlsOrder);

                                //this part is for removing the item from order and grid
                                _FindService = null;
                                if (drQuery["INV_MAST_SERVICE_ID"] != DBNull.Value)
                                {
                                    if (this.FindServiceAdded(Convert.ToInt64(drQuery["INV_MAST_SERVICE_ID"]), string.Empty, 0, Convert.ToInt64(IfNullReturnZero(drQuery["EMR_PAT_DTLS_INV_ORDER_ID"]))))
                                    {
                                        if (_FindService != null && _FindService["EMR_PAT_DTLS_INV_ORDER_ID"] != DBNull.Value)
                                        {
                                            BillData.Tables["PH_PAT_DTLS_ORDER"].Rows.Remove(drPatOrder);
                                            BillData.Tables["INV_PAT_BILLING"].Rows.Remove(_FindService);
                                            this.CalculateServiceTotal();
                                        }
                                    }
                                }
                            }
                        }
                        if (IsVerifiedChecked && SelectedVisitModeNew == (int)VisitMode.IP && EnableVerificationSettingBased)
                        {
                            SerialNoCount();
                            IsVerifiedChecked = true;
                        }
                        else if (IsVerifiedOmniChecked && SelectedVisitModeNew == (int)VisitMode.IP && EnableVerificationSettingBased)
                        {
                            SerialNoCount();
                            IsVerifiedOmniChecked = true;
                        }
                        else if (IsPendingOrderChecked && SelectedVisitModeNew == (int)VisitMode.IP && EnableVerificationSettingBased)
                        {
                            SerialNoCount();
                            IsPendingOrderChecked = true;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                if (ex.Message != null && ex.Message.Contains("-20103"))
                {
                    throw new MedilogicsException((ex.Message.Substring(ex.Message.IndexOf('$') + 1)).Substring(0, (ex.Message.Substring(ex.Message.IndexOf('$') + 1)).IndexOf('?')));
                }
                else
                {
                    throw;
                }
            }
        }
        #endregion
        private void Executed_ChangeSublocation(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                  DataRowView dr = (DataRowView)e.Parameter;
                  if (dr != null)
                  {
                      dr["SUBLOCATION"] = IP_Gen_App_Sub_Location;
                      dr["IS_SUB_OVERRIDE"] = 1;
                      dr["IS_OMNICELL_ITEM"] = 0;
                      if (BillData.Tables["PH_PAT_DTLS_ORDER"].KIIsNotNullAndRowCount() &&
                          BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + dr["INV_MAST_SERVICE_ID"] + "AND SL_NO=" + dr["SL_NO"]).Count() > 0)
                      {
                          DataRow[] drRow = BillData.Tables["PH_PAT_DTLS_ORDER"].Select("BRAND_ID=" + dr["INV_MAST_SERVICE_ID"] + "AND SL_NO=" + dr["SL_NO"]);
                          foreach (DataRow drdose in drRow)
                          {
                              drdose["IS_HL7_ORDER"] = 0;
                              drdose["AUTHORIZATION_STATUS"] = 0;//bug id 42605

                          }
                      }
                      //if (LabOrSubLocations.KIIsNotNullOrEmpty())
                      //{
                      //    DataRow[] drLocation = LabOrSubLocations.ToTable().AsEnumerable().Where(x => IfNullReturnZero(x["INCO_MAST_ID"]) == IfNullReturnZero(IP_Gen_App_Sub_Location))
                      //   .Select(x => x).ToArray();
                      //    if (drLocation.Any() && IfNullReturnZero(drLocation[0]["IS_MACHINE"]) == 1 && EnableVerificationSettingBased)
                      //    {
                      //        if (FOData.Medicines.KIIsNotNullAndRowCount())
                      //        {
                      //            decimal service_Id = 0;
                      //            if (dr.Row.Table.Columns.Contains("PRIMARY_ID"))
                      //            {
                      //                service_Id = IfNullReturnZero(dr.Row["PRIMARY_ID"]);
                      //            }
                      //            else
                      //            {
                      //                service_Id = IfNullReturnZero(dr.Row["INV_MAST_SERVICE_ID"]);
                      //            }
                      //            var filterMachine = FOData.Medicines.AsEnumerable().Where(x => IfNullReturnZero(x["INV_MAST_SERVICE_ID"])
                      //                         == service_Id
                      //                         ).Select(x => x).ToArray();
                      //            if (filterMachine.Any())
                      //            {
                      //                dr["IS_OMNICELL_ITEM"] = filterMachine[0]["EXTERNAL_SERVICE_CODE"] == DBNull.Value ? 0 : 1;
                      //            }
                      //        }
                      //    }
                      //    else
                      //    {
                      //        dr["IS_OMNICELL_ITEM"] = 0;
                      //    }
                      //}
                      if (EnableVerificationSettingBased && checkStock(IfNullReturnZero(dr["INV_MAST_SERVICE_ID"]), IfNullReturnZero(dr["SUBLOCATION"])))
                      {
                          dr["IS_STOCK_EXIST"] = DBNull.Value;
                      }
                      else if (EnableVerificationSettingBased && !checkStock(IfNullReturnZero(dr["INV_MAST_SERVICE_ID"]), IfNullReturnZero(dr["SUBLOCATION"])))
                      {
                          dr["IS_STOCK_EXIST"] = 1;
                      }
                      //if (Convert.ToInt16(IfNullReturnZero(dr["IS_ADDITIVE"])) == 1) //commented for bug id 42605
                      //{
                          dr["ISVERIFICATION"] = false;
                      //}
                  }
            }
            catch (Exception)
            {                
                throw;
            }
        }

        private bool checkStock(decimal serviceId, decimal sublocation)
        {
            try
            {
                if (FOData.Medicines.KIIsNotNullAndRowCount())
                {
                    var Query = FOData.Medicines.AsEnumerable()
                      .Where(x => x["PH_SUBLOCATION_ID"] != DBNull.Value && Convert.ToInt32(x["PH_SUBLOCATION_ID"]) == sublocation && IfNullReturnZero(x["INV_MAST_SERVICE_ID"]) == serviceId)
                      .Select(x => x);
                    if (Query.Count() > 0)
                    {
                        return true;
                    }
                }
                return false;
            }
            catch (Exception)
            {                
                throw;
            }
        }

        private static void AddColumn<T>(DataTable table, string column)
        {
            try
            {
                if (!table.Columns.Contains(column))
                {
                    table.Columns.Add(column, typeof(T));
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void Executed_btnAddTopUpClick(object sender, ExecutedRoutedEventArgs e)
        {
            try
            {
                MasterSettings.Main.MainMasterSettings objMainMasterSettings = new MasterSettings.Main.MainMasterSettings();
                DataTable dtCriteria = new DataTable();
                dtCriteria.Columns.Add("MODE");
                dtCriteria.Rows.Add(24);
                DataTable dtAllPayer = new DataTable();
                dtAllPayer = objMainMasterSettings.FetchInsuranceCorporate(dtCriteria, 1, 1).Tables["INCO_MAST"];//fetching all top up payers

                CommonShared.FOMain.MainFOShared objMainFOShared = new CommonShared.FOMain.MainFOShared();
                DataTable dtCrt = new DataTable();
                dtCrt.Columns.Add("MODE");
                dtCrt.Columns.Add("MRNO");
                dtCrt.Columns.Add("PAT_FIN_ENCOUNTER_ID");
                dtCrt.Rows.Add(14, PatientInformation.Rows[0]["MRNO"], SelectedPatientFinEncounterID);
                DataTable dtPatScheme = new DataTable();
                dtPatScheme = objMainFOShared.FetchIncoPatSchemes(dtCrt);//fetching attached schemes with patient

                MainBillingShared objMainBillingShared = new MainBillingShared();
                DataTable dtTopUpDtls = new DataTable();
                dtCrt.Rows[0]["MODE"] = 0;
                dtTopUpDtls = objMainBillingShared.FetchIncoDtlsPatTopUp(dtCrt);
                if (dtTopUpDtls.KIIsNotNullAndRowCount() && dtAllPayer.KIIsNotNullAndRowCount() && dtPatScheme.KIIsNotNullAndRowCount())
                {
                    int count = 1;
                    foreach (DataRow dr in dtTopUpDtls.Rows)
                    {
                        dr["SL_NO"] = count;
                        count++;
                        DataRow drRow = null;
                        var vdrRow = dtAllPayer.Select("INCO_MAST_ID=" + IfNullReturnZero(dr["TOPUP_PAYER_ID"]));
                        if (vdrRow.Any())
                        {
                            drRow = vdrRow.ElementAt(0);
                            if (drRow != null)
                            {
                                dr["TOPUP_PAYER_NAME"] = Convert.ToString(drRow["NAME"]);
                            }
                        }
                        DataRow drRow2 = null;
                        var vdrRow2 = dtPatScheme.Select("INCO_MAST_SCHEME_ID=" + IfNullReturnZero(dr["INCO_MAST_SCHEME_ID"]));
                        if (vdrRow2.Any())
                        {
                            drRow2 = vdrRow2.ElementAt(0);
                            if (drRow2 != null)
                            {
                                dr["SERVICE_PAYER_NAME"] = Convert.ToString(drRow2["NAME"]);
                            }
                        }
                    }
                }
                // top_up loading part
                UcAddTopUpCard objUcAddTopUpCard = new UcAddTopUpCard();
                CommonWindow win = new CommonWindow(WindowControlBoxStyle.OnlyWithClose);
                win.Title = "Add Top Up Card";
                win.SizeToContent = SizeToContent.Manual;
                win.Height = 360;
                win.Width = 700;
                win.ResizeMode = ResizeMode.NoResize;
                win.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                win.Content = objUcAddTopUpCard;
                if (dtAllPayer.KIIsNotNullAndRowCount())
                {
                    objUcAddTopUpCard.DtAllPayer = dtAllPayer;
                    var query = dtAllPayer.AsEnumerable().Where(x => IfNullReturnZero(x["ISVALID"]) == 1).Select(x=>x);
                    if (query.Any())
                    {
                        objUcAddTopUpCard.DtPayer = query.CopyToDataTable();
                    }
                }
                //if (dtPayer.KIIsNotNullAndRowCount())
                //{
                //    objUcAddTopUpCard.DtPayer = dtPayer;
                //}
                if (dtPatScheme.KIIsNotNullAndRowCount())
                {
                    objUcAddTopUpCard.DtPatScheme = dtPatScheme;
                }
                objUcAddTopUpCard.MRNO = PatientInformation.KIIsNotNullAndRowCount() ? PatientInformation.Rows[0]["MRNO"].ToString() : string.Empty;
                objUcAddTopUpCard.PatFinEncounterID = Convert.ToInt64(IfNullReturnZero(SelectedPatientFinEncounterID));
                if (dtTopUpDtls.KIIsNotNullAndRowCount())
                {
                    objUcAddTopUpCard.TopUpDtls = dtTopUpDtls;
                }
                win.ShowDialog();
                IS_TOPUP_VISIBILE = IS_TOPUP_VISIBILE;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void SetDiscontinuedMedicationStatus(DataRow dr)
        {
            DataTable dtStopStatus = new DataTable();
            DataTable dtCriteria = new DataTable("CRITERIA");
            dtCriteria.Columns.Add("EMR_PAT_DTLS_PH_ORDER_ID", typeof(Int64));
            dtCriteria.Columns.Add("MODE", typeof(Int16));
            DataRow drCriteria = dtCriteria.NewRow();
            if (dr != null)
            {
                drCriteria["EMR_PAT_DTLS_PH_ORDER_ID"] = dr["EMR_PAT_DTLS_INV_ORDER_ID"];
            }
            drCriteria["MODE"] = 4;
            dtCriteria.Rows.Add(drCriteria);
            Infologics.Medilogics.CommonShared.EMRMain.MainEMRShared objMainEMRShared = new MainEMRShared();
            dtStopStatus = objMainEMRShared.FetchStoppedMedDtls(dtCriteria);
            try
            {
                if (dtStopStatus != null && dtStopStatus.Rows.Count > 0 && Convert.ToInt32(dtStopStatus.Rows[0]["STOP_STATUS"]) == 0 && dr["STOP_STATUS"] == DBNull.Value)
                {
                    if (BillData.Tables["INV_PAT_BILLING_TEMP"].Columns.Contains("DISCONTINUED_STATUS"))
                    {
                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["DISCONTINUED_STATUS"] = -1;
                    }
                }
                else if (dtStopStatus != null && dtStopStatus.Rows.Count > 0)
                {
                    if (BillData.Tables["INV_PAT_BILLING_TEMP"].Columns.Contains("DISCONTINUED_STATUS"))
                    {
                        BillData.Tables["INV_PAT_BILLING_TEMP"].Rows[0]["DISCONTINUED_STATUS"] = dtStopStatus.Rows[0]["STOP_STATUS"];
                    }

                }

            }
            catch (Exception)
            {
                throw;
            }
        }
        private void Executed_VerifiedMedication(object sender, ExecutedRoutedEventArgs e)
        {
            CommonWindow objwin = new CommonWindow(WindowControlBoxStyle.Default);
            ucVerifiedPharmacyDetails objBillDetails = new ucVerifiedPharmacyDetails();
            objBillDetails.Mrno = Convert.ToString(PatientInformation.Rows[0]["MRNO"]);
            objBillDetails.EncounterId = SelectedPatientFinEncounterID;
           // if (objBillDetails.IsPharmacyBillExists)
            //{
                objwin.Content = objBillDetails;
                objwin.Title = "Verified Medication details of " + PatientInformation.Rows[0]["MRNO"];
                objwin.SizeToContent = SizeToContent.Manual;
                objwin.ResizeMode = ResizeMode.CanMinimize;
                objwin.Owner = Window.GetWindow(this);
                objwin.WindowStartupLocation = WindowStartupLocation.CenterScreen;
                objwin.ShowInTaskbar = true;
                objwin.Show();
           // }
        }
    }
}